

/*
IGKDEV @ 2008-2016
Project : IGK 
author: C.A.D . BONDJE DOUE
site: http://www.igkdev.be
file: glew.4.0.cs
THIS FILE IS A PART OF IGK Library FOR DRSSTUDION APPLICATION.
Read license.text
THIS SOFTWARE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR
IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE.
*/
/*
IGKDEV @ 2008-2016
author: C.A.D . BONDJE DOUE
file:glew.4.0.cs
*/
/* 
-------------------------------------------------------------------
Company: IGK-DEV
Author : C.A.D. BONDJE DOUE
SITE : http://www.igkdev.be
Application : DrSStudio
powered by IGK - DEV &copy; 2008-2011
THIS FILE IS A PART OF THE DRSSTUDIO APPLICATION. SEE "License.txt"
FOR MORE INFORMATION ABOUT THE LICENSE
------------------------------------------------------------------- 
*/
using System;
using System.Runtime.InteropServices;
namespace IGK.GLLib
{
public partial class GL {
#pragma warning disable 
/*** The OpenGL Extension Wrangler Library
** Copyright (C) 2002-2008, Milan Ikits <milan ikits[]ieee org>
** Copyright (C) 2002-2008, Marcelo E. Magallon <mmagallo[]debian org>
** Copyright (C) 2002, Lev Povalahev
** All rights reserved.
** 
** Redistribution and use in source and binary forms, with or without 
** modification, are permitted provided that the following conditions are met:
** 
** * Redistributions of source code must retain the above copyright notice, 
**   this list of conditions and the following disclaimer.
** * Redistributions in binary form must reproduce the above copyright notice, 
**   this list of conditions and the following disclaimer in the documentation 
**   and/or other materials provided with the distribution.
** * The name of the author may be used to endorse or promote products 
**   derived from this software without specific prior written permission.
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
** AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
** IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
** ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE 
** LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
** CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
** SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
** INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
** CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
** ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
** THE POSSIBILITY OF SUCH DAMAGE.
*/
/* * Mesa 3-D graphics library
 * Version:  7.0
 *
 * Copyright (C) 1999-2007  Brian Paul   All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * BRIAN PAUL BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
/*** Copyright (c) 2007 The Khronos Group Inc.
** 
** Permission is hereby granted, free of charge, to any person obtaining a
** copy of this software and/or associated documentation files (the
** "Materials"), to deal in the Materials without restriction, including
** without limitation the rights to use, copy, modify, merge, publish,
** distribute, sublicense, and/or sell copies of the Materials, and to
** permit persons to whom the Materials are furnished to do so, subject to
** the following conditions:
** 
** The above copyright notice and this permission notice shall be included
** in all copies or substantial portions of the Materials.
** 
** THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
** EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
** MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
** IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
** CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
** TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
** MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.
*/
/* * GLEW does not include <windows.h> to avoid name space pollution.
 * GL needs GLAPI and GLAPIENTRY, GLU needs APIENTRY, CALLBACK, and wchar_t
 * defined properly.
 */
/* <windef.h> */
/* <winnt.h> */
/* <wingdi.h> and <winnt.h> */
/* <ctype.h> */
/* <stddef.h> */
/* * GLEW_STATIC is defined for static library.
 * GLEW_BUILD  is defined for building the DLL library.
 */
/* * Needed for ptrdiff_t in turn needed by VBO.  This is defined by ISO
 * C.  On my system, this amounts to _3 lines_ of included code, all of
 * them pretty much harmless.  If you know of a way of detecting 32 vs
 * 64 _targets_ at compile time you are free to replace this with
 * something that's portable.  For now, _this_ is the portable solution.
 * (mem, 2004-01-04)
 */
/* SGI MIPSPro doesn't like stdint.h in C++ mode */
/* * GLEW_STATIC is defined for static library.
 */
/* <glu.h> */
/* ----------------------------- GL_VERSION_1_1 ---------------------------- */
public const uint GL_VERSION_1_1 = 1;
public const uint GL_ZERO = 0;
public const uint GL_FALSE = 0;
public const uint GL_LOGIC_OP = 0x0BF1;
public const uint GL_NONE = 0;
public const uint GL_TEXTURE_COMPONENTS = 0x1003;
public const uint GL_NO_ERROR = 0;
public const uint GL_POINTS = 0x0000;
public const uint GL_CURRENT_BIT = 0x00000001;
public const uint GL_TRUE = 1;
public const uint GL_ONE = 1;
public const uint GL_CLIENT_PIXEL_STORE_BIT = 0x00000001;
public const uint GL_LINES = 0x0001;
public const uint GL_LINE_LOOP = 0x0002;
public const uint GL_POINT_BIT = 0x00000002;
public const uint GL_CLIENT_VERTEX_ARRAY_BIT = 0x00000002;
public const uint GL_LINE_STRIP = 0x0003;
public const uint GL_LINE_BIT = 0x00000004;
public const uint GL_TRIANGLES = 0x0004;
public const uint GL_TRIANGLE_STRIP = 0x0005;
public const uint GL_TRIANGLE_FAN = 0x0006;
public const uint GL_QUADS = 0x0007;
public const uint GL_QUAD_STRIP = 0x0008;
public const uint GL_POLYGON_BIT = 0x00000008;
public const uint GL_POLYGON = 0x0009;
public const uint GL_POLYGON_STIPPLE_BIT = 0x00000010;
public const uint GL_PIXEL_MODE_BIT = 0x00000020;
public const uint GL_LIGHTING_BIT = 0x00000040;
public const uint GL_FOG_BIT = 0x00000080;
public const uint GL_DEPTH_BUFFER_BIT = 0x00000100;
public const uint GL_ACCUM = 0x0100;
public const uint GL_LOAD = 0x0101;
public const uint GL_RETURN = 0x0102;
public const uint GL_MULT = 0x0103;
public const uint GL_ADD = 0x0104;
public const uint GL_NEVER = 0x0200;
public const uint GL_ACCUM_BUFFER_BIT = 0x00000200;
public const uint GL_LESS = 0x0201;
public const uint GL_EQUAL = 0x0202;
public const uint GL_LEQUAL = 0x0203;
public const uint GL_GREATER = 0x0204;
public const uint GL_NOTEQUAL = 0x0205;
public const uint GL_GEQUAL = 0x0206;
public const uint GL_ALWAYS = 0x0207;
public const uint GL_SRC_COLOR = 0x0300;
public const uint GL_ONE_MINUS_SRC_COLOR = 0x0301;
public const uint GL_SRC_ALPHA = 0x0302;
public const uint GL_ONE_MINUS_SRC_ALPHA = 0x0303;
public const uint GL_DST_ALPHA = 0x0304;
public const uint GL_ONE_MINUS_DST_ALPHA = 0x0305;
public const uint GL_DST_COLOR = 0x0306;
public const uint GL_ONE_MINUS_DST_COLOR = 0x0307;
public const uint GL_SRC_ALPHA_SATURATE = 0x0308;
public const uint GL_STENCIL_BUFFER_BIT = 0x00000400;
public const uint GL_FRONT_LEFT = 0x0400;
public const uint GL_FRONT_RIGHT = 0x0401;
public const uint GL_BACK_LEFT = 0x0402;
public const uint GL_BACK_RIGHT = 0x0403;
public const uint GL_FRONT = 0x0404;
public const uint GL_BACK = 0x0405;
public const uint GL_LEFT = 0x0406;
public const uint GL_RIGHT = 0x0407;
public const uint GL_FRONT_AND_BACK = 0x0408;
public const uint GL_AUX0 = 0x0409;
public const uint GL_AUX1 = 0x040A;
public const uint GL_AUX2 = 0x040B;
public const uint GL_AUX3 = 0x040C;
public const uint GL_INVALID_ENUM = 0x0500;
public const uint GL_INVALID_VALUE = 0x0501;
public const uint GL_INVALID_OPERATION = 0x0502;
public const uint GL_STACK_OVERFLOW = 0x0503;
public const uint GL_STACK_UNDERFLOW = 0x0504;
public const uint GL_OUT_OF_MEMORY = 0x0505;
public const uint GL_2D = 0x0600;
public const uint GL_3D = 0x0601;
public const uint GL_3D_COLOR = 0x0602;
public const uint GL_3D_COLOR_TEXTURE = 0x0603;
public const uint GL_4D_COLOR_TEXTURE = 0x0604;
public const uint GL_PASS_THROUGH_TOKEN = 0x0700;
public const uint GL_POINT_TOKEN = 0x0701;
public const uint GL_LINE_TOKEN = 0x0702;
public const uint GL_POLYGON_TOKEN = 0x0703;
public const uint GL_BITMAP_TOKEN = 0x0704;
public const uint GL_DRAW_PIXEL_TOKEN = 0x0705;
public const uint GL_COPY_PIXEL_TOKEN = 0x0706;
public const uint GL_LINE_RESET_TOKEN = 0x0707;
public const uint GL_EXP = 0x0800;
public const uint GL_VIEWPORT_BIT = 0x00000800;
public const uint GL_EXP2 = 0x0801;
public const uint GL_CW = 0x0900;
public const uint GL_CCW = 0x0901;
public const uint GL_COEFF = 0x0A00;
public const uint GL_ORDER = 0x0A01;
public const uint GL_DOMAIN = 0x0A02;
public const uint GL_CURRENT_COLOR = 0x0B00;
public const uint GL_CURRENT_INDEX = 0x0B01;
public const uint GL_CURRENT_NORMAL = 0x0B02;
public const uint GL_CURRENT_TEXTURE_COORDS = 0x0B03;
public const uint GL_CURRENT_RASTER_COLOR = 0x0B04;
public const uint GL_CURRENT_RASTER_INDEX = 0x0B05;
public const uint GL_CURRENT_RASTER_TEXTURE_COORDS = 0x0B06;
public const uint GL_CURRENT_RASTER_POSITION = 0x0B07;
public const uint GL_CURRENT_RASTER_POSITION_VALID = 0x0B08;
public const uint GL_CURRENT_RASTER_DISTANCE = 0x0B09;
public const uint GL_POINT_SMOOTH = 0x0B10;
public const uint GL_POINT_SIZE = 0x0B11;
public const uint GL_POINT_SIZE_RANGE = 0x0B12;
public const uint GL_POINT_SIZE_GRANULARITY = 0x0B13;
public const uint GL_LINE_SMOOTH = 0x0B20;
public const uint GL_LINE_WIDTH = 0x0B21;
public const uint GL_LINE_WIDTH_RANGE = 0x0B22;
public const uint GL_LINE_WIDTH_GRANULARITY = 0x0B23;
public const uint GL_LINE_STIPPLE = 0x0B24;
public const uint GL_LINE_STIPPLE_PATTERN = 0x0B25;
public const uint GL_LINE_STIPPLE_REPEAT = 0x0B26;
public const uint GL_LIST_MODE = 0x0B30;
public const uint GL_MAX_LIST_NESTING = 0x0B31;
public const uint GL_LIST_BASE = 0x0B32;
public const uint GL_LIST_INDEX = 0x0B33;
public const uint GL_POLYGON_MODE = 0x0B40;
public const uint GL_POLYGON_SMOOTH = 0x0B41;
public const uint GL_POLYGON_STIPPLE = 0x0B42;
public const uint GL_EDGE_FLAG = 0x0B43;
public const uint GL_CULL_FACE = 0x0B44;
public const uint GL_CULL_FACE_MODE = 0x0B45;
public const uint GL_FRONT_FACE = 0x0B46;
public const uint GL_LIGHTING = 0x0B50;
public const uint GL_LIGHT_MODEL_LOCAL_VIEWER = 0x0B51;
public const uint GL_LIGHT_MODEL_TWO_SIDE = 0x0B52;
public const uint GL_LIGHT_MODEL_AMBIENT = 0x0B53;
public const uint GL_SHADE_MODEL = 0x0B54;
public const uint GL_COLOR_MATERIAL_FACE = 0x0B55;
public const uint GL_COLOR_MATERIAL_PARAMETER = 0x0B56;
public const uint GL_COLOR_MATERIAL = 0x0B57;
public const uint GL_FOG = 0x0B60;
public const uint GL_FOG_INDEX = 0x0B61;
public const uint GL_FOG_DENSITY = 0x0B62;
public const uint GL_FOG_START = 0x0B63;
public const uint GL_FOG_END = 0x0B64;
public const uint GL_FOG_MODE = 0x0B65;
public const uint GL_FOG_COLOR = 0x0B66;
public const uint GL_DEPTH_RANGE = 0x0B70;
public const uint GL_DEPTH_TEST = 0x0B71;
public const uint GL_DEPTH_WRITEMASK = 0x0B72;
public const uint GL_DEPTH_CLEAR_VALUE = 0x0B73;
public const uint GL_DEPTH_FUNC = 0x0B74;
public const uint GL_ACCUM_CLEAR_VALUE = 0x0B80;
public const uint GL_STENCIL_TEST = 0x0B90;
public const uint GL_STENCIL_CLEAR_VALUE = 0x0B91;
public const uint GL_STENCIL_FUNC = 0x0B92;
public const uint GL_STENCIL_VALUE_MASK = 0x0B93;
public const uint GL_STENCIL_FAIL = 0x0B94;
public const uint GL_STENCIL_PASS_DEPTH_FAIL = 0x0B95;
public const uint GL_STENCIL_PASS_DEPTH_PASS = 0x0B96;
public const uint GL_STENCIL_REF = 0x0B97;
public const uint GL_STENCIL_WRITEMASK = 0x0B98;
public const uint GL_MATRIX_MODE = 0x0BA0;
public const uint GL_NORMALIZE = 0x0BA1;
public const uint GL_VIEWPORT = 0x0BA2;
public const uint GL_MODELVIEW_STACK_DEPTH = 0x0BA3;
public const uint GL_PROJECTION_STACK_DEPTH = 0x0BA4;
public const uint GL_TEXTURE_STACK_DEPTH = 0x0BA5;
public const uint GL_MODELVIEW_MATRIX = 0x0BA6;
public const uint GL_PROJECTION_MATRIX = 0x0BA7;
public const uint GL_TEXTURE_MATRIX = 0x0BA8;
public const uint GL_ATTRIB_STACK_DEPTH = 0x0BB0;
public const uint GL_CLIENT_ATTRIB_STACK_DEPTH = 0x0BB1;
public const uint GL_ALPHA_TEST = 0x0BC0;
public const uint GL_ALPHA_TEST_FUNC = 0x0BC1;
public const uint GL_ALPHA_TEST_REF = 0x0BC2;
public const uint GL_DITHER = 0x0BD0;
public const uint GL_BLEND_DST = 0x0BE0;
public const uint GL_BLEND_SRC = 0x0BE1;
public const uint GL_BLEND = 0x0BE2;
public const uint GL_LOGIC_OP_MODE = 0x0BF0;
public const uint GL_INDEX_LOGIC_OP = 0x0BF1;
public const uint GL_COLOR_LOGIC_OP = 0x0BF2;
public const uint GL_AUX_BUFFERS = 0x0C00;
public const uint GL_DRAW_BUFFER = 0x0C01;
public const uint GL_READ_BUFFER = 0x0C02;
public const uint GL_SCISSOR_BOX = 0x0C10;
public const uint GL_SCISSOR_TEST = 0x0C11;
public const uint GL_INDEX_CLEAR_VALUE = 0x0C20;
public const uint GL_INDEX_WRITEMASK = 0x0C21;
public const uint GL_COLOR_CLEAR_VALUE = 0x0C22;
public const uint GL_COLOR_WRITEMASK = 0x0C23;
public const uint GL_INDEX_MODE = 0x0C30;
public const uint GL_RGBA_MODE = 0x0C31;
public const uint GL_DOUBLEBUFFER = 0x0C32;
public const uint GL_STEREO = 0x0C33;
public const uint GL_RENDER_MODE = 0x0C40;
public const uint GL_PERSPECTIVE_CORRECTION_HINT = 0x0C50;
public const uint GL_POINT_SMOOTH_HINT = 0x0C51;
public const uint GL_LINE_SMOOTH_HINT = 0x0C52;
public const uint GL_POLYGON_SMOOTH_HINT = 0x0C53;
public const uint GL_FOG_HINT = 0x0C54;
public const uint GL_TEXTURE_GEN_S = 0x0C60;
public const uint GL_TEXTURE_GEN_T = 0x0C61;
public const uint GL_TEXTURE_GEN_R = 0x0C62;
public const uint GL_TEXTURE_GEN_Q = 0x0C63;
public const uint GL_PIXEL_MAP_I_TO_I = 0x0C70;
public const uint GL_PIXEL_MAP_S_TO_S = 0x0C71;
public const uint GL_PIXEL_MAP_I_TO_R = 0x0C72;
public const uint GL_PIXEL_MAP_I_TO_G = 0x0C73;
public const uint GL_PIXEL_MAP_I_TO_B = 0x0C74;
public const uint GL_PIXEL_MAP_I_TO_A = 0x0C75;
public const uint GL_PIXEL_MAP_R_TO_R = 0x0C76;
public const uint GL_PIXEL_MAP_G_TO_G = 0x0C77;
public const uint GL_PIXEL_MAP_B_TO_B = 0x0C78;
public const uint GL_PIXEL_MAP_A_TO_A = 0x0C79;
public const uint GL_PIXEL_MAP_I_TO_I_SIZE = 0x0CB0;
public const uint GL_PIXEL_MAP_S_TO_S_SIZE = 0x0CB1;
public const uint GL_PIXEL_MAP_I_TO_R_SIZE = 0x0CB2;
public const uint GL_PIXEL_MAP_I_TO_G_SIZE = 0x0CB3;
public const uint GL_PIXEL_MAP_I_TO_B_SIZE = 0x0CB4;
public const uint GL_PIXEL_MAP_I_TO_A_SIZE = 0x0CB5;
public const uint GL_PIXEL_MAP_R_TO_R_SIZE = 0x0CB6;
public const uint GL_PIXEL_MAP_G_TO_G_SIZE = 0x0CB7;
public const uint GL_PIXEL_MAP_B_TO_B_SIZE = 0x0CB8;
public const uint GL_PIXEL_MAP_A_TO_A_SIZE = 0x0CB9;
public const uint GL_UNPACK_SWAP_BYTES = 0x0CF0;
public const uint GL_UNPACK_LSB_FIRST = 0x0CF1;
public const uint GL_UNPACK_ROW_LENGTH = 0x0CF2;
public const uint GL_UNPACK_SKIP_ROWS = 0x0CF3;
public const uint GL_UNPACK_SKIP_PIXELS = 0x0CF4;
public const uint GL_UNPACK_ALIGNMENT = 0x0CF5;
public const uint GL_PACK_SWAP_BYTES = 0x0D00;
public const uint GL_PACK_LSB_FIRST = 0x0D01;
public const uint GL_PACK_ROW_LENGTH = 0x0D02;
public const uint GL_PACK_SKIP_ROWS = 0x0D03;
public const uint GL_PACK_SKIP_PIXELS = 0x0D04;
public const uint GL_PACK_ALIGNMENT = 0x0D05;
public const uint GL_MAP_COLOR = 0x0D10;
public const uint GL_MAP_STENCIL = 0x0D11;
public const uint GL_INDEX_SHIFT = 0x0D12;
public const uint GL_INDEX_OFFSET = 0x0D13;
public const uint GL_RED_SCALE = 0x0D14;
public const uint GL_RED_BIAS = 0x0D15;
public const uint GL_ZOOM_X = 0x0D16;
public const uint GL_ZOOM_Y = 0x0D17;
public const uint GL_GREEN_SCALE = 0x0D18;
public const uint GL_GREEN_BIAS = 0x0D19;
public const uint GL_BLUE_SCALE = 0x0D1A;
public const uint GL_BLUE_BIAS = 0x0D1B;
public const uint GL_ALPHA_SCALE = 0x0D1C;
public const uint GL_ALPHA_BIAS = 0x0D1D;
public const uint GL_DEPTH_SCALE = 0x0D1E;
public const uint GL_DEPTH_BIAS = 0x0D1F;
public const uint GL_MAX_EVAL_ORDER = 0x0D30;
public const uint GL_MAX_LIGHTS = 0x0D31;
public const uint GL_MAX_CLIP_PLANES = 0x0D32;
public const uint GL_MAX_TEXTURE_SIZE = 0x0D33;
public const uint GL_MAX_PIXEL_MAP_TABLE = 0x0D34;
public const uint GL_MAX_ATTRIB_STACK_DEPTH = 0x0D35;
public const uint GL_MAX_MODELVIEW_STACK_DEPTH = 0x0D36;
public const uint GL_MAX_NAME_STACK_DEPTH = 0x0D37;
public const uint GL_MAX_PROJECTION_STACK_DEPTH = 0x0D38;
public const uint GL_MAX_TEXTURE_STACK_DEPTH = 0x0D39;
public const uint GL_MAX_VIEWPORT_DIMS = 0x0D3A;
public const uint GL_MAX_CLIENT_ATTRIB_STACK_DEPTH = 0x0D3B;
public const uint GL_SUBPIXEL_BITS = 0x0D50;
public const uint GL_INDEX_BITS = 0x0D51;
public const uint GL_RED_BITS = 0x0D52;
public const uint GL_GREEN_BITS = 0x0D53;
public const uint GL_BLUE_BITS = 0x0D54;
public const uint GL_ALPHA_BITS = 0x0D55;
public const uint GL_DEPTH_BITS = 0x0D56;
public const uint GL_STENCIL_BITS = 0x0D57;
public const uint GL_ACCUM_RED_BITS = 0x0D58;
public const uint GL_ACCUM_GREEN_BITS = 0x0D59;
public const uint GL_ACCUM_BLUE_BITS = 0x0D5A;
public const uint GL_ACCUM_ALPHA_BITS = 0x0D5B;
public const uint GL_NAME_STACK_DEPTH = 0x0D70;
public const uint GL_AUTO_NORMAL = 0x0D80;
public const uint GL_MAP1_COLOR_4 = 0x0D90;
public const uint GL_MAP1_INDEX = 0x0D91;
public const uint GL_MAP1_NORMAL = 0x0D92;
public const uint GL_MAP1_TEXTURE_COORD_1 = 0x0D93;
public const uint GL_MAP1_TEXTURE_COORD_2 = 0x0D94;
public const uint GL_MAP1_TEXTURE_COORD_3 = 0x0D95;
public const uint GL_MAP1_TEXTURE_COORD_4 = 0x0D96;
public const uint GL_MAP1_VERTEX_3 = 0x0D97;
public const uint GL_MAP1_VERTEX_4 = 0x0D98;
public const uint GL_MAP2_COLOR_4 = 0x0DB0;
public const uint GL_MAP2_INDEX = 0x0DB1;
public const uint GL_MAP2_NORMAL = 0x0DB2;
public const uint GL_MAP2_TEXTURE_COORD_1 = 0x0DB3;
public const uint GL_MAP2_TEXTURE_COORD_2 = 0x0DB4;
public const uint GL_MAP2_TEXTURE_COORD_3 = 0x0DB5;
public const uint GL_MAP2_TEXTURE_COORD_4 = 0x0DB6;
public const uint GL_MAP2_VERTEX_3 = 0x0DB7;
public const uint GL_MAP2_VERTEX_4 = 0x0DB8;
public const uint GL_MAP1_GRID_DOMAIN = 0x0DD0;
public const uint GL_MAP1_GRID_SEGMENTS = 0x0DD1;
public const uint GL_MAP2_GRID_DOMAIN = 0x0DD2;
public const uint GL_MAP2_GRID_SEGMENTS = 0x0DD3;
public const uint GL_TEXTURE_1D = 0x0DE0;
public const uint GL_TEXTURE_2D = 0x0DE1;
public const uint GL_FEEDBACK_BUFFER_POINTER = 0x0DF0;
public const uint GL_FEEDBACK_BUFFER_SIZE = 0x0DF1;
public const uint GL_FEEDBACK_BUFFER_TYPE = 0x0DF2;
public const uint GL_SELECTION_BUFFER_POINTER = 0x0DF3;
public const uint GL_SELECTION_BUFFER_SIZE = 0x0DF4;
public const uint GL_TEXTURE_WIDTH = 0x1000;
public const uint GL_TRANSFORM_BIT = 0x00001000;
public const uint GL_TEXTURE_HEIGHT = 0x1001;
public const uint GL_TEXTURE_INTERNAL_FORMAT = 0x1003;
public const uint GL_TEXTURE_BORDER_COLOR = 0x1004;
public const uint GL_TEXTURE_BORDER = 0x1005;
public const uint GL_DONT_CARE = 0x1100;
public const uint GL_FASTEST = 0x1101;
public const uint GL_NICEST = 0x1102;
public const uint GL_AMBIENT = 0x1200;
public const uint GL_DIFFUSE = 0x1201;
public const uint GL_SPECULAR = 0x1202;
public const uint GL_POSITION = 0x1203;
public const uint GL_SPOT_DIRECTION = 0x1204;
public const uint GL_SPOT_EXPONENT = 0x1205;
public const uint GL_SPOT_CUTOFF = 0x1206;
public const uint GL_CONSTANT_ATTENUATION = 0x1207;
public const uint GL_LINEAR_ATTENUATION = 0x1208;
public const uint GL_QUADRATIC_ATTENUATION = 0x1209;
public const uint GL_COMPILE = 0x1300;
public const uint GL_COMPILE_AND_EXECUTE = 0x1301;
public const uint GL_BYTE = 0x1400;
public const uint GL_UNSIGNED_BYTE = 0x1401;
public const uint GL_SHORT = 0x1402;
public const uint GL_UNSIGNED_SHORT = 0x1403;
public const uint GL_INT = 0x1404;
public const uint GL_UNSIGNED_INT = 0x1405;
public const uint GL_FLOAT = 0x1406;
public const uint GL_2_BYTES = 0x1407;
public const uint GL_3_BYTES = 0x1408;
public const uint GL_4_BYTES = 0x1409;
public const uint GL_DOUBLE = 0x140A;
public const uint GL_CLEAR = 0x1500;
public const uint GL_AND = 0x1501;
public const uint GL_AND_REVERSE = 0x1502;
public const uint GL_COPY = 0x1503;
public const uint GL_AND_INVERTED = 0x1504;
public const uint GL_NOOP = 0x1505;
public const uint GL_XOR = 0x1506;
public const uint GL_OR = 0x1507;
public const uint GL_NOR = 0x1508;
public const uint GL_EQUIV = 0x1509;
public const uint GL_INVERT = 0x150A;
public const uint GL_OR_REVERSE = 0x150B;
public const uint GL_COPY_INVERTED = 0x150C;
public const uint GL_OR_INVERTED = 0x150D;
public const uint GL_NAND = 0x150E;
public const uint GL_SET = 0x150F;
public const uint GL_EMISSION = 0x1600;
public const uint GL_SHININESS = 0x1601;
public const uint GL_AMBIENT_AND_DIFFUSE = 0x1602;
public const uint GL_COLOR_INDEXES = 0x1603;
public const uint GL_MODELVIEW = 0x1700;
public const uint GL_PROJECTION = 0x1701;
public const uint GL_TEXTURE = 0x1702;
public const uint GL_COLOR = 0x1800;
public const uint GL_DEPTH = 0x1801;
public const uint GL_STENCIL = 0x1802;
public const uint GL_COLOR_INDEX = 0x1900;
public const uint GL_STENCIL_INDEX = 0x1901;
public const uint GL_DEPTH_COMPONENT = 0x1902;
public const uint GL_RED = 0x1903;
public const uint GL_GREEN = 0x1904;
public const uint GL_BLUE = 0x1905;
public const uint GL_ALPHA = 0x1906;
public const uint GL_RGB = 0x1907;
public const uint GL_RGBA = 0x1908;
public const uint GL_LUMINANCE = 0x1909;
public const uint GL_LUMINANCE_ALPHA = 0x190A;
public const uint GL_BITMAP = 0x1A00;
public const uint GL_POINT = 0x1B00;
public const uint GL_LINE = 0x1B01;
public const uint GL_FILL = 0x1B02;
public const uint GL_RENDER = 0x1C00;
public const uint GL_FEEDBACK = 0x1C01;
public const uint GL_SELECT = 0x1C02;
public const uint GL_FLAT = 0x1D00;
public const uint GL_SMOOTH = 0x1D01;
public const uint GL_KEEP = 0x1E00;
public const uint GL_REPLACE = 0x1E01;
public const uint GL_INCR = 0x1E02;
public const uint GL_DECR = 0x1E03;
public const uint GL_VENDOR = 0x1F00;
public const uint GL_RENDERER = 0x1F01;
public const uint GL_VERSION = 0x1F02;
public const uint GL_EXTENSIONS = 0x1F03;
public const uint GL_S = 0x2000;
public const uint GL_ENABLE_BIT = 0x00002000;
public const uint GL_T = 0x2001;
public const uint GL_R = 0x2002;
public const uint GL_Q = 0x2003;
public const uint GL_MODULATE = 0x2100;
public const uint GL_DECAL = 0x2101;
public const uint GL_TEXTURE_ENV_MODE = 0x2200;
public const uint GL_TEXTURE_ENV_COLOR = 0x2201;
public const uint GL_TEXTURE_ENV = 0x2300;
public const uint GL_EYE_LINEAR = 0x2400;
public const uint GL_OBJECT_LINEAR = 0x2401;
public const uint GL_SPHERE_MAP = 0x2402;
public const uint GL_TEXTURE_GEN_MODE = 0x2500;
public const uint GL_OBJECT_PLANE = 0x2501;
public const uint GL_EYE_PLANE = 0x2502;
public const uint GL_NEAREST = 0x2600;
public const uint GL_LINEAR = 0x2601;
public const uint GL_NEAREST_MIPMAP_NEAREST = 0x2700;
public const uint GL_LINEAR_MIPMAP_NEAREST = 0x2701;
public const uint GL_NEAREST_MIPMAP_LINEAR = 0x2702;
public const uint GL_LINEAR_MIPMAP_LINEAR = 0x2703;
public const uint GL_TEXTURE_MAG_FILTER = 0x2800;
public const uint GL_TEXTURE_MIN_FILTER = 0x2801;
public const uint GL_TEXTURE_WRAP_S = 0x2802;
public const uint GL_TEXTURE_WRAP_T = 0x2803;
public const uint GL_CLAMP = 0x2900;
public const uint GL_REPEAT = 0x2901;
public const uint GL_POLYGON_OFFSET_UNITS = 0x2A00;
public const uint GL_POLYGON_OFFSET_POINT = 0x2A01;
public const uint GL_POLYGON_OFFSET_LINE = 0x2A02;
public const uint GL_R3_G3_B2 = 0x2A10;
public const uint GL_V2F = 0x2A20;
public const uint GL_V3F = 0x2A21;
public const uint GL_C4UB_V2F = 0x2A22;
public const uint GL_C4UB_V3F = 0x2A23;
public const uint GL_C3F_V3F = 0x2A24;
public const uint GL_N3F_V3F = 0x2A25;
public const uint GL_C4F_N3F_V3F = 0x2A26;
public const uint GL_T2F_V3F = 0x2A27;
public const uint GL_T4F_V4F = 0x2A28;
public const uint GL_T2F_C4UB_V3F = 0x2A29;
public const uint GL_T2F_C3F_V3F = 0x2A2A;
public const uint GL_T2F_N3F_V3F = 0x2A2B;
public const uint GL_T2F_C4F_N3F_V3F = 0x2A2C;
public const uint GL_T4F_C4F_N3F_V4F = 0x2A2D;
public const uint GL_CLIP_PLANE0 = 0x3000;
public const uint GL_CLIP_PLANE1 = 0x3001;
public const uint GL_CLIP_PLANE2 = 0x3002;
public const uint GL_CLIP_PLANE3 = 0x3003;
public const uint GL_CLIP_PLANE4 = 0x3004;
public const uint GL_CLIP_PLANE5 = 0x3005;
public const uint GL_LIGHT0 = 0x4000;
public const uint GL_COLOR_BUFFER_BIT = 0x00004000;
public const uint GL_LIGHT1 = 0x4001;
public const uint GL_LIGHT2 = 0x4002;
public const uint GL_LIGHT3 = 0x4003;
public const uint GL_LIGHT4 = 0x4004;
public const uint GL_LIGHT5 = 0x4005;
public const uint GL_LIGHT6 = 0x4006;
public const uint GL_LIGHT7 = 0x4007;
public const uint GL_HINT_BIT = 0x00008000;
public const uint GL_POLYGON_OFFSET_FILL = 0x8037;
public const uint GL_POLYGON_OFFSET_FACTOR = 0x8038;
public const uint GL_ALPHA4 = 0x803B;
public const uint GL_ALPHA8 = 0x803C;
public const uint GL_ALPHA12 = 0x803D;
public const uint GL_ALPHA16 = 0x803E;
public const uint GL_LUMINANCE4 = 0x803F;
public const uint GL_LUMINANCE8 = 0x8040;
public const uint GL_LUMINANCE12 = 0x8041;
public const uint GL_LUMINANCE16 = 0x8042;
public const uint GL_LUMINANCE4_ALPHA4 = 0x8043;
public const uint GL_LUMINANCE6_ALPHA2 = 0x8044;
public const uint GL_LUMINANCE8_ALPHA8 = 0x8045;
public const uint GL_LUMINANCE12_ALPHA4 = 0x8046;
public const uint GL_LUMINANCE12_ALPHA12 = 0x8047;
public const uint GL_LUMINANCE16_ALPHA16 = 0x8048;
public const uint GL_INTENSITY = 0x8049;
public const uint GL_INTENSITY4 = 0x804A;
public const uint GL_INTENSITY8 = 0x804B;
public const uint GL_INTENSITY12 = 0x804C;
public const uint GL_INTENSITY16 = 0x804D;
public const uint GL_RGB4 = 0x804F;
public const uint GL_RGB5 = 0x8050;
public const uint GL_RGB8 = 0x8051;
public const uint GL_RGB10 = 0x8052;
public const uint GL_RGB12 = 0x8053;
public const uint GL_RGB16 = 0x8054;
public const uint GL_RGBA2 = 0x8055;
public const uint GL_RGBA4 = 0x8056;
public const uint GL_RGB5_A1 = 0x8057;
public const uint GL_RGBA8 = 0x8058;
public const uint GL_RGB10_A2 = 0x8059;
public const uint GL_RGBA12 = 0x805A;
public const uint GL_RGBA16 = 0x805B;
public const uint GL_TEXTURE_RED_SIZE = 0x805C;
public const uint GL_TEXTURE_GREEN_SIZE = 0x805D;
public const uint GL_TEXTURE_BLUE_SIZE = 0x805E;
public const uint GL_TEXTURE_ALPHA_SIZE = 0x805F;
public const uint GL_TEXTURE_LUMINANCE_SIZE = 0x8060;
public const uint GL_TEXTURE_INTENSITY_SIZE = 0x8061;
public const uint GL_PROXY_TEXTURE_1D = 0x8063;
public const uint GL_PROXY_TEXTURE_2D = 0x8064;
public const uint GL_TEXTURE_PRIORITY = 0x8066;
public const uint GL_TEXTURE_RESIDENT = 0x8067;
public const uint GL_TEXTURE_BINDING_1D = 0x8068;
public const uint GL_TEXTURE_BINDING_2D = 0x8069;
public const uint GL_VERTEX_ARRAY = 0x8074;
public const uint GL_NORMAL_ARRAY = 0x8075;
public const uint GL_COLOR_ARRAY = 0x8076;
public const uint GL_INDEX_ARRAY = 0x8077;
public const uint GL_TEXTURE_COORD_ARRAY = 0x8078;
public const uint GL_EDGE_FLAG_ARRAY = 0x8079;
public const uint GL_VERTEX_ARRAY_SIZE = 0x807A;
public const uint GL_VERTEX_ARRAY_TYPE = 0x807B;
public const uint GL_VERTEX_ARRAY_STRIDE = 0x807C;
public const uint GL_NORMAL_ARRAY_TYPE = 0x807E;
public const uint GL_NORMAL_ARRAY_STRIDE = 0x807F;
public const uint GL_COLOR_ARRAY_SIZE = 0x8081;
public const uint GL_COLOR_ARRAY_TYPE = 0x8082;
public const uint GL_COLOR_ARRAY_STRIDE = 0x8083;
public const uint GL_INDEX_ARRAY_TYPE = 0x8085;
public const uint GL_INDEX_ARRAY_STRIDE = 0x8086;
public const uint GL_TEXTURE_COORD_ARRAY_SIZE = 0x8088;
public const uint GL_TEXTURE_COORD_ARRAY_TYPE = 0x8089;
public const uint GL_TEXTURE_COORD_ARRAY_STRIDE = 0x808A;
public const uint GL_EDGE_FLAG_ARRAY_STRIDE = 0x808C;
public const uint GL_VERTEX_ARRAY_POINTER = 0x808E;
public const uint GL_NORMAL_ARRAY_POINTER = 0x808F;
public const uint GL_COLOR_ARRAY_POINTER = 0x8090;
public const uint GL_INDEX_ARRAY_POINTER = 0x8091;
public const uint GL_TEXTURE_COORD_ARRAY_POINTER = 0x8092;
public const uint GL_EDGE_FLAG_ARRAY_POINTER = 0x8093;
public const uint GL_COLOR_INDEX1_EXT = 0x80E2;
public const uint GL_COLOR_INDEX2_EXT = 0x80E3;
public const uint GL_COLOR_INDEX4_EXT = 0x80E4;
public const uint GL_COLOR_INDEX8_EXT = 0x80E5;
public const uint GL_COLOR_INDEX12_EXT = 0x80E6;
public const uint GL_COLOR_INDEX16_EXT = 0x80E7;
public const uint GL_EVAL_BIT = 0x00010000;
public const uint GL_LIST_BIT = 0x00020000;
public const uint GL_TEXTURE_BIT = 0x00040000;
public const uint GL_SCISSOR_BIT = 0x00080000;
public const uint GL_ALL_ATTRIB_BITS = 0x000fffff;
public const uint GL_CLIENT_ALL_ATTRIB_BITS = 0xffffffff;
[DllImport(GLLIB)] public static extern void glAccum (uint op,float value);
[DllImport(GLLIB)] public static extern void glAlphaFunc (uint func,float _ref);
[DllImport(GLLIB)] public static extern bool glAreTexturesResident (int n,uint[] textures,IntPtr residences);
[DllImport(GLLIB)] public static extern void glArrayElement (int i);
[DllImport(GLLIB)] public static extern void glBegin (uint mode);
[DllImport(GLLIB)] public static extern void glBindTexture (uint target,uint texture);
[DllImport(GLLIB)] public static extern void glBitmap (int width,int height,float xorig,float yorig,float xmove,float ymove,byte[] bitmap);
[DllImport(GLLIB)] public static extern void glBlendFunc (uint sfactor,uint dfactor);
[DllImport(GLLIB)] public static extern void glCallList (uint list);
[DllImport(GLLIB)] public static extern void glCallLists (int n,uint type,IntPtr lists);
[DllImport(GLLIB)] public static extern void glClear (uint mask);
[DllImport(GLLIB)] public static extern void glClearAccum (float red,float green,float blue,float alpha);
[DllImport(GLLIB)] public static extern void glClearColor (float red,float green,float blue,float alpha);
[DllImport(GLLIB)] public static extern void glClearDepth (double depth);
[DllImport(GLLIB)] public static extern void glClearIndex (float c);
[DllImport(GLLIB)] public static extern void glClearStencil (int s);
[DllImport(GLLIB)] public static extern void glClipPlane (uint plane,double[] equation);
[DllImport(GLLIB)] public static extern void glColor3b (sbyte red,sbyte green,sbyte blue);
[DllImport(GLLIB)] public static extern void glColor3bv (byte[] v);
[DllImport(GLLIB)] public static extern void glColor3d (double red,double green,double blue);
[DllImport(GLLIB)] public static extern void glColor3dv (double[] v);
[DllImport(GLLIB)] public static extern void glColor3f (float red,float green,float blue);
[DllImport(GLLIB)] public static extern void glColor3fv (float[] v);
[DllImport(GLLIB)] public static extern void glColor3i (int red,int green,int blue);
[DllImport(GLLIB)] public static extern void glColor3iv (int[] v);
[DllImport(GLLIB)] public static extern void glColor3s (short red,short green,short blue);
[DllImport(GLLIB)] public static extern void glColor3sv (short[] v);
[DllImport(GLLIB)] public static extern void glColor3ub (byte red,byte green,byte blue);
[DllImport(GLLIB)] public static extern void glColor3ubv (byte[] v);
[DllImport(GLLIB)] public static extern void glColor3ui (uint red,uint green,uint blue);
[DllImport(GLLIB)] public static extern void glColor3uiv (uint[] v);
[DllImport(GLLIB)] public static extern void glColor3us (ushort red,ushort green,ushort blue);
[DllImport(GLLIB)] public static extern void glColor3usv (ushort[] v);
[DllImport(GLLIB)] public static extern void glColor4b (sbyte red,sbyte green,sbyte blue,sbyte alpha);
[DllImport(GLLIB)] public static extern void glColor4bv (byte[] v);
[DllImport(GLLIB)] public static extern void glColor4d (double red,double green,double blue,double alpha);
[DllImport(GLLIB)] public static extern void glColor4dv (double[] v);
[DllImport(GLLIB)] public static extern void glColor4f (float red,float green,float blue,float alpha);
[DllImport(GLLIB)] public static extern void glColor4fv (float[] v);
[DllImport(GLLIB)] public static extern void glColor4i (int red,int green,int blue,int alpha);
[DllImport(GLLIB)] public static extern void glColor4iv (int[] v);
[DllImport(GLLIB)] public static extern void glColor4s (short red,short green,short blue,short alpha);
[DllImport(GLLIB)] public static extern void glColor4sv (short[] v);
[DllImport(GLLIB)] public static extern void glColor4ub (byte red,byte green,byte blue,byte alpha);
[DllImport(GLLIB)] public static extern void glColor4ubv (byte[] v);
[DllImport(GLLIB)] public static extern void glColor4ui (uint red,uint green,uint blue,uint alpha);
[DllImport(GLLIB)] public static extern void glColor4uiv (uint[] v);
[DllImport(GLLIB)] public static extern void glColor4us (ushort red,ushort green,ushort blue,ushort alpha);
[DllImport(GLLIB)] public static extern void glColor4usv (ushort[] v);
[DllImport(GLLIB)] public static extern void glColorMask (bool red,bool green,bool blue,bool alpha);
[DllImport(GLLIB)] public static extern void glColorMaterial (uint face,uint mode);
[DllImport(GLLIB)] public static extern void glColorPointer (int size,uint type,int stride,IntPtr pointer);
[DllImport(GLLIB)] public static extern void glCopyPixels (int x,int y,int width,int height,uint type);
[DllImport(GLLIB)] public static extern void glCopyTexImage1D (uint target,int level,uint internalFormat,int x,int y,int width,int border);
[DllImport(GLLIB)] public static extern void glCopyTexImage2D (uint target,int level,uint internalFormat,int x,int y,int width,int height,int border);
[DllImport(GLLIB)] public static extern void glCopyTexSubImage1D (uint target,int level,int xoffset,int x,int y,int width);
[DllImport(GLLIB)] public static extern void glCopyTexSubImage2D (uint target,int level,int xoffset,int yoffset,int x,int y,int width,int height);
[DllImport(GLLIB)] public static extern void glCullFace (uint mode);
[DllImport(GLLIB)] public static extern void glDeleteLists (uint list,int range);
[DllImport(GLLIB)] public static extern void glDeleteTextures (int n,uint[] textures);
[DllImport(GLLIB)] public static extern void glDepthFunc (uint func);
[DllImport(GLLIB)] public static extern void glDepthMask (bool flag);
[DllImport(GLLIB)] public static extern void glDepthRange (double zNear,double zFar);
[DllImport(GLLIB)] public static extern void glDisable (uint cap);
[DllImport(GLLIB)] public static extern void glDisableClientState (uint array);
[DllImport(GLLIB)] public static extern void glDrawArrays (uint mode,int first,int count);
[DllImport(GLLIB)] public static extern void glDrawBuffer (uint mode);
[DllImport(GLLIB)] public static extern void glDrawElements (uint mode,int count,uint type,IntPtr indices);
[DllImport(GLLIB)] public static extern void glDrawPixels (int width,int height,uint format,uint type,IntPtr pixels);
[DllImport(GLLIB)] public static extern void glEdgeFlag (bool flag);
[DllImport(GLLIB)] public static extern void glEdgeFlagPointer (int stride,IntPtr pointer);
[DllImport(GLLIB)] public static extern void glEdgeFlagv (bool[] flag);
[DllImport(GLLIB)] public static extern void glEnable (uint cap);
[DllImport(GLLIB)] public static extern void glEnableClientState (uint array);
[DllImport(GLLIB)] public static extern void glEnd ();
[DllImport(GLLIB)] public static extern void glEndList ();
[DllImport(GLLIB)] public static extern void glEvalCoord1d (double u);
[DllImport(GLLIB)] public static extern void glEvalCoord1dv (double[] u);
[DllImport(GLLIB)] public static extern void glEvalCoord1f (float u);
[DllImport(GLLIB)] public static extern void glEvalCoord1fv (float[] u);
[DllImport(GLLIB)] public static extern void glEvalCoord2d (double u,double v);
[DllImport(GLLIB)] public static extern void glEvalCoord2dv (double[] u);
[DllImport(GLLIB)] public static extern void glEvalCoord2f (float u,float v);
[DllImport(GLLIB)] public static extern void glEvalCoord2fv (float[] u);
[DllImport(GLLIB)] public static extern void glEvalMesh1 (uint mode,int i1,int i2);
[DllImport(GLLIB)] public static extern void glEvalMesh2 (uint mode,int i1,int i2,int j1,int j2);
[DllImport(GLLIB)] public static extern void glEvalPoint1 (int i);
[DllImport(GLLIB)] public static extern void glEvalPoint2 (int i,int j);
[DllImport(GLLIB)] public static extern void glFeedbackBuffer (int size,uint type,IntPtr buffer);
[DllImport(GLLIB)] public static extern void glFinish ();
[DllImport(GLLIB)] public static extern void glFlush ();
[DllImport(GLLIB)] public static extern void glFogf (uint pname,float param);
[DllImport(GLLIB)] public static extern void glFogfv (uint pname,float[] _params);
[DllImport(GLLIB)] public static extern void glFogi (uint pname,int param);
[DllImport(GLLIB)] public static extern void glFogiv (uint pname,int[] _params);
[DllImport(GLLIB)] public static extern void glFrontFace (uint mode);
[DllImport(GLLIB)] public static extern void glFrustum (double left,double right,double bottom,double top,double zNear,double zFar);
[DllImport(GLLIB)] public static extern uint glGenLists (int range);
[DllImport(GLLIB)] public static extern void glGenTextures (int n,IntPtr textures);
[DllImport(GLLIB)] public static extern void glGetBooleanv (uint pname,IntPtr _params);
[DllImport(GLLIB)] public static extern void glGetClipPlane (uint plane,IntPtr equation);
[DllImport(GLLIB)] public static extern void glGetDoublev (uint pname,IntPtr _params);
[DllImport(GLLIB)] public static extern uint glGetError ();
[DllImport(GLLIB)] public static extern void glGetFloatv (uint pname,IntPtr _params);
[DllImport(GLLIB)] public static extern void glGetIntegerv (uint pname,IntPtr _params);
[DllImport(GLLIB)] public static extern void glGetLightfv (uint light,uint pname,IntPtr _params);
[DllImport(GLLIB)] public static extern void glGetLightiv (uint light,uint pname,IntPtr _params);
[DllImport(GLLIB)] public static extern void glGetMapdv (uint target,uint query,IntPtr v);
[DllImport(GLLIB)] public static extern void glGetMapfv (uint target,uint query,IntPtr v);
[DllImport(GLLIB)] public static extern void glGetMapiv (uint target,uint query,IntPtr v);
[DllImport(GLLIB)] public static extern void glGetMaterialfv (uint face,uint pname,IntPtr _params);
[DllImport(GLLIB)] public static extern void glGetMaterialiv (uint face,uint pname,IntPtr _params);
[DllImport(GLLIB)] public static extern void glGetPixelMapfv (uint map,IntPtr values);
[DllImport(GLLIB)] public static extern void glGetPixelMapuiv (uint map,IntPtr values);
[DllImport(GLLIB)] public static extern void glGetPixelMapusv (uint map,IntPtr values);
[DllImport(GLLIB)] public static extern void glGetPointerv (uint pname,IntPtr _params);
[DllImport(GLLIB)] public static extern void glGetPolygonStipple (IntPtr mask);
[DllImport(GLLIB,EntryPoint="glGetString", CharSet = CharSet.Auto, SetLastError = true, ExactSpelling = true)] public static extern IntPtr _glGetString (uint name);
[DllImport(GLLIB)] public static extern void glGetTexEnvfv (uint target,uint pname,IntPtr _params);
[DllImport(GLLIB)] public static extern void glGetTexEnviv (uint target,uint pname,IntPtr _params);
[DllImport(GLLIB)] public static extern void glGetTexGendv (uint coord,uint pname,IntPtr _params);
[DllImport(GLLIB)] public static extern void glGetTexGenfv (uint coord,uint pname,IntPtr _params);
[DllImport(GLLIB)] public static extern void glGetTexGeniv (uint coord,uint pname,IntPtr _params);
[DllImport(GLLIB)] public static extern void glGetTexImage (uint target,int level,uint format,uint type,IntPtr pixels);
[DllImport(GLLIB)] public static extern void glGetTexLevelParameterfv (uint target,int level,uint pname,IntPtr _params);
[DllImport(GLLIB)] public static extern void glGetTexLevelParameteriv (uint target,int level,uint pname,IntPtr _params);
[DllImport(GLLIB)] public static extern void glGetTexParameterfv (uint target,uint pname,IntPtr _params);
[DllImport(GLLIB)] public static extern void glGetTexParameteriv (uint target,uint pname,IntPtr _params);
[DllImport(GLLIB)] public static extern void glHint (uint target,uint mode);
[DllImport(GLLIB)] public static extern void glIndexMask (uint mask);
[DllImport(GLLIB)] public static extern void glIndexPointer (uint type,int stride,IntPtr pointer);
[DllImport(GLLIB)] public static extern void glIndexd (double c);
[DllImport(GLLIB)] public static extern void glIndexdv (double[] c);
[DllImport(GLLIB)] public static extern void glIndexf (float c);
[DllImport(GLLIB)] public static extern void glIndexfv (float[] c);
[DllImport(GLLIB)] public static extern void glIndexi (int c);
[DllImport(GLLIB)] public static extern void glIndexiv (int[] c);
[DllImport(GLLIB)] public static extern void glIndexs (short c);
[DllImport(GLLIB)] public static extern void glIndexsv (short[] c);
[DllImport(GLLIB)] public static extern void glIndexub (byte c);
[DllImport(GLLIB)] public static extern void glIndexubv (byte[] c);
[DllImport(GLLIB)] public static extern void glInitNames ();
[DllImport(GLLIB)] public static extern void glInterleavedArrays (uint format,int stride,IntPtr pointer);
[DllImport(GLLIB)] public static extern bool glIsEnabled (uint cap);
[DllImport(GLLIB)] public static extern bool glIsList (uint list);
[DllImport(GLLIB)] public static extern bool glIsTexture (uint texture);
[DllImport(GLLIB)] public static extern void glLightModelf (uint pname,float param);
[DllImport(GLLIB)] public static extern void glLightModelfv (uint pname,float[] _params);
[DllImport(GLLIB)] public static extern void glLightModeli (uint pname,int param);
[DllImport(GLLIB)] public static extern void glLightModeliv (uint pname,int[] _params);
[DllImport(GLLIB)] public static extern void glLightf (uint light,uint pname,float param);
[DllImport(GLLIB)] public static extern void glLightfv (uint light,uint pname,float[] _params);
[DllImport(GLLIB)] public static extern void glLighti (uint light,uint pname,int param);
[DllImport(GLLIB)] public static extern void glLightiv (uint light,uint pname,int[] _params);
[DllImport(GLLIB)] public static extern void glLineStipple (int factor,ushort pattern);
[DllImport(GLLIB)] public static extern void glLineWidth (float width);
[DllImport(GLLIB)] public static extern void glListBase (uint _base);
[DllImport(GLLIB)] public static extern void glLoadIdentity ();
[DllImport(GLLIB)] public static extern void glLoadMatrixd (double[] m);
[DllImport(GLLIB)] public static extern void glLoadMatrixf (float[] m);
[DllImport(GLLIB)] public static extern void glLoadName (uint name);
[DllImport(GLLIB)] public static extern void glLogicOp (uint opcode);
[DllImport(GLLIB)] public static extern void glMap1d (uint target,double u1,double u2,int stride,int order,double[] points);
[DllImport(GLLIB)] public static extern void glMap1f (uint target,float u1,float u2,int stride,int order,float[] points);
[DllImport(GLLIB)] public static extern void glMap2d (uint target,double u1,double u2,int ustride,int uorder,double v1,double v2,int vstride,int vorder,double[] points);
[DllImport(GLLIB)] public static extern void glMap2f (uint target,float u1,float u2,int ustride,int uorder,float v1,float v2,int vstride,int vorder,float[] points);
[DllImport(GLLIB)] public static extern void glMapGrid1d (int un,double u1,double u2);
[DllImport(GLLIB)] public static extern void glMapGrid1f (int un,float u1,float u2);
[DllImport(GLLIB)] public static extern void glMapGrid2d (int un,double u1,double u2,int vn,double v1,double v2);
[DllImport(GLLIB)] public static extern void glMapGrid2f (int un,float u1,float u2,int vn,float v1,float v2);
[DllImport(GLLIB)] public static extern void glMaterialf (uint face,uint pname,float param);
[DllImport(GLLIB)] public static extern void glMaterialfv (uint face,uint pname,float[] _params);
[DllImport(GLLIB)] public static extern void glMateriali (uint face,uint pname,int param);
[DllImport(GLLIB)] public static extern void glMaterialiv (uint face,uint pname,int[] _params);
[DllImport(GLLIB)] public static extern void glMatrixMode (uint mode);
[DllImport(GLLIB)] public static extern void glMultMatrixd (double[] m);
[DllImport(GLLIB)] public static extern void glMultMatrixf (float[] m);
[DllImport(GLLIB)] public static extern void glNewList (uint list,uint mode);
[DllImport(GLLIB)] public static extern void glNormal3b (sbyte nx,sbyte ny,sbyte nz);
[DllImport(GLLIB)] public static extern void glNormal3bv (byte[] v);
[DllImport(GLLIB)] public static extern void glNormal3d (double nx,double ny,double nz);
[DllImport(GLLIB)] public static extern void glNormal3dv (double[] v);
[DllImport(GLLIB)] public static extern void glNormal3f (float nx,float ny,float nz);
[DllImport(GLLIB)] public static extern void glNormal3fv (float[] v);
[DllImport(GLLIB)] public static extern void glNormal3i (int nx,int ny,int nz);
[DllImport(GLLIB)] public static extern void glNormal3iv (int[] v);
[DllImport(GLLIB)] public static extern void glNormal3s (short nx,short ny,short nz);
[DllImport(GLLIB)] public static extern void glNormal3sv (short[] v);
[DllImport(GLLIB)] public static extern void glNormalPointer (uint type,int stride,IntPtr pointer);
[DllImport(GLLIB)] public static extern void glOrtho (double left,double right,double bottom,double top,double zNear,double zFar);
[DllImport(GLLIB)] public static extern void glPassThrough (float token);
[DllImport(GLLIB)] public static extern void glPixelMapfv (uint map,int mapsize,float[] values);
[DllImport(GLLIB)] public static extern void glPixelMapuiv (uint map,int mapsize,uint[] values);
[DllImport(GLLIB)] public static extern void glPixelMapusv (uint map,int mapsize,ushort[] values);
[DllImport(GLLIB)] public static extern void glPixelStoref (uint pname,float param);
[DllImport(GLLIB)] public static extern void glPixelStorei (uint pname,int param);
[DllImport(GLLIB)] public static extern void glPixelTransferf (uint pname,float param);
[DllImport(GLLIB)] public static extern void glPixelTransferi (uint pname,int param);
[DllImport(GLLIB)] public static extern void glPixelZoom (float xfactor,float yfactor);
[DllImport(GLLIB)] public static extern void glPointSize (float size);
[DllImport(GLLIB)] public static extern void glPolygonMode (uint face,uint mode);
[DllImport(GLLIB)] public static extern void glPolygonOffset (float factor,float units);
[DllImport(GLLIB)] public static extern void glPolygonStipple (byte[] mask);
[DllImport(GLLIB)] public static extern void glPopAttrib ();
[DllImport(GLLIB)] public static extern void glPopClientAttrib ();
[DllImport(GLLIB)] public static extern void glPopMatrix ();
[DllImport(GLLIB)] public static extern void glPopName ();
[DllImport(GLLIB)] public static extern void glPrioritizeTextures (int n,uint[] textures,float[] priorities);
[DllImport(GLLIB)] public static extern void glPushAttrib (uint mask);
[DllImport(GLLIB)] public static extern void glPushClientAttrib (uint mask);
[DllImport(GLLIB)] public static extern void glPushMatrix ();
[DllImport(GLLIB)] public static extern void glPushName (uint name);
[DllImport(GLLIB)] public static extern void glRasterPos2d (double x,double y);
[DllImport(GLLIB)] public static extern void glRasterPos2dv (double[] v);
[DllImport(GLLIB)] public static extern void glRasterPos2f (float x,float y);
[DllImport(GLLIB)] public static extern void glRasterPos2fv (float[] v);
[DllImport(GLLIB)] public static extern void glRasterPos2i (int x,int y);
[DllImport(GLLIB)] public static extern void glRasterPos2iv (int[] v);
[DllImport(GLLIB)] public static extern void glRasterPos2s (short x,short y);
[DllImport(GLLIB)] public static extern void glRasterPos2sv (short[] v);
[DllImport(GLLIB)] public static extern void glRasterPos3d (double x,double y,double z);
[DllImport(GLLIB)] public static extern void glRasterPos3dv (double[] v);
[DllImport(GLLIB)] public static extern void glRasterPos3f (float x,float y,float z);
[DllImport(GLLIB)] public static extern void glRasterPos3fv (float[] v);
[DllImport(GLLIB)] public static extern void glRasterPos3i (int x,int y,int z);
[DllImport(GLLIB)] public static extern void glRasterPos3iv (int[] v);
[DllImport(GLLIB)] public static extern void glRasterPos3s (short x,short y,short z);
[DllImport(GLLIB)] public static extern void glRasterPos3sv (short[] v);
[DllImport(GLLIB)] public static extern void glRasterPos4d (double x,double y,double z,double w);
[DllImport(GLLIB)] public static extern void glRasterPos4dv (double[] v);
[DllImport(GLLIB)] public static extern void glRasterPos4f (float x,float y,float z,float w);
[DllImport(GLLIB)] public static extern void glRasterPos4fv (float[] v);
[DllImport(GLLIB)] public static extern void glRasterPos4i (int x,int y,int z,int w);
[DllImport(GLLIB)] public static extern void glRasterPos4iv (int[] v);
[DllImport(GLLIB)] public static extern void glRasterPos4s (short x,short y,short z,short w);
[DllImport(GLLIB)] public static extern void glRasterPos4sv (short[] v);
[DllImport(GLLIB)] public static extern void glReadBuffer (uint mode);
[DllImport(GLLIB)] public static extern void glReadPixels (int x,int y,int width,int height,uint format,uint type,IntPtr pixels);
[DllImport(GLLIB)] public static extern void glRectd (double x1,double y1,double x2,double y2);
[DllImport(GLLIB)] public static extern void glRectdv (double[] v1,double[] v2);
[DllImport(GLLIB)] public static extern void glRectf (float x1,float y1,float x2,float y2);
[DllImport(GLLIB)] public static extern void glRectfv (float[] v1,float[] v2);
[DllImport(GLLIB)] public static extern void glRecti (int x1,int y1,int x2,int y2);
[DllImport(GLLIB)] public static extern void glRectiv (int[] v1,int[] v2);
[DllImport(GLLIB)] public static extern void glRects (short x1,short y1,short x2,short y2);
[DllImport(GLLIB)] public static extern void glRectsv (short[] v1,short[] v2);
[DllImport(GLLIB)] public static extern int glRenderMode (uint mode);
[DllImport(GLLIB)] public static extern void glRotated (double angle,double x,double y,double z);
[DllImport(GLLIB)] public static extern void glRotatef (float angle,float x,float y,float z);
[DllImport(GLLIB)] public static extern void glScaled (double x,double y,double z);
[DllImport(GLLIB)] public static extern void glScalef (float x,float y,float z);
[DllImport(GLLIB)] public static extern void glScissor (int x,int y,int width,int height);
[DllImport(GLLIB)] public static extern void glSelectBuffer (int size,IntPtr buffer);
[DllImport(GLLIB)] public static extern void glShadeModel (uint mode);
[DllImport(GLLIB)] public static extern void glStencilFunc (uint func,int _ref,uint mask);
[DllImport(GLLIB)] public static extern void glStencilMask (uint mask);
[DllImport(GLLIB)] public static extern void glStencilOp (uint fail,uint zfail,uint zpass);
[DllImport(GLLIB)] public static extern void glTexCoord1d (double s);
[DllImport(GLLIB)] public static extern void glTexCoord1dv (double[] v);
[DllImport(GLLIB)] public static extern void glTexCoord1f (float s);
[DllImport(GLLIB)] public static extern void glTexCoord1fv (float[] v);
[DllImport(GLLIB)] public static extern void glTexCoord1i (int s);
[DllImport(GLLIB)] public static extern void glTexCoord1iv (int[] v);
[DllImport(GLLIB)] public static extern void glTexCoord1s (short s);
[DllImport(GLLIB)] public static extern void glTexCoord1sv (short[] v);
[DllImport(GLLIB)] public static extern void glTexCoord2d (double s,double t);
[DllImport(GLLIB)] public static extern void glTexCoord2dv (double[] v);
[DllImport(GLLIB)] public static extern void glTexCoord2f (float s,float t);
[DllImport(GLLIB)] public static extern void glTexCoord2fv (float[] v);
[DllImport(GLLIB)] public static extern void glTexCoord2i (int s,int t);
[DllImport(GLLIB)] public static extern void glTexCoord2iv (int[] v);
[DllImport(GLLIB)] public static extern void glTexCoord2s (short s,short t);
[DllImport(GLLIB)] public static extern void glTexCoord2sv (short[] v);
[DllImport(GLLIB)] public static extern void glTexCoord3d (double s,double t,double r);
[DllImport(GLLIB)] public static extern void glTexCoord3dv (double[] v);
[DllImport(GLLIB)] public static extern void glTexCoord3f (float s,float t,float r);
[DllImport(GLLIB)] public static extern void glTexCoord3fv (float[] v);
[DllImport(GLLIB)] public static extern void glTexCoord3i (int s,int t,int r);
[DllImport(GLLIB)] public static extern void glTexCoord3iv (int[] v);
[DllImport(GLLIB)] public static extern void glTexCoord3s (short s,short t,short r);
[DllImport(GLLIB)] public static extern void glTexCoord3sv (short[] v);
[DllImport(GLLIB)] public static extern void glTexCoord4d (double s,double t,double r,double q);
[DllImport(GLLIB)] public static extern void glTexCoord4dv (double[] v);
[DllImport(GLLIB)] public static extern void glTexCoord4f (float s,float t,float r,float q);
[DllImport(GLLIB)] public static extern void glTexCoord4fv (float[] v);
[DllImport(GLLIB)] public static extern void glTexCoord4i (int s,int t,int r,int q);
[DllImport(GLLIB)] public static extern void glTexCoord4iv (int[] v);
[DllImport(GLLIB)] public static extern void glTexCoord4s (short s,short t,short r,short q);
[DllImport(GLLIB)] public static extern void glTexCoord4sv (short[] v);
[DllImport(GLLIB)] public static extern void glTexCoordPointer (int size,uint type,int stride,IntPtr pointer);
[DllImport(GLLIB)] public static extern void glTexEnvf (uint target,uint pname,float param);
[DllImport(GLLIB)] public static extern void glTexEnvfv (uint target,uint pname,float[] _params);
[DllImport(GLLIB)] public static extern void glTexEnvi (uint target,uint pname,int param);
[DllImport(GLLIB)] public static extern void glTexEnviv (uint target,uint pname,int[] _params);
[DllImport(GLLIB)] public static extern void glTexGend (uint coord,uint pname,double param);
[DllImport(GLLIB)] public static extern void glTexGendv (uint coord,uint pname,double[] _params);
[DllImport(GLLIB)] public static extern void glTexGenf (uint coord,uint pname,float param);
[DllImport(GLLIB)] public static extern void glTexGenfv (uint coord,uint pname,float[] _params);
[DllImport(GLLIB)] public static extern void glTexGeni (uint coord,uint pname,int param);
[DllImport(GLLIB)] public static extern void glTexGeniv (uint coord,uint pname,int[] _params);
[DllImport(GLLIB)] public static extern void glTexImage1D (uint target,int level,int internalformat,int width,int border,uint format,uint type,IntPtr pixels);
[DllImport(GLLIB)] public static extern void glTexImage2D (uint target,int level,int internalformat,int width,int height,int border,uint format,uint type,IntPtr pixels);
[DllImport(GLLIB)] public static extern void glTexParameterf (uint target,uint pname,float param);
[DllImport(GLLIB)] public static extern void glTexParameterfv (uint target,uint pname,float[] _params);
[DllImport(GLLIB)] public static extern void glTexParameteri (uint target,uint pname,int param);
[DllImport(GLLIB)] public static extern void glTexParameteriv (uint target,uint pname,int[] _params);
[DllImport(GLLIB)] public static extern void glTexSubImage1D (uint target,int level,int xoffset,int width,uint format,uint type,IntPtr pixels);
[DllImport(GLLIB)] public static extern void glTexSubImage2D (uint target,int level,int xoffset,int yoffset,int width,int height,uint format,uint type,IntPtr pixels);
[DllImport(GLLIB)] public static extern void glTranslated (double x,double y,double z);
[DllImport(GLLIB)] public static extern void glTranslatef (float x,float y,float z);
[DllImport(GLLIB)] public static extern void glVertex2d (double x,double y);
[DllImport(GLLIB)] public static extern void glVertex2dv (double[] v);
[DllImport(GLLIB)] public static extern void glVertex2f (float x,float y);
[DllImport(GLLIB)] public static extern void glVertex2fv (float[] v);
[DllImport(GLLIB)] public static extern void glVertex2i (int x,int y);
[DllImport(GLLIB)] public static extern void glVertex2iv (int[] v);
[DllImport(GLLIB)] public static extern void glVertex2s (short x,short y);
[DllImport(GLLIB)] public static extern void glVertex2sv (short[] v);
[DllImport(GLLIB)] public static extern void glVertex3d (double x,double y,double z);
[DllImport(GLLIB)] public static extern void glVertex3dv (double[] v);
[DllImport(GLLIB)] public static extern void glVertex3f (float x,float y,float z);
[DllImport(GLLIB)] public static extern void glVertex3fv (float[] v);
[DllImport(GLLIB)] public static extern void glVertex3i (int x,int y,int z);
[DllImport(GLLIB)] public static extern void glVertex3iv (int[] v);
[DllImport(GLLIB)] public static extern void glVertex3s (short x,short y,short z);
[DllImport(GLLIB)] public static extern void glVertex3sv (short[] v);
[DllImport(GLLIB)] public static extern void glVertex4d (double x,double y,double z,double w);
[DllImport(GLLIB)] public static extern void glVertex4dv (double[] v);
[DllImport(GLLIB)] public static extern void glVertex4f (float x,float y,float z,float w);
[DllImport(GLLIB)] public static extern void glVertex4fv (float[] v);
[DllImport(GLLIB)] public static extern void glVertex4i (int x,int y,int z,int w);
[DllImport(GLLIB)] public static extern void glVertex4iv (int[] v);
[DllImport(GLLIB)] public static extern void glVertex4s (short x,short y,short z,short w);
[DllImport(GLLIB)] public static extern void glVertex4sv (short[] v);
[DllImport(GLLIB)] public static extern void glVertexPointer (int size,uint type,int stride,IntPtr pointer);
[DllImport(GLLIB)] public static extern void glViewport (int x,int y,int width,int height);
/* ---------------------------------- GLU ---------------------------------- */
/* this is where we can safely include GLU */
/* ----------------------------- GL_VERSION_1_2 ---------------------------- */
public const uint GL_VERSION_1_2 = 1;
public const uint GL_SMOOTH_POINT_SIZE_RANGE = 0x0B12;
public const uint GL_SMOOTH_POINT_SIZE_GRANULARITY = 0x0B13;
public const uint GL_SMOOTH_LINE_WIDTH_RANGE = 0x0B22;
public const uint GL_SMOOTH_LINE_WIDTH_GRANULARITY = 0x0B23;
public const uint GL_UNSIGNED_BYTE_3_3_2 = 0x8032;
public const uint GL_UNSIGNED_SHORT_4_4_4_4 = 0x8033;
public const uint GL_UNSIGNED_SHORT_5_5_5_1 = 0x8034;
public const uint GL_UNSIGNED_INT_8_8_8_8 = 0x8035;
public const uint GL_UNSIGNED_INT_10_10_10_2 = 0x8036;
public const uint GL_RESCALE_NORMAL = 0x803A;
public const uint GL_TEXTURE_BINDING_3D = 0x806A;
public const uint GL_PACK_SKIP_IMAGES = 0x806B;
public const uint GL_PACK_IMAGE_HEIGHT = 0x806C;
public const uint GL_UNPACK_SKIP_IMAGES = 0x806D;
public const uint GL_UNPACK_IMAGE_HEIGHT = 0x806E;
public const uint GL_TEXTURE_3D = 0x806F;
public const uint GL_PROXY_TEXTURE_3D = 0x8070;
public const uint GL_TEXTURE_DEPTH = 0x8071;
public const uint GL_TEXTURE_WRAP_R = 0x8072;
public const uint GL_MAX_3D_TEXTURE_SIZE = 0x8073;
public const uint GL_BGR = 0x80E0;
public const uint GL_BGRA = 0x80E1;
public const uint GL_MAX_ELEMENTS_VERTICES = 0x80E8;
public const uint GL_MAX_ELEMENTS_INDICES = 0x80E9;
public const uint GL_CLAMP_TO_EDGE = 0x812F;
public const uint GL_TEXTURE_MIN_LOD = 0x813A;
public const uint GL_TEXTURE_MAX_LOD = 0x813B;
public const uint GL_TEXTURE_BASE_LEVEL = 0x813C;
public const uint GL_TEXTURE_MAX_LEVEL = 0x813D;
public const uint GL_LIGHT_MODEL_COLOR_CONTROL = 0x81F8;
public const uint GL_SINGLE_COLOR = 0x81F9;
public const uint GL_SEPARATE_SPECULAR_COLOR = 0x81FA;
public const uint GL_UNSIGNED_BYTE_2_3_3_REV = 0x8362;
public const uint GL_UNSIGNED_SHORT_5_6_5 = 0x8363;
public const uint GL_UNSIGNED_SHORT_5_6_5_REV = 0x8364;
public const uint GL_UNSIGNED_SHORT_4_4_4_4_REV = 0x8365;
public const uint GL_UNSIGNED_SHORT_1_5_5_5_REV = 0x8366;
public const uint GL_UNSIGNED_INT_8_8_8_8_REV = 0x8367;
public const uint GL_UNSIGNED_INT_2_10_10_10_REV = 0x8368;
public const uint GL_ALIASED_POINT_SIZE_RANGE = 0x846D;
public const uint GL_ALIASED_LINE_WIDTH_RANGE = 0x846E;
public delegate void PFNGLCOPYTEXSUBIMAGE3DPROC( uint target,int level,int xoffset,int yoffset,int zoffset,int x,int y,int width,int height);
public delegate void PFNGLDRAWRANGEELEMENTSPROC( uint mode,uint start,uint end,int count,uint type,IntPtr indices);
public delegate void PFNGLTEXIMAGE3DPROC( uint target,int level,int internalFormat,int width,int height,int depth,int border,uint format,uint type,IntPtr pixels);
public delegate void PFNGLTEXSUBIMAGE3DPROC( uint target,int level,int xoffset,int yoffset,int zoffset,int width,int height,int depth,uint format,uint type,IntPtr pixels);
/* ---------------------------- GL_VERSION_1_2_1 --------------------------- */
public const uint GL_VERSION_1_2_1 = 1;
/* ----------------------------- GL_VERSION_1_3 ---------------------------- */
public const uint GL_VERSION_1_3 = 1;
public const uint GL_MULTISAMPLE = 0x809D;
public const uint GL_SAMPLE_ALPHA_TO_COVERAGE = 0x809E;
public const uint GL_SAMPLE_ALPHA_TO_ONE = 0x809F;
public const uint GL_SAMPLE_COVERAGE = 0x80A0;
public const uint GL_SAMPLE_BUFFERS = 0x80A8;
public const uint GL_SAMPLES = 0x80A9;
public const uint GL_SAMPLE_COVERAGE_VALUE = 0x80AA;
public const uint GL_SAMPLE_COVERAGE_INVERT = 0x80AB;
public const uint GL_CLAMP_TO_BORDER = 0x812D;
public const uint GL_TEXTURE0 = 0x84C0;
public const uint GL_TEXTURE1 = 0x84C1;
public const uint GL_TEXTURE2 = 0x84C2;
public const uint GL_TEXTURE3 = 0x84C3;
public const uint GL_TEXTURE4 = 0x84C4;
public const uint GL_TEXTURE5 = 0x84C5;
public const uint GL_TEXTURE6 = 0x84C6;
public const uint GL_TEXTURE7 = 0x84C7;
public const uint GL_TEXTURE8 = 0x84C8;
public const uint GL_TEXTURE9 = 0x84C9;
public const uint GL_TEXTURE10 = 0x84CA;
public const uint GL_TEXTURE11 = 0x84CB;
public const uint GL_TEXTURE12 = 0x84CC;
public const uint GL_TEXTURE13 = 0x84CD;
public const uint GL_TEXTURE14 = 0x84CE;
public const uint GL_TEXTURE15 = 0x84CF;
public const uint GL_TEXTURE16 = 0x84D0;
public const uint GL_TEXTURE17 = 0x84D1;
public const uint GL_TEXTURE18 = 0x84D2;
public const uint GL_TEXTURE19 = 0x84D3;
public const uint GL_TEXTURE20 = 0x84D4;
public const uint GL_TEXTURE21 = 0x84D5;
public const uint GL_TEXTURE22 = 0x84D6;
public const uint GL_TEXTURE23 = 0x84D7;
public const uint GL_TEXTURE24 = 0x84D8;
public const uint GL_TEXTURE25 = 0x84D9;
public const uint GL_TEXTURE26 = 0x84DA;
public const uint GL_TEXTURE27 = 0x84DB;
public const uint GL_TEXTURE28 = 0x84DC;
public const uint GL_TEXTURE29 = 0x84DD;
public const uint GL_TEXTURE30 = 0x84DE;
public const uint GL_TEXTURE31 = 0x84DF;
public const uint GL_ACTIVE_TEXTURE = 0x84E0;
public const uint GL_CLIENT_ACTIVE_TEXTURE = 0x84E1;
public const uint GL_MAX_TEXTURE_UNITS = 0x84E2;
public const uint GL_TRANSPOSE_MODELVIEW_MATRIX = 0x84E3;
public const uint GL_TRANSPOSE_PROJECTION_MATRIX = 0x84E4;
public const uint GL_TRANSPOSE_TEXTURE_MATRIX = 0x84E5;
public const uint GL_TRANSPOSE_COLOR_MATRIX = 0x84E6;
public const uint GL_SUBTRACT = 0x84E7;
public const uint GL_COMPRESSED_ALPHA = 0x84E9;
public const uint GL_COMPRESSED_LUMINANCE = 0x84EA;
public const uint GL_COMPRESSED_LUMINANCE_ALPHA = 0x84EB;
public const uint GL_COMPRESSED_INTENSITY = 0x84EC;
public const uint GL_COMPRESSED_RGB = 0x84ED;
public const uint GL_COMPRESSED_RGBA = 0x84EE;
public const uint GL_TEXTURE_COMPRESSION_HINT = 0x84EF;
public const uint GL_NORMAL_MAP = 0x8511;
public const uint GL_REFLECTION_MAP = 0x8512;
public const uint GL_TEXTURE_CUBE_MAP = 0x8513;
public const uint GL_TEXTURE_BINDING_CUBE_MAP = 0x8514;
public const uint GL_TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515;
public const uint GL_TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516;
public const uint GL_TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517;
public const uint GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518;
public const uint GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519;
public const uint GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851A;
public const uint GL_PROXY_TEXTURE_CUBE_MAP = 0x851B;
public const uint GL_MAX_CUBE_MAP_TEXTURE_SIZE = 0x851C;
public const uint GL_COMBINE = 0x8570;
public const uint GL_COMBINE_RGB = 0x8571;
public const uint GL_COMBINE_ALPHA = 0x8572;
public const uint GL_RGB_SCALE = 0x8573;
public const uint GL_ADD_SIGNED = 0x8574;
public const uint GL_INTERPOLATE = 0x8575;
public const uint GL_CONSTANT = 0x8576;
public const uint GL_PRIMARY_COLOR = 0x8577;
public const uint GL_PREVIOUS = 0x8578;
public const uint GL_SOURCE0_RGB = 0x8580;
public const uint GL_SOURCE1_RGB = 0x8581;
public const uint GL_SOURCE2_RGB = 0x8582;
public const uint GL_SOURCE0_ALPHA = 0x8588;
public const uint GL_SOURCE1_ALPHA = 0x8589;
public const uint GL_SOURCE2_ALPHA = 0x858A;
public const uint GL_OPERAND0_RGB = 0x8590;
public const uint GL_OPERAND1_RGB = 0x8591;
public const uint GL_OPERAND2_RGB = 0x8592;
public const uint GL_OPERAND0_ALPHA = 0x8598;
public const uint GL_OPERAND1_ALPHA = 0x8599;
public const uint GL_OPERAND2_ALPHA = 0x859A;
public const uint GL_TEXTURE_COMPRESSED_IMAGE_SIZE = 0x86A0;
public const uint GL_TEXTURE_COMPRESSED = 0x86A1;
public const uint GL_NUM_COMPRESSED_TEXTURE_FORMATS = 0x86A2;
public const uint GL_COMPRESSED_TEXTURE_FORMATS = 0x86A3;
public const uint GL_DOT3_RGB = 0x86AE;
public const uint GL_DOT3_RGBA = 0x86AF;
public const uint GL_MULTISAMPLE_BIT = 0x20000000;
public delegate void PFNGLACTIVETEXTUREPROC( uint texture);
public delegate void PFNGLCLIENTACTIVETEXTUREPROC( uint texture);
public delegate void PFNGLCOMPRESSEDTEXIMAGE1DPROC( uint target,int level,uint internalformat,int width,int border,int imageSize,IntPtr data);
public delegate void PFNGLCOMPRESSEDTEXIMAGE2DPROC( uint target,int level,uint internalformat,int width,int height,int border,int imageSize,IntPtr data);
public delegate void PFNGLCOMPRESSEDTEXIMAGE3DPROC( uint target,int level,uint internalformat,int width,int height,int depth,int border,int imageSize,IntPtr data);
public delegate void PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC( uint target,int level,int xoffset,int width,uint format,int imageSize,IntPtr data);
public delegate void PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC( uint target,int level,int xoffset,int yoffset,int width,int height,uint format,int imageSize,IntPtr data);
public delegate void PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC( uint target,int level,int xoffset,int yoffset,int zoffset,int width,int height,int depth,uint format,int imageSize,IntPtr data);
public delegate void PFNGLGETCOMPRESSEDTEXIMAGEPROC( uint target,int lod,IntPtr img);
public delegate void PFNGLLOADTRANSPOSEMATRIXDPROC( double[] m);
public delegate void PFNGLLOADTRANSPOSEMATRIXFPROC( float[] m);
public delegate void PFNGLMULTTRANSPOSEMATRIXDPROC( double[] m);
public delegate void PFNGLMULTTRANSPOSEMATRIXFPROC( float[] m);
public delegate void PFNGLMULTITEXCOORD1DPROC( uint target,double s);
public delegate void PFNGLMULTITEXCOORD1DVPROC( uint target,double[] v);
public delegate void PFNGLMULTITEXCOORD1FPROC( uint target,float s);
public delegate void PFNGLMULTITEXCOORD1FVPROC( uint target,float[] v);
public delegate void PFNGLMULTITEXCOORD1IPROC( uint target,int s);
public delegate void PFNGLMULTITEXCOORD1IVPROC( uint target,int[] v);
public delegate void PFNGLMULTITEXCOORD1SPROC( uint target,short s);
public delegate void PFNGLMULTITEXCOORD1SVPROC( uint target,short[] v);
public delegate void PFNGLMULTITEXCOORD2DPROC( uint target,double s,double t);
public delegate void PFNGLMULTITEXCOORD2DVPROC( uint target,double[] v);
public delegate void PFNGLMULTITEXCOORD2FPROC( uint target,float s,float t);
public delegate void PFNGLMULTITEXCOORD2FVPROC( uint target,float[] v);
public delegate void PFNGLMULTITEXCOORD2IPROC( uint target,int s,int t);
public delegate void PFNGLMULTITEXCOORD2IVPROC( uint target,int[] v);
public delegate void PFNGLMULTITEXCOORD2SPROC( uint target,short s,short t);
public delegate void PFNGLMULTITEXCOORD2SVPROC( uint target,short[] v);
public delegate void PFNGLMULTITEXCOORD3DPROC( uint target,double s,double t,double r);
public delegate void PFNGLMULTITEXCOORD3DVPROC( uint target,double[] v);
public delegate void PFNGLMULTITEXCOORD3FPROC( uint target,float s,float t,float r);
public delegate void PFNGLMULTITEXCOORD3FVPROC( uint target,float[] v);
public delegate void PFNGLMULTITEXCOORD3IPROC( uint target,int s,int t,int r);
public delegate void PFNGLMULTITEXCOORD3IVPROC( uint target,int[] v);
public delegate void PFNGLMULTITEXCOORD3SPROC( uint target,short s,short t,short r);
public delegate void PFNGLMULTITEXCOORD3SVPROC( uint target,short[] v);
public delegate void PFNGLMULTITEXCOORD4DPROC( uint target,double s,double t,double r,double q);
public delegate void PFNGLMULTITEXCOORD4DVPROC( uint target,double[] v);
public delegate void PFNGLMULTITEXCOORD4FPROC( uint target,float s,float t,float r,float q);
public delegate void PFNGLMULTITEXCOORD4FVPROC( uint target,float[] v);
public delegate void PFNGLMULTITEXCOORD4IPROC( uint target,int s,int t,int r,int q);
public delegate void PFNGLMULTITEXCOORD4IVPROC( uint target,int[] v);
public delegate void PFNGLMULTITEXCOORD4SPROC( uint target,short s,short t,short r,short q);
public delegate void PFNGLMULTITEXCOORD4SVPROC( uint target,short[] v);
public delegate void PFNGLSAMPLECOVERAGEPROC( float value,bool invert);
/* ----------------------------- GL_VERSION_1_4 ---------------------------- */
public const uint GL_VERSION_1_4 = 1;
public const uint GL_BLEND_DST_RGB = 0x80C8;
public const uint GL_BLEND_SRC_RGB = 0x80C9;
public const uint GL_BLEND_DST_ALPHA = 0x80CA;
public const uint GL_BLEND_SRC_ALPHA = 0x80CB;
public const uint GL_POINT_SIZE_MIN = 0x8126;
public const uint GL_POINT_SIZE_MAX = 0x8127;
public const uint GL_POINT_FADE_THRESHOLD_SIZE = 0x8128;
public const uint GL_POINT_DISTANCE_ATTENUATION = 0x8129;
public const uint GL_GENERATE_MIPMAP = 0x8191;
public const uint GL_GENERATE_MIPMAP_HINT = 0x8192;
public const uint GL_DEPTH_COMPONENT16 = 0x81A5;
public const uint GL_DEPTH_COMPONENT24 = 0x81A6;
public const uint GL_DEPTH_COMPONENT32 = 0x81A7;
public const uint GL_MIRRORED_REPEAT = 0x8370;
public const uint GL_FOG_COORDINATE_SOURCE = 0x8450;
public const uint GL_FOG_COORDINATE = 0x8451;
public const uint GL_FRAGMENT_DEPTH = 0x8452;
public const uint GL_CURRENT_FOG_COORDINATE = 0x8453;
public const uint GL_FOG_COORDINATE_ARRAY_TYPE = 0x8454;
public const uint GL_FOG_COORDINATE_ARRAY_STRIDE = 0x8455;
public const uint GL_FOG_COORDINATE_ARRAY_POINTER = 0x8456;
public const uint GL_FOG_COORDINATE_ARRAY = 0x8457;
public const uint GL_COLOR_SUM = 0x8458;
public const uint GL_CURRENT_SECONDARY_COLOR = 0x8459;
public const uint GL_SECONDARY_COLOR_ARRAY_SIZE = 0x845A;
public const uint GL_SECONDARY_COLOR_ARRAY_TYPE = 0x845B;
public const uint GL_SECONDARY_COLOR_ARRAY_STRIDE = 0x845C;
public const uint GL_SECONDARY_COLOR_ARRAY_POINTER = 0x845D;
public const uint GL_SECONDARY_COLOR_ARRAY = 0x845E;
public const uint GL_MAX_TEXTURE_LOD_BIAS = 0x84FD;
public const uint GL_TEXTURE_FILTER_CONTROL = 0x8500;
public const uint GL_TEXTURE_LOD_BIAS = 0x8501;
public const uint GL_INCR_WRAP = 0x8507;
public const uint GL_DECR_WRAP = 0x8508;
public const uint GL_TEXTURE_DEPTH_SIZE = 0x884A;
public const uint GL_DEPTH_TEXTURE_MODE = 0x884B;
public const uint GL_TEXTURE_COMPARE_MODE = 0x884C;
public const uint GL_TEXTURE_COMPARE_FUNC = 0x884D;
public const uint GL_COMPARE_R_TO_TEXTURE = 0x884E;
public delegate void PFNGLBLENDCOLORPROC( float red,float green,float blue,float alpha);
public delegate void PFNGLBLENDEQUATIONPROC( uint mode);
public delegate void PFNGLBLENDFUNCSEPARATEPROC( uint sfactorRGB,uint dfactorRGB,uint sfactorAlpha,uint dfactorAlpha);
public delegate void PFNGLFOGCOORDPOINTERPROC( uint type,int stride,IntPtr pointer);
public delegate void PFNGLFOGCOORDDPROC( double coord);
public delegate void PFNGLFOGCOORDDVPROC( double[] coord);
public delegate void PFNGLFOGCOORDFPROC( float coord);
public delegate void PFNGLFOGCOORDFVPROC( float[] coord);
public delegate void PFNGLMULTIDRAWARRAYSPROC( uint mode,IntPtr first,IntPtr count,int primcount);
public delegate void PFNGLMULTIDRAWELEMENTSPROC( uint mode,IntPtr count,uint type,IntPtr indices,int primcount);
public delegate void PFNGLPOINTPARAMETERFPROC( uint pname,float param);
public delegate void PFNGLPOINTPARAMETERFVPROC( uint pname,float[] _params);
public delegate void PFNGLPOINTPARAMETERIPROC( uint pname,int param);
public delegate void PFNGLPOINTPARAMETERIVPROC( uint pname,int[] _params);
public delegate void PFNGLSECONDARYCOLOR3BPROC( sbyte red,sbyte green,sbyte blue);
public delegate void PFNGLSECONDARYCOLOR3BVPROC( byte[] v);
public delegate void PFNGLSECONDARYCOLOR3DPROC( double red,double green,double blue);
public delegate void PFNGLSECONDARYCOLOR3DVPROC( double[] v);
public delegate void PFNGLSECONDARYCOLOR3FPROC( float red,float green,float blue);
public delegate void PFNGLSECONDARYCOLOR3FVPROC( float[] v);
public delegate void PFNGLSECONDARYCOLOR3IPROC( int red,int green,int blue);
public delegate void PFNGLSECONDARYCOLOR3IVPROC( int[] v);
public delegate void PFNGLSECONDARYCOLOR3SPROC( short red,short green,short blue);
public delegate void PFNGLSECONDARYCOLOR3SVPROC( short[] v);
public delegate void PFNGLSECONDARYCOLOR3UBPROC( byte red,byte green,byte blue);
public delegate void PFNGLSECONDARYCOLOR3UBVPROC( byte[] v);
public delegate void PFNGLSECONDARYCOLOR3UIPROC( uint red,uint green,uint blue);
public delegate void PFNGLSECONDARYCOLOR3UIVPROC( uint[] v);
public delegate void PFNGLSECONDARYCOLOR3USPROC( ushort red,ushort green,ushort blue);
public delegate void PFNGLSECONDARYCOLOR3USVPROC( ushort[] v);
public delegate void PFNGLSECONDARYCOLORPOINTERPROC( int size,uint type,int stride,IntPtr pointer);
public delegate void PFNGLWINDOWPOS2DPROC( double x,double y);
public delegate void PFNGLWINDOWPOS2DVPROC( double[] p);
public delegate void PFNGLWINDOWPOS2FPROC( float x,float y);
public delegate void PFNGLWINDOWPOS2FVPROC( float[] p);
public delegate void PFNGLWINDOWPOS2IPROC( int x,int y);
public delegate void PFNGLWINDOWPOS2IVPROC( int[] p);
public delegate void PFNGLWINDOWPOS2SPROC( short x,short y);
public delegate void PFNGLWINDOWPOS2SVPROC( short[] p);
public delegate void PFNGLWINDOWPOS3DPROC( double x,double y,double z);
public delegate void PFNGLWINDOWPOS3DVPROC( double[] p);
public delegate void PFNGLWINDOWPOS3FPROC( float x,float y,float z);
public delegate void PFNGLWINDOWPOS3FVPROC( float[] p);
public delegate void PFNGLWINDOWPOS3IPROC( int x,int y,int z);
public delegate void PFNGLWINDOWPOS3IVPROC( int[] p);
public delegate void PFNGLWINDOWPOS3SPROC( short x,short y,short z);
public delegate void PFNGLWINDOWPOS3SVPROC( short[] p);
/* ----------------------------- GL_VERSION_1_5 ---------------------------- */
public const uint GL_VERSION_1_5 = 1;
public const uint GL_FOG_COORD_SRC = GL_FOG_COORDINATE_SOURCE;
public const uint GL_FOG_COORD = GL_FOG_COORDINATE;
public const uint GL_FOG_COORD_ARRAY = GL_FOG_COORDINATE_ARRAY;
public const uint GL_SRC0_RGB = GL_SOURCE0_RGB;
public const uint GL_FOG_COORD_ARRAY_POINTER = GL_FOG_COORDINATE_ARRAY_POINTER;
public const uint GL_FOG_COORD_ARRAY_TYPE = GL_FOG_COORDINATE_ARRAY_TYPE;
public const uint GL_SRC1_ALPHA = GL_SOURCE1_ALPHA;
public const uint GL_CURRENT_FOG_COORD = GL_CURRENT_FOG_COORDINATE;
public const uint GL_FOG_COORD_ARRAY_STRIDE = GL_FOG_COORDINATE_ARRAY_STRIDE;
public const uint GL_SRC0_ALPHA = GL_SOURCE0_ALPHA;
public const uint GL_SRC1_RGB = GL_SOURCE1_RGB;
public const uint GL_FOG_COORD_ARRAY_BUFFER_BINDING = GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING;
public const uint GL_SRC2_ALPHA = GL_SOURCE2_ALPHA;
public const uint GL_SRC2_RGB = GL_SOURCE2_RGB;
public const uint GL_BUFFER_SIZE = 0x8764;
public const uint GL_BUFFER_USAGE = 0x8765;
public const uint GL_QUERY_COUNTER_BITS = 0x8864;
public const uint GL_CURRENT_QUERY = 0x8865;
public const uint GL_QUERY_RESULT = 0x8866;
public const uint GL_QUERY_RESULT_AVAILABLE = 0x8867;
public const uint GL_ARRAY_BUFFER = 0x8892;
public const uint GL_ELEMENT_ARRAY_BUFFER = 0x8893;
public const uint GL_ARRAY_BUFFER_BINDING = 0x8894;
public const uint GL_ELEMENT_ARRAY_BUFFER_BINDING = 0x8895;
public const uint GL_VERTEX_ARRAY_BUFFER_BINDING = 0x8896;
public const uint GL_NORMAL_ARRAY_BUFFER_BINDING = 0x8897;
public const uint GL_COLOR_ARRAY_BUFFER_BINDING = 0x8898;
public const uint GL_INDEX_ARRAY_BUFFER_BINDING = 0x8899;
public const uint GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING = 0x889A;
public const uint GL_EDGE_FLAG_ARRAY_BUFFER_BINDING = 0x889B;
public const uint GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING = 0x889C;
public const uint GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING = 0x889D;
public const uint GL_WEIGHT_ARRAY_BUFFER_BINDING = 0x889E;
public const uint GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889F;
public const uint GL_READ_ONLY = 0x88B8;
public const uint GL_WRITE_ONLY = 0x88B9;
public const uint GL_READ_WRITE = 0x88BA;
public const uint GL_BUFFER_ACCESS = 0x88BB;
public const uint GL_BUFFER_MAPPED = 0x88BC;
public const uint GL_BUFFER_MAP_POINTER = 0x88BD;
public const uint GL_STREAM_DRAW = 0x88E0;
public const uint GL_STREAM_READ = 0x88E1;
public const uint GL_STREAM_COPY = 0x88E2;
public const uint GL_STATIC_DRAW = 0x88E4;
public const uint GL_STATIC_READ = 0x88E5;
public const uint GL_STATIC_COPY = 0x88E6;
public const uint GL_DYNAMIC_DRAW = 0x88E8;
public const uint GL_DYNAMIC_READ = 0x88E9;
public const uint GL_DYNAMIC_COPY = 0x88EA;
public const uint GL_SAMPLES_PASSED = 0x8914;
public delegate void PFNGLBEGINQUERYPROC( uint target,uint id);
public delegate void PFNGLBINDBUFFERPROC( uint target,uint buffer);
public delegate void PFNGLBUFFERDATAPROC( uint target,IntPtr size,IntPtr  data,uint usage);
public delegate void PFNGLBUFFERSUBDATAPROC( uint target,IntPtr offset,IntPtr size,IntPtr  data);
public delegate void PFNGLDELETEBUFFERSPROC( int n,uint[]  buffers);
public delegate void PFNGLDELETEQUERIESPROC( int n,uint[]  ids);
public delegate void PFNGLENDQUERYPROC( uint target);
public delegate void PFNGLGENBUFFERSPROC( int n,IntPtr buffers);
public delegate void PFNGLGENQUERIESPROC( int n,IntPtr ids);
public delegate void PFNGLGETBUFFERPARAMETERIVPROC( uint target,uint pname,IntPtr _params);
public delegate void PFNGLGETBUFFERPOINTERVPROC( uint target,uint pname,IntPtr _params);
public delegate void PFNGLGETBUFFERSUBDATAPROC( uint target,IntPtr offset,IntPtr size,IntPtr data);
public delegate void PFNGLGETQUERYOBJECTIVPROC( uint id,uint pname,IntPtr _params);
public delegate void PFNGLGETQUERYOBJECTUIVPROC( uint id,uint pname,IntPtr _params);
public delegate void PFNGLGETQUERYIVPROC( uint target,uint pname,IntPtr _params);
[return: System.Runtime.InteropServices.MarshalAs(System.Runtime.InteropServices.UnmanagedType.I1)]public delegate bool PFNGLISBUFFERPROC( uint buffer);
[return: System.Runtime.InteropServices.MarshalAs(System.Runtime.InteropServices.UnmanagedType.I1)]public delegate bool PFNGLISQUERYPROC( uint id);
public delegate IntPtr PFNGLMAPBUFFERPROC( uint target,uint access);
[return: System.Runtime.InteropServices.MarshalAs(System.Runtime.InteropServices.UnmanagedType.I1)]public delegate bool PFNGLUNMAPBUFFERPROC( uint target);
/* ----------------------------- GL_VERSION_2_0 ---------------------------- */
public const uint GL_VERSION_2_0 = 1;
public const uint GL_BLEND_EQUATION_RGB = GL_BLEND_EQUATION;
public const uint GL_VERTEX_ATTRIB_ARRAY_ENABLED = 0x8622;
public const uint GL_VERTEX_ATTRIB_ARRAY_SIZE = 0x8623;
public const uint GL_VERTEX_ATTRIB_ARRAY_STRIDE = 0x8624;
public const uint GL_VERTEX_ATTRIB_ARRAY_TYPE = 0x8625;
public const uint GL_CURRENT_VERTEX_ATTRIB = 0x8626;
public const uint GL_VERTEX_PROGRAM_POINT_SIZE = 0x8642;
public const uint GL_VERTEX_PROGRAM_TWO_SIDE = 0x8643;
public const uint GL_VERTEX_ATTRIB_ARRAY_POINTER = 0x8645;
public const uint GL_STENCIL_BACK_FUNC = 0x8800;
public const uint GL_STENCIL_BACK_FAIL = 0x8801;
public const uint GL_STENCIL_BACK_PASS_DEPTH_FAIL = 0x8802;
public const uint GL_STENCIL_BACK_PASS_DEPTH_PASS = 0x8803;
public const uint GL_MAX_DRAW_BUFFERS = 0x8824;
public const uint GL_DRAW_BUFFER0 = 0x8825;
public const uint GL_DRAW_BUFFER1 = 0x8826;
public const uint GL_DRAW_BUFFER2 = 0x8827;
public const uint GL_DRAW_BUFFER3 = 0x8828;
public const uint GL_DRAW_BUFFER4 = 0x8829;
public const uint GL_DRAW_BUFFER5 = 0x882A;
public const uint GL_DRAW_BUFFER6 = 0x882B;
public const uint GL_DRAW_BUFFER7 = 0x882C;
public const uint GL_DRAW_BUFFER8 = 0x882D;
public const uint GL_DRAW_BUFFER9 = 0x882E;
public const uint GL_DRAW_BUFFER10 = 0x882F;
public const uint GL_DRAW_BUFFER11 = 0x8830;
public const uint GL_DRAW_BUFFER12 = 0x8831;
public const uint GL_DRAW_BUFFER13 = 0x8832;
public const uint GL_DRAW_BUFFER14 = 0x8833;
public const uint GL_DRAW_BUFFER15 = 0x8834;
public const uint GL_BLEND_EQUATION_ALPHA = 0x883D;
public const uint GL_POINT_SPRITE = 0x8861;
public const uint GL_COORD_REPLACE = 0x8862;
public const uint GL_MAX_VERTEX_ATTRIBS = 0x8869;
public const uint GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = 0x886A;
public const uint GL_MAX_TEXTURE_COORDS = 0x8871;
public const uint GL_MAX_TEXTURE_IMAGE_UNITS = 0x8872;
public const uint GL_FRAGMENT_SHADER = 0x8B30;
public const uint GL_VERTEX_SHADER = 0x8B31;
public const uint GL_MAX_FRAGMENT_UNIFORM_COMPONENTS = 0x8B49;
public const uint GL_MAX_VERTEX_UNIFORM_COMPONENTS = 0x8B4A;
public const uint GL_MAX_VARYING_FLOATS = 0x8B4B;
public const uint GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x8B4C;
public const uint GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8B4D;
public const uint GL_SHADER_TYPE = 0x8B4F;
public const uint GL_FLOAT_VEC2 = 0x8B50;
public const uint GL_FLOAT_VEC3 = 0x8B51;
public const uint GL_FLOAT_VEC4 = 0x8B52;
public const uint GL_INT_VEC2 = 0x8B53;
public const uint GL_INT_VEC3 = 0x8B54;
public const uint GL_INT_VEC4 = 0x8B55;
public const uint GL_BOOL = 0x8B56;
public const uint GL_BOOL_VEC2 = 0x8B57;
public const uint GL_BOOL_VEC3 = 0x8B58;
public const uint GL_BOOL_VEC4 = 0x8B59;
public const uint GL_FLOAT_MAT2 = 0x8B5A;
public const uint GL_FLOAT_MAT3 = 0x8B5B;
public const uint GL_FLOAT_MAT4 = 0x8B5C;
public const uint GL_SAMPLER_1D = 0x8B5D;
public const uint GL_SAMPLER_2D = 0x8B5E;
public const uint GL_SAMPLER_3D = 0x8B5F;
public const uint GL_SAMPLER_CUBE = 0x8B60;
public const uint GL_SAMPLER_1D_SHADOW = 0x8B61;
public const uint GL_SAMPLER_2D_SHADOW = 0x8B62;
public const uint GL_DELETE_STATUS = 0x8B80;
public const uint GL_COMPILE_STATUS = 0x8B81;
public const uint GL_LINK_STATUS = 0x8B82;
public const uint GL_VALIDATE_STATUS = 0x8B83;
public const uint GL_INFO_LOG_LENGTH = 0x8B84;
public const uint GL_ATTACHED_SHADERS = 0x8B85;
public const uint GL_ACTIVE_UNIFORMS = 0x8B86;
public const uint GL_ACTIVE_UNIFORM_MAX_LENGTH = 0x8B87;
public const uint GL_SHADER_SOURCE_LENGTH = 0x8B88;
public const uint GL_ACTIVE_ATTRIBUTES = 0x8B89;
public const uint GL_ACTIVE_ATTRIBUTE_MAX_LENGTH = 0x8B8A;
public const uint GL_FRAGMENT_SHADER_DERIVATIVE_HINT = 0x8B8B;
public const uint GL_SHADING_LANGUAGE_VERSION = 0x8B8C;
public const uint GL_CURRENT_PROGRAM = 0x8B8D;
public const uint GL_POINT_SPRITE_COORD_ORIGIN = 0x8CA0;
public const uint GL_LOWER_LEFT = 0x8CA1;
public const uint GL_UPPER_LEFT = 0x8CA2;
public const uint GL_STENCIL_BACK_REF = 0x8CA3;
public const uint GL_STENCIL_BACK_VALUE_MASK = 0x8CA4;
public const uint GL_STENCIL_BACK_WRITEMASK = 0x8CA5;
public delegate void PFNGLATTACHSHADERPROC( uint program,uint shader);
public delegate void PFNGLBINDATTRIBLOCATIONPROC( uint program,uint index,string  name);
public delegate void PFNGLBLENDEQUATIONSEPARATEPROC( uint arg_0,uint arg_1);
public delegate void PFNGLCOMPILESHADERPROC( uint shader);
public delegate uint PFNGLCREATEPROGRAMPROC( );
public delegate uint PFNGLCREATESHADERPROC( uint type);
public delegate void PFNGLDELETEPROGRAMPROC( uint program);
public delegate void PFNGLDELETESHADERPROC( uint shader);
public delegate void PFNGLDETACHSHADERPROC( uint program,uint shader);
public delegate void PFNGLDISABLEVERTEXATTRIBARRAYPROC( uint arg_0);
public delegate void PFNGLDRAWBUFFERSPROC( int n,uint[]  bufs);
public delegate void PFNGLENABLEVERTEXATTRIBARRAYPROC( uint arg_0);
public delegate void PFNGLGETACTIVEATTRIBPROC( uint program,uint index,int maxLength,IntPtr length,IntPtr size,IntPtr type,IntPtr name);
public delegate void PFNGLGETACTIVEUNIFORMPROC( uint program,uint index,int maxLength,IntPtr length,IntPtr size,IntPtr type,IntPtr name);
public delegate void PFNGLGETATTACHEDSHADERSPROC( uint program,int maxCount,IntPtr count,IntPtr shaders);
public delegate int PFNGLGETATTRIBLOCATIONPROC( uint program,string  name);
public delegate void PFNGLGETPROGRAMINFOLOGPROC( uint program,int bufSize,IntPtr length,IntPtr infoLog);
public delegate void PFNGLGETPROGRAMIVPROC( uint program,uint pname,IntPtr param);
public delegate void PFNGLGETSHADERINFOLOGPROC( uint shader,int bufSize,IntPtr length,IntPtr infoLog);
public delegate void PFNGLGETSHADERSOURCEPROC( uint obj,int maxLength,IntPtr length,IntPtr source);
public delegate void PFNGLGETSHADERIVPROC( uint shader,uint pname,IntPtr param);
public delegate int PFNGLGETUNIFORMLOCATIONPROC( uint program,string  name);
public delegate void PFNGLGETUNIFORMFVPROC( uint program,int location,IntPtr _params);
public delegate void PFNGLGETUNIFORMIVPROC( uint program,int location,IntPtr _params);
public delegate void PFNGLGETVERTEXATTRIBPOINTERVPROC( uint arg_0,uint arg_1,IntPtr arg_2);
public delegate void PFNGLGETVERTEXATTRIBDVPROC( uint arg_0,uint arg_1,IntPtr arg_2);
public delegate void PFNGLGETVERTEXATTRIBFVPROC( uint arg_0,uint arg_1,IntPtr arg_2);
public delegate void PFNGLGETVERTEXATTRIBIVPROC( uint arg_0,uint arg_1,IntPtr arg_2);
[return: System.Runtime.InteropServices.MarshalAs(System.Runtime.InteropServices.UnmanagedType.I1)]public delegate bool PFNGLISPROGRAMPROC( uint program);
[return: System.Runtime.InteropServices.MarshalAs(System.Runtime.InteropServices.UnmanagedType.I1)]public delegate bool PFNGLISSHADERPROC( uint shader);
public delegate void PFNGLLINKPROGRAMPROC( uint program);
public delegate void PFNGLSHADERSOURCEPROC( uint shader,int count,string[]  strings,int[]  lengths);
public delegate void PFNGLSTENCILFUNCSEPARATEPROC( uint frontfunc,uint backfunc,int _ref,uint mask);
public delegate void PFNGLSTENCILMASKSEPARATEPROC( uint arg_0,uint arg_1);
public delegate void PFNGLSTENCILOPSEPARATEPROC( uint face,uint sfail,uint dpfail,uint dppass);
public delegate void PFNGLUNIFORM1FPROC( int location,float v0);
public delegate void PFNGLUNIFORM1FVPROC( int location,int count,float[]  value);
public delegate void PFNGLUNIFORM1IPROC( int location,int v0);
public delegate void PFNGLUNIFORM1IVPROC( int location,int count,int[]  value);
public delegate void PFNGLUNIFORM2FPROC( int location,float v0,float v1);
public delegate void PFNGLUNIFORM2FVPROC( int location,int count,float[]  value);
public delegate void PFNGLUNIFORM2IPROC( int location,int v0,int v1);
public delegate void PFNGLUNIFORM2IVPROC( int location,int count,int[]  value);
public delegate void PFNGLUNIFORM3FPROC( int location,float v0,float v1,float v2);
public delegate void PFNGLUNIFORM3FVPROC( int location,int count,float[]  value);
public delegate void PFNGLUNIFORM3IPROC( int location,int v0,int v1,int v2);
public delegate void PFNGLUNIFORM3IVPROC( int location,int count,int[]  value);
public delegate void PFNGLUNIFORM4FPROC( int location,float v0,float v1,float v2,float v3);
public delegate void PFNGLUNIFORM4FVPROC( int location,int count,float[]  value);
public delegate void PFNGLUNIFORM4IPROC( int location,int v0,int v1,int v2,int v3);
public delegate void PFNGLUNIFORM4IVPROC( int location,int count,int[]  value);
public delegate void PFNGLUNIFORMMATRIX2FVPROC( int location,int count,bool transpose,float[]  value);
public delegate void PFNGLUNIFORMMATRIX3FVPROC( int location,int count,bool transpose,float[]  value);
public delegate void PFNGLUNIFORMMATRIX4FVPROC( int location,int count,bool transpose,float[]  value);
public delegate void PFNGLUSEPROGRAMPROC( uint program);
public delegate void PFNGLVALIDATEPROGRAMPROC( uint program);
public delegate void PFNGLVERTEXATTRIB1DPROC( uint index,double x);
public delegate void PFNGLVERTEXATTRIB1DVPROC( uint index,double[]  v);
public delegate void PFNGLVERTEXATTRIB1FPROC( uint index,float x);
public delegate void PFNGLVERTEXATTRIB1FVPROC( uint index,float[]  v);
public delegate void PFNGLVERTEXATTRIB1SPROC( uint index,short x);
public delegate void PFNGLVERTEXATTRIB1SVPROC( uint index,short[]  v);
public delegate void PFNGLVERTEXATTRIB2DPROC( uint index,double x,double y);
public delegate void PFNGLVERTEXATTRIB2DVPROC( uint index,double[]  v);
public delegate void PFNGLVERTEXATTRIB2FPROC( uint index,float x,float y);
public delegate void PFNGLVERTEXATTRIB2FVPROC( uint index,float[]  v);
public delegate void PFNGLVERTEXATTRIB2SPROC( uint index,short x,short y);
public delegate void PFNGLVERTEXATTRIB2SVPROC( uint index,short[]  v);
public delegate void PFNGLVERTEXATTRIB3DPROC( uint index,double x,double y,double z);
public delegate void PFNGLVERTEXATTRIB3DVPROC( uint index,double[]  v);
public delegate void PFNGLVERTEXATTRIB3FPROC( uint index,float x,float y,float z);
public delegate void PFNGLVERTEXATTRIB3FVPROC( uint index,float[]  v);
public delegate void PFNGLVERTEXATTRIB3SPROC( uint index,short x,short y,short z);
public delegate void PFNGLVERTEXATTRIB3SVPROC( uint index,short[]  v);
public delegate void PFNGLVERTEXATTRIB4NBVPROC( uint index,byte[]  v);
public delegate void PFNGLVERTEXATTRIB4NIVPROC( uint index,int[]  v);
public delegate void PFNGLVERTEXATTRIB4NSVPROC( uint index,short[]  v);
public delegate void PFNGLVERTEXATTRIB4NUBPROC( uint index,byte x,byte y,byte z,byte w);
public delegate void PFNGLVERTEXATTRIB4NUBVPROC( uint index,byte[]  v);
public delegate void PFNGLVERTEXATTRIB4NUIVPROC( uint index,uint[]  v);
public delegate void PFNGLVERTEXATTRIB4NUSVPROC( uint index,ushort[]  v);
public delegate void PFNGLVERTEXATTRIB4BVPROC( uint index,byte[]  v);
public delegate void PFNGLVERTEXATTRIB4DPROC( uint index,double x,double y,double z,double w);
public delegate void PFNGLVERTEXATTRIB4DVPROC( uint index,double[]  v);
public delegate void PFNGLVERTEXATTRIB4FPROC( uint index,float x,float y,float z,float w);
public delegate void PFNGLVERTEXATTRIB4FVPROC( uint index,float[]  v);
public delegate void PFNGLVERTEXATTRIB4IVPROC( uint index,int[]  v);
public delegate void PFNGLVERTEXATTRIB4SPROC( uint index,short x,short y,short z,short w);
public delegate void PFNGLVERTEXATTRIB4SVPROC( uint index,short[]  v);
public delegate void PFNGLVERTEXATTRIB4UBVPROC( uint index,byte[]  v);
public delegate void PFNGLVERTEXATTRIB4UIVPROC( uint index,uint[]  v);
public delegate void PFNGLVERTEXATTRIB4USVPROC( uint index,ushort[]  v);
public delegate void PFNGLVERTEXATTRIBPOINTERPROC( uint index,int size,uint type,bool normalized,int stride,IntPtr  pointer);
/* ----------------------------- GL_VERSION_2_1 ---------------------------- */
public const uint GL_VERSION_2_1 = 1;
public const uint GL_CURRENT_RASTER_SECONDARY_COLOR = 0x845F;
public const uint GL_PIXEL_PACK_BUFFER = 0x88EB;
public const uint GL_PIXEL_UNPACK_BUFFER = 0x88EC;
public const uint GL_PIXEL_PACK_BUFFER_BINDING = 0x88ED;
public const uint GL_PIXEL_UNPACK_BUFFER_BINDING = 0x88EF;
public const uint GL_FLOAT_MAT2x3 = 0x8B65;
public const uint GL_FLOAT_MAT2x4 = 0x8B66;
public const uint GL_FLOAT_MAT3x2 = 0x8B67;
public const uint GL_FLOAT_MAT3x4 = 0x8B68;
public const uint GL_FLOAT_MAT4x2 = 0x8B69;
public const uint GL_FLOAT_MAT4x3 = 0x8B6A;
public const uint GL_SRGB = 0x8C40;
public const uint GL_SRGB8 = 0x8C41;
public const uint GL_SRGB_ALPHA = 0x8C42;
public const uint GL_SRGB8_ALPHA8 = 0x8C43;
public const uint GL_SLUMINANCE_ALPHA = 0x8C44;
public const uint GL_SLUMINANCE8_ALPHA8 = 0x8C45;
public const uint GL_SLUMINANCE = 0x8C46;
public const uint GL_SLUMINANCE8 = 0x8C47;
public const uint GL_COMPRESSED_SRGB = 0x8C48;
public const uint GL_COMPRESSED_SRGB_ALPHA = 0x8C49;
public const uint GL_COMPRESSED_SLUMINANCE = 0x8C4A;
public const uint GL_COMPRESSED_SLUMINANCE_ALPHA = 0x8C4B;
public delegate void PFNGLUNIFORMMATRIX2X3FVPROC( int location,int count,bool transpose,float[] value);
public delegate void PFNGLUNIFORMMATRIX2X4FVPROC( int location,int count,bool transpose,float[] value);
public delegate void PFNGLUNIFORMMATRIX3X2FVPROC( int location,int count,bool transpose,float[] value);
public delegate void PFNGLUNIFORMMATRIX3X4FVPROC( int location,int count,bool transpose,float[] value);
public delegate void PFNGLUNIFORMMATRIX4X2FVPROC( int location,int count,bool transpose,float[] value);
public delegate void PFNGLUNIFORMMATRIX4X3FVPROC( int location,int count,bool transpose,float[] value);
/* ----------------------------- GL_VERSION_3_0 ---------------------------- */
public const uint GL_VERSION_3_0 = 1;
public const uint GL_MAX_CLIP_DISTANCES = GL_MAX_CLIP_PLANES;
public const uint GL_CLIP_DISTANCE5 = GL_CLIP_PLANE5;
public const uint GL_CLIP_DISTANCE1 = GL_CLIP_PLANE1;
public const uint GL_CLIP_DISTANCE3 = GL_CLIP_PLANE3;
public const uint GL_COMPARE_REF_TO_TEXTURE = GL_COMPARE_R_TO_TEXTURE_ARB;
public const uint GL_CLIP_DISTANCE0 = GL_CLIP_PLANE0;
public const uint GL_CLIP_DISTANCE4 = GL_CLIP_PLANE4;
public const uint GL_CLIP_DISTANCE2 = GL_CLIP_PLANE2;
public const uint GL_MAX_VARYING_COMPONENTS = GL_MAX_VARYING_FLOATS;
public const uint GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT = 0x0001;
public const uint GL_MAJOR_VERSION = 0x821B;
public const uint GL_MINOR_VERSION = 0x821C;
public const uint GL_NUM_EXTENSIONS = 0x821D;
public const uint GL_CONTEXT_FLAGS = 0x821E;
public const uint GL_DEPTH_BUFFER = 0x8223;
public const uint GL_STENCIL_BUFFER = 0x8224;
public const uint GL_COMPRESSED_RED = 0x8225;
public const uint GL_COMPRESSED_RG = 0x8226;
public const uint GL_RGBA32F = 0x8814;
public const uint GL_RGB32F = 0x8815;
public const uint GL_RGBA16F = 0x881A;
public const uint GL_RGB16F = 0x881B;
public const uint GL_VERTEX_ATTRIB_ARRAY_INTEGER = 0x88FD;
public const uint GL_MAX_ARRAY_TEXTURE_LAYERS = 0x88FF;
public const uint GL_MIN_PROGRAM_TEXEL_OFFSET = 0x8904;
public const uint GL_MAX_PROGRAM_TEXEL_OFFSET = 0x8905;
public const uint GL_CLAMP_VERTEX_COLOR = 0x891A;
public const uint GL_CLAMP_FRAGMENT_COLOR = 0x891B;
public const uint GL_CLAMP_READ_COLOR = 0x891C;
public const uint GL_FIXED_ONLY = 0x891D;
public const uint GL_TEXTURE_RED_TYPE = 0x8C10;
public const uint GL_TEXTURE_GREEN_TYPE = 0x8C11;
public const uint GL_TEXTURE_BLUE_TYPE = 0x8C12;
public const uint GL_TEXTURE_ALPHA_TYPE = 0x8C13;
public const uint GL_TEXTURE_LUMINANCE_TYPE = 0x8C14;
public const uint GL_TEXTURE_INTENSITY_TYPE = 0x8C15;
public const uint GL_TEXTURE_DEPTH_TYPE = 0x8C16;
public const uint GL_UNSIGNED_NORMALIZED = 0x8C17;
public const uint GL_TEXTURE_1D_ARRAY = 0x8C18;
public const uint GL_PROXY_TEXTURE_1D_ARRAY = 0x8C19;
public const uint GL_TEXTURE_2D_ARRAY = 0x8C1A;
public const uint GL_PROXY_TEXTURE_2D_ARRAY = 0x8C1B;
public const uint GL_TEXTURE_BINDING_1D_ARRAY = 0x8C1C;
public const uint GL_TEXTURE_BINDING_2D_ARRAY = 0x8C1D;
public const uint GL_R11F_G11F_B10F = 0x8C3A;
public const uint GL_UNSIGNED_INT_10F_11F_11F_REV = 0x8C3B;
public const uint GL_RGB9_E5 = 0x8C3D;
public const uint GL_UNSIGNED_INT_5_9_9_9_REV = 0x8C3E;
public const uint GL_TEXTURE_SHARED_SIZE = 0x8C3F;
public const uint GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH = 0x8C76;
public const uint GL_TRANSFORM_FEEDBACK_BUFFER_MODE = 0x8C7F;
public const uint GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = 0x8C80;
public const uint GL_TRANSFORM_FEEDBACK_VARYINGS = 0x8C83;
public const uint GL_TRANSFORM_FEEDBACK_BUFFER_START = 0x8C84;
public const uint GL_TRANSFORM_FEEDBACK_BUFFER_SIZE = 0x8C85;
public const uint GL_PRIMITIVES_GENERATED = 0x8C87;
public const uint GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 0x8C88;
public const uint GL_RASTERIZER_DISCARD = 0x8C89;
public const uint GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = 0x8C8A;
public const uint GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = 0x8C8B;
public const uint GL_INTERLEAVED_ATTRIBS = 0x8C8C;
public const uint GL_SEPARATE_ATTRIBS = 0x8C8D;
public const uint GL_TRANSFORM_FEEDBACK_BUFFER = 0x8C8E;
public const uint GL_TRANSFORM_FEEDBACK_BUFFER_BINDING = 0x8C8F;
public const uint GL_RGBA32UI = 0x8D70;
public const uint GL_RGB32UI = 0x8D71;
public const uint GL_RGBA16UI = 0x8D76;
public const uint GL_RGB16UI = 0x8D77;
public const uint GL_RGBA8UI = 0x8D7C;
public const uint GL_RGB8UI = 0x8D7D;
public const uint GL_RGBA32I = 0x8D82;
public const uint GL_RGB32I = 0x8D83;
public const uint GL_RGBA16I = 0x8D88;
public const uint GL_RGB16I = 0x8D89;
public const uint GL_RGBA8I = 0x8D8E;
public const uint GL_RGB8I = 0x8D8F;
public const uint GL_RED_INTEGER = 0x8D94;
public const uint GL_GREEN_INTEGER = 0x8D95;
public const uint GL_BLUE_INTEGER = 0x8D96;
public const uint GL_ALPHA_INTEGER = 0x8D97;
public const uint GL_RGB_INTEGER = 0x8D98;
public const uint GL_RGBA_INTEGER = 0x8D99;
public const uint GL_BGR_INTEGER = 0x8D9A;
public const uint GL_BGRA_INTEGER = 0x8D9B;
public const uint GL_SAMPLER_1D_ARRAY = 0x8DC0;
public const uint GL_SAMPLER_2D_ARRAY = 0x8DC1;
public const uint GL_SAMPLER_1D_ARRAY_SHADOW = 0x8DC3;
public const uint GL_SAMPLER_2D_ARRAY_SHADOW = 0x8DC4;
public const uint GL_SAMPLER_CUBE_SHADOW = 0x8DC5;
public const uint GL_UNSIGNED_INT_VEC2 = 0x8DC6;
public const uint GL_UNSIGNED_INT_VEC3 = 0x8DC7;
public const uint GL_UNSIGNED_INT_VEC4 = 0x8DC8;
public const uint GL_INT_SAMPLER_1D = 0x8DC9;
public const uint GL_INT_SAMPLER_2D = 0x8DCA;
public const uint GL_INT_SAMPLER_3D = 0x8DCB;
public const uint GL_INT_SAMPLER_CUBE = 0x8DCC;
public const uint GL_INT_SAMPLER_1D_ARRAY = 0x8DCE;
public const uint GL_INT_SAMPLER_2D_ARRAY = 0x8DCF;
public const uint GL_UNSIGNED_INT_SAMPLER_1D = 0x8DD1;
public const uint GL_UNSIGNED_INT_SAMPLER_2D = 0x8DD2;
public const uint GL_UNSIGNED_INT_SAMPLER_3D = 0x8DD3;
public const uint GL_UNSIGNED_INT_SAMPLER_CUBE = 0x8DD4;
public const uint GL_UNSIGNED_INT_SAMPLER_1D_ARRAY = 0x8DD6;
public const uint GL_UNSIGNED_INT_SAMPLER_2D_ARRAY = 0x8DD7;
public const uint GL_QUERY_WAIT = 0x8E13;
public const uint GL_QUERY_NO_WAIT = 0x8E14;
public const uint GL_QUERY_BY_REGION_WAIT = 0x8E15;
public const uint GL_QUERY_BY_REGION_NO_WAIT = 0x8E16;
public delegate void PFNGLBEGINCONDITIONALRENDERPROC( uint arg_0,uint arg_1);
public delegate void PFNGLBEGINTRANSFORMFEEDBACKPROC( uint arg_0);
public delegate void PFNGLBINDFRAGDATALOCATIONPROC( uint arg_0,uint arg_1,string arg_2);
public delegate void PFNGLCLAMPCOLORPROC( uint arg_0,uint arg_1);
public delegate void PFNGLCLEARBUFFERFIPROC( uint arg_0,int arg_1,float arg_2,int arg_3);
public delegate void PFNGLCLEARBUFFERFVPROC( uint arg_0,int arg_1,float[] arg_2);
public delegate void PFNGLCLEARBUFFERIVPROC( uint arg_0,int arg_1,int[] arg_2);
public delegate void PFNGLCLEARBUFFERUIVPROC( uint arg_0,int arg_1,uint[] arg_2);
public delegate void PFNGLCOLORMASKIPROC( uint arg_0,bool arg_1,bool arg_2,bool arg_3,bool arg_4);
public delegate void PFNGLDISABLEIPROC( uint arg_0,uint arg_1);
public delegate void PFNGLENABLEIPROC( uint arg_0,uint arg_1);
public delegate void PFNGLENDCONDITIONALRENDERPROC( );
public delegate void PFNGLENDTRANSFORMFEEDBACKPROC( );
public delegate void PFNGLGETBOOLEANI_VPROC( uint arg_0,uint arg_1,IntPtr arg_2);
public delegate int PFNGLGETFRAGDATALOCATIONPROC( uint arg_0,string arg_1);
public delegate IntPtr PFNGLGETSTRINGIPROC( uint arg_0,uint arg_1);
public delegate void PFNGLGETTEXPARAMETERIIVPROC( uint arg_0,uint arg_1,IntPtr arg_2);
public delegate void PFNGLGETTEXPARAMETERIUIVPROC( uint arg_0,uint arg_1,IntPtr arg_2);
public delegate void PFNGLGETTRANSFORMFEEDBACKVARYINGPROC( uint arg_0,uint arg_1,int arg_2,IntPtr arg_3,IntPtr arg_4,IntPtr arg_5,IntPtr arg_6);
public delegate void PFNGLGETUNIFORMUIVPROC( uint arg_0,int arg_1,IntPtr arg_2);
public delegate void PFNGLGETVERTEXATTRIBIIVPROC( uint arg_0,uint arg_1,IntPtr arg_2);
public delegate void PFNGLGETVERTEXATTRIBIUIVPROC( uint arg_0,uint arg_1,IntPtr arg_2);
[return: System.Runtime.InteropServices.MarshalAs(System.Runtime.InteropServices.UnmanagedType.I1)]public delegate bool PFNGLISENABLEDIPROC( uint arg_0,uint arg_1);
public delegate void PFNGLTEXPARAMETERIIVPROC( uint arg_0,uint arg_1,int[] arg_2);
public delegate void PFNGLTEXPARAMETERIUIVPROC( uint arg_0,uint arg_1,uint[] arg_2);
public delegate void PFNGLTRANSFORMFEEDBACKVARYINGSPROC( uint arg_0,int arg_1,string[]  arg_2,uint arg_3);
public delegate void PFNGLUNIFORM1UIPROC( int arg_0,uint arg_1);
public delegate void PFNGLUNIFORM1UIVPROC( int arg_0,int arg_1,uint[] arg_2);
public delegate void PFNGLUNIFORM2UIPROC( int arg_0,uint arg_1,uint arg_2);
public delegate void PFNGLUNIFORM2UIVPROC( int arg_0,int arg_1,uint[] arg_2);
public delegate void PFNGLUNIFORM3UIPROC( int arg_0,uint arg_1,uint arg_2,uint arg_3);
public delegate void PFNGLUNIFORM3UIVPROC( int arg_0,int arg_1,uint[] arg_2);
public delegate void PFNGLUNIFORM4UIPROC( int arg_0,uint arg_1,uint arg_2,uint arg_3,uint arg_4);
public delegate void PFNGLUNIFORM4UIVPROC( int arg_0,int arg_1,uint[] arg_2);
public delegate void PFNGLVERTEXATTRIBI1IPROC( uint arg_0,int arg_1);
public delegate void PFNGLVERTEXATTRIBI1IVPROC( uint arg_0,int[] arg_1);
public delegate void PFNGLVERTEXATTRIBI1UIPROC( uint arg_0,uint arg_1);
public delegate void PFNGLVERTEXATTRIBI1UIVPROC( uint arg_0,uint[] arg_1);
public delegate void PFNGLVERTEXATTRIBI2IPROC( uint arg_0,int arg_1,int arg_2);
public delegate void PFNGLVERTEXATTRIBI2IVPROC( uint arg_0,int[] arg_1);
public delegate void PFNGLVERTEXATTRIBI2UIPROC( uint arg_0,uint arg_1,uint arg_2);
public delegate void PFNGLVERTEXATTRIBI2UIVPROC( uint arg_0,uint[] arg_1);
public delegate void PFNGLVERTEXATTRIBI3IPROC( uint arg_0,int arg_1,int arg_2,int arg_3);
public delegate void PFNGLVERTEXATTRIBI3IVPROC( uint arg_0,int[] arg_1);
public delegate void PFNGLVERTEXATTRIBI3UIPROC( uint arg_0,uint arg_1,uint arg_2,uint arg_3);
public delegate void PFNGLVERTEXATTRIBI3UIVPROC( uint arg_0,uint[] arg_1);
public delegate void PFNGLVERTEXATTRIBI4BVPROC( uint arg_0,byte[] arg_1);
public delegate void PFNGLVERTEXATTRIBI4IPROC( uint arg_0,int arg_1,int arg_2,int arg_3,int arg_4);
public delegate void PFNGLVERTEXATTRIBI4IVPROC( uint arg_0,int[] arg_1);
public delegate void PFNGLVERTEXATTRIBI4SVPROC( uint arg_0,short[] arg_1);
public delegate void PFNGLVERTEXATTRIBI4UBVPROC( uint arg_0,byte[] arg_1);
public delegate void PFNGLVERTEXATTRIBI4UIPROC( uint arg_0,uint arg_1,uint arg_2,uint arg_3,uint arg_4);
public delegate void PFNGLVERTEXATTRIBI4UIVPROC( uint arg_0,uint[] arg_1);
public delegate void PFNGLVERTEXATTRIBI4USVPROC( uint arg_0,ushort[] arg_1);
public delegate void PFNGLVERTEXATTRIBIPOINTERPROC( uint arg_0,int arg_1,uint arg_2,int arg_3,IntPtr arg_4);
/* ----------------------------- GL_VERSION_3_1 ---------------------------- */
public const uint GL_VERSION_3_1 = 1;
public const uint GL_TEXTURE_RECTANGLE = 0x84F5;
public const uint GL_TEXTURE_BINDING_RECTANGLE = 0x84F6;
public const uint GL_PROXY_TEXTURE_RECTANGLE = 0x84F7;
public const uint GL_MAX_RECTANGLE_TEXTURE_SIZE = 0x84F8;
public const uint GL_SAMPLER_2D_RECT = 0x8B63;
public const uint GL_SAMPLER_2D_RECT_SHADOW = 0x8B64;
public const uint GL_TEXTURE_BUFFER = 0x8C2A;
public const uint GL_MAX_TEXTURE_BUFFER_SIZE = 0x8C2B;
public const uint GL_TEXTURE_BINDING_BUFFER = 0x8C2C;
public const uint GL_TEXTURE_BUFFER_DATA_STORE_BINDING = 0x8C2D;
public const uint GL_TEXTURE_BUFFER_FORMAT = 0x8C2E;
public const uint GL_SAMPLER_BUFFER = 0x8DC2;
public const uint GL_INT_SAMPLER_2D_RECT = 0x8DCD;
public const uint GL_INT_SAMPLER_BUFFER = 0x8DD0;
public const uint GL_UNSIGNED_INT_SAMPLER_2D_RECT = 0x8DD5;
public const uint GL_UNSIGNED_INT_SAMPLER_BUFFER = 0x8DD8;
public const uint GL_RED_SNORM = 0x8F90;
public const uint GL_RG_SNORM = 0x8F91;
public const uint GL_RGB_SNORM = 0x8F92;
public const uint GL_RGBA_SNORM = 0x8F93;
public const uint GL_R8_SNORM = 0x8F94;
public const uint GL_RG8_SNORM = 0x8F95;
public const uint GL_RGB8_SNORM = 0x8F96;
public const uint GL_RGBA8_SNORM = 0x8F97;
public const uint GL_R16_SNORM = 0x8F98;
public const uint GL_RG16_SNORM = 0x8F99;
public const uint GL_RGB16_SNORM = 0x8F9A;
public const uint GL_RGBA16_SNORM = 0x8F9B;
public const uint GL_SIGNED_NORMALIZED = 0x8F9C;
public const uint GL_PRIMITIVE_RESTART = 0x8F9D;
public const uint GL_PRIMITIVE_RESTART_INDEX = 0x8F9E;
public const uint GL_BUFFER_ACCESS_FLAGS = 0x911F;
public const uint GL_BUFFER_MAP_LENGTH = 0x9120;
public const uint GL_BUFFER_MAP_OFFSET = 0x9121;
public delegate void PFNGLDRAWARRAYSINSTANCEDPROC( uint arg_0,int arg_1,int arg_2,int arg_3);
public delegate void PFNGLDRAWELEMENTSINSTANCEDPROC( uint arg_0,int arg_1,uint arg_2,IntPtr arg_3,int arg_4);
public delegate void PFNGLPRIMITIVERESTARTINDEXPROC( uint arg_0);
public delegate void PFNGLTEXBUFFERPROC( uint arg_0,uint arg_1,uint arg_2);
/* ----------------------------- GL_VERSION_3_2 ---------------------------- */
public const uint GL_VERSION_3_2 = 1;
public const uint GL_CONTEXT_CORE_PROFILE_BIT = 0x00000001;
public const uint GL_CONTEXT_COMPATIBILITY_PROFILE_BIT = 0x00000002;
public const uint GL_LINES_ADJACENCY = 0x000A;
public const uint GL_LINE_STRIP_ADJACENCY = 0x000B;
public const uint GL_TRIANGLES_ADJACENCY = 0x000C;
public const uint GL_TRIANGLE_STRIP_ADJACENCY = 0x000D;
public const uint GL_PROGRAM_POINT_SIZE = 0x8642;
public const uint GL_GEOMETRY_VERTICES_OUT = 0x8916;
public const uint GL_GEOMETRY_INPUT_TYPE = 0x8917;
public const uint GL_GEOMETRY_OUTPUT_TYPE = 0x8918;
public const uint GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS = 0x8C29;
public const uint GL_FRAMEBUFFER_ATTACHMENT_LAYERED = 0x8DA7;
public const uint GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS = 0x8DA8;
public const uint GL_GEOMETRY_SHADER = 0x8DD9;
public const uint GL_MAX_GEOMETRY_UNIFORM_COMPONENTS = 0x8DDF;
public const uint GL_MAX_GEOMETRY_OUTPUT_VERTICES = 0x8DE0;
public const uint GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS = 0x8DE1;
public const uint GL_MAX_VERTEX_OUTPUT_COMPONENTS = 0x9122;
public const uint GL_MAX_GEOMETRY_INPUT_COMPONENTS = 0x9123;
public const uint GL_MAX_GEOMETRY_OUTPUT_COMPONENTS = 0x9124;
public const uint GL_MAX_FRAGMENT_INPUT_COMPONENTS = 0x9125;
public const uint GL_CONTEXT_PROFILE_MASK = 0x9126;
public delegate void PFNGLFRAMEBUFFERTEXTUREPROC( uint arg_0,uint arg_1,uint arg_2,int arg_3);
public delegate void PFNGLGETBUFFERPARAMETERI64VPROC( uint arg_0,uint arg_1,IntPtr arg_2);
public delegate void PFNGLGETINTEGER64I_VPROC( uint arg_0,uint arg_1,IntPtr arg_2);
/* ----------------------------- GL_VERSION_3_3 ---------------------------- */
public const uint GL_VERSION_3_3 = 1;
public const uint GL_VERTEX_ATTRIB_ARRAY_DIVISOR = 0x88FE;
public const uint GL_ANY_SAMPLES_PASSED = 0x8C2F;
public const uint GL_TEXTURE_SWIZZLE_R = 0x8E42;
public const uint GL_TEXTURE_SWIZZLE_G = 0x8E43;
public const uint GL_TEXTURE_SWIZZLE_B = 0x8E44;
public const uint GL_TEXTURE_SWIZZLE_A = 0x8E45;
public const uint GL_TEXTURE_SWIZZLE_RGBA = 0x8E46;
public const uint GL_RGB10_A2UI = 0x906F;
public delegate void PFNGLVERTEXATTRIBDIVISORPROC( uint index,uint divisor);
/* ----------------------------- GL_VERSION_4_0 ---------------------------- */
public const uint GL_VERSION_4_0 = 1;
public const uint GL_GEOMETRY_SHADER_INVOCATIONS = 0x887F;
public const uint GL_SAMPLE_SHADING = 0x8C36;
public const uint GL_MIN_SAMPLE_SHADING_VALUE = 0x8C37;
public const uint GL_MAX_GEOMETRY_SHADER_INVOCATIONS = 0x8E5A;
public const uint GL_MIN_FRAGMENT_INTERPOLATION_OFFSET = 0x8E5B;
public const uint GL_MAX_FRAGMENT_INTERPOLATION_OFFSET = 0x8E5C;
public const uint GL_FRAGMENT_INTERPOLATION_OFFSET_BITS = 0x8E5D;
public const uint GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET = 0x8E5E;
public const uint GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET = 0x8E5F;
public const uint GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS = 0x8F9F;
public const uint GL_TEXTURE_CUBE_MAP_ARRAY = 0x9009;
public const uint GL_TEXTURE_BINDING_CUBE_MAP_ARRAY = 0x900A;
public const uint GL_PROXY_TEXTURE_CUBE_MAP_ARRAY = 0x900B;
public const uint GL_SAMPLER_CUBE_MAP_ARRAY = 0x900C;
public const uint GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW = 0x900D;
public const uint GL_INT_SAMPLER_CUBE_MAP_ARRAY = 0x900E;
public const uint GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY = 0x900F;
public delegate void PFNGLBLENDEQUATIONSEPARATEIPROC( uint buf,uint modeRGB,uint modeAlpha);
public delegate void PFNGLBLENDEQUATIONIPROC( uint buf,uint mode);
public delegate void PFNGLBLENDFUNCSEPARATEIPROC( uint buf,uint srcRGB,uint dstRGB,uint srcAlpha,uint dstAlpha);
public delegate void PFNGLBLENDFUNCIPROC( uint buf,uint src,uint dst);
public delegate void PFNGLMINSAMPLESHADINGPROC( float value);
/* ----------------------------- GL_VERSION_4_1 ---------------------------- */
public const uint GL_VERSION_4_1 = 1;
/* -------------------------- GL_3DFX_multisample -------------------------- */
public const uint GL_3DFX_multisample = 1;
public const uint GL_MULTISAMPLE_3DFX = 0x86B2;
public const uint GL_SAMPLE_BUFFERS_3DFX = 0x86B3;
public const uint GL_SAMPLES_3DFX = 0x86B4;
public const uint GL_MULTISAMPLE_BIT_3DFX = 0x20000000;
/* ---------------------------- GL_3DFX_tbuffer ---------------------------- */
public const uint GL_3DFX_tbuffer = 1;
public delegate void PFNGLTBUFFERMASK3DFXPROC( uint mask);
/* -------------------- GL_3DFX_texture_compression_FXT1 ------------------- */
public const uint GL_3DFX_texture_compression_FXT1 = 1;
public const uint GL_COMPRESSED_RGB_FXT1_3DFX = 0x86B0;
public const uint GL_COMPRESSED_RGBA_FXT1_3DFX = 0x86B1;
/* ----------------------- GL_AMD_blend_minmax_factor ---------------------- */
public const uint GL_AMD_blend_minmax_factor = 1;
public const uint GL_FACTOR_MIN_AMD = 0x901C;
public const uint GL_FACTOR_MAX_AMD = 0x901D;
/* ----------------------- GL_AMD_conservative_depth ----------------------- */
public const uint GL_AMD_conservative_depth = 1;
/* -------------------------- GL_AMD_debug_output -------------------------- */
public const uint GL_AMD_debug_output = 1;
public const uint GL_MAX_DEBUG_MESSAGE_LENGTH_AMD = 0x9143;
public const uint GL_MAX_DEBUG_LOGGED_MESSAGES_AMD = 0x9144;
public const uint GL_DEBUG_LOGGED_MESSAGES_AMD = 0x9145;
public const uint GL_DEBUG_SEVERITY_HIGH_AMD = 0x9146;
public const uint GL_DEBUG_SEVERITY_MEDIUM_AMD = 0x9147;
public const uint GL_DEBUG_SEVERITY_LOW_AMD = 0x9148;
public const uint GL_DEBUG_CATEGORY_API_ERROR_AMD = 0x9149;
public const uint GL_DEBUG_CATEGORY_WINDOW_SYSTEM_AMD = 0x914A;
public const uint GL_DEBUG_CATEGORY_DEPRECATION_AMD = 0x914B;
public const uint GL_DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD = 0x914C;
public const uint GL_DEBUG_CATEGORY_PERFORMANCE_AMD = 0x914D;
public const uint GL_DEBUG_CATEGORY_SHADER_COMPILER_AMD = 0x914E;
public const uint GL_DEBUG_CATEGORY_APPLICATION_AMD = 0x914F;
public const uint GL_DEBUG_CATEGORY_OTHER_AMD = 0x9150;
public delegate void GLDEBUGPROCAMD( uint id,uint category,uint severity,int length,string  message,IntPtr userParam);
public delegate void PFNGLDEBUGMESSAGECALLBACKAMDPROC( GLDEBUGPROCAMD callback,IntPtr userParam);
public delegate void PFNGLDEBUGMESSAGEENABLEAMDPROC( uint category,uint severity,int count,uint[]  ids,bool enabled);
public delegate void PFNGLDEBUGMESSAGEINSERTAMDPROC( uint category,uint severity,uint id,int length,string  buf);
public delegate uint PFNGLGETDEBUGMESSAGELOGAMDPROC( uint count,int bufsize,IntPtr categories,IntPtr severities,IntPtr ids,IntPtr lengths,IntPtr message);
/* ---------------------- GL_AMD_depth_clamp_separate ---------------------- */
public const uint GL_AMD_depth_clamp_separate = 1;
public const uint GL_DEPTH_CLAMP_NEAR_AMD = 0x901E;
public const uint GL_DEPTH_CLAMP_FAR_AMD = 0x901F;
/* ----------------------- GL_AMD_draw_buffers_blend ----------------------- */
public const uint GL_AMD_draw_buffers_blend = 1;
public delegate void PFNGLBLENDEQUATIONINDEXEDAMDPROC( uint buf,uint mode);
public delegate void PFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC( uint buf,uint modeRGB,uint modeAlpha);
public delegate void PFNGLBLENDFUNCINDEXEDAMDPROC( uint buf,uint src,uint dst);
public delegate void PFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC( uint buf,uint srcRGB,uint dstRGB,uint srcAlpha,uint dstAlpha);
/* ------------------------- GL_AMD_name_gen_delete ------------------------ */
public const uint GL_AMD_name_gen_delete = 1;
public const uint GL_DATA_BUFFER_AMD = 0x9151;
public const uint GL_PERFORMANCE_MONITOR_AMD = 0x9152;
public const uint GL_QUERY_OBJECT_AMD = 0x9153;
public const uint GL_VERTEX_ARRAY_OBJECT_AMD = 0x9154;
public const uint GL_SAMPLER_OBJECT_AMD = 0x9155;
public delegate void PFNGLDELETENAMESAMDPROC( uint identifier,uint num,uint[]  names);
public delegate void PFNGLGENNAMESAMDPROC( uint identifier,uint num,IntPtr names);
[return: System.Runtime.InteropServices.MarshalAs(System.Runtime.InteropServices.UnmanagedType.I1)]public delegate bool PFNGLISNAMEAMDPROC( uint identifier,uint name);
/* ----------------------- GL_AMD_performance_monitor ---------------------- */
public const uint GL_AMD_performance_monitor = 1;
//public const uint GL_UNSIGNED_INT = 0x1405;
//public const uint GL_FLOAT = 0x1406;
public const uint GL_COUNTER_TYPE_AMD = 0x8BC0;
public const uint GL_COUNTER_RANGE_AMD = 0x8BC1;
public const uint GL_UNSIGNED_INT64_AMD = 0x8BC2;
public const uint GL_PERCENTAGE_AMD = 0x8BC3;
public const uint GL_PERFMON_RESULT_AVAILABLE_AMD = 0x8BC4;
public const uint GL_PERFMON_RESULT_SIZE_AMD = 0x8BC5;
public const uint GL_PERFMON_RESULT_AMD = 0x8BC6;
public delegate void PFNGLBEGINPERFMONITORAMDPROC( uint monitor);
public delegate void PFNGLDELETEPERFMONITORSAMDPROC( int n,IntPtr monitors);
public delegate void PFNGLENDPERFMONITORAMDPROC( uint monitor);
public delegate void PFNGLGENPERFMONITORSAMDPROC( int n,IntPtr monitors);
public delegate void PFNGLGETPERFMONITORCOUNTERDATAAMDPROC( uint monitor,uint pname,int dataSize,IntPtr data,IntPtr bytesWritten);
public delegate void PFNGLGETPERFMONITORCOUNTERINFOAMDPROC( uint group,uint counter,uint pname,IntPtr data);
public delegate void PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC( uint group,uint counter,int bufSize,IntPtr length,IntPtr counterString);
public delegate void PFNGLGETPERFMONITORCOUNTERSAMDPROC( uint group,IntPtr numCounters,IntPtr maxActiveCounters,int countersSize,IntPtr counters);
public delegate void PFNGLGETPERFMONITORGROUPSTRINGAMDPROC( uint group,int bufSize,IntPtr length,IntPtr groupString);
public delegate void PFNGLGETPERFMONITORGROUPSAMDPROC( IntPtr numGroups,int groupsSize,IntPtr groups);
public delegate void PFNGLSELECTPERFMONITORCOUNTERSAMDPROC( uint monitor,bool enable,uint group,int numCounters,IntPtr counterList);
/* ------------------------ GL_AMD_sample_positions ------------------------ */
public const uint GL_AMD_sample_positions = 1;
public const uint GL_SUBSAMPLE_DISTANCE_AMD = 0x883F;
public delegate void PFNGLSETMULTISAMPLEFVAMDPROC( uint pname,uint index,float[]  val);
/* ------------------ GL_AMD_seamless_cubemap_per_texture ------------------ */
public const uint GL_AMD_seamless_cubemap_per_texture = 1;
public const uint GL_TEXTURE_CUBE_MAP_SEAMLESS_ARB = 0x884F;
/* ---------------------- GL_AMD_shader_stencil_export --------------------- */
public const uint GL_AMD_shader_stencil_export = 1;
/* ------------------------ GL_AMD_texture_texture4 ------------------------ */
public const uint GL_AMD_texture_texture4 = 1;
/* --------------- GL_AMD_transform_feedback3_lines_triangles -------------- */
public const uint GL_AMD_transform_feedback3_lines_triangles = 1;
/* -------------------- GL_AMD_vertex_shader_tessellator ------------------- */
public const uint GL_AMD_vertex_shader_tessellator = 1;
public const uint GL_SAMPLER_BUFFER_AMD = 0x9001;
public const uint GL_INT_SAMPLER_BUFFER_AMD = 0x9002;
public const uint GL_UNSIGNED_INT_SAMPLER_BUFFER_AMD = 0x9003;
public const uint GL_TESSELLATION_MODE_AMD = 0x9004;
public const uint GL_TESSELLATION_FACTOR_AMD = 0x9005;
public const uint GL_DISCRETE_AMD = 0x9006;
public const uint GL_CONTINUOUS_AMD = 0x9007;
public delegate void PFNGLTESSELLATIONFACTORAMDPROC( float factor);
public delegate void PFNGLTESSELLATIONMODEAMDPROC( uint mode);
/* ----------------------- GL_APPLE_aux_depth_stencil ---------------------- */
public const uint GL_APPLE_aux_depth_stencil = 1;
public const uint GL_AUX_DEPTH_STENCIL_APPLE = 0x8A14;
/* ------------------------ GL_APPLE_client_storage ------------------------ */
public const uint GL_APPLE_client_storage = 1;
public const uint GL_UNPACK_CLIENT_STORAGE_APPLE = 0x85B2;
/* ------------------------- GL_APPLE_element_array ------------------------ */
public const uint GL_APPLE_element_array = 1;
public const uint GL_ELEMENT_ARRAY_APPLE = 0x8A0C;
public const uint GL_ELEMENT_ARRAY_TYPE_APPLE = 0x8A0D;
public const uint GL_ELEMENT_ARRAY_POINTER_APPLE = 0x8A0E;
public delegate void PFNGLDRAWELEMENTARRAYAPPLEPROC( uint mode,int first,int count);
public delegate void PFNGLDRAWRANGEELEMENTARRAYAPPLEPROC( uint mode,uint start,uint end,int first,int count);
public delegate void PFNGLELEMENTPOINTERAPPLEPROC( uint type,IntPtr  pointer);
public delegate void PFNGLMULTIDRAWELEMENTARRAYAPPLEPROC( uint mode,int[]  first,int[] count,int primcount);
public delegate void PFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC( uint mode,uint start,uint end,int[]  first,int[] count,int primcount);
/* ----------------------------- GL_APPLE_fence ---------------------------- */
public const uint GL_APPLE_fence = 1;
public const uint GL_DRAW_PIXELS_APPLE = 0x8A0A;
public const uint GL_FENCE_APPLE = 0x8A0B;
public delegate void PFNGLDELETEFENCESAPPLEPROC( int n,uint[]  fences);
public delegate void PFNGLFINISHFENCEAPPLEPROC( uint fence);
public delegate void PFNGLFINISHOBJECTAPPLEPROC( uint _object,int name);
public delegate void PFNGLGENFENCESAPPLEPROC( int n,IntPtr fences);
[return: System.Runtime.InteropServices.MarshalAs(System.Runtime.InteropServices.UnmanagedType.I1)]public delegate bool PFNGLISFENCEAPPLEPROC( uint fence);
public delegate void PFNGLSETFENCEAPPLEPROC( uint fence);
[return: System.Runtime.InteropServices.MarshalAs(System.Runtime.InteropServices.UnmanagedType.I1)]public delegate bool PFNGLTESTFENCEAPPLEPROC( uint fence);
[return: System.Runtime.InteropServices.MarshalAs(System.Runtime.InteropServices.UnmanagedType.I1)]public delegate bool PFNGLTESTOBJECTAPPLEPROC( uint _object,uint name);
/* ------------------------- GL_APPLE_float_pixels ------------------------- */
public const uint GL_APPLE_float_pixels = 1;
public const uint GL_HALF_APPLE = 0x140B;
public const uint GL_RGBA_FLOAT32_APPLE = 0x8814;
public const uint GL_RGB_FLOAT32_APPLE = 0x8815;
public const uint GL_ALPHA_FLOAT32_APPLE = 0x8816;
public const uint GL_INTENSITY_FLOAT32_APPLE = 0x8817;
public const uint GL_LUMINANCE_FLOAT32_APPLE = 0x8818;
public const uint GL_LUMINANCE_ALPHA_FLOAT32_APPLE = 0x8819;
public const uint GL_RGBA_FLOAT16_APPLE = 0x881A;
public const uint GL_RGB_FLOAT16_APPLE = 0x881B;
public const uint GL_ALPHA_FLOAT16_APPLE = 0x881C;
public const uint GL_INTENSITY_FLOAT16_APPLE = 0x881D;
public const uint GL_LUMINANCE_FLOAT16_APPLE = 0x881E;
public const uint GL_LUMINANCE_ALPHA_FLOAT16_APPLE = 0x881F;
public const uint GL_COLOR_FLOAT_APPLE = 0x8A0F;
/* ---------------------- GL_APPLE_flush_buffer_range ---------------------- */
public const uint GL_APPLE_flush_buffer_range = 1;
public const uint GL_BUFFER_SERIALIZED_MODIFY_APPLE = 0x8A12;
public const uint GL_BUFFER_FLUSHING_UNMAP_APPLE = 0x8A13;
public delegate void PFNGLBUFFERPARAMETERIAPPLEPROC( uint target,uint pname,int param);
public delegate void PFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC( uint target,IntPtr offset,IntPtr size);
/* ----------------------- GL_APPLE_object_purgeable ----------------------- */
public const uint GL_APPLE_object_purgeable = 1;
public const uint GL_BUFFER_OBJECT_APPLE = 0x85B3;
public const uint GL_RELEASED_APPLE = 0x8A19;
public const uint GL_VOLATILE_APPLE = 0x8A1A;
public const uint GL_RETAINED_APPLE = 0x8A1B;
public const uint GL_UNDEFINED_APPLE = 0x8A1C;
public const uint GL_PURGEABLE_APPLE = 0x8A1D;
public delegate void PFNGLGETOBJECTPARAMETERIVAPPLEPROC( uint objectType,uint name,uint pname,IntPtr _params);
public delegate uint PFNGLOBJECTPURGEABLEAPPLEPROC( uint objectType,uint name,uint option);
public delegate uint PFNGLOBJECTUNPURGEABLEAPPLEPROC( uint objectType,uint name,uint option);
/* ------------------------- GL_APPLE_pixel_buffer ------------------------- */
public const uint GL_APPLE_pixel_buffer = 1;
public const uint GL_MIN_PBUFFER_VIEWPORT_DIMS_APPLE = 0x8A10;
/* ---------------------------- GL_APPLE_rgb_422 --------------------------- */
public const uint GL_APPLE_rgb_422 = 1;
public const uint GL_UNSIGNED_SHORT_8_8_APPLE = 0x85BA;
public const uint GL_UNSIGNED_SHORT_8_8_REV_APPLE = 0x85BB;
public const uint GL_RGB_422_APPLE = 0x8A1F;
/* --------------------------- GL_APPLE_row_bytes -------------------------- */
public const uint GL_APPLE_row_bytes = 1;
public const uint GL_PACK_ROW_BYTES_APPLE = 0x8A15;
public const uint GL_UNPACK_ROW_BYTES_APPLE = 0x8A16;
/* ------------------------ GL_APPLE_specular_vector ----------------------- */
public const uint GL_APPLE_specular_vector = 1;
public const uint GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE = 0x85B0;
/* ------------------------- GL_APPLE_texture_range ------------------------ */
public const uint GL_APPLE_texture_range = 1;
public const uint GL_TEXTURE_RANGE_LENGTH_APPLE = 0x85B7;
public const uint GL_TEXTURE_RANGE_POINTER_APPLE = 0x85B8;
public const uint GL_TEXTURE_STORAGE_HINT_APPLE = 0x85BC;
public const uint GL_STORAGE_PRIVATE_APPLE = 0x85BD;
public const uint GL_STORAGE_CACHED_APPLE = 0x85BE;
public const uint GL_STORAGE_SHARED_APPLE = 0x85BF;
public delegate void PFNGLGETTEXPARAMETERPOINTERVAPPLEPROC( uint target,uint pname,IntPtr _params);
public delegate void PFNGLTEXTURERANGEAPPLEPROC( uint target,int length,IntPtr pointer);
/* ------------------------ GL_APPLE_transform_hint ------------------------ */
public const uint GL_APPLE_transform_hint = 1;
public const uint GL_TRANSFORM_HINT_APPLE = 0x85B1;
/* ---------------------- GL_APPLE_vertex_array_object --------------------- */
public const uint GL_APPLE_vertex_array_object = 1;
public const uint GL_VERTEX_ARRAY_BINDING_APPLE = 0x85B5;
public delegate void PFNGLBINDVERTEXARRAYAPPLEPROC( uint array);
public delegate void PFNGLDELETEVERTEXARRAYSAPPLEPROC( int n,uint[]  arrays);
public delegate void PFNGLGENVERTEXARRAYSAPPLEPROC( int n,uint[]  arrays);
[return: System.Runtime.InteropServices.MarshalAs(System.Runtime.InteropServices.UnmanagedType.I1)]public delegate bool PFNGLISVERTEXARRAYAPPLEPROC( uint array);
/* ---------------------- GL_APPLE_vertex_array_range ---------------------- */
public const uint GL_APPLE_vertex_array_range = 1;
public const uint GL_VERTEX_ARRAY_RANGE_APPLE = 0x851D;
public const uint GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE = 0x851E;
public const uint GL_VERTEX_ARRAY_STORAGE_HINT_APPLE = 0x851F;
public const uint GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_APPLE = 0x8520;
public const uint GL_VERTEX_ARRAY_RANGE_POINTER_APPLE = 0x8521;
public const uint GL_STORAGE_CLIENT_APPLE = 0x85B4;
//public const uint GL_STORAGE_CACHED_APPLE = 0x85BE;
//public const uint GL_STORAGE_SHARED_APPLE = 0x85BF;
public delegate void PFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC( int length,IntPtr pointer);
public delegate void PFNGLVERTEXARRAYPARAMETERIAPPLEPROC( uint pname,int param);
public delegate void PFNGLVERTEXARRAYRANGEAPPLEPROC( int length,IntPtr pointer);
/* ------------------- GL_APPLE_vertex_program_evaluators ------------------ */
public const uint GL_APPLE_vertex_program_evaluators = 1;
public const uint GL_VERTEX_ATTRIB_MAP1_APPLE = 0x8A00;
public const uint GL_VERTEX_ATTRIB_MAP2_APPLE = 0x8A01;
public const uint GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE = 0x8A02;
public const uint GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE = 0x8A03;
public const uint GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE = 0x8A04;
public const uint GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE = 0x8A05;
public const uint GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE = 0x8A06;
public const uint GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE = 0x8A07;
public const uint GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE = 0x8A08;
public const uint GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE = 0x8A09;
public delegate void PFNGLDISABLEVERTEXATTRIBAPPLEPROC( uint index,uint pname);
public delegate void PFNGLENABLEVERTEXATTRIBAPPLEPROC( uint index,uint pname);
[return: System.Runtime.InteropServices.MarshalAs(System.Runtime.InteropServices.UnmanagedType.I1)]public delegate bool PFNGLISVERTEXATTRIBENABLEDAPPLEPROC( uint index,uint pname);
public delegate void PFNGLMAPVERTEXATTRIB1DAPPLEPROC( uint index,uint size,double u1,double u2,int stride,int order,double[]  points);
public delegate void PFNGLMAPVERTEXATTRIB1FAPPLEPROC( uint index,uint size,float u1,float u2,int stride,int order,float[]  points);
public delegate void PFNGLMAPVERTEXATTRIB2DAPPLEPROC( uint index,uint size,double u1,double u2,int ustride,int uorder,double v1,double v2,int vstride,int vorder,double[]  points);
public delegate void PFNGLMAPVERTEXATTRIB2FAPPLEPROC( uint index,uint size,float u1,float u2,int ustride,int uorder,float v1,float v2,int vstride,int vorder,float[]  points);
/* --------------------------- GL_APPLE_ycbcr_422 -------------------------- */
public const uint GL_APPLE_ycbcr_422 = 1;
public const uint GL_YCBCR_422_APPLE = 0x85B9;
//public const uint GL_UNSIGNED_SHORT_8_8_APPLE = 0x85BA;
//public const uint GL_UNSIGNED_SHORT_8_8_REV_APPLE = 0x85BB;
/* ------------------------ GL_ARB_ES2_compatibility ----------------------- */
public const uint GL_ARB_ES2_compatibility = 1;
public const uint GL_FIXED = 0x140C;
public const uint GL_IMPLEMENTATION_COLOR_READ_TYPE = 0x8B9A;
public const uint GL_IMPLEMENTATION_COLOR_READ_FORMAT = 0x8B9B;
public const uint GL_LOW_FLOAT = 0x8DF0;
public const uint GL_MEDIUM_FLOAT = 0x8DF1;
public const uint GL_HIGH_FLOAT = 0x8DF2;
public const uint GL_LOW_INT = 0x8DF3;
public const uint GL_MEDIUM_INT = 0x8DF4;
public const uint GL_HIGH_INT = 0x8DF5;
public const uint GL_SHADER_BINARY_FORMATS = 0x8DF8;
public const uint GL_NUM_SHADER_BINARY_FORMATS = 0x8DF9;
public const uint GL_SHADER_COMPILER = 0x8DFA;
public const uint GL_MAX_VERTEX_UNIFORM_VECTORS = 0x8DFB;
public const uint GL_MAX_VARYING_VECTORS = 0x8DFC;
public const uint GL_MAX_FRAGMENT_UNIFORM_VECTORS = 0x8DFD;
public delegate void PFNGLCLEARDEPTHFPROC( float d);
public delegate void PFNGLDEPTHRANGEFPROC( float n,float f);
public delegate void PFNGLGETSHADERPRECISIONFORMATPROC( uint shadertype,uint precisiontype,IntPtr range,IntPtr precision);
public delegate void PFNGLRELEASESHADERCOMPILERPROC( );
public delegate void PFNGLSHADERBINARYPROC( int count,uint[]  shaders,uint binaryformat,IntPtr binary,int length);
/* ----------------------- GL_ARB_blend_func_extended ---------------------- */
public const uint GL_ARB_blend_func_extended = 1;
public const uint GL_SRC1_COLOR = 0x88F9;
public const uint GL_ONE_MINUS_SRC1_COLOR = 0x88FA;
public const uint GL_ONE_MINUS_SRC1_ALPHA = 0x88FB;
public const uint GL_MAX_DUAL_SOURCE_DRAW_BUFFERS = 0x88FC;
public delegate void PFNGLBINDFRAGDATALOCATIONINDEXEDPROC( uint program,uint colorNumber,uint index,string  name);
public delegate int PFNGLGETFRAGDATAINDEXPROC( uint program,string  name);
/* ---------------------------- GL_ARB_cl_event ---------------------------- */
public const uint GL_ARB_cl_event = 1;
public const uint GL_SYNC_CL_EVENT_ARB = 0x8240;
public const uint GL_SYNC_CL_EVENT_COMPLETE_ARB = 0x8241;
public delegate IntPtr PFNGLCREATESYNCFROMCLEVENTARBPROC( IntPtr context,IntPtr _event,uint flags);
/* ----------------------- GL_ARB_color_buffer_float ----------------------- */
public const uint GL_ARB_color_buffer_float = 1;
public const uint GL_RGBA_FLOAT_MODE_ARB = 0x8820;
public const uint GL_CLAMP_VERTEX_COLOR_ARB = 0x891A;
public const uint GL_CLAMP_FRAGMENT_COLOR_ARB = 0x891B;
public const uint GL_CLAMP_READ_COLOR_ARB = 0x891C;
public const uint GL_FIXED_ONLY_ARB = 0x891D;
public delegate void PFNGLCLAMPCOLORARBPROC( uint target,uint clamp);
/* -------------------------- GL_ARB_compatibility ------------------------- */
public const uint GL_ARB_compatibility = 1;
/* --------------------------- GL_ARB_copy_buffer -------------------------- */
public const uint GL_ARB_copy_buffer = 1;
public const uint GL_COPY_READ_BUFFER = 0x8F36;
public const uint GL_COPY_WRITE_BUFFER = 0x8F37;
public delegate void PFNGLCOPYBUFFERSUBDATAPROC( uint readtarget,uint writetarget,IntPtr readoffset,IntPtr writeoffset,IntPtr size);
/* -------------------------- GL_ARB_debug_output -------------------------- */
public const uint GL_ARB_debug_output = 1;
public const uint GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB = 0x8242;
public const uint GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB = 0x8243;
public const uint GL_DEBUG_CALLBACK_FUNCTION_ARB = 0x8244;
public const uint GL_DEBUG_CALLBACK_USER_PARAM_ARB = 0x8245;
public const uint GL_DEBUG_SOURCE_API_ARB = 0x8246;
public const uint GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB = 0x8247;
public const uint GL_DEBUG_SOURCE_SHADER_COMPILER_ARB = 0x8248;
public const uint GL_DEBUG_SOURCE_THIRD_PARTY_ARB = 0x8249;
public const uint GL_DEBUG_SOURCE_APPLICATION_ARB = 0x824A;
public const uint GL_DEBUG_SOURCE_OTHER_ARB = 0x824B;
public const uint GL_DEBUG_TYPE_ERROR_ARB = 0x824C;
public const uint GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB = 0x824D;
public const uint GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB = 0x824E;
public const uint GL_DEBUG_TYPE_PORTABILITY_ARB = 0x824F;
public const uint GL_DEBUG_TYPE_PERFORMANCE_ARB = 0x8250;
public const uint GL_DEBUG_TYPE_OTHER_ARB = 0x8251;
public const uint GL_MAX_DEBUG_MESSAGE_LENGTH_ARB = 0x9143;
public const uint GL_MAX_DEBUG_LOGGED_MESSAGES_ARB = 0x9144;
public const uint GL_DEBUG_LOGGED_MESSAGES_ARB = 0x9145;
public const uint GL_DEBUG_SEVERITY_HIGH_ARB = 0x9146;
public const uint GL_DEBUG_SEVERITY_MEDIUM_ARB = 0x9147;
public const uint GL_DEBUG_SEVERITY_LOW_ARB = 0x9148;
public delegate void GLDEBUGPROCARB( uint source,uint type,uint id,uint severity,int length,string  message,IntPtr userParam);
public delegate void PFNGLDEBUGMESSAGECALLBACKARBPROC( GLDEBUGPROCARB callback,IntPtr userParam);
public delegate void PFNGLDEBUGMESSAGECONTROLARBPROC( uint source,uint type,uint severity,int count,uint[]  ids,bool enabled);
public delegate void PFNGLDEBUGMESSAGEINSERTARBPROC( uint source,uint type,uint id,uint severity,int length,string  buf);
public delegate uint PFNGLGETDEBUGMESSAGELOGARBPROC( uint count,int bufsize,IntPtr sources,IntPtr types,IntPtr ids,IntPtr severities,IntPtr lengths,IntPtr messageLog);
/* ----------------------- GL_ARB_depth_buffer_float ----------------------- */
public const uint GL_ARB_depth_buffer_float = 1;
public const uint GL_DEPTH_COMPONENT32F = 0x8CAC;
public const uint GL_DEPTH32F_STENCIL8 = 0x8CAD;
public const uint GL_FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DAD;
/* --------------------------- GL_ARB_depth_clamp -------------------------- */
public const uint GL_ARB_depth_clamp = 1;
public const uint GL_DEPTH_CLAMP = 0x864F;
/* -------------------------- GL_ARB_depth_texture ------------------------- */
public const uint GL_ARB_depth_texture = 1;
public const uint GL_DEPTH_COMPONENT16_ARB = 0x81A5;
public const uint GL_DEPTH_COMPONENT24_ARB = 0x81A6;
public const uint GL_DEPTH_COMPONENT32_ARB = 0x81A7;
public const uint GL_TEXTURE_DEPTH_SIZE_ARB = 0x884A;
public const uint GL_DEPTH_TEXTURE_MODE_ARB = 0x884B;
/* -------------------------- GL_ARB_draw_buffers -------------------------- */
public const uint GL_ARB_draw_buffers = 1;
public const uint GL_MAX_DRAW_BUFFERS_ARB = 0x8824;
public const uint GL_DRAW_BUFFER0_ARB = 0x8825;
public const uint GL_DRAW_BUFFER1_ARB = 0x8826;
public const uint GL_DRAW_BUFFER2_ARB = 0x8827;
public const uint GL_DRAW_BUFFER3_ARB = 0x8828;
public const uint GL_DRAW_BUFFER4_ARB = 0x8829;
public const uint GL_DRAW_BUFFER5_ARB = 0x882A;
public const uint GL_DRAW_BUFFER6_ARB = 0x882B;
public const uint GL_DRAW_BUFFER7_ARB = 0x882C;
public const uint GL_DRAW_BUFFER8_ARB = 0x882D;
public const uint GL_DRAW_BUFFER9_ARB = 0x882E;
public const uint GL_DRAW_BUFFER10_ARB = 0x882F;
public const uint GL_DRAW_BUFFER11_ARB = 0x8830;
public const uint GL_DRAW_BUFFER12_ARB = 0x8831;
public const uint GL_DRAW_BUFFER13_ARB = 0x8832;
public const uint GL_DRAW_BUFFER14_ARB = 0x8833;
public const uint GL_DRAW_BUFFER15_ARB = 0x8834;
public delegate void PFNGLDRAWBUFFERSARBPROC( int n,uint[]  bufs);
/* ----------------------- GL_ARB_draw_buffers_blend ----------------------- */
public const uint GL_ARB_draw_buffers_blend = 1;
public delegate void PFNGLBLENDEQUATIONSEPARATEIARBPROC( uint buf,uint modeRGB,uint modeAlpha);
public delegate void PFNGLBLENDEQUATIONIARBPROC( uint buf,uint mode);
public delegate void PFNGLBLENDFUNCSEPARATEIARBPROC( uint buf,uint srcRGB,uint dstRGB,uint srcAlpha,uint dstAlpha);
public delegate void PFNGLBLENDFUNCIARBPROC( uint buf,uint src,uint dst);
/* -------------------- GL_ARB_draw_elements_base_vertex ------------------- */
public const uint GL_ARB_draw_elements_base_vertex = 1;
public delegate void PFNGLDRAWELEMENTSBASEVERTEXPROC( uint mode,int count,uint type,IntPtr indices,int basevertex);
public delegate void PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC( uint mode,int count,uint type,IntPtr  indices,int primcount,int basevertex);
public delegate void PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC( uint mode,uint start,uint end,int count,uint type,IntPtr indices,int basevertex);
public delegate void PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC( uint mode,IntPtr count,uint type,IntPtr indices,int primcount,IntPtr basevertex);
/* -------------------------- GL_ARB_draw_indirect ------------------------- */
public const uint GL_ARB_draw_indirect = 1;
public const uint GL_DRAW_INDIRECT_BUFFER = 0x8F3F;
public const uint GL_DRAW_INDIRECT_BUFFER_BINDING = 0x8F43;
public delegate void PFNGLDRAWARRAYSINDIRECTPROC( uint mode,IntPtr  indirect);
public delegate void PFNGLDRAWELEMENTSINDIRECTPROC( uint mode,uint type,IntPtr  indirect);
/* ------------------------- GL_ARB_draw_instanced ------------------------- */
public const uint GL_ARB_draw_instanced = 1;
/* -------------------- GL_ARB_explicit_attrib_location -------------------- */
public const uint GL_ARB_explicit_attrib_location = 1;
/* ------------------- GL_ARB_fragment_coord_conventions ------------------- */
public const uint GL_ARB_fragment_coord_conventions = 1;
/* ------------------------ GL_ARB_fragment_program ------------------------ */
public const uint GL_ARB_fragment_program = 1;
public const uint GL_FRAGMENT_PROGRAM_ARB = 0x8804;
public const uint GL_PROGRAM_ALU_INSTRUCTIONS_ARB = 0x8805;
public const uint GL_PROGRAM_TEX_INSTRUCTIONS_ARB = 0x8806;
public const uint GL_PROGRAM_TEX_INDIRECTIONS_ARB = 0x8807;
public const uint GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = 0x8808;
public const uint GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = 0x8809;
public const uint GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = 0x880A;
public const uint GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB = 0x880B;
public const uint GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB = 0x880C;
public const uint GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB = 0x880D;
public const uint GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = 0x880E;
public const uint GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = 0x880F;
public const uint GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = 0x8810;
public const uint GL_MAX_TEXTURE_COORDS_ARB = 0x8871;
public const uint GL_MAX_TEXTURE_IMAGE_UNITS_ARB = 0x8872;
/* --------------------- GL_ARB_fragment_program_shadow -------------------- */
public const uint GL_ARB_fragment_program_shadow = 1;
/* ------------------------- GL_ARB_fragment_shader ------------------------ */
public const uint GL_ARB_fragment_shader = 1;
public const uint GL_FRAGMENT_SHADER_ARB = 0x8B30;
public const uint GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB = 0x8B49;
public const uint GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB = 0x8B8B;
/* ----------------------- GL_ARB_framebuffer_object ----------------------- */
public const uint GL_ARB_framebuffer_object = 1;
public const uint GL_INVALID_FRAMEBUFFER_OPERATION = 0x0506;
public const uint GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = 0x8210;
public const uint GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = 0x8211;
public const uint GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE = 0x8212;
public const uint GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = 0x8213;
public const uint GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = 0x8214;
public const uint GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = 0x8215;
public const uint GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = 0x8216;
public const uint GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = 0x8217;
public const uint GL_FRAMEBUFFER_DEFAULT = 0x8218;
public const uint GL_FRAMEBUFFER_UNDEFINED = 0x8219;
public const uint GL_DEPTH_STENCIL_ATTACHMENT = 0x821A;
public const uint GL_INDEX = 0x8222;
public const uint GL_MAX_RENDERBUFFER_SIZE = 0x84E8;
public const uint GL_DEPTH_STENCIL = 0x84F9;
public const uint GL_UNSIGNED_INT_24_8 = 0x84FA;
public const uint GL_DEPTH24_STENCIL8 = 0x88F0;
public const uint GL_TEXTURE_STENCIL_SIZE = 0x88F1;
//public const uint GL_UNSIGNED_NORMALIZED = 0x8C17;
//public const uint GL_SRGB = 0x8C40;
public const uint GL_DRAW_FRAMEBUFFER_BINDING = 0x8CA6;
public const uint GL_FRAMEBUFFER_BINDING = 0x8CA6;
public const uint GL_RENDERBUFFER_BINDING = 0x8CA7;
public const uint GL_READ_FRAMEBUFFER = 0x8CA8;
public const uint GL_DRAW_FRAMEBUFFER = 0x8CA9;
public const uint GL_READ_FRAMEBUFFER_BINDING = 0x8CAA;
public const uint GL_RENDERBUFFER_SAMPLES = 0x8CAB;
public const uint GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 0x8CD0;
public const uint GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 0x8CD1;
public const uint GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 0x8CD2;
public const uint GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 0x8CD3;
public const uint GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = 0x8CD4;
public const uint GL_FRAMEBUFFER_COMPLETE = 0x8CD5;
public const uint GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 0x8CD6;
public const uint GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0x8CD7;
public const uint GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER = 0x8CDB;
public const uint GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER = 0x8CDC;
public const uint GL_FRAMEBUFFER_UNSUPPORTED = 0x8CDD;
public const uint GL_MAX_COLOR_ATTACHMENTS = 0x8CDF;
public const uint GL_COLOR_ATTACHMENT0 = 0x8CE0;
public const uint GL_COLOR_ATTACHMENT1 = 0x8CE1;
public const uint GL_COLOR_ATTACHMENT2 = 0x8CE2;
public const uint GL_COLOR_ATTACHMENT3 = 0x8CE3;
public const uint GL_COLOR_ATTACHMENT4 = 0x8CE4;
public const uint GL_COLOR_ATTACHMENT5 = 0x8CE5;
public const uint GL_COLOR_ATTACHMENT6 = 0x8CE6;
public const uint GL_COLOR_ATTACHMENT7 = 0x8CE7;
public const uint GL_COLOR_ATTACHMENT8 = 0x8CE8;
public const uint GL_COLOR_ATTACHMENT9 = 0x8CE9;
public const uint GL_COLOR_ATTACHMENT10 = 0x8CEA;
public const uint GL_COLOR_ATTACHMENT11 = 0x8CEB;
public const uint GL_COLOR_ATTACHMENT12 = 0x8CEC;
public const uint GL_COLOR_ATTACHMENT13 = 0x8CED;
public const uint GL_COLOR_ATTACHMENT14 = 0x8CEE;
public const uint GL_COLOR_ATTACHMENT15 = 0x8CEF;
public const uint GL_DEPTH_ATTACHMENT = 0x8D00;
public const uint GL_STENCIL_ATTACHMENT = 0x8D20;
public const uint GL_FRAMEBUFFER = 0x8D40;
public const uint GL_RENDERBUFFER = 0x8D41;
public const uint GL_RENDERBUFFER_WIDTH = 0x8D42;
public const uint GL_RENDERBUFFER_HEIGHT = 0x8D43;
public const uint GL_RENDERBUFFER_INTERNAL_FORMAT = 0x8D44;
public const uint GL_STENCIL_INDEX1 = 0x8D46;
public const uint GL_STENCIL_INDEX4 = 0x8D47;
public const uint GL_STENCIL_INDEX8 = 0x8D48;
public const uint GL_STENCIL_INDEX16 = 0x8D49;
public const uint GL_RENDERBUFFER_RED_SIZE = 0x8D50;
public const uint GL_RENDERBUFFER_GREEN_SIZE = 0x8D51;
public const uint GL_RENDERBUFFER_BLUE_SIZE = 0x8D52;
public const uint GL_RENDERBUFFER_ALPHA_SIZE = 0x8D53;
public const uint GL_RENDERBUFFER_DEPTH_SIZE = 0x8D54;
public const uint GL_RENDERBUFFER_STENCIL_SIZE = 0x8D55;
public const uint GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = 0x8D56;
public const uint GL_MAX_SAMPLES = 0x8D57;
public delegate void PFNGLBINDFRAMEBUFFERPROC( uint target,uint framebuffer);
public delegate void PFNGLBINDRENDERBUFFERPROC( uint target,uint renderbuffer);
public delegate void PFNGLBLITFRAMEBUFFERPROC( int srcX0,int srcY0,int srcX1,int srcY1,int dstX0,int dstY0,int dstX1,int dstY1,uint mask,uint filter);
public delegate uint PFNGLCHECKFRAMEBUFFERSTATUSPROC( uint target);
public delegate void PFNGLDELETEFRAMEBUFFERSPROC( int n,uint[]  framebuffers);
public delegate void PFNGLDELETERENDERBUFFERSPROC( int n,uint[]  renderbuffers);
public delegate void PFNGLFRAMEBUFFERRENDERBUFFERPROC( uint target,uint attachment,uint renderbuffertarget,uint renderbuffer);
public delegate void PFNGLFRAMEBUFFERTEXTURE1DPROC( uint target,uint attachment,uint textarget,uint texture,int level);
public delegate void PFNGLFRAMEBUFFERTEXTURE2DPROC( uint target,uint attachment,uint textarget,uint texture,int level);
public delegate void PFNGLFRAMEBUFFERTEXTURE3DPROC( uint target,uint attachment,uint textarget,uint texture,int level,int layer);
public delegate void PFNGLFRAMEBUFFERTEXTURELAYERPROC( uint target,uint attachment,uint texture,int level,int layer);
public delegate void PFNGLGENFRAMEBUFFERSPROC( int n,IntPtr framebuffers);
public delegate void PFNGLGENRENDERBUFFERSPROC( int n,IntPtr renderbuffers);
public delegate void PFNGLGENERATEMIPMAPPROC( uint target);
public delegate void PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC( uint target,uint attachment,uint pname,IntPtr _params);
public delegate void PFNGLGETRENDERBUFFERPARAMETERIVPROC( uint target,uint pname,IntPtr _params);
[return: System.Runtime.InteropServices.MarshalAs(System.Runtime.InteropServices.UnmanagedType.I1)]public delegate bool PFNGLISFRAMEBUFFERPROC( uint framebuffer);
[return: System.Runtime.InteropServices.MarshalAs(System.Runtime.InteropServices.UnmanagedType.I1)]public delegate bool PFNGLISRENDERBUFFERPROC( uint renderbuffer);
public delegate void PFNGLRENDERBUFFERSTORAGEPROC( uint target,uint internalformat,int width,int height);
public delegate void PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC( uint target,int samples,uint internalformat,int width,int height);
/* ------------------------ GL_ARB_framebuffer_sRGB ------------------------ */
public const uint GL_ARB_framebuffer_sRGB = 1;
public const uint GL_FRAMEBUFFER_SRGB = 0x8DB9;
/* ------------------------ GL_ARB_geometry_shader4 ------------------------ */
public const uint GL_ARB_geometry_shader4 = 1;
public const uint GL_LINES_ADJACENCY_ARB = 0xA;
public const uint GL_LINE_STRIP_ADJACENCY_ARB = 0xB;
public const uint GL_TRIANGLES_ADJACENCY_ARB = 0xC;
public const uint GL_TRIANGLE_STRIP_ADJACENCY_ARB = 0xD;
public const uint GL_PROGRAM_POINT_SIZE_ARB = 0x8642;
public const uint GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB = 0x8C29;
//public const uint GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = 0x8CD4;
public const uint GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB = 0x8DA7;
public const uint GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB = 0x8DA8;
public const uint GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB = 0x8DA9;
public const uint GL_GEOMETRY_SHADER_ARB = 0x8DD9;
public const uint GL_GEOMETRY_VERTICES_OUT_ARB = 0x8DDA;
public const uint GL_GEOMETRY_INPUT_TYPE_ARB = 0x8DDB;
public const uint GL_GEOMETRY_OUTPUT_TYPE_ARB = 0x8DDC;
public const uint GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB = 0x8DDD;
public const uint GL_MAX_VERTEX_VARYING_COMPONENTS_ARB = 0x8DDE;
public const uint GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB = 0x8DDF;
public const uint GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB = 0x8DE0;
public const uint GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB = 0x8DE1;
public delegate void PFNGLFRAMEBUFFERTEXTUREARBPROC( uint target,uint attachment,uint texture,int level);
public delegate void PFNGLFRAMEBUFFERTEXTUREFACEARBPROC( uint target,uint attachment,uint texture,int level,uint face);
public delegate void PFNGLFRAMEBUFFERTEXTURELAYERARBPROC( uint target,uint attachment,uint texture,int level,int layer);
public delegate void PFNGLPROGRAMPARAMETERIARBPROC( uint program,uint pname,int value);
/* ----------------------- GL_ARB_get_program_binary ----------------------- */
public const uint GL_ARB_get_program_binary = 1;
public const uint GL_PROGRAM_BINARY_RETRIEVABLE_HINT = 0x8257;
public const uint GL_PROGRAM_BINARY_LENGTH = 0x8741;
public const uint GL_NUM_PROGRAM_BINARY_FORMATS = 0x87FE;
public const uint GL_PROGRAM_BINARY_FORMATS = 0x87FF;
public delegate void PFNGLGETPROGRAMBINARYPROC( uint program,int bufSize,IntPtr length,IntPtr binaryFormat,IntPtr binary);
public delegate void PFNGLPROGRAMBINARYPROC( uint program,uint binaryFormat,IntPtr  binary,int length);
public delegate void PFNGLPROGRAMPARAMETERIPROC( uint program,uint pname,int value);
/* --------------------------- GL_ARB_gpu_shader5 -------------------------- */
public const uint GL_ARB_gpu_shader5 = 1;
//public const uint GL_GEOMETRY_SHADER_INVOCATIONS = 0x887F;
//public const uint GL_MAX_GEOMETRY_SHADER_INVOCATIONS = 0x8E5A;
//public const uint GL_MIN_FRAGMENT_INTERPOLATION_OFFSET = 0x8E5B;
//public const uint GL_MAX_FRAGMENT_INTERPOLATION_OFFSET = 0x8E5C;
//public const uint GL_FRAGMENT_INTERPOLATION_OFFSET_BITS = 0x8E5D;
public const uint GL_MAX_VERTEX_STREAMS = 0x8E71;
/* ------------------------- GL_ARB_gpu_shader_fp64 ------------------------ */
public const uint GL_ARB_gpu_shader_fp64 = 1;
public const uint GL_DOUBLE_MAT2 = 0x8F46;
public const uint GL_DOUBLE_MAT3 = 0x8F47;
public const uint GL_DOUBLE_MAT4 = 0x8F48;
public const uint GL_DOUBLE_MAT2x3 = 0x8F49;
public const uint GL_DOUBLE_MAT2x4 = 0x8F4A;
public const uint GL_DOUBLE_MAT3x2 = 0x8F4B;
public const uint GL_DOUBLE_MAT3x4 = 0x8F4C;
public const uint GL_DOUBLE_MAT4x2 = 0x8F4D;
public const uint GL_DOUBLE_MAT4x3 = 0x8F4E;
public const uint GL_DOUBLE_VEC2 = 0x8FFC;
public const uint GL_DOUBLE_VEC3 = 0x8FFD;
public const uint GL_DOUBLE_VEC4 = 0x8FFE;
public delegate void PFNGLGETUNIFORMDVPROC( uint program,int location,IntPtr _params);
public delegate void PFNGLPROGRAMUNIFORM1DEXTPROC( uint program,int location,double x);
public delegate void PFNGLPROGRAMUNIFORM1DVEXTPROC( uint program,int location,int count,double[]  value);
public delegate void PFNGLPROGRAMUNIFORM2DEXTPROC( uint program,int location,double x,double y);
public delegate void PFNGLPROGRAMUNIFORM2DVEXTPROC( uint program,int location,int count,double[]  value);
public delegate void PFNGLPROGRAMUNIFORM3DEXTPROC( uint program,int location,double x,double y,double z);
public delegate void PFNGLPROGRAMUNIFORM3DVEXTPROC( uint program,int location,int count,double[]  value);
public delegate void PFNGLPROGRAMUNIFORM4DEXTPROC( uint program,int location,double x,double y,double z,double w);
public delegate void PFNGLPROGRAMUNIFORM4DVEXTPROC( uint program,int location,int count,double[]  value);
public delegate void PFNGLPROGRAMUNIFORMMATRIX2DVEXTPROC( uint program,int location,int count,bool transpose,double[]  value);
public delegate void PFNGLPROGRAMUNIFORMMATRIX2X3DVEXTPROC( uint program,int location,int count,bool transpose,double[]  value);
public delegate void PFNGLPROGRAMUNIFORMMATRIX2X4DVEXTPROC( uint program,int location,int count,bool transpose,double[]  value);
public delegate void PFNGLPROGRAMUNIFORMMATRIX3DVEXTPROC( uint program,int location,int count,bool transpose,double[]  value);
public delegate void PFNGLPROGRAMUNIFORMMATRIX3X2DVEXTPROC( uint program,int location,int count,bool transpose,double[]  value);
public delegate void PFNGLPROGRAMUNIFORMMATRIX3X4DVEXTPROC( uint program,int location,int count,bool transpose,double[]  value);
public delegate void PFNGLPROGRAMUNIFORMMATRIX4DVEXTPROC( uint program,int location,int count,bool transpose,double[]  value);
public delegate void PFNGLPROGRAMUNIFORMMATRIX4X2DVEXTPROC( uint program,int location,int count,bool transpose,double[]  value);
public delegate void PFNGLPROGRAMUNIFORMMATRIX4X3DVEXTPROC( uint program,int location,int count,bool transpose,double[]  value);
public delegate void PFNGLUNIFORM1DPROC( int location,double x);
public delegate void PFNGLUNIFORM1DVPROC( int location,int count,double[]  value);
public delegate void PFNGLUNIFORM2DPROC( int location,double x,double y);
public delegate void PFNGLUNIFORM2DVPROC( int location,int count,double[]  value);
public delegate void PFNGLUNIFORM3DPROC( int location,double x,double y,double z);
public delegate void PFNGLUNIFORM3DVPROC( int location,int count,double[]  value);
public delegate void PFNGLUNIFORM4DPROC( int location,double x,double y,double z,double w);
public delegate void PFNGLUNIFORM4DVPROC( int location,int count,double[]  value);
public delegate void PFNGLUNIFORMMATRIX2DVPROC( int location,int count,bool transpose,double[]  value);
public delegate void PFNGLUNIFORMMATRIX2X3DVPROC( int location,int count,bool transpose,double[]  value);
public delegate void PFNGLUNIFORMMATRIX2X4DVPROC( int location,int count,bool transpose,double[]  value);
public delegate void PFNGLUNIFORMMATRIX3DVPROC( int location,int count,bool transpose,double[]  value);
public delegate void PFNGLUNIFORMMATRIX3X2DVPROC( int location,int count,bool transpose,double[]  value);
public delegate void PFNGLUNIFORMMATRIX3X4DVPROC( int location,int count,bool transpose,double[]  value);
public delegate void PFNGLUNIFORMMATRIX4DVPROC( int location,int count,bool transpose,double[]  value);
public delegate void PFNGLUNIFORMMATRIX4X2DVPROC( int location,int count,bool transpose,double[]  value);
public delegate void PFNGLUNIFORMMATRIX4X3DVPROC( int location,int count,bool transpose,double[]  value);
/* ------------------------ GL_ARB_half_float_pixel ------------------------ */
public const uint GL_ARB_half_float_pixel = 1;
public const uint GL_HALF_FLOAT_ARB = 0x140B;
/* ------------------------ GL_ARB_half_float_vertex ----------------------- */
public const uint GL_ARB_half_float_vertex = 1;
public const uint GL_HALF_FLOAT = 0x140B;
/* ----------------------------- GL_ARB_imaging ---------------------------- */
public const uint GL_ARB_imaging = 1;
public const uint GL_CONSTANT_COLOR = 0x8001;
public const uint GL_ONE_MINUS_CONSTANT_COLOR = 0x8002;
public const uint GL_CONSTANT_ALPHA = 0x8003;
public const uint GL_ONE_MINUS_CONSTANT_ALPHA = 0x8004;
public const uint GL_BLEND_COLOR = 0x8005;
public const uint GL_FUNC_ADD = 0x8006;
public const uint GL_MIN = 0x8007;
public const uint GL_MAX = 0x8008;
public const uint GL_BLEND_EQUATION = 0x8009;
public const uint GL_FUNC_SUBTRACT = 0x800A;
public const uint GL_FUNC_REVERSE_SUBTRACT = 0x800B;
public const uint GL_CONVOLUTION_1D = 0x8010;
public const uint GL_CONVOLUTION_2D = 0x8011;
public const uint GL_SEPARABLE_2D = 0x8012;
public const uint GL_CONVOLUTION_BORDER_MODE = 0x8013;
public const uint GL_CONVOLUTION_FILTER_SCALE = 0x8014;
public const uint GL_CONVOLUTION_FILTER_BIAS = 0x8015;
public const uint GL_REDUCE = 0x8016;
public const uint GL_CONVOLUTION_FORMAT = 0x8017;
public const uint GL_CONVOLUTION_WIDTH = 0x8018;
public const uint GL_CONVOLUTION_HEIGHT = 0x8019;
public const uint GL_MAX_CONVOLUTION_WIDTH = 0x801A;
public const uint GL_MAX_CONVOLUTION_HEIGHT = 0x801B;
public const uint GL_POST_CONVOLUTION_RED_SCALE = 0x801C;
public const uint GL_POST_CONVOLUTION_GREEN_SCALE = 0x801D;
public const uint GL_POST_CONVOLUTION_BLUE_SCALE = 0x801E;
public const uint GL_POST_CONVOLUTION_ALPHA_SCALE = 0x801F;
public const uint GL_POST_CONVOLUTION_RED_BIAS = 0x8020;
public const uint GL_POST_CONVOLUTION_GREEN_BIAS = 0x8021;
public const uint GL_POST_CONVOLUTION_BLUE_BIAS = 0x8022;
public const uint GL_POST_CONVOLUTION_ALPHA_BIAS = 0x8023;
public const uint GL_HISTOGRAM = 0x8024;
public const uint GL_PROXY_HISTOGRAM = 0x8025;
public const uint GL_HISTOGRAM_WIDTH = 0x8026;
public const uint GL_HISTOGRAM_FORMAT = 0x8027;
public const uint GL_HISTOGRAM_RED_SIZE = 0x8028;
public const uint GL_HISTOGRAM_GREEN_SIZE = 0x8029;
public const uint GL_HISTOGRAM_BLUE_SIZE = 0x802A;
public const uint GL_HISTOGRAM_ALPHA_SIZE = 0x802B;
public const uint GL_HISTOGRAM_LUMINANCE_SIZE = 0x802C;
public const uint GL_HISTOGRAM_SINK = 0x802D;
public const uint GL_MINMAX = 0x802E;
public const uint GL_MINMAX_FORMAT = 0x802F;
public const uint GL_MINMAX_SINK = 0x8030;
public const uint GL_TABLE_TOO_LARGE = 0x8031;
public const uint GL_COLOR_MATRIX = 0x80B1;
public const uint GL_COLOR_MATRIX_STACK_DEPTH = 0x80B2;
public const uint GL_MAX_COLOR_MATRIX_STACK_DEPTH = 0x80B3;
public const uint GL_POST_COLOR_MATRIX_RED_SCALE = 0x80B4;
public const uint GL_POST_COLOR_MATRIX_GREEN_SCALE = 0x80B5;
public const uint GL_POST_COLOR_MATRIX_BLUE_SCALE = 0x80B6;
public const uint GL_POST_COLOR_MATRIX_ALPHA_SCALE = 0x80B7;
public const uint GL_POST_COLOR_MATRIX_RED_BIAS = 0x80B8;
public const uint GL_POST_COLOR_MATRIX_GREEN_BIAS = 0x80B9;
public const uint GL_POST_COLOR_MATRIX_BLUE_BIAS = 0x80BA;
public const uint GL_POST_COLOR_MATRIX_ALPHA_BIAS = 0x80BB;
public const uint GL_COLOR_TABLE = 0x80D0;
public const uint GL_POST_CONVOLUTION_COLOR_TABLE = 0x80D1;
public const uint GL_POST_COLOR_MATRIX_COLOR_TABLE = 0x80D2;
public const uint GL_PROXY_COLOR_TABLE = 0x80D3;
public const uint GL_PROXY_POST_CONVOLUTION_COLOR_TABLE = 0x80D4;
public const uint GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE = 0x80D5;
public const uint GL_COLOR_TABLE_SCALE = 0x80D6;
public const uint GL_COLOR_TABLE_BIAS = 0x80D7;
public const uint GL_COLOR_TABLE_FORMAT = 0x80D8;
public const uint GL_COLOR_TABLE_WIDTH = 0x80D9;
public const uint GL_COLOR_TABLE_RED_SIZE = 0x80DA;
public const uint GL_COLOR_TABLE_GREEN_SIZE = 0x80DB;
public const uint GL_COLOR_TABLE_BLUE_SIZE = 0x80DC;
public const uint GL_COLOR_TABLE_ALPHA_SIZE = 0x80DD;
public const uint GL_COLOR_TABLE_LUMINANCE_SIZE = 0x80DE;
public const uint GL_COLOR_TABLE_INTENSITY_SIZE = 0x80DF;
public const uint GL_IGNORE_BORDER = 0x8150;
public const uint GL_CONSTANT_BORDER = 0x8151;
public const uint GL_WRAP_BORDER = 0x8152;
public const uint GL_REPLICATE_BORDER = 0x8153;
public const uint GL_CONVOLUTION_BORDER_COLOR = 0x8154;
public delegate void PFNGLCOLORSUBTABLEPROC( uint target,int start,int count,uint format,uint type,IntPtr data);
public delegate void PFNGLCOLORTABLEPROC( uint target,uint internalformat,int width,uint format,uint type,IntPtr table);
public delegate void PFNGLCOLORTABLEPARAMETERFVPROC( uint target,uint pname,float[] _params);
public delegate void PFNGLCOLORTABLEPARAMETERIVPROC( uint target,uint pname,int[] _params);
public delegate void PFNGLCONVOLUTIONFILTER1DPROC( uint target,uint internalformat,int width,uint format,uint type,IntPtr image);
public delegate void PFNGLCONVOLUTIONFILTER2DPROC( uint target,uint internalformat,int width,int height,uint format,uint type,IntPtr image);
public delegate void PFNGLCONVOLUTIONPARAMETERFPROC( uint target,uint pname,float _params);
public delegate void PFNGLCONVOLUTIONPARAMETERFVPROC( uint target,uint pname,float[] _params);
public delegate void PFNGLCONVOLUTIONPARAMETERIPROC( uint target,uint pname,int _params);
public delegate void PFNGLCONVOLUTIONPARAMETERIVPROC( uint target,uint pname,int[] _params);
public delegate void PFNGLCOPYCOLORSUBTABLEPROC( uint target,int start,int x,int y,int width);
public delegate void PFNGLCOPYCOLORTABLEPROC( uint target,uint internalformat,int x,int y,int width);
public delegate void PFNGLCOPYCONVOLUTIONFILTER1DPROC( uint target,uint internalformat,int x,int y,int width);
public delegate void PFNGLCOPYCONVOLUTIONFILTER2DPROC( uint target,uint internalformat,int x,int y,int width,int height);
public delegate void PFNGLGETCOLORTABLEPROC( uint target,uint format,uint type,IntPtr table);
public delegate void PFNGLGETCOLORTABLEPARAMETERFVPROC( uint target,uint pname,IntPtr _params);
public delegate void PFNGLGETCOLORTABLEPARAMETERIVPROC( uint target,uint pname,IntPtr _params);
public delegate void PFNGLGETCONVOLUTIONFILTERPROC( uint target,uint format,uint type,IntPtr image);
public delegate void PFNGLGETCONVOLUTIONPARAMETERFVPROC( uint target,uint pname,IntPtr _params);
public delegate void PFNGLGETCONVOLUTIONPARAMETERIVPROC( uint target,uint pname,IntPtr _params);
public delegate void PFNGLGETHISTOGRAMPROC( uint target,bool reset,uint format,uint type,IntPtr values);
public delegate void PFNGLGETHISTOGRAMPARAMETERFVPROC( uint target,uint pname,IntPtr _params);
public delegate void PFNGLGETHISTOGRAMPARAMETERIVPROC( uint target,uint pname,IntPtr _params);
public delegate void PFNGLGETMINMAXPROC( uint target,bool reset,uint format,uint types,IntPtr values);
public delegate void PFNGLGETMINMAXPARAMETERFVPROC( uint target,uint pname,IntPtr _params);
public delegate void PFNGLGETMINMAXPARAMETERIVPROC( uint target,uint pname,IntPtr _params);
public delegate void PFNGLGETSEPARABLEFILTERPROC( uint target,uint format,uint type,IntPtr row,IntPtr column,IntPtr span);
public delegate void PFNGLHISTOGRAMPROC( uint target,int width,uint internalformat,bool sink);
public delegate void PFNGLMINMAXPROC( uint target,uint internalformat,bool sink);
public delegate void PFNGLRESETHISTOGRAMPROC( uint target);
public delegate void PFNGLRESETMINMAXPROC( uint target);
public delegate void PFNGLSEPARABLEFILTER2DPROC( uint target,uint internalformat,int width,int height,uint format,uint type,IntPtr row,IntPtr column);
/* ------------------------ GL_ARB_instanced_arrays ------------------------ */
public const uint GL_ARB_instanced_arrays = 1;
public const uint GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ARB = 0x88FE;
public delegate void PFNGLDRAWARRAYSINSTANCEDARBPROC( uint mode,int first,int count,int primcount);
public delegate void PFNGLDRAWELEMENTSINSTANCEDARBPROC( uint mode,int count,uint type,IntPtr  indices,int primcount);
public delegate void PFNGLVERTEXATTRIBDIVISORARBPROC( uint index,uint divisor);
/* ------------------------ GL_ARB_map_buffer_range ------------------------ */
public const uint GL_ARB_map_buffer_range = 1;
public const uint GL_MAP_READ_BIT = 0x0001;
public const uint GL_MAP_WRITE_BIT = 0x0002;
public const uint GL_MAP_INVALIDATE_RANGE_BIT = 0x0004;
public const uint GL_MAP_INVALIDATE_BUFFER_BIT = 0x0008;
public const uint GL_MAP_FLUSH_EXPLICIT_BIT = 0x0010;
public const uint GL_MAP_UNSYNCHRONIZED_BIT = 0x0020;
public delegate void PFNGLFLUSHMAPPEDBUFFERRANGEPROC( uint target,IntPtr offset,IntPtr length);
public delegate IntPtr PFNGLMAPBUFFERRANGEPROC( uint target,IntPtr offset,IntPtr length,uint access);
/* ------------------------- GL_ARB_matrix_palette ------------------------- */
public const uint GL_ARB_matrix_palette = 1;
public const uint GL_MATRIX_PALETTE_ARB = 0x8840;
public const uint GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB = 0x8841;
public const uint GL_MAX_PALETTE_MATRICES_ARB = 0x8842;
public const uint GL_CURRENT_PALETTE_MATRIX_ARB = 0x8843;
public const uint GL_MATRIX_INDEX_ARRAY_ARB = 0x8844;
public const uint GL_CURRENT_MATRIX_INDEX_ARB = 0x8845;
public const uint GL_MATRIX_INDEX_ARRAY_SIZE_ARB = 0x8846;
public const uint GL_MATRIX_INDEX_ARRAY_TYPE_ARB = 0x8847;
public const uint GL_MATRIX_INDEX_ARRAY_STRIDE_ARB = 0x8848;
public const uint GL_MATRIX_INDEX_ARRAY_POINTER_ARB = 0x8849;
public delegate void PFNGLCURRENTPALETTEMATRIXARBPROC( int index);
public delegate void PFNGLMATRIXINDEXPOINTERARBPROC( int size,uint type,int stride,IntPtr pointer);
public delegate void PFNGLMATRIXINDEXUBVARBPROC( int size,IntPtr indices);
public delegate void PFNGLMATRIXINDEXUIVARBPROC( int size,IntPtr indices);
public delegate void PFNGLMATRIXINDEXUSVARBPROC( int size,IntPtr indices);
/* --------------------------- GL_ARB_multisample -------------------------- */
public const uint GL_ARB_multisample = 1;
public const uint GL_MULTISAMPLE_ARB = 0x809D;
public const uint GL_SAMPLE_ALPHA_TO_COVERAGE_ARB = 0x809E;
public const uint GL_SAMPLE_ALPHA_TO_ONE_ARB = 0x809F;
public const uint GL_SAMPLE_COVERAGE_ARB = 0x80A0;
public const uint GL_SAMPLE_BUFFERS_ARB = 0x80A8;
public const uint GL_SAMPLES_ARB = 0x80A9;
public const uint GL_SAMPLE_COVERAGE_VALUE_ARB = 0x80AA;
public const uint GL_SAMPLE_COVERAGE_INVERT_ARB = 0x80AB;
public const uint GL_MULTISAMPLE_BIT_ARB = 0x20000000;
public delegate void PFNGLSAMPLECOVERAGEARBPROC( float value,bool invert);
/* -------------------------- GL_ARB_multitexture -------------------------- */
public const uint GL_ARB_multitexture = 1;
public const uint GL_TEXTURE0_ARB = 0x84C0;
public const uint GL_TEXTURE1_ARB = 0x84C1;
public const uint GL_TEXTURE2_ARB = 0x84C2;
public const uint GL_TEXTURE3_ARB = 0x84C3;
public const uint GL_TEXTURE4_ARB = 0x84C4;
public const uint GL_TEXTURE5_ARB = 0x84C5;
public const uint GL_TEXTURE6_ARB = 0x84C6;
public const uint GL_TEXTURE7_ARB = 0x84C7;
public const uint GL_TEXTURE8_ARB = 0x84C8;
public const uint GL_TEXTURE9_ARB = 0x84C9;
public const uint GL_TEXTURE10_ARB = 0x84CA;
public const uint GL_TEXTURE11_ARB = 0x84CB;
public const uint GL_TEXTURE12_ARB = 0x84CC;
public const uint GL_TEXTURE13_ARB = 0x84CD;
public const uint GL_TEXTURE14_ARB = 0x84CE;
public const uint GL_TEXTURE15_ARB = 0x84CF;
public const uint GL_TEXTURE16_ARB = 0x84D0;
public const uint GL_TEXTURE17_ARB = 0x84D1;
public const uint GL_TEXTURE18_ARB = 0x84D2;
public const uint GL_TEXTURE19_ARB = 0x84D3;
public const uint GL_TEXTURE20_ARB = 0x84D4;
public const uint GL_TEXTURE21_ARB = 0x84D5;
public const uint GL_TEXTURE22_ARB = 0x84D6;
public const uint GL_TEXTURE23_ARB = 0x84D7;
public const uint GL_TEXTURE24_ARB = 0x84D8;
public const uint GL_TEXTURE25_ARB = 0x84D9;
public const uint GL_TEXTURE26_ARB = 0x84DA;
public const uint GL_TEXTURE27_ARB = 0x84DB;
public const uint GL_TEXTURE28_ARB = 0x84DC;
public const uint GL_TEXTURE29_ARB = 0x84DD;
public const uint GL_TEXTURE30_ARB = 0x84DE;
public const uint GL_TEXTURE31_ARB = 0x84DF;
public const uint GL_ACTIVE_TEXTURE_ARB = 0x84E0;
public const uint GL_CLIENT_ACTIVE_TEXTURE_ARB = 0x84E1;
public const uint GL_MAX_TEXTURE_UNITS_ARB = 0x84E2;
public delegate void PFNGLACTIVETEXTUREARBPROC( uint texture);
public delegate void PFNGLCLIENTACTIVETEXTUREARBPROC( uint texture);
public delegate void PFNGLMULTITEXCOORD1DARBPROC( uint target,double s);
public delegate void PFNGLMULTITEXCOORD1DVARBPROC( uint target,double[] v);
public delegate void PFNGLMULTITEXCOORD1FARBPROC( uint target,float s);
public delegate void PFNGLMULTITEXCOORD1FVARBPROC( uint target,float[] v);
public delegate void PFNGLMULTITEXCOORD1IARBPROC( uint target,int s);
public delegate void PFNGLMULTITEXCOORD1IVARBPROC( uint target,int[] v);
public delegate void PFNGLMULTITEXCOORD1SARBPROC( uint target,short s);
public delegate void PFNGLMULTITEXCOORD1SVARBPROC( uint target,short[] v);
public delegate void PFNGLMULTITEXCOORD2DARBPROC( uint target,double s,double t);
public delegate void PFNGLMULTITEXCOORD2DVARBPROC( uint target,double[] v);
public delegate void PFNGLMULTITEXCOORD2FARBPROC( uint target,float s,float t);
public delegate void PFNGLMULTITEXCOORD2FVARBPROC( uint target,float[] v);
public delegate void PFNGLMULTITEXCOORD2IARBPROC( uint target,int s,int t);
public delegate void PFNGLMULTITEXCOORD2IVARBPROC( uint target,int[] v);
public delegate void PFNGLMULTITEXCOORD2SARBPROC( uint target,short s,short t);
public delegate void PFNGLMULTITEXCOORD2SVARBPROC( uint target,short[] v);
public delegate void PFNGLMULTITEXCOORD3DARBPROC( uint target,double s,double t,double r);
public delegate void PFNGLMULTITEXCOORD3DVARBPROC( uint target,double[] v);
public delegate void PFNGLMULTITEXCOORD3FARBPROC( uint target,float s,float t,float r);
public delegate void PFNGLMULTITEXCOORD3FVARBPROC( uint target,float[] v);
public delegate void PFNGLMULTITEXCOORD3IARBPROC( uint target,int s,int t,int r);
public delegate void PFNGLMULTITEXCOORD3IVARBPROC( uint target,int[] v);
public delegate void PFNGLMULTITEXCOORD3SARBPROC( uint target,short s,short t,short r);
public delegate void PFNGLMULTITEXCOORD3SVARBPROC( uint target,short[] v);
public delegate void PFNGLMULTITEXCOORD4DARBPROC( uint target,double s,double t,double r,double q);
public delegate void PFNGLMULTITEXCOORD4DVARBPROC( uint target,double[] v);
public delegate void PFNGLMULTITEXCOORD4FARBPROC( uint target,float s,float t,float r,float q);
public delegate void PFNGLMULTITEXCOORD4FVARBPROC( uint target,float[] v);
public delegate void PFNGLMULTITEXCOORD4IARBPROC( uint target,int s,int t,int r,int q);
public delegate void PFNGLMULTITEXCOORD4IVARBPROC( uint target,int[] v);
public delegate void PFNGLMULTITEXCOORD4SARBPROC( uint target,short s,short t,short r,short q);
public delegate void PFNGLMULTITEXCOORD4SVARBPROC( uint target,short[] v);
/* ------------------------- GL_ARB_occlusion_query ------------------------ */
public const uint GL_ARB_occlusion_query = 1;
public const uint GL_QUERY_COUNTER_BITS_ARB = 0x8864;
public const uint GL_CURRENT_QUERY_ARB = 0x8865;
public const uint GL_QUERY_RESULT_ARB = 0x8866;
public const uint GL_QUERY_RESULT_AVAILABLE_ARB = 0x8867;
public const uint GL_SAMPLES_PASSED_ARB = 0x8914;
public delegate void PFNGLBEGINQUERYARBPROC( uint target,uint id);
public delegate void PFNGLDELETEQUERIESARBPROC( int n,uint[]  ids);
public delegate void PFNGLENDQUERYARBPROC( uint target);
public delegate void PFNGLGENQUERIESARBPROC( int n,IntPtr ids);
public delegate void PFNGLGETQUERYOBJECTIVARBPROC( uint id,uint pname,IntPtr _params);
public delegate void PFNGLGETQUERYOBJECTUIVARBPROC( uint id,uint pname,IntPtr _params);
public delegate void PFNGLGETQUERYIVARBPROC( uint target,uint pname,IntPtr _params);
[return: System.Runtime.InteropServices.MarshalAs(System.Runtime.InteropServices.UnmanagedType.I1)]public delegate bool PFNGLISQUERYARBPROC( uint id);
/* ------------------------ GL_ARB_occlusion_query2 ------------------------ */
public const uint GL_ARB_occlusion_query2 = 1;
//public const uint GL_ANY_SAMPLES_PASSED = 0x8C2F;
/* ----------------------- GL_ARB_pixel_buffer_object ---------------------- */
public const uint GL_ARB_pixel_buffer_object = 1;
public const uint GL_PIXEL_PACK_BUFFER_ARB = 0x88EB;
public const uint GL_PIXEL_UNPACK_BUFFER_ARB = 0x88EC;
public const uint GL_PIXEL_PACK_BUFFER_BINDING_ARB = 0x88ED;
public const uint GL_PIXEL_UNPACK_BUFFER_BINDING_ARB = 0x88EF;
/* ------------------------ GL_ARB_point_parameters ------------------------ */
public const uint GL_ARB_point_parameters = 1;
public const uint GL_POINT_SIZE_MIN_ARB = 0x8126;
public const uint GL_POINT_SIZE_MAX_ARB = 0x8127;
public const uint GL_POINT_FADE_THRESHOLD_SIZE_ARB = 0x8128;
public const uint GL_POINT_DISTANCE_ATTENUATION_ARB = 0x8129;
public delegate void PFNGLPOINTPARAMETERFARBPROC( uint pname,float param);
public delegate void PFNGLPOINTPARAMETERFVARBPROC( uint pname,float[]  _params);
/* -------------------------- GL_ARB_point_sprite -------------------------- */
public const uint GL_ARB_point_sprite = 1;
public const uint GL_POINT_SPRITE_ARB = 0x8861;
public const uint GL_COORD_REPLACE_ARB = 0x8862;
/* ------------------------ GL_ARB_provoking_vertex ------------------------ */
public const uint GL_ARB_provoking_vertex = 1;
public const uint GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION = 0x8E4C;
public const uint GL_FIRST_VERTEX_CONVENTION = 0x8E4D;
public const uint GL_LAST_VERTEX_CONVENTION = 0x8E4E;
public const uint GL_PROVOKING_VERTEX = 0x8E4F;
public delegate void PFNGLPROVOKINGVERTEXPROC( uint mode);
/* --------------------------- GL_ARB_robustness --------------------------- */
public const uint GL_ARB_robustness = 1;
public const uint GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB = 0x00000004;
public const uint GL_LOSE_CONTEXT_ON_RESET_ARB = 0x8252;
public const uint GL_GUILTY_CONTEXT_RESET_ARB = 0x8253;
public const uint GL_INNOCENT_CONTEXT_RESET_ARB = 0x8254;
public const uint GL_UNKNOWN_CONTEXT_RESET_ARB = 0x8255;
public const uint GL_RESET_NOTIFICATION_STRATEGY_ARB = 0x8256;
public const uint GL_NO_RESET_NOTIFICATION_ARB = 0x8261;
public delegate void PFNGLGETNCOLORTABLEARBPROC( uint target,uint format,uint type,int bufSize,IntPtr table);
public delegate void PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC( uint target,int lod,int bufSize,IntPtr img);
public delegate void PFNGLGETNCONVOLUTIONFILTERARBPROC( uint target,uint format,uint type,int bufSize,IntPtr image);
public delegate void PFNGLGETNHISTOGRAMARBPROC( uint target,bool reset,uint format,uint type,int bufSize,IntPtr values);
public delegate void PFNGLGETNMAPDVARBPROC( uint target,uint query,int bufSize,IntPtr v);
public delegate void PFNGLGETNMAPFVARBPROC( uint target,uint query,int bufSize,IntPtr v);
public delegate void PFNGLGETNMAPIVARBPROC( uint target,uint query,int bufSize,IntPtr v);
public delegate void PFNGLGETNMINMAXARBPROC( uint target,bool reset,uint format,uint type,int bufSize,IntPtr values);
public delegate void PFNGLGETNPIXELMAPFVARBPROC( uint map,int bufSize,IntPtr values);
public delegate void PFNGLGETNPIXELMAPUIVARBPROC( uint map,int bufSize,IntPtr values);
public delegate void PFNGLGETNPIXELMAPUSVARBPROC( uint map,int bufSize,IntPtr values);
public delegate void PFNGLGETNPOLYGONSTIPPLEARBPROC( int bufSize,IntPtr pattern);
public delegate void PFNGLGETNSEPARABLEFILTERARBPROC( uint target,uint format,uint type,int rowBufSize,IntPtr row,int columnBufSize,IntPtr column,IntPtr span);
public delegate void PFNGLGETNTEXIMAGEARBPROC( uint target,int level,uint format,uint type,int bufSize,IntPtr img);
public delegate void PFNGLGETNUNIFORMDVARBPROC( uint program,int location,int bufSize,IntPtr _params);
public delegate void PFNGLGETNUNIFORMFVARBPROC( uint program,int location,int bufSize,IntPtr _params);
public delegate void PFNGLGETNUNIFORMIVARBPROC( uint program,int location,int bufSize,IntPtr _params);
public delegate void PFNGLGETNUNIFORMUIVARBPROC( uint program,int location,int bufSize,IntPtr _params);
public delegate void PFNGLREADNPIXELSARBPROC( int x,int y,int width,int height,uint format,uint type,int bufSize,IntPtr data);
/* ------------------------- GL_ARB_sample_shading ------------------------- */
public const uint GL_ARB_sample_shading = 1;
public const uint GL_SAMPLE_SHADING_ARB = 0x8C36;
public const uint GL_MIN_SAMPLE_SHADING_VALUE_ARB = 0x8C37;
public delegate void PFNGLMINSAMPLESHADINGARBPROC( float value);
/* ------------------------- GL_ARB_sampler_objects ------------------------ */
public const uint GL_ARB_sampler_objects = 1;
public const uint GL_SAMPLER_BINDING = 0x8919;
public delegate void PFNGLBINDSAMPLERPROC( uint unit,uint sampler);
public delegate void PFNGLDELETESAMPLERSPROC( int count,uint[]  samplers);
public delegate void PFNGLGENSAMPLERSPROC( int count,IntPtr samplers);
public delegate void PFNGLGETSAMPLERPARAMETERIIVPROC( uint sampler,uint pname,IntPtr _params);
public delegate void PFNGLGETSAMPLERPARAMETERIUIVPROC( uint sampler,uint pname,IntPtr _params);
public delegate void PFNGLGETSAMPLERPARAMETERFVPROC( uint sampler,uint pname,IntPtr _params);
public delegate void PFNGLGETSAMPLERPARAMETERIVPROC( uint sampler,uint pname,IntPtr _params);
[return: System.Runtime.InteropServices.MarshalAs(System.Runtime.InteropServices.UnmanagedType.I1)]public delegate bool PFNGLISSAMPLERPROC( uint sampler);
public delegate void PFNGLSAMPLERPARAMETERIIVPROC( uint sampler,uint pname,int[]  _params);
public delegate void PFNGLSAMPLERPARAMETERIUIVPROC( uint sampler,uint pname,uint[]  _params);
public delegate void PFNGLSAMPLERPARAMETERFPROC( uint sampler,uint pname,float param);
public delegate void PFNGLSAMPLERPARAMETERFVPROC( uint sampler,uint pname,float[]  _params);
public delegate void PFNGLSAMPLERPARAMETERIPROC( uint sampler,uint pname,int param);
public delegate void PFNGLSAMPLERPARAMETERIVPROC( uint sampler,uint pname,int[]  _params);
/* ------------------------ GL_ARB_seamless_cube_map ----------------------- */
public const uint GL_ARB_seamless_cube_map = 1;
public const uint GL_TEXTURE_CUBE_MAP_SEAMLESS = 0x884F;
/* --------------------- GL_ARB_separate_shader_objects -------------------- */
public const uint GL_ARB_separate_shader_objects = 1;
public const uint GL_VERTEX_SHADER_BIT = 0x00000001;
public const uint GL_FRAGMENT_SHADER_BIT = 0x00000002;
public const uint GL_GEOMETRY_SHADER_BIT = 0x00000004;
public const uint GL_TESS_CONTROL_SHADER_BIT = 0x00000008;
public const uint GL_TESS_EVALUATION_SHADER_BIT = 0x00000010;
public const uint GL_PROGRAM_SEPARABLE = 0x8258;
public const uint GL_ACTIVE_PROGRAM = 0x8259;
public const uint GL_PROGRAM_PIPELINE_BINDING = 0x825A;
public const uint GL_ALL_SHADER_BITS = 0xFFFFFFFF;
public delegate void PFNGLACTIVESHADERPROGRAMPROC( uint pipeline,uint program);
public delegate void PFNGLBINDPROGRAMPIPELINEPROC( uint pipeline);
public delegate uint PFNGLCREATESHADERPROGRAMVPROC( uint type,int count,IntPtr strings);
public delegate void PFNGLDELETEPROGRAMPIPELINESPROC( int n,uint[]  pipelines);
public delegate void PFNGLGENPROGRAMPIPELINESPROC( int n,IntPtr pipelines);
public delegate void PFNGLGETPROGRAMPIPELINEINFOLOGPROC( uint pipeline,int bufSize,IntPtr length,IntPtr infoLog);
public delegate void PFNGLGETPROGRAMPIPELINEIVPROC( uint pipeline,uint pname,IntPtr _params);
[return: System.Runtime.InteropServices.MarshalAs(System.Runtime.InteropServices.UnmanagedType.I1)]public delegate bool PFNGLISPROGRAMPIPELINEPROC( uint pipeline);
public delegate void PFNGLPROGRAMUNIFORM1DPROC( uint program,int location,double x);
public delegate void PFNGLPROGRAMUNIFORM1DVPROC( uint program,int location,int count,double[]  value);
public delegate void PFNGLPROGRAMUNIFORM1FPROC( uint program,int location,float x);
public delegate void PFNGLPROGRAMUNIFORM1FVPROC( uint program,int location,int count,float[]  value);
public delegate void PFNGLPROGRAMUNIFORM1IPROC( uint program,int location,int x);
public delegate void PFNGLPROGRAMUNIFORM1IVPROC( uint program,int location,int count,int[]  value);
public delegate void PFNGLPROGRAMUNIFORM1UIPROC( uint program,int location,uint x);
public delegate void PFNGLPROGRAMUNIFORM1UIVPROC( uint program,int location,int count,uint[]  value);
public delegate void PFNGLPROGRAMUNIFORM2DPROC( uint program,int location,double x,double y);
public delegate void PFNGLPROGRAMUNIFORM2DVPROC( uint program,int location,int count,double[]  value);
public delegate void PFNGLPROGRAMUNIFORM2FPROC( uint program,int location,float x,float y);
public delegate void PFNGLPROGRAMUNIFORM2FVPROC( uint program,int location,int count,float[]  value);
public delegate void PFNGLPROGRAMUNIFORM2IPROC( uint program,int location,int x,int y);
public delegate void PFNGLPROGRAMUNIFORM2IVPROC( uint program,int location,int count,int[]  value);
public delegate void PFNGLPROGRAMUNIFORM2UIPROC( uint program,int location,uint x,uint y);
public delegate void PFNGLPROGRAMUNIFORM2UIVPROC( uint program,int location,int count,uint[]  value);
public delegate void PFNGLPROGRAMUNIFORM3DPROC( uint program,int location,double x,double y,double z);
public delegate void PFNGLPROGRAMUNIFORM3DVPROC( uint program,int location,int count,double[]  value);
public delegate void PFNGLPROGRAMUNIFORM3FPROC( uint program,int location,float x,float y,float z);
public delegate void PFNGLPROGRAMUNIFORM3FVPROC( uint program,int location,int count,float[]  value);
public delegate void PFNGLPROGRAMUNIFORM3IPROC( uint program,int location,int x,int y,int z);
public delegate void PFNGLPROGRAMUNIFORM3IVPROC( uint program,int location,int count,int[]  value);
public delegate void PFNGLPROGRAMUNIFORM3UIPROC( uint program,int location,uint x,uint y,uint z);
public delegate void PFNGLPROGRAMUNIFORM3UIVPROC( uint program,int location,int count,uint[]  value);
public delegate void PFNGLPROGRAMUNIFORM4DPROC( uint program,int location,double x,double y,double z,double w);
public delegate void PFNGLPROGRAMUNIFORM4DVPROC( uint program,int location,int count,double[]  value);
public delegate void PFNGLPROGRAMUNIFORM4FPROC( uint program,int location,float x,float y,float z,float w);
public delegate void PFNGLPROGRAMUNIFORM4FVPROC( uint program,int location,int count,float[]  value);
public delegate void PFNGLPROGRAMUNIFORM4IPROC( uint program,int location,int x,int y,int z,int w);
public delegate void PFNGLPROGRAMUNIFORM4IVPROC( uint program,int location,int count,int[]  value);
public delegate void PFNGLPROGRAMUNIFORM4UIPROC( uint program,int location,uint x,uint y,uint z,uint w);
public delegate void PFNGLPROGRAMUNIFORM4UIVPROC( uint program,int location,int count,uint[]  value);
public delegate void PFNGLPROGRAMUNIFORMMATRIX2DVPROC( uint program,int location,int count,bool transpose,double[]  value);
public delegate void PFNGLPROGRAMUNIFORMMATRIX2FVPROC( uint program,int location,int count,bool transpose,float[]  value);
public delegate void PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC( uint program,int location,int count,bool transpose,double[]  value);
public delegate void PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC( uint program,int location,int count,bool transpose,float[]  value);
public delegate void PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC( uint program,int location,int count,bool transpose,double[]  value);
public delegate void PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC( uint program,int location,int count,bool transpose,float[]  value);
public delegate void PFNGLPROGRAMUNIFORMMATRIX3DVPROC( uint program,int location,int count,bool transpose,double[]  value);
public delegate void PFNGLPROGRAMUNIFORMMATRIX3FVPROC( uint program,int location,int count,bool transpose,float[]  value);
public delegate void PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC( uint program,int location,int count,bool transpose,double[]  value);
public delegate void PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC( uint program,int location,int count,bool transpose,float[]  value);
public delegate void PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC( uint program,int location,int count,bool transpose,double[]  value);
public delegate void PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC( uint program,int location,int count,bool transpose,float[]  value);
public delegate void PFNGLPROGRAMUNIFORMMATRIX4DVPROC( uint program,int location,int count,bool transpose,double[]  value);
public delegate void PFNGLPROGRAMUNIFORMMATRIX4FVPROC( uint program,int location,int count,bool transpose,float[]  value);
public delegate void PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC( uint program,int location,int count,bool transpose,double[]  value);
public delegate void PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC( uint program,int location,int count,bool transpose,float[]  value);
public delegate void PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC( uint program,int location,int count,bool transpose,double[]  value);
public delegate void PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC( uint program,int location,int count,bool transpose,float[]  value);
public delegate void PFNGLUSEPROGRAMSTAGESPROC( uint pipeline,uint stages,uint program);
public delegate void PFNGLVALIDATEPROGRAMPIPELINEPROC( uint pipeline);
/* ----------------------- GL_ARB_shader_bit_encoding ---------------------- */
public const uint GL_ARB_shader_bit_encoding = 1;
/* ------------------------- GL_ARB_shader_objects ------------------------- */
public const uint GL_ARB_shader_objects = 1;
public const uint GL_PROGRAM_OBJECT_ARB = 0x8B40;
public const uint GL_SHADER_OBJECT_ARB = 0x8B48;
public const uint GL_OBJECT_TYPE_ARB = 0x8B4E;
public const uint GL_OBJECT_SUBTYPE_ARB = 0x8B4F;
public const uint GL_FLOAT_VEC2_ARB = 0x8B50;
public const uint GL_FLOAT_VEC3_ARB = 0x8B51;
public const uint GL_FLOAT_VEC4_ARB = 0x8B52;
public const uint GL_INT_VEC2_ARB = 0x8B53;
public const uint GL_INT_VEC3_ARB = 0x8B54;
public const uint GL_INT_VEC4_ARB = 0x8B55;
public const uint GL_BOOL_ARB = 0x8B56;
public const uint GL_BOOL_VEC2_ARB = 0x8B57;
public const uint GL_BOOL_VEC3_ARB = 0x8B58;
public const uint GL_BOOL_VEC4_ARB = 0x8B59;
public const uint GL_FLOAT_MAT2_ARB = 0x8B5A;
public const uint GL_FLOAT_MAT3_ARB = 0x8B5B;
public const uint GL_FLOAT_MAT4_ARB = 0x8B5C;
public const uint GL_SAMPLER_1D_ARB = 0x8B5D;
public const uint GL_SAMPLER_2D_ARB = 0x8B5E;
public const uint GL_SAMPLER_3D_ARB = 0x8B5F;
public const uint GL_SAMPLER_CUBE_ARB = 0x8B60;
public const uint GL_SAMPLER_1D_SHADOW_ARB = 0x8B61;
public const uint GL_SAMPLER_2D_SHADOW_ARB = 0x8B62;
public const uint GL_SAMPLER_2D_RECT_ARB = 0x8B63;
public const uint GL_SAMPLER_2D_RECT_SHADOW_ARB = 0x8B64;
public const uint GL_OBJECT_DELETE_STATUS_ARB = 0x8B80;
public const uint GL_OBJECT_COMPILE_STATUS_ARB = 0x8B81;
public const uint GL_OBJECT_LINK_STATUS_ARB = 0x8B82;
public const uint GL_OBJECT_VALIDATE_STATUS_ARB = 0x8B83;
public const uint GL_OBJECT_INFO_LOG_LENGTH_ARB = 0x8B84;
public const uint GL_OBJECT_ATTACHED_OBJECTS_ARB = 0x8B85;
public const uint GL_OBJECT_ACTIVE_UNIFORMS_ARB = 0x8B86;
public const uint GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB = 0x8B87;
public const uint GL_OBJECT_SHADER_SOURCE_LENGTH_ARB = 0x8B88;
public delegate void PFNGLATTACHOBJECTARBPROC( IntPtr containerObj,IntPtr obj);
public delegate void PFNGLCOMPILESHADERARBPROC( IntPtr shaderObj);
public delegate IntPtr PFNGLCREATEPROGRAMOBJECTARBPROC( );
public delegate IntPtr PFNGLCREATESHADEROBJECTARBPROC( uint shaderType);
public delegate void PFNGLDELETEOBJECTARBPROC( IntPtr obj);
public delegate void PFNGLDETACHOBJECTARBPROC( IntPtr containerObj,IntPtr attachedObj);
public delegate void PFNGLGETACTIVEUNIFORMARBPROC( IntPtr programObj,uint index,int maxLength,IntPtr length,IntPtr size,IntPtr type,IntPtr name);
public delegate void PFNGLGETATTACHEDOBJECTSARBPROC( IntPtr containerObj,int maxCount,IntPtr count,IntPtr obj);
public delegate IntPtr PFNGLGETHANDLEARBPROC( uint pname);
public delegate void PFNGLGETINFOLOGARBPROC( IntPtr obj,int maxLength,IntPtr length,IntPtr infoLog);
public delegate void PFNGLGETOBJECTPARAMETERFVARBPROC( IntPtr obj,uint pname,IntPtr _params);
public delegate void PFNGLGETOBJECTPARAMETERIVARBPROC( IntPtr obj,uint pname,IntPtr _params);
public delegate void PFNGLGETSHADERSOURCEARBPROC( IntPtr obj,int maxLength,IntPtr length,IntPtr source);
public delegate int PFNGLGETUNIFORMLOCATIONARBPROC( IntPtr programObj,string  name);
public delegate void PFNGLGETUNIFORMFVARBPROC( IntPtr programObj,int location,IntPtr _params);
public delegate void PFNGLGETUNIFORMIVARBPROC( IntPtr programObj,int location,IntPtr _params);
public delegate void PFNGLLINKPROGRAMARBPROC( IntPtr programObj);
public delegate void PFNGLSHADERSOURCEARBPROC( IntPtr shaderObj,int count,IntPtr _string,int[] length);
public delegate void PFNGLUNIFORM1FARBPROC( int location,float v0);
public delegate void PFNGLUNIFORM1FVARBPROC( int location,int count,float[]  value);
public delegate void PFNGLUNIFORM1IARBPROC( int location,int v0);
public delegate void PFNGLUNIFORM1IVARBPROC( int location,int count,int[]  value);
public delegate void PFNGLUNIFORM2FARBPROC( int location,float v0,float v1);
public delegate void PFNGLUNIFORM2FVARBPROC( int location,int count,float[]  value);
public delegate void PFNGLUNIFORM2IARBPROC( int location,int v0,int v1);
public delegate void PFNGLUNIFORM2IVARBPROC( int location,int count,int[]  value);
public delegate void PFNGLUNIFORM3FARBPROC( int location,float v0,float v1,float v2);
public delegate void PFNGLUNIFORM3FVARBPROC( int location,int count,float[]  value);
public delegate void PFNGLUNIFORM3IARBPROC( int location,int v0,int v1,int v2);
public delegate void PFNGLUNIFORM3IVARBPROC( int location,int count,int[]  value);
public delegate void PFNGLUNIFORM4FARBPROC( int location,float v0,float v1,float v2,float v3);
public delegate void PFNGLUNIFORM4FVARBPROC( int location,int count,float[]  value);
public delegate void PFNGLUNIFORM4IARBPROC( int location,int v0,int v1,int v2,int v3);
public delegate void PFNGLUNIFORM4IVARBPROC( int location,int count,int[]  value);
public delegate void PFNGLUNIFORMMATRIX2FVARBPROC( int location,int count,bool transpose,float[]  value);
public delegate void PFNGLUNIFORMMATRIX3FVARBPROC( int location,int count,bool transpose,float[]  value);
public delegate void PFNGLUNIFORMMATRIX4FVARBPROC( int location,int count,bool transpose,float[]  value);
public delegate void PFNGLUSEPROGRAMOBJECTARBPROC( IntPtr programObj);
public delegate void PFNGLVALIDATEPROGRAMARBPROC( IntPtr programObj);
/* ------------------------ GL_ARB_shader_precision ------------------------ */
public const uint GL_ARB_shader_precision = 1;
/* ---------------------- GL_ARB_shader_stencil_export --------------------- */
public const uint GL_ARB_shader_stencil_export = 1;
/* ------------------------ GL_ARB_shader_subroutine ----------------------- */
public const uint GL_ARB_shader_subroutine = 1;
public const uint GL_ACTIVE_SUBROUTINES = 0x8DE5;
public const uint GL_ACTIVE_SUBROUTINE_UNIFORMS = 0x8DE6;
public const uint GL_MAX_SUBROUTINES = 0x8DE7;
public const uint GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS = 0x8DE8;
public const uint GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS = 0x8E47;
public const uint GL_ACTIVE_SUBROUTINE_MAX_LENGTH = 0x8E48;
public const uint GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH = 0x8E49;
public const uint GL_NUM_COMPATIBLE_SUBROUTINES = 0x8E4A;
public const uint GL_COMPATIBLE_SUBROUTINES = 0x8E4B;
public delegate void PFNGLGETACTIVESUBROUTINENAMEPROC( uint program,uint shadertype,uint index,int bufsize,IntPtr length,IntPtr name);
public delegate void PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC( uint program,uint shadertype,uint index,int bufsize,IntPtr length,IntPtr name);
public delegate void PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC( uint program,uint shadertype,uint index,uint pname,IntPtr values);
public delegate void PFNGLGETPROGRAMSTAGEIVPROC( uint program,uint shadertype,uint pname,IntPtr values);
public delegate uint PFNGLGETSUBROUTINEINDEXPROC( uint program,uint shadertype,string  name);
public delegate int PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC( uint program,uint shadertype,string  name);
public delegate void PFNGLGETUNIFORMSUBROUTINEUIVPROC( uint shadertype,int location,IntPtr _params);
public delegate void PFNGLUNIFORMSUBROUTINESUIVPROC( uint shadertype,int count,uint[]  indices);
/* ----------------------- GL_ARB_shader_texture_lod ----------------------- */
public const uint GL_ARB_shader_texture_lod = 1;
/* ---------------------- GL_ARB_shading_language_100 ---------------------- */
public const uint GL_ARB_shading_language_100 = 1;
public const uint GL_SHADING_LANGUAGE_VERSION_ARB = 0x8B8C;
/* -------------------- GL_ARB_shading_language_include -------------------- */
public const uint GL_ARB_shading_language_include = 1;
public const uint GL_SHADER_INCLUDE_ARB = 0x8DAE;
public const uint GL_NAMED_STRING_LENGTH_ARB = 0x8DE9;
public const uint GL_NAMED_STRING_TYPE_ARB = 0x8DEA;
public delegate void PFNGLCOMPILESHADERINCLUDEARBPROC( uint shader,int count,IntPtr path,int[] length);
public delegate void PFNGLDELETENAMEDSTRINGARBPROC( int namelen,string  name);
public delegate void PFNGLGETNAMEDSTRINGARBPROC( int namelen,string  name,int bufSize,IntPtr stringlen,IntPtr _string);
public delegate void PFNGLGETNAMEDSTRINGIVARBPROC( int namelen,string  name,uint pname,IntPtr _params);
[return: System.Runtime.InteropServices.MarshalAs(System.Runtime.InteropServices.UnmanagedType.I1)]public delegate bool PFNGLISNAMEDSTRINGARBPROC( int namelen,string  name);
public delegate void PFNGLNAMEDSTRINGARBPROC( uint type,int namelen,string  name,int stringlen,string _string);
/* ----------------------------- GL_ARB_shadow ----------------------------- */
public const uint GL_ARB_shadow = 1;
public const uint GL_TEXTURE_COMPARE_MODE_ARB = 0x884C;
public const uint GL_TEXTURE_COMPARE_FUNC_ARB = 0x884D;
public const uint GL_COMPARE_R_TO_TEXTURE_ARB = 0x884E;
/* ------------------------- GL_ARB_shadow_ambient ------------------------- */
public const uint GL_ARB_shadow_ambient = 1;
public const uint GL_TEXTURE_COMPARE_FAIL_VALUE_ARB = 0x80BF;
/* ------------------------------ GL_ARB_sync ------------------------------ */
public const uint GL_ARB_sync = 1;
public const uint GL_SYNC_FLUSH_COMMANDS_BIT = 0x00000001;
public const uint GL_MAX_SERVER_WAIT_TIMEOUT = 0x9111;
public const uint GL_OBJECT_TYPE = 0x9112;
public const uint GL_SYNC_CONDITION = 0x9113;
public const uint GL_SYNC_STATUS = 0x9114;
public const uint GL_SYNC_FLAGS = 0x9115;
public const uint GL_SYNC_FENCE = 0x9116;
public const uint GL_SYNC_GPU_COMMANDS_COMPLETE = 0x9117;
public const uint GL_UNSIGNALED = 0x9118;
public const uint GL_SIGNALED = 0x9119;
public const uint GL_ALREADY_SIGNALED = 0x911A;
public const uint GL_TIMEOUT_EXPIRED = 0x911B;
public const uint GL_CONDITION_SATISFIED = 0x911C;
public const uint GL_WAIT_FAILED = 0x911D;
public const ulong GL_TIMEOUT_IGNORED = 0xFFFFFFFFFFFFFFFF;
public delegate uint PFNGLCLIENTWAITSYNCPROC( IntPtr GLsync,uint flags,long timeout);
public delegate void PFNGLDELETESYNCPROC( IntPtr GLsync);
public delegate IntPtr PFNGLFENCESYNCPROC( uint condition,uint flags);
public delegate void PFNGLGETINTEGER64VPROC( uint pname,IntPtr _params);
public delegate void PFNGLGETSYNCIVPROC( IntPtr GLsync,uint pname,int bufSize,IntPtr length,IntPtr values);
[return: System.Runtime.InteropServices.MarshalAs(System.Runtime.InteropServices.UnmanagedType.I1)]public delegate bool PFNGLISSYNCPROC( IntPtr GLsync);
public delegate void PFNGLWAITSYNCPROC( IntPtr GLsync,uint flags,long timeout);
/* ----------------------- GL_ARB_tessellation_shader ---------------------- */
public const uint GL_ARB_tessellation_shader = 1;
public const uint GL_PATCHES = 0xE;
public const uint GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER = 0x84F0;
public const uint GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x84F1;
public const uint GL_MAX_TESS_CONTROL_INPUT_COMPONENTS = 0x886C;
public const uint GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS = 0x886D;
public const uint GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS = 0x8E1E;
public const uint GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS = 0x8E1F;
public const uint GL_PATCH_VERTICES = 0x8E72;
public const uint GL_PATCH_DEFAULT_INNER_LEVEL = 0x8E73;
public const uint GL_PATCH_DEFAULT_OUTER_LEVEL = 0x8E74;
public const uint GL_TESS_CONTROL_OUTPUT_VERTICES = 0x8E75;
public const uint GL_TESS_GEN_MODE = 0x8E76;
public const uint GL_TESS_GEN_SPACING = 0x8E77;
public const uint GL_TESS_GEN_VERTEX_ORDER = 0x8E78;
public const uint GL_TESS_GEN_POINT_MODE = 0x8E79;
public const uint GL_ISOLINES = 0x8E7A;
public const uint GL_FRACTIONAL_ODD = 0x8E7B;
public const uint GL_FRACTIONAL_EVEN = 0x8E7C;
public const uint GL_MAX_PATCH_VERTICES = 0x8E7D;
public const uint GL_MAX_TESS_GEN_LEVEL = 0x8E7E;
public const uint GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS = 0x8E7F;
public const uint GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS = 0x8E80;
public const uint GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS = 0x8E81;
public const uint GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS = 0x8E82;
public const uint GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS = 0x8E83;
public const uint GL_MAX_TESS_PATCH_COMPONENTS = 0x8E84;
public const uint GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS = 0x8E85;
public const uint GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS = 0x8E86;
public const uint GL_TESS_EVALUATION_SHADER = 0x8E87;
public const uint GL_TESS_CONTROL_SHADER = 0x8E88;
public const uint GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS = 0x8E89;
public const uint GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS = 0x8E8A;
public delegate void PFNGLPATCHPARAMETERFVPROC( uint pname,float[]  values);
public delegate void PFNGLPATCHPARAMETERIPROC( uint pname,int value);
/* ---------------------- GL_ARB_texture_border_clamp ---------------------- */
public const uint GL_ARB_texture_border_clamp = 1;
public const uint GL_CLAMP_TO_BORDER_ARB = 0x812D;
/* ---------------------- GL_ARB_texture_buffer_object --------------------- */
public const uint GL_ARB_texture_buffer_object = 1;
public const uint GL_TEXTURE_BUFFER_ARB = 0x8C2A;
public const uint GL_MAX_TEXTURE_BUFFER_SIZE_ARB = 0x8C2B;
public const uint GL_TEXTURE_BINDING_BUFFER_ARB = 0x8C2C;
public const uint GL_TEXTURE_BUFFER_DATA_STORE_BINDING_ARB = 0x8C2D;
public const uint GL_TEXTURE_BUFFER_FORMAT_ARB = 0x8C2E;
public delegate void PFNGLTEXBUFFERARBPROC( uint target,uint internalformat,uint buffer);
/* ------------------- GL_ARB_texture_buffer_object_rgb32 ------------------ */
public const uint GL_ARB_texture_buffer_object_rgb32 = 1;
/* ----------------------- GL_ARB_texture_compression ---------------------- */
public const uint GL_ARB_texture_compression = 1;
public const uint GL_COMPRESSED_ALPHA_ARB = 0x84E9;
public const uint GL_COMPRESSED_LUMINANCE_ARB = 0x84EA;
public const uint GL_COMPRESSED_LUMINANCE_ALPHA_ARB = 0x84EB;
public const uint GL_COMPRESSED_INTENSITY_ARB = 0x84EC;
public const uint GL_COMPRESSED_RGB_ARB = 0x84ED;
public const uint GL_COMPRESSED_RGBA_ARB = 0x84EE;
public const uint GL_TEXTURE_COMPRESSION_HINT_ARB = 0x84EF;
public const uint GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB = 0x86A0;
public const uint GL_TEXTURE_COMPRESSED_ARB = 0x86A1;
public const uint GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB = 0x86A2;
public const uint GL_COMPRESSED_TEXTURE_FORMATS_ARB = 0x86A3;
public delegate void PFNGLCOMPRESSEDTEXIMAGE1DARBPROC( uint target,int level,uint internalformat,int width,int border,int imageSize,IntPtr  data);
public delegate void PFNGLCOMPRESSEDTEXIMAGE2DARBPROC( uint target,int level,uint internalformat,int width,int height,int border,int imageSize,IntPtr  data);
public delegate void PFNGLCOMPRESSEDTEXIMAGE3DARBPROC( uint target,int level,uint internalformat,int width,int height,int depth,int border,int imageSize,IntPtr  data);
public delegate void PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC( uint target,int level,int xoffset,int width,uint format,int imageSize,IntPtr  data);
public delegate void PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC( uint target,int level,int xoffset,int yoffset,int width,int height,uint format,int imageSize,IntPtr  data);
public delegate void PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC( uint target,int level,int xoffset,int yoffset,int zoffset,int width,int height,int depth,uint format,int imageSize,IntPtr  data);
public delegate void PFNGLGETCOMPRESSEDTEXIMAGEARBPROC( uint target,int lod,IntPtr img);
/* -------------------- GL_ARB_texture_compression_bptc -------------------- */
public const uint GL_ARB_texture_compression_bptc = 1;
public const uint GL_COMPRESSED_RGBA_BPTC_UNORM_ARB = 0x8E8C;
public const uint GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB = 0x8E8D;
public const uint GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB = 0x8E8E;
public const uint GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB = 0x8E8F;
/* -------------------- GL_ARB_texture_compression_rgtc -------------------- */
public const uint GL_ARB_texture_compression_rgtc = 1;
public const uint GL_COMPRESSED_RED_RGTC1 = 0x8DBB;
public const uint GL_COMPRESSED_SIGNED_RED_RGTC1 = 0x8DBC;
public const uint GL_COMPRESSED_RG_RGTC2 = 0x8DBD;
public const uint GL_COMPRESSED_SIGNED_RG_RGTC2 = 0x8DBE;
/* ------------------------ GL_ARB_texture_cube_map ------------------------ */
public const uint GL_ARB_texture_cube_map = 1;
public const uint GL_NORMAL_MAP_ARB = 0x8511;
public const uint GL_REFLECTION_MAP_ARB = 0x8512;
public const uint GL_TEXTURE_CUBE_MAP_ARB = 0x8513;
public const uint GL_TEXTURE_BINDING_CUBE_MAP_ARB = 0x8514;
public const uint GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB = 0x8515;
public const uint GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB = 0x8516;
public const uint GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB = 0x8517;
public const uint GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB = 0x8518;
public const uint GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB = 0x8519;
public const uint GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB = 0x851A;
public const uint GL_PROXY_TEXTURE_CUBE_MAP_ARB = 0x851B;
public const uint GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB = 0x851C;
/* --------------------- GL_ARB_texture_cube_map_array --------------------- */
public const uint GL_ARB_texture_cube_map_array = 1;
public const uint GL_TEXTURE_CUBE_MAP_ARRAY_ARB = 0x9009;
public const uint GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB = 0x900A;
public const uint GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB = 0x900B;
public const uint GL_SAMPLER_CUBE_MAP_ARRAY_ARB = 0x900C;
public const uint GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB = 0x900D;
public const uint GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB = 0x900E;
public const uint GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB = 0x900F;
/* ------------------------- GL_ARB_texture_env_add ------------------------ */
public const uint GL_ARB_texture_env_add = 1;
/* ----------------------- GL_ARB_texture_env_combine ---------------------- */
public const uint GL_ARB_texture_env_combine = 1;
public const uint GL_SUBTRACT_ARB = 0x84E7;
public const uint GL_COMBINE_ARB = 0x8570;
public const uint GL_COMBINE_RGB_ARB = 0x8571;
public const uint GL_COMBINE_ALPHA_ARB = 0x8572;
public const uint GL_RGB_SCALE_ARB = 0x8573;
public const uint GL_ADD_SIGNED_ARB = 0x8574;
public const uint GL_INTERPOLATE_ARB = 0x8575;
public const uint GL_CONSTANT_ARB = 0x8576;
public const uint GL_PRIMARY_COLOR_ARB = 0x8577;
public const uint GL_PREVIOUS_ARB = 0x8578;
public const uint GL_SOURCE0_RGB_ARB = 0x8580;
public const uint GL_SOURCE1_RGB_ARB = 0x8581;
public const uint GL_SOURCE2_RGB_ARB = 0x8582;
public const uint GL_SOURCE0_ALPHA_ARB = 0x8588;
public const uint GL_SOURCE1_ALPHA_ARB = 0x8589;
public const uint GL_SOURCE2_ALPHA_ARB = 0x858A;
public const uint GL_OPERAND0_RGB_ARB = 0x8590;
public const uint GL_OPERAND1_RGB_ARB = 0x8591;
public const uint GL_OPERAND2_RGB_ARB = 0x8592;
public const uint GL_OPERAND0_ALPHA_ARB = 0x8598;
public const uint GL_OPERAND1_ALPHA_ARB = 0x8599;
public const uint GL_OPERAND2_ALPHA_ARB = 0x859A;
/* ---------------------- GL_ARB_texture_env_crossbar ---------------------- */
public const uint GL_ARB_texture_env_crossbar = 1;
/* ------------------------ GL_ARB_texture_env_dot3 ------------------------ */
public const uint GL_ARB_texture_env_dot3 = 1;
public const uint GL_DOT3_RGB_ARB = 0x86AE;
public const uint GL_DOT3_RGBA_ARB = 0x86AF;
/* -------------------------- GL_ARB_texture_float ------------------------- */
public const uint GL_ARB_texture_float = 1;
public const uint GL_RGBA32F_ARB = 0x8814;
public const uint GL_RGB32F_ARB = 0x8815;
public const uint GL_ALPHA32F_ARB = 0x8816;
public const uint GL_INTENSITY32F_ARB = 0x8817;
public const uint GL_LUMINANCE32F_ARB = 0x8818;
public const uint GL_LUMINANCE_ALPHA32F_ARB = 0x8819;
public const uint GL_RGBA16F_ARB = 0x881A;
public const uint GL_RGB16F_ARB = 0x881B;
public const uint GL_ALPHA16F_ARB = 0x881C;
public const uint GL_INTENSITY16F_ARB = 0x881D;
public const uint GL_LUMINANCE16F_ARB = 0x881E;
public const uint GL_LUMINANCE_ALPHA16F_ARB = 0x881F;
public const uint GL_TEXTURE_RED_TYPE_ARB = 0x8C10;
public const uint GL_TEXTURE_GREEN_TYPE_ARB = 0x8C11;
public const uint GL_TEXTURE_BLUE_TYPE_ARB = 0x8C12;
public const uint GL_TEXTURE_ALPHA_TYPE_ARB = 0x8C13;
public const uint GL_TEXTURE_LUMINANCE_TYPE_ARB = 0x8C14;
public const uint GL_TEXTURE_INTENSITY_TYPE_ARB = 0x8C15;
public const uint GL_TEXTURE_DEPTH_TYPE_ARB = 0x8C16;
public const uint GL_UNSIGNED_NORMALIZED_ARB = 0x8C17;
/* ------------------------- GL_ARB_texture_gather ------------------------- */
public const uint GL_ARB_texture_gather = 1;
public const uint GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB = 0x8E5E;
public const uint GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB = 0x8E5F;
public const uint GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB = 0x8F9F;
/* --------------------- GL_ARB_texture_mirrored_repeat -------------------- */
public const uint GL_ARB_texture_mirrored_repeat = 1;
public const uint GL_MIRRORED_REPEAT_ARB = 0x8370;
/* ----------------------- GL_ARB_texture_multisample ---------------------- */
public const uint GL_ARB_texture_multisample = 1;
public const uint GL_SAMPLE_POSITION = 0x8E50;
public const uint GL_SAMPLE_MASK = 0x8E51;
public const uint GL_SAMPLE_MASK_VALUE = 0x8E52;
public const uint GL_MAX_SAMPLE_MASK_WORDS = 0x8E59;
public const uint GL_TEXTURE_2D_MULTISAMPLE = 0x9100;
public const uint GL_PROXY_TEXTURE_2D_MULTISAMPLE = 0x9101;
public const uint GL_TEXTURE_2D_MULTISAMPLE_ARRAY = 0x9102;
public const uint GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY = 0x9103;
public const uint GL_TEXTURE_BINDING_2D_MULTISAMPLE = 0x9104;
public const uint GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY = 0x9105;
public const uint GL_TEXTURE_SAMPLES = 0x9106;
public const uint GL_TEXTURE_FIXED_SAMPLE_LOCATIONS = 0x9107;
public const uint GL_SAMPLER_2D_MULTISAMPLE = 0x9108;
public const uint GL_INT_SAMPLER_2D_MULTISAMPLE = 0x9109;
public const uint GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE = 0x910A;
public const uint GL_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910B;
public const uint GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910C;
public const uint GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910D;
public const uint GL_MAX_COLOR_TEXTURE_SAMPLES = 0x910E;
public const uint GL_MAX_DEPTH_TEXTURE_SAMPLES = 0x910F;
public const uint GL_MAX_INTEGER_SAMPLES = 0x9110;
public delegate void PFNGLGETMULTISAMPLEFVPROC( uint pname,uint index,IntPtr val);
public delegate void PFNGLSAMPLEMASKIPROC( uint index,uint mask);
public delegate void PFNGLTEXIMAGE2DMULTISAMPLEPROC( uint target,int samples,int internalformat,int width,int height,bool fixedsamplelocations);
public delegate void PFNGLTEXIMAGE3DMULTISAMPLEPROC( uint target,int samples,int internalformat,int width,int height,int depth,bool fixedsamplelocations);
/* -------------------- GL_ARB_texture_non_power_of_two -------------------- */
public const uint GL_ARB_texture_non_power_of_two = 1;
/* ------------------------ GL_ARB_texture_query_lod ----------------------- */
public const uint GL_ARB_texture_query_lod = 1;
/* ------------------------ GL_ARB_texture_rectangle ----------------------- */
public const uint GL_ARB_texture_rectangle = 1;
public const uint GL_TEXTURE_RECTANGLE_ARB = 0x84F5;
public const uint GL_TEXTURE_BINDING_RECTANGLE_ARB = 0x84F6;
public const uint GL_PROXY_TEXTURE_RECTANGLE_ARB = 0x84F7;
public const uint GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB = 0x84F8;
//public const uint GL_SAMPLER_2D_RECT_ARB = 0x8B63;
//public const uint GL_SAMPLER_2D_RECT_SHADOW_ARB = 0x8B64;
/* --------------------------- GL_ARB_texture_rg --------------------------- */
public const uint GL_ARB_texture_rg = 1;
//public const uint GL_RED = 0x1903;
//public const uint GL_COMPRESSED_RED = 0x8225;
//public const uint GL_COMPRESSED_RG = 0x8226;
public const uint GL_RG = 0x8227;
public const uint GL_RG_INTEGER = 0x8228;
public const uint GL_R8 = 0x8229;
public const uint GL_R16 = 0x822A;
public const uint GL_RG8 = 0x822B;
public const uint GL_RG16 = 0x822C;
public const uint GL_R16F = 0x822D;
public const uint GL_R32F = 0x822E;
public const uint GL_RG16F = 0x822F;
public const uint GL_RG32F = 0x8230;
public const uint GL_R8I = 0x8231;
public const uint GL_R8UI = 0x8232;
public const uint GL_R16I = 0x8233;
public const uint GL_R16UI = 0x8234;
public const uint GL_R32I = 0x8235;
public const uint GL_R32UI = 0x8236;
public const uint GL_RG8I = 0x8237;
public const uint GL_RG8UI = 0x8238;
public const uint GL_RG16I = 0x8239;
public const uint GL_RG16UI = 0x823A;
public const uint GL_RG32I = 0x823B;
public const uint GL_RG32UI = 0x823C;
/* ----------------------- GL_ARB_texture_rgb10_a2ui ----------------------- */
public const uint GL_ARB_texture_rgb10_a2ui = 1;
//public const uint GL_RGB10_A2UI = 0x906F;
/* ------------------------- GL_ARB_texture_swizzle ------------------------ */
public const uint GL_ARB_texture_swizzle = 1;
//public const uint GL_TEXTURE_SWIZZLE_R = 0x8E42;
//public const uint GL_TEXTURE_SWIZZLE_G = 0x8E43;
//public const uint GL_TEXTURE_SWIZZLE_B = 0x8E44;
//public const uint GL_TEXTURE_SWIZZLE_A = 0x8E45;
//public const uint GL_TEXTURE_SWIZZLE_RGBA = 0x8E46;
/* --------------------------- GL_ARB_timer_query -------------------------- */
public const uint GL_ARB_timer_query = 1;
public const uint GL_TIME_ELAPSED = 0x88BF;
public const uint GL_TIMESTAMP = 0x8E28;
public delegate void PFNGLGETQUERYOBJECTI64VPROC( uint id,uint pname,IntPtr _params);
public delegate void PFNGLGETQUERYOBJECTUI64VPROC( uint id,uint pname,IntPtr _params);
public delegate void PFNGLQUERYCOUNTERPROC( uint id,uint target);
/* ----------------------- GL_ARB_transform_feedback2 ---------------------- */
public const uint GL_ARB_transform_feedback2 = 1;
public const uint GL_TRANSFORM_FEEDBACK = 0x8E22;
public const uint GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED = 0x8E23;
public const uint GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE = 0x8E24;
public const uint GL_TRANSFORM_FEEDBACK_BINDING = 0x8E25;
public delegate void PFNGLBINDTRANSFORMFEEDBACKPROC( uint target,uint id);
public delegate void PFNGLDELETETRANSFORMFEEDBACKSPROC( int n,uint[]  ids);
public delegate void PFNGLDRAWTRANSFORMFEEDBACKPROC( uint mode,uint id);
public delegate void PFNGLGENTRANSFORMFEEDBACKSPROC( int n,IntPtr ids);
[return: System.Runtime.InteropServices.MarshalAs(System.Runtime.InteropServices.UnmanagedType.I1)]public delegate bool PFNGLISTRANSFORMFEEDBACKPROC( uint id);
public delegate void PFNGLPAUSETRANSFORMFEEDBACKPROC( );
public delegate void PFNGLRESUMETRANSFORMFEEDBACKPROC( );
/* ----------------------- GL_ARB_transform_feedback3 ---------------------- */
public const uint GL_ARB_transform_feedback3 = 1;
public const uint GL_MAX_TRANSFORM_FEEDBACK_BUFFERS = 0x8E70;
//public const uint GL_MAX_VERTEX_STREAMS = 0x8E71;
public delegate void PFNGLBEGINQUERYINDEXEDPROC( uint target,uint index,uint id);
public delegate void PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC( uint mode,uint id,uint stream);
public delegate void PFNGLENDQUERYINDEXEDPROC( uint target,uint index);
public delegate void PFNGLGETQUERYINDEXEDIVPROC( uint target,uint index,uint pname,IntPtr _params);
/* ------------------------ GL_ARB_transpose_matrix ------------------------ */
public const uint GL_ARB_transpose_matrix = 1;
public const uint GL_TRANSPOSE_MODELVIEW_MATRIX_ARB = 0x84E3;
public const uint GL_TRANSPOSE_PROJECTION_MATRIX_ARB = 0x84E4;
public const uint GL_TRANSPOSE_TEXTURE_MATRIX_ARB = 0x84E5;
public const uint GL_TRANSPOSE_COLOR_MATRIX_ARB = 0x84E6;
public delegate void PFNGLLOADTRANSPOSEMATRIXDARBPROC( double m);
public delegate void PFNGLLOADTRANSPOSEMATRIXFARBPROC( float m);
public delegate void PFNGLMULTTRANSPOSEMATRIXDARBPROC( double m);
public delegate void PFNGLMULTTRANSPOSEMATRIXFARBPROC( float m);
/* ---------------------- GL_ARB_uniform_buffer_object --------------------- */
public const uint GL_ARB_uniform_buffer_object = 1;
public const uint GL_UNIFORM_BUFFER = 0x8A11;
public const uint GL_UNIFORM_BUFFER_BINDING = 0x8A28;
public const uint GL_UNIFORM_BUFFER_START = 0x8A29;
public const uint GL_UNIFORM_BUFFER_SIZE = 0x8A2A;
public const uint GL_MAX_VERTEX_UNIFORM_BLOCKS = 0x8A2B;
public const uint GL_MAX_GEOMETRY_UNIFORM_BLOCKS = 0x8A2C;
public const uint GL_MAX_FRAGMENT_UNIFORM_BLOCKS = 0x8A2D;
public const uint GL_MAX_COMBINED_UNIFORM_BLOCKS = 0x8A2E;
public const uint GL_MAX_UNIFORM_BUFFER_BINDINGS = 0x8A2F;
public const uint GL_MAX_UNIFORM_BLOCK_SIZE = 0x8A30;
public const uint GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = 0x8A31;
public const uint GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS = 0x8A32;
public const uint GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = 0x8A33;
public const uint GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT = 0x8A34;
public const uint GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH = 0x8A35;
public const uint GL_ACTIVE_UNIFORM_BLOCKS = 0x8A36;
public const uint GL_UNIFORM_TYPE = 0x8A37;
public const uint GL_UNIFORM_SIZE = 0x8A38;
public const uint GL_UNIFORM_NAME_LENGTH = 0x8A39;
public const uint GL_UNIFORM_BLOCK_INDEX = 0x8A3A;
public const uint GL_UNIFORM_OFFSET = 0x8A3B;
public const uint GL_UNIFORM_ARRAY_STRIDE = 0x8A3C;
public const uint GL_UNIFORM_MATRIX_STRIDE = 0x8A3D;
public const uint GL_UNIFORM_IS_ROW_MAJOR = 0x8A3E;
public const uint GL_UNIFORM_BLOCK_BINDING = 0x8A3F;
public const uint GL_UNIFORM_BLOCK_DATA_SIZE = 0x8A40;
public const uint GL_UNIFORM_BLOCK_NAME_LENGTH = 0x8A41;
public const uint GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS = 0x8A42;
public const uint GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = 0x8A43;
public const uint GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = 0x8A44;
public const uint GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER = 0x8A45;
public const uint GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 0x8A46;
public const uint GL_INVALID_INDEX = 0xFFFFFFFF;
public delegate void PFNGLBINDBUFFERBASEPROC( uint target,uint index,uint buffer);
public delegate void PFNGLBINDBUFFERRANGEPROC( uint target,uint index,uint buffer,IntPtr offset,IntPtr size);
public delegate void PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC( uint program,uint uniformBlockIndex,int bufSize,IntPtr length,IntPtr uniformBlockName);
public delegate void PFNGLGETACTIVEUNIFORMBLOCKIVPROC( uint program,uint uniformBlockIndex,uint pname,IntPtr _params);
public delegate void PFNGLGETACTIVEUNIFORMNAMEPROC( uint program,uint uniformIndex,int bufSize,IntPtr length,IntPtr uniformName);
public delegate void PFNGLGETACTIVEUNIFORMSIVPROC( uint program,int uniformCount,uint[]  uniformIndices,uint pname,IntPtr _params);
public delegate void PFNGLGETINTEGERI_VPROC( uint target,uint index,IntPtr data);
public delegate uint PFNGLGETUNIFORMBLOCKINDEXPROC( uint program,string  uniformBlockName);
public delegate void PFNGLGETUNIFORMINDICESPROC( uint program,int uniformCount,IntPtr uniformNames,IntPtr uniformIndices);
public delegate void PFNGLUNIFORMBLOCKBINDINGPROC( uint program,uint uniformBlockIndex,uint uniformBlockBinding);
/* ------------------------ GL_ARB_vertex_array_bgra ----------------------- */
public const uint GL_ARB_vertex_array_bgra = 1;
//public const uint GL_BGRA = 0x80E1;
/* ----------------------- GL_ARB_vertex_array_object ---------------------- */
public const uint GL_ARB_vertex_array_object = 1;
public const uint GL_VERTEX_ARRAY_BINDING = 0x85B5;
public delegate void PFNGLBINDVERTEXARRAYPROC( uint array);
public delegate void PFNGLDELETEVERTEXARRAYSPROC( int n,uint[]  arrays);
public delegate void PFNGLGENVERTEXARRAYSPROC( int n,IntPtr arrays);
[return: System.Runtime.InteropServices.MarshalAs(System.Runtime.InteropServices.UnmanagedType.I1)]public delegate bool PFNGLISVERTEXARRAYPROC( uint array);
/* ----------------------- GL_ARB_vertex_attrib_64bit ---------------------- */
public const uint GL_ARB_vertex_attrib_64bit = 1;
//public const uint GL_DOUBLE_MAT2 = 0x8F46;
//public const uint GL_DOUBLE_MAT3 = 0x8F47;
//public const uint GL_DOUBLE_MAT4 = 0x8F48;
//public const uint GL_DOUBLE_VEC2 = 0x8FFC;
//public const uint GL_DOUBLE_VEC3 = 0x8FFD;
//public const uint GL_DOUBLE_VEC4 = 0x8FFE;
public delegate void PFNGLGETVERTEXATTRIBLDVPROC( uint index,uint pname,IntPtr _params);
public delegate void PFNGLVERTEXATTRIBL1DPROC( uint index,double x);
public delegate void PFNGLVERTEXATTRIBL1DVPROC( uint index,double[]  v);
public delegate void PFNGLVERTEXATTRIBL2DPROC( uint index,double x,double y);
public delegate void PFNGLVERTEXATTRIBL2DVPROC( uint index,double[]  v);
public delegate void PFNGLVERTEXATTRIBL3DPROC( uint index,double x,double y,double z);
public delegate void PFNGLVERTEXATTRIBL3DVPROC( uint index,double[]  v);
public delegate void PFNGLVERTEXATTRIBL4DPROC( uint index,double x,double y,double z,double w);
public delegate void PFNGLVERTEXATTRIBL4DVPROC( uint index,double[]  v);
public delegate void PFNGLVERTEXATTRIBLPOINTERPROC( uint index,int size,uint type,int stride,IntPtr  pointer);
/* -------------------------- GL_ARB_vertex_blend -------------------------- */
public const uint GL_ARB_vertex_blend = 1;
public const uint GL_MODELVIEW0_ARB = 0x1700;
public const uint GL_MODELVIEW1_ARB = 0x850A;
public const uint GL_MAX_VERTEX_UNITS_ARB = 0x86A4;
public const uint GL_ACTIVE_VERTEX_UNITS_ARB = 0x86A5;
public const uint GL_WEIGHT_SUM_UNITY_ARB = 0x86A6;
public const uint GL_VERTEX_BLEND_ARB = 0x86A7;
public const uint GL_CURRENT_WEIGHT_ARB = 0x86A8;
public const uint GL_WEIGHT_ARRAY_TYPE_ARB = 0x86A9;
public const uint GL_WEIGHT_ARRAY_STRIDE_ARB = 0x86AA;
public const uint GL_WEIGHT_ARRAY_SIZE_ARB = 0x86AB;
public const uint GL_WEIGHT_ARRAY_POINTER_ARB = 0x86AC;
public const uint GL_WEIGHT_ARRAY_ARB = 0x86AD;
public const uint GL_MODELVIEW2_ARB = 0x8722;
public const uint GL_MODELVIEW3_ARB = 0x8723;
public const uint GL_MODELVIEW4_ARB = 0x8724;
public const uint GL_MODELVIEW5_ARB = 0x8725;
public const uint GL_MODELVIEW6_ARB = 0x8726;
public const uint GL_MODELVIEW7_ARB = 0x8727;
public const uint GL_MODELVIEW8_ARB = 0x8728;
public const uint GL_MODELVIEW9_ARB = 0x8729;
public const uint GL_MODELVIEW10_ARB = 0x872A;
public const uint GL_MODELVIEW11_ARB = 0x872B;
public const uint GL_MODELVIEW12_ARB = 0x872C;
public const uint GL_MODELVIEW13_ARB = 0x872D;
public const uint GL_MODELVIEW14_ARB = 0x872E;
public const uint GL_MODELVIEW15_ARB = 0x872F;
public const uint GL_MODELVIEW16_ARB = 0x8730;
public const uint GL_MODELVIEW17_ARB = 0x8731;
public const uint GL_MODELVIEW18_ARB = 0x8732;
public const uint GL_MODELVIEW19_ARB = 0x8733;
public const uint GL_MODELVIEW20_ARB = 0x8734;
public const uint GL_MODELVIEW21_ARB = 0x8735;
public const uint GL_MODELVIEW22_ARB = 0x8736;
public const uint GL_MODELVIEW23_ARB = 0x8737;
public const uint GL_MODELVIEW24_ARB = 0x8738;
public const uint GL_MODELVIEW25_ARB = 0x8739;
public const uint GL_MODELVIEW26_ARB = 0x873A;
public const uint GL_MODELVIEW27_ARB = 0x873B;
public const uint GL_MODELVIEW28_ARB = 0x873C;
public const uint GL_MODELVIEW29_ARB = 0x873D;
public const uint GL_MODELVIEW30_ARB = 0x873E;
public const uint GL_MODELVIEW31_ARB = 0x873F;
public delegate void PFNGLVERTEXBLENDARBPROC( int count);
public delegate void PFNGLWEIGHTPOINTERARBPROC( int size,uint type,int stride,IntPtr pointer);
public delegate void PFNGLWEIGHTBVARBPROC( int size,IntPtr weights);
public delegate void PFNGLWEIGHTDVARBPROC( int size,IntPtr weights);
public delegate void PFNGLWEIGHTFVARBPROC( int size,IntPtr weights);
public delegate void PFNGLWEIGHTIVARBPROC( int size,IntPtr weights);
public delegate void PFNGLWEIGHTSVARBPROC( int size,IntPtr weights);
public delegate void PFNGLWEIGHTUBVARBPROC( int size,IntPtr weights);
public delegate void PFNGLWEIGHTUIVARBPROC( int size,IntPtr weights);
public delegate void PFNGLWEIGHTUSVARBPROC( int size,IntPtr weights);
/* ---------------------- GL_ARB_vertex_buffer_object ---------------------- */
public const uint GL_ARB_vertex_buffer_object = 1;
public const uint GL_BUFFER_SIZE_ARB = 0x8764;
public const uint GL_BUFFER_USAGE_ARB = 0x8765;
public const uint GL_ARRAY_BUFFER_ARB = 0x8892;
public const uint GL_ELEMENT_ARRAY_BUFFER_ARB = 0x8893;
public const uint GL_ARRAY_BUFFER_BINDING_ARB = 0x8894;
public const uint GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB = 0x8895;
public const uint GL_VERTEX_ARRAY_BUFFER_BINDING_ARB = 0x8896;
public const uint GL_NORMAL_ARRAY_BUFFER_BINDING_ARB = 0x8897;
public const uint GL_COLOR_ARRAY_BUFFER_BINDING_ARB = 0x8898;
public const uint GL_INDEX_ARRAY_BUFFER_BINDING_ARB = 0x8899;
public const uint GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB = 0x889A;
public const uint GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB = 0x889B;
public const uint GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB = 0x889C;
public const uint GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB = 0x889D;
public const uint GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB = 0x889E;
public const uint GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB = 0x889F;
public const uint GL_READ_ONLY_ARB = 0x88B8;
public const uint GL_WRITE_ONLY_ARB = 0x88B9;
public const uint GL_READ_WRITE_ARB = 0x88BA;
public const uint GL_BUFFER_ACCESS_ARB = 0x88BB;
public const uint GL_BUFFER_MAPPED_ARB = 0x88BC;
public const uint GL_BUFFER_MAP_POINTER_ARB = 0x88BD;
public const uint GL_STREAM_DRAW_ARB = 0x88E0;
public const uint GL_STREAM_READ_ARB = 0x88E1;
public const uint GL_STREAM_COPY_ARB = 0x88E2;
public const uint GL_STATIC_DRAW_ARB = 0x88E4;
public const uint GL_STATIC_READ_ARB = 0x88E5;
public const uint GL_STATIC_COPY_ARB = 0x88E6;
public const uint GL_DYNAMIC_DRAW_ARB = 0x88E8;
public const uint GL_DYNAMIC_READ_ARB = 0x88E9;
public const uint GL_DYNAMIC_COPY_ARB = 0x88EA;
public delegate void PFNGLBINDBUFFERARBPROC( uint target,uint buffer);
public delegate void PFNGLBUFFERDATAARBPROC( uint target,IntPtr size,IntPtr  data,uint usage);
public delegate void PFNGLBUFFERSUBDATAARBPROC( uint target,IntPtr offset,IntPtr size,IntPtr  data);
public delegate void PFNGLDELETEBUFFERSARBPROC( int n,uint[]  buffers);
public delegate void PFNGLGENBUFFERSARBPROC( int n,IntPtr buffers);
public delegate void PFNGLGETBUFFERPARAMETERIVARBPROC( uint target,uint pname,IntPtr _params);
public delegate void PFNGLGETBUFFERPOINTERVARBPROC( uint target,uint pname,IntPtr _params);
public delegate void PFNGLGETBUFFERSUBDATAARBPROC( uint target,IntPtr offset,IntPtr size,IntPtr data);
[return: System.Runtime.InteropServices.MarshalAs(System.Runtime.InteropServices.UnmanagedType.I1)]public delegate bool PFNGLISBUFFERARBPROC( uint buffer);
public delegate IntPtr PFNGLMAPBUFFERARBPROC( uint target,uint access);
[return: System.Runtime.InteropServices.MarshalAs(System.Runtime.InteropServices.UnmanagedType.I1)]public delegate bool PFNGLUNMAPBUFFERARBPROC( uint target);
/* ------------------------- GL_ARB_vertex_program ------------------------- */
public const uint GL_ARB_vertex_program = 1;
public const uint GL_COLOR_SUM_ARB = 0x8458;
public const uint GL_VERTEX_PROGRAM_ARB = 0x8620;
public const uint GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB = 0x8622;
public const uint GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB = 0x8623;
public const uint GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB = 0x8624;
public const uint GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB = 0x8625;
public const uint GL_CURRENT_VERTEX_ATTRIB_ARB = 0x8626;
public const uint GL_PROGRAM_LENGTH_ARB = 0x8627;
public const uint GL_PROGRAM_STRING_ARB = 0x8628;
public const uint GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB = 0x862E;
public const uint GL_MAX_PROGRAM_MATRICES_ARB = 0x862F;
public const uint GL_CURRENT_MATRIX_STACK_DEPTH_ARB = 0x8640;
public const uint GL_CURRENT_MATRIX_ARB = 0x8641;
public const uint GL_VERTEX_PROGRAM_POINT_SIZE_ARB = 0x8642;
public const uint GL_VERTEX_PROGRAM_TWO_SIDE_ARB = 0x8643;
public const uint GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB = 0x8645;
public const uint GL_PROGRAM_ERROR_POSITION_ARB = 0x864B;
public const uint GL_PROGRAM_BINDING_ARB = 0x8677;
public const uint GL_MAX_VERTEX_ATTRIBS_ARB = 0x8869;
public const uint GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB = 0x886A;
public const uint GL_PROGRAM_ERROR_STRING_ARB = 0x8874;
public const uint GL_PROGRAM_FORMAT_ASCII_ARB = 0x8875;
public const uint GL_PROGRAM_FORMAT_ARB = 0x8876;
public const uint GL_PROGRAM_INSTRUCTIONS_ARB = 0x88A0;
public const uint GL_MAX_PROGRAM_INSTRUCTIONS_ARB = 0x88A1;
public const uint GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB = 0x88A2;
public const uint GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB = 0x88A3;
public const uint GL_PROGRAM_TEMPORARIES_ARB = 0x88A4;
public const uint GL_MAX_PROGRAM_TEMPORARIES_ARB = 0x88A5;
public const uint GL_PROGRAM_NATIVE_TEMPORARIES_ARB = 0x88A6;
public const uint GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB = 0x88A7;
public const uint GL_PROGRAM_PARAMETERS_ARB = 0x88A8;
public const uint GL_MAX_PROGRAM_PARAMETERS_ARB = 0x88A9;
public const uint GL_PROGRAM_NATIVE_PARAMETERS_ARB = 0x88AA;
public const uint GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB = 0x88AB;
public const uint GL_PROGRAM_ATTRIBS_ARB = 0x88AC;
public const uint GL_MAX_PROGRAM_ATTRIBS_ARB = 0x88AD;
public const uint GL_PROGRAM_NATIVE_ATTRIBS_ARB = 0x88AE;
public const uint GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB = 0x88AF;
public const uint GL_PROGRAM_ADDRESS_REGISTERS_ARB = 0x88B0;
public const uint GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB = 0x88B1;
public const uint GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = 0x88B2;
public const uint GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = 0x88B3;
public const uint GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB = 0x88B4;
public const uint GL_MAX_PROGRAM_ENV_PARAMETERS_ARB = 0x88B5;
public const uint GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB = 0x88B6;
public const uint GL_TRANSPOSE_CURRENT_MATRIX_ARB = 0x88B7;
public const uint GL_MATRIX0_ARB = 0x88C0;
public const uint GL_MATRIX1_ARB = 0x88C1;
public const uint GL_MATRIX2_ARB = 0x88C2;
public const uint GL_MATRIX3_ARB = 0x88C3;
public const uint GL_MATRIX4_ARB = 0x88C4;
public const uint GL_MATRIX5_ARB = 0x88C5;
public const uint GL_MATRIX6_ARB = 0x88C6;
public const uint GL_MATRIX7_ARB = 0x88C7;
public const uint GL_MATRIX8_ARB = 0x88C8;
public const uint GL_MATRIX9_ARB = 0x88C9;
public const uint GL_MATRIX10_ARB = 0x88CA;
public const uint GL_MATRIX11_ARB = 0x88CB;
public const uint GL_MATRIX12_ARB = 0x88CC;
public const uint GL_MATRIX13_ARB = 0x88CD;
public const uint GL_MATRIX14_ARB = 0x88CE;
public const uint GL_MATRIX15_ARB = 0x88CF;
public const uint GL_MATRIX16_ARB = 0x88D0;
public const uint GL_MATRIX17_ARB = 0x88D1;
public const uint GL_MATRIX18_ARB = 0x88D2;
public const uint GL_MATRIX19_ARB = 0x88D3;
public const uint GL_MATRIX20_ARB = 0x88D4;
public const uint GL_MATRIX21_ARB = 0x88D5;
public const uint GL_MATRIX22_ARB = 0x88D6;
public const uint GL_MATRIX23_ARB = 0x88D7;
public const uint GL_MATRIX24_ARB = 0x88D8;
public const uint GL_MATRIX25_ARB = 0x88D9;
public const uint GL_MATRIX26_ARB = 0x88DA;
public const uint GL_MATRIX27_ARB = 0x88DB;
public const uint GL_MATRIX28_ARB = 0x88DC;
public const uint GL_MATRIX29_ARB = 0x88DD;
public const uint GL_MATRIX30_ARB = 0x88DE;
public const uint GL_MATRIX31_ARB = 0x88DF;
public delegate void PFNGLBINDPROGRAMARBPROC( uint target,uint program);
public delegate void PFNGLDELETEPROGRAMSARBPROC( int n,uint[]  programs);
public delegate void PFNGLDISABLEVERTEXATTRIBARRAYARBPROC( uint index);
public delegate void PFNGLENABLEVERTEXATTRIBARRAYARBPROC( uint index);
public delegate void PFNGLGENPROGRAMSARBPROC( int n,IntPtr programs);
public delegate void PFNGLGETPROGRAMENVPARAMETERDVARBPROC( uint target,uint index,IntPtr _params);
public delegate void PFNGLGETPROGRAMENVPARAMETERFVARBPROC( uint target,uint index,IntPtr _params);
public delegate void PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC( uint target,uint index,IntPtr _params);
public delegate void PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC( uint target,uint index,IntPtr _params);
public delegate void PFNGLGETPROGRAMSTRINGARBPROC( uint target,uint pname,IntPtr _string);
public delegate void PFNGLGETPROGRAMIVARBPROC( uint target,uint pname,IntPtr _params);
public delegate void PFNGLGETVERTEXATTRIBPOINTERVARBPROC( uint index,uint pname,IntPtr pointer);
public delegate void PFNGLGETVERTEXATTRIBDVARBPROC( uint index,uint pname,IntPtr _params);
public delegate void PFNGLGETVERTEXATTRIBFVARBPROC( uint index,uint pname,IntPtr _params);
public delegate void PFNGLGETVERTEXATTRIBIVARBPROC( uint index,uint pname,IntPtr _params);
[return: System.Runtime.InteropServices.MarshalAs(System.Runtime.InteropServices.UnmanagedType.I1)]public delegate bool PFNGLISPROGRAMARBPROC( uint program);
public delegate void PFNGLPROGRAMENVPARAMETER4DARBPROC( uint target,uint index,double x,double y,double z,double w);
public delegate void PFNGLPROGRAMENVPARAMETER4DVARBPROC( uint target,uint index,double[]  _params);
public delegate void PFNGLPROGRAMENVPARAMETER4FARBPROC( uint target,uint index,float x,float y,float z,float w);
public delegate void PFNGLPROGRAMENVPARAMETER4FVARBPROC( uint target,uint index,float[]  _params);
public delegate void PFNGLPROGRAMLOCALPARAMETER4DARBPROC( uint target,uint index,double x,double y,double z,double w);
public delegate void PFNGLPROGRAMLOCALPARAMETER4DVARBPROC( uint target,uint index,double[]  _params);
public delegate void PFNGLPROGRAMLOCALPARAMETER4FARBPROC( uint target,uint index,float x,float y,float z,float w);
public delegate void PFNGLPROGRAMLOCALPARAMETER4FVARBPROC( uint target,uint index,float[]  _params);
public delegate void PFNGLPROGRAMSTRINGARBPROC( uint target,uint format,int len,IntPtr  _string);
public delegate void PFNGLVERTEXATTRIB1DARBPROC( uint index,double x);
public delegate void PFNGLVERTEXATTRIB1DVARBPROC( uint index,double[]  v);
public delegate void PFNGLVERTEXATTRIB1FARBPROC( uint index,float x);
public delegate void PFNGLVERTEXATTRIB1FVARBPROC( uint index,float[]  v);
public delegate void PFNGLVERTEXATTRIB1SARBPROC( uint index,short x);
public delegate void PFNGLVERTEXATTRIB1SVARBPROC( uint index,short[]  v);
public delegate void PFNGLVERTEXATTRIB2DARBPROC( uint index,double x,double y);
public delegate void PFNGLVERTEXATTRIB2DVARBPROC( uint index,double[]  v);
public delegate void PFNGLVERTEXATTRIB2FARBPROC( uint index,float x,float y);
public delegate void PFNGLVERTEXATTRIB2FVARBPROC( uint index,float[]  v);
public delegate void PFNGLVERTEXATTRIB2SARBPROC( uint index,short x,short y);
public delegate void PFNGLVERTEXATTRIB2SVARBPROC( uint index,short[]  v);
public delegate void PFNGLVERTEXATTRIB3DARBPROC( uint index,double x,double y,double z);
public delegate void PFNGLVERTEXATTRIB3DVARBPROC( uint index,double[]  v);
public delegate void PFNGLVERTEXATTRIB3FARBPROC( uint index,float x,float y,float z);
public delegate void PFNGLVERTEXATTRIB3FVARBPROC( uint index,float[]  v);
public delegate void PFNGLVERTEXATTRIB3SARBPROC( uint index,short x,short y,short z);
public delegate void PFNGLVERTEXATTRIB3SVARBPROC( uint index,short[]  v);
public delegate void PFNGLVERTEXATTRIB4NBVARBPROC( uint index,byte[]  v);
public delegate void PFNGLVERTEXATTRIB4NIVARBPROC( uint index,int[]  v);
public delegate void PFNGLVERTEXATTRIB4NSVARBPROC( uint index,short[]  v);
public delegate void PFNGLVERTEXATTRIB4NUBARBPROC( uint index,byte x,byte y,byte z,byte w);
public delegate void PFNGLVERTEXATTRIB4NUBVARBPROC( uint index,byte[]  v);
public delegate void PFNGLVERTEXATTRIB4NUIVARBPROC( uint index,uint[]  v);
public delegate void PFNGLVERTEXATTRIB4NUSVARBPROC( uint index,ushort[]  v);
public delegate void PFNGLVERTEXATTRIB4BVARBPROC( uint index,byte[]  v);
public delegate void PFNGLVERTEXATTRIB4DARBPROC( uint index,double x,double y,double z,double w);
public delegate void PFNGLVERTEXATTRIB4DVARBPROC( uint index,double[]  v);
public delegate void PFNGLVERTEXATTRIB4FARBPROC( uint index,float x,float y,float z,float w);
public delegate void PFNGLVERTEXATTRIB4FVARBPROC( uint index,float[]  v);
public delegate void PFNGLVERTEXATTRIB4IVARBPROC( uint index,int[]  v);
public delegate void PFNGLVERTEXATTRIB4SARBPROC( uint index,short x,short y,short z,short w);
public delegate void PFNGLVERTEXATTRIB4SVARBPROC( uint index,short[]  v);
public delegate void PFNGLVERTEXATTRIB4UBVARBPROC( uint index,byte[]  v);
public delegate void PFNGLVERTEXATTRIB4UIVARBPROC( uint index,uint[]  v);
public delegate void PFNGLVERTEXATTRIB4USVARBPROC( uint index,ushort[]  v);
public delegate void PFNGLVERTEXATTRIBPOINTERARBPROC( uint index,int size,uint type,bool normalized,int stride,IntPtr  pointer);
/* -------------------------- GL_ARB_vertex_shader ------------------------- */
public const uint GL_ARB_vertex_shader = 1;
public const uint GL_VERTEX_SHADER_ARB = 0x8B31;
public const uint GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB = 0x8B4A;
public const uint GL_MAX_VARYING_FLOATS_ARB = 0x8B4B;
public const uint GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB = 0x8B4C;
public const uint GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB = 0x8B4D;
public const uint GL_OBJECT_ACTIVE_ATTRIBUTES_ARB = 0x8B89;
public const uint GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB = 0x8B8A;
public delegate void PFNGLBINDATTRIBLOCATIONARBPROC( IntPtr programObj,uint index,string  name);
public delegate void PFNGLGETACTIVEATTRIBARBPROC( IntPtr programObj,uint index,int maxLength,IntPtr length,IntPtr size,IntPtr type,IntPtr name);
public delegate int PFNGLGETATTRIBLOCATIONARBPROC( IntPtr programObj,string  name);
/* ------------------- GL_ARB_vertex_type_2_10_10_10_rev ------------------- */
public const uint GL_ARB_vertex_type_2_10_10_10_rev = 1;
//public const uint GL_UNSIGNED_INT_2_10_10_10_REV = 0x8368;
public const uint GL_INT_2_10_10_10_REV = 0x8D9F;
public delegate void PFNGLCOLORP3UIPROC( uint type,uint color);
public delegate void PFNGLCOLORP3UIVPROC( uint type,uint[]  color);
public delegate void PFNGLCOLORP4UIPROC( uint type,uint color);
public delegate void PFNGLCOLORP4UIVPROC( uint type,uint[]  color);
public delegate void PFNGLMULTITEXCOORDP1UIPROC( uint texture,uint type,uint coords);
public delegate void PFNGLMULTITEXCOORDP1UIVPROC( uint texture,uint type,uint[]  coords);
public delegate void PFNGLMULTITEXCOORDP2UIPROC( uint texture,uint type,uint coords);
public delegate void PFNGLMULTITEXCOORDP2UIVPROC( uint texture,uint type,uint[]  coords);
public delegate void PFNGLMULTITEXCOORDP3UIPROC( uint texture,uint type,uint coords);
public delegate void PFNGLMULTITEXCOORDP3UIVPROC( uint texture,uint type,uint[]  coords);
public delegate void PFNGLMULTITEXCOORDP4UIPROC( uint texture,uint type,uint coords);
public delegate void PFNGLMULTITEXCOORDP4UIVPROC( uint texture,uint type,uint[]  coords);
public delegate void PFNGLNORMALP3UIPROC( uint type,uint coords);
public delegate void PFNGLNORMALP3UIVPROC( uint type,uint[]  coords);
public delegate void PFNGLSECONDARYCOLORP3UIPROC( uint type,uint color);
public delegate void PFNGLSECONDARYCOLORP3UIVPROC( uint type,uint[]  color);
public delegate void PFNGLTEXCOORDP1UIPROC( uint type,uint coords);
public delegate void PFNGLTEXCOORDP1UIVPROC( uint type,uint[]  coords);
public delegate void PFNGLTEXCOORDP2UIPROC( uint type,uint coords);
public delegate void PFNGLTEXCOORDP2UIVPROC( uint type,uint[]  coords);
public delegate void PFNGLTEXCOORDP3UIPROC( uint type,uint coords);
public delegate void PFNGLTEXCOORDP3UIVPROC( uint type,uint[]  coords);
public delegate void PFNGLTEXCOORDP4UIPROC( uint type,uint coords);
public delegate void PFNGLTEXCOORDP4UIVPROC( uint type,uint[]  coords);
public delegate void PFNGLVERTEXATTRIBP1UIPROC( uint index,uint type,bool normalized,uint value);
public delegate void PFNGLVERTEXATTRIBP1UIVPROC( uint index,uint type,bool normalized,uint[]  value);
public delegate void PFNGLVERTEXATTRIBP2UIPROC( uint index,uint type,bool normalized,uint value);
public delegate void PFNGLVERTEXATTRIBP2UIVPROC( uint index,uint type,bool normalized,uint[]  value);
public delegate void PFNGLVERTEXATTRIBP3UIPROC( uint index,uint type,bool normalized,uint value);
public delegate void PFNGLVERTEXATTRIBP3UIVPROC( uint index,uint type,bool normalized,uint[]  value);
public delegate void PFNGLVERTEXATTRIBP4UIPROC( uint index,uint type,bool normalized,uint value);
public delegate void PFNGLVERTEXATTRIBP4UIVPROC( uint index,uint type,bool normalized,uint[]  value);
public delegate void PFNGLVERTEXP2UIPROC( uint type,uint value);
public delegate void PFNGLVERTEXP2UIVPROC( uint type,uint[]  value);
public delegate void PFNGLVERTEXP3UIPROC( uint type,uint value);
public delegate void PFNGLVERTEXP3UIVPROC( uint type,uint[]  value);
public delegate void PFNGLVERTEXP4UIPROC( uint type,uint value);
public delegate void PFNGLVERTEXP4UIVPROC( uint type,uint[]  value);
/* ------------------------- GL_ARB_viewport_array ------------------------- */
public const uint GL_ARB_viewport_array = 1;
//public const uint GL_DEPTH_RANGE = 0x0B70;
//public const uint GL_VIEWPORT = 0x0BA2;
//public const uint GL_SCISSOR_BOX = 0x0C10;
//public const uint GL_SCISSOR_TEST = 0x0C11;
public const uint GL_MAX_VIEWPORTS = 0x825B;
public const uint GL_VIEWPORT_SUBPIXEL_BITS = 0x825C;
public const uint GL_VIEWPORT_BOUNDS_RANGE = 0x825D;
public const uint GL_LAYER_PROVOKING_VERTEX = 0x825E;
public const uint GL_VIEWPORT_INDEX_PROVOKING_VERTEX = 0x825F;
public const uint GL_UNDEFINED_VERTEX = 0x8260;
//public const uint GL_FIRST_VERTEX_CONVENTION = 0x8E4D;
//public const uint GL_LAST_VERTEX_CONVENTION = 0x8E4E;
//public const uint GL_PROVOKING_VERTEX = 0x8E4F;
public delegate void PFNGLDEPTHRANGEARRAYVPROC( uint first,int count,double[]  v);
public delegate void PFNGLDEPTHRANGEINDEXEDPROC( uint index,double n,double f);
public delegate void PFNGLGETDOUBLEI_VPROC( uint target,uint index,IntPtr data);
public delegate void PFNGLGETFLOATI_VPROC( uint target,uint index,IntPtr data);
public delegate void PFNGLSCISSORARRAYVPROC( uint first,int count,int[]  v);
public delegate void PFNGLSCISSORINDEXEDPROC( uint index,int left,int bottom,int width,int height);
public delegate void PFNGLSCISSORINDEXEDVPROC( uint index,int[]  v);
public delegate void PFNGLVIEWPORTARRAYVPROC( uint first,int count,float[]  v);
public delegate void PFNGLVIEWPORTINDEXEDFPROC( uint index,float x,float y,float w,float h);
public delegate void PFNGLVIEWPORTINDEXEDFVPROC( uint index,float[]  v);
/* --------------------------- GL_ARB_window_pos --------------------------- */
public const uint GL_ARB_window_pos = 1;
public delegate void PFNGLWINDOWPOS2DARBPROC( double x,double y);
public delegate void PFNGLWINDOWPOS2DVARBPROC( double[]  p);
public delegate void PFNGLWINDOWPOS2FARBPROC( float x,float y);
public delegate void PFNGLWINDOWPOS2FVARBPROC( float[]  p);
public delegate void PFNGLWINDOWPOS2IARBPROC( int x,int y);
public delegate void PFNGLWINDOWPOS2IVARBPROC( int[]  p);
public delegate void PFNGLWINDOWPOS2SARBPROC( short x,short y);
public delegate void PFNGLWINDOWPOS2SVARBPROC( short[]  p);
public delegate void PFNGLWINDOWPOS3DARBPROC( double x,double y,double z);
public delegate void PFNGLWINDOWPOS3DVARBPROC( double[]  p);
public delegate void PFNGLWINDOWPOS3FARBPROC( float x,float y,float z);
public delegate void PFNGLWINDOWPOS3FVARBPROC( float[]  p);
public delegate void PFNGLWINDOWPOS3IARBPROC( int x,int y,int z);
public delegate void PFNGLWINDOWPOS3IVARBPROC( int[]  p);
public delegate void PFNGLWINDOWPOS3SARBPROC( short x,short y,short z);
public delegate void PFNGLWINDOWPOS3SVARBPROC( short[]  p);
/* ------------------------- GL_ATIX_point_sprites ------------------------- */
public const uint GL_ATIX_point_sprites = 1;
public const uint GL_TEXTURE_POINT_MODE_ATIX = 0x60B0;
public const uint GL_TEXTURE_POINT_ONE_COORD_ATIX = 0x60B1;
public const uint GL_TEXTURE_POINT_SPRITE_ATIX = 0x60B2;
public const uint GL_POINT_SPRITE_CULL_MODE_ATIX = 0x60B3;
public const uint GL_POINT_SPRITE_CULL_CENTER_ATIX = 0x60B4;
public const uint GL_POINT_SPRITE_CULL_CLIP_ATIX = 0x60B5;
/* ---------------------- GL_ATIX_texture_env_combine3 --------------------- */
public const uint GL_ATIX_texture_env_combine3 = 1;
public const uint GL_MODULATE_ADD_ATIX = 0x8744;
public const uint GL_MODULATE_SIGNED_ADD_ATIX = 0x8745;
public const uint GL_MODULATE_SUBTRACT_ATIX = 0x8746;
/* ----------------------- GL_ATIX_texture_env_route ----------------------- */
public const uint GL_ATIX_texture_env_route = 1;
public const uint GL_SECONDARY_COLOR_ATIX = 0x8747;
public const uint GL_TEXTURE_OUTPUT_RGB_ATIX = 0x8748;
public const uint GL_TEXTURE_OUTPUT_ALPHA_ATIX = 0x8749;
/* ---------------- GL_ATIX_vertex_shader_output_point_size ---------------- */
public const uint GL_ATIX_vertex_shader_output_point_size = 1;
public const uint GL_OUTPUT_POINT_SIZE_ATIX = 0x610E;
/* -------------------------- GL_ATI_draw_buffers -------------------------- */
public const uint GL_ATI_draw_buffers = 1;
public const uint GL_MAX_DRAW_BUFFERS_ATI = 0x8824;
public const uint GL_DRAW_BUFFER0_ATI = 0x8825;
public const uint GL_DRAW_BUFFER1_ATI = 0x8826;
public const uint GL_DRAW_BUFFER2_ATI = 0x8827;
public const uint GL_DRAW_BUFFER3_ATI = 0x8828;
public const uint GL_DRAW_BUFFER4_ATI = 0x8829;
public const uint GL_DRAW_BUFFER5_ATI = 0x882A;
public const uint GL_DRAW_BUFFER6_ATI = 0x882B;
public const uint GL_DRAW_BUFFER7_ATI = 0x882C;
public const uint GL_DRAW_BUFFER8_ATI = 0x882D;
public const uint GL_DRAW_BUFFER9_ATI = 0x882E;
public const uint GL_DRAW_BUFFER10_ATI = 0x882F;
public const uint GL_DRAW_BUFFER11_ATI = 0x8830;
public const uint GL_DRAW_BUFFER12_ATI = 0x8831;
public const uint GL_DRAW_BUFFER13_ATI = 0x8832;
public const uint GL_DRAW_BUFFER14_ATI = 0x8833;
public const uint GL_DRAW_BUFFER15_ATI = 0x8834;
public delegate void PFNGLDRAWBUFFERSATIPROC( int n,uint[]  bufs);
/* -------------------------- GL_ATI_element_array ------------------------- */
public const uint GL_ATI_element_array = 1;
public const uint GL_ELEMENT_ARRAY_ATI = 0x8768;
public const uint GL_ELEMENT_ARRAY_TYPE_ATI = 0x8769;
public const uint GL_ELEMENT_ARRAY_POINTER_ATI = 0x876A;
public delegate void PFNGLDRAWELEMENTARRAYATIPROC( uint mode,int count);
public delegate void PFNGLDRAWRANGEELEMENTARRAYATIPROC( uint mode,uint start,uint end,int count);
public delegate void PFNGLELEMENTPOINTERATIPROC( uint type,IntPtr  pointer);
/* ------------------------- GL_ATI_envmap_bumpmap ------------------------- */
public const uint GL_ATI_envmap_bumpmap = 1;
public const uint GL_BUMP_ROT_MATRIX_ATI = 0x8775;
public const uint GL_BUMP_ROT_MATRIX_SIZE_ATI = 0x8776;
public const uint GL_BUMP_NUM_TEX_UNITS_ATI = 0x8777;
public const uint GL_BUMP_TEX_UNITS_ATI = 0x8778;
public const uint GL_DUDV_ATI = 0x8779;
public const uint GL_DU8DV8_ATI = 0x877A;
public const uint GL_BUMP_ENVMAP_ATI = 0x877B;
public const uint GL_BUMP_TARGET_ATI = 0x877C;
public delegate void PFNGLGETTEXBUMPPARAMETERFVATIPROC( uint pname,IntPtr param);
public delegate void PFNGLGETTEXBUMPPARAMETERIVATIPROC( uint pname,IntPtr param);
public delegate void PFNGLTEXBUMPPARAMETERFVATIPROC( uint pname,IntPtr param);
public delegate void PFNGLTEXBUMPPARAMETERIVATIPROC( uint pname,IntPtr param);
/* ------------------------- GL_ATI_fragment_shader ------------------------ */
public const uint GL_ATI_fragment_shader = 1;
public const uint GL_RED_BIT_ATI = 0x00000001;
public const uint GL_2X_BIT_ATI = 0x00000001;
public const uint GL_4X_BIT_ATI = 0x00000002;
public const uint GL_GREEN_BIT_ATI = 0x00000002;
public const uint GL_COMP_BIT_ATI = 0x00000002;
public const uint GL_BLUE_BIT_ATI = 0x00000004;
public const uint GL_8X_BIT_ATI = 0x00000004;
public const uint GL_NEGATE_BIT_ATI = 0x00000004;
public const uint GL_BIAS_BIT_ATI = 0x00000008;
public const uint GL_HALF_BIT_ATI = 0x00000008;
public const uint GL_QUARTER_BIT_ATI = 0x00000010;
public const uint GL_EIGHTH_BIT_ATI = 0x00000020;
public const uint GL_SATURATE_BIT_ATI = 0x00000040;
public const uint GL_FRAGMENT_SHADER_ATI = 0x8920;
public const uint GL_REG_0_ATI = 0x8921;
public const uint GL_REG_1_ATI = 0x8922;
public const uint GL_REG_2_ATI = 0x8923;
public const uint GL_REG_3_ATI = 0x8924;
public const uint GL_REG_4_ATI = 0x8925;
public const uint GL_REG_5_ATI = 0x8926;
public const uint GL_CON_0_ATI = 0x8941;
public const uint GL_CON_1_ATI = 0x8942;
public const uint GL_CON_2_ATI = 0x8943;
public const uint GL_CON_3_ATI = 0x8944;
public const uint GL_CON_4_ATI = 0x8945;
public const uint GL_CON_5_ATI = 0x8946;
public const uint GL_CON_6_ATI = 0x8947;
public const uint GL_CON_7_ATI = 0x8948;
public const uint GL_MOV_ATI = 0x8961;
public const uint GL_ADD_ATI = 0x8963;
public const uint GL_MUL_ATI = 0x8964;
public const uint GL_SUB_ATI = 0x8965;
public const uint GL_DOT3_ATI = 0x8966;
public const uint GL_DOT4_ATI = 0x8967;
public const uint GL_MAD_ATI = 0x8968;
public const uint GL_LERP_ATI = 0x8969;
public const uint GL_CND_ATI = 0x896A;
public const uint GL_CND0_ATI = 0x896B;
public const uint GL_DOT2_ADD_ATI = 0x896C;
public const uint GL_SECONDARY_INTERPOLATOR_ATI = 0x896D;
public const uint GL_NUM_FRAGMENT_REGISTERS_ATI = 0x896E;
public const uint GL_NUM_FRAGMENT_CONSTANTS_ATI = 0x896F;
public const uint GL_NUM_PASSES_ATI = 0x8970;
public const uint GL_NUM_INSTRUCTIONS_PER_PASS_ATI = 0x8971;
public const uint GL_NUM_INSTRUCTIONS_TOTAL_ATI = 0x8972;
public const uint GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI = 0x8973;
public const uint GL_NUM_LOOPBACK_COMPONENTS_ATI = 0x8974;
public const uint GL_COLOR_ALPHA_PAIRING_ATI = 0x8975;
public const uint GL_SWIZZLE_STR_ATI = 0x8976;
public const uint GL_SWIZZLE_STQ_ATI = 0x8977;
public const uint GL_SWIZZLE_STR_DR_ATI = 0x8978;
public const uint GL_SWIZZLE_STQ_DQ_ATI = 0x8979;
public const uint GL_SWIZZLE_STRQ_ATI = 0x897A;
public const uint GL_SWIZZLE_STRQ_DQ_ATI = 0x897B;
public delegate void PFNGLALPHAFRAGMENTOP1ATIPROC( uint op,uint dst,uint dstMod,uint arg1,uint arg1Rep,uint arg1Mod);
public delegate void PFNGLALPHAFRAGMENTOP2ATIPROC( uint op,uint dst,uint dstMod,uint arg1,uint arg1Rep,uint arg1Mod,uint arg2,uint arg2Rep,uint arg2Mod);
public delegate void PFNGLALPHAFRAGMENTOP3ATIPROC( uint op,uint dst,uint dstMod,uint arg1,uint arg1Rep,uint arg1Mod,uint arg2,uint arg2Rep,uint arg2Mod,uint arg3,uint arg3Rep,uint arg3Mod);
public delegate void PFNGLBEGINFRAGMENTSHADERATIPROC( );
public delegate void PFNGLBINDFRAGMENTSHADERATIPROC( uint id);
public delegate void PFNGLCOLORFRAGMENTOP1ATIPROC( uint op,uint dst,uint dstMask,uint dstMod,uint arg1,uint arg1Rep,uint arg1Mod);
public delegate void PFNGLCOLORFRAGMENTOP2ATIPROC( uint op,uint dst,uint dstMask,uint dstMod,uint arg1,uint arg1Rep,uint arg1Mod,uint arg2,uint arg2Rep,uint arg2Mod);
public delegate void PFNGLCOLORFRAGMENTOP3ATIPROC( uint op,uint dst,uint dstMask,uint dstMod,uint arg1,uint arg1Rep,uint arg1Mod,uint arg2,uint arg2Rep,uint arg2Mod,uint arg3,uint arg3Rep,uint arg3Mod);
public delegate void PFNGLDELETEFRAGMENTSHADERATIPROC( uint id);
public delegate void PFNGLENDFRAGMENTSHADERATIPROC( );
public delegate uint PFNGLGENFRAGMENTSHADERSATIPROC( uint range);
public delegate void PFNGLPASSTEXCOORDATIPROC( uint dst,uint coord,uint swizzle);
public delegate void PFNGLSAMPLEMAPATIPROC( uint dst,uint interp,uint swizzle);
public delegate void PFNGLSETFRAGMENTSHADERCONSTANTATIPROC( uint dst,float[]  value);
/* ------------------------ GL_ATI_map_object_buffer ----------------------- */
public const uint GL_ATI_map_object_buffer = 1;
public delegate IntPtr PFNGLMAPOBJECTBUFFERATIPROC( uint buffer);
public delegate void PFNGLUNMAPOBJECTBUFFERATIPROC( uint buffer);
/* ----------------------------- GL_ATI_meminfo ---------------------------- */
public const uint GL_ATI_meminfo = 1;
public const uint GL_VBO_FREE_MEMORY_ATI = 0x87FB;
public const uint GL_TEXTURE_FREE_MEMORY_ATI = 0x87FC;
public const uint GL_RENDERBUFFER_FREE_MEMORY_ATI = 0x87FD;
/* -------------------------- GL_ATI_pn_triangles -------------------------- */
public const uint GL_ATI_pn_triangles = 1;
public const uint GL_PN_TRIANGLES_ATI = 0x87F0;
public const uint GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI = 0x87F1;
public const uint GL_PN_TRIANGLES_POINT_MODE_ATI = 0x87F2;
public const uint GL_PN_TRIANGLES_NORMAL_MODE_ATI = 0x87F3;
public const uint GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI = 0x87F4;
public const uint GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI = 0x87F5;
public const uint GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI = 0x87F6;
public const uint GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI = 0x87F7;
public const uint GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI = 0x87F8;
public delegate void PFNGLPNTRIANGLESFATIPROC( uint pname,float param);
public delegate void PFNGLPNTRIANGLESIATIPROC( uint pname,int param);
/* ------------------------ GL_ATI_separate_stencil ------------------------ */
public const uint GL_ATI_separate_stencil = 1;
public const uint GL_STENCIL_BACK_FUNC_ATI = 0x8800;
public const uint GL_STENCIL_BACK_FAIL_ATI = 0x8801;
public const uint GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI = 0x8802;
public const uint GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI = 0x8803;
public delegate void PFNGLSTENCILFUNCSEPARATEATIPROC( uint frontfunc,uint backfunc,int _ref,uint mask);
public delegate void PFNGLSTENCILOPSEPARATEATIPROC( uint face,uint sfail,uint dpfail,uint dppass);
/* ----------------------- GL_ATI_shader_texture_lod ----------------------- */
public const uint GL_ATI_shader_texture_lod = 1;
/* ---------------------- GL_ATI_text_fragment_shader ---------------------- */
public const uint GL_ATI_text_fragment_shader = 1;
public const uint GL_TEXT_FRAGMENT_SHADER_ATI = 0x8200;
/* --------------------- GL_ATI_texture_compression_3dc -------------------- */
public const uint GL_ATI_texture_compression_3dc = 1;
public const uint GL_COMPRESSED_LUMINANCE_ALPHA_3DC_ATI = 0x8837;
/* ---------------------- GL_ATI_texture_env_combine3 ---------------------- */
public const uint GL_ATI_texture_env_combine3 = 1;
public const uint GL_MODULATE_ADD_ATI = 0x8744;
public const uint GL_MODULATE_SIGNED_ADD_ATI = 0x8745;
public const uint GL_MODULATE_SUBTRACT_ATI = 0x8746;
/* -------------------------- GL_ATI_texture_float ------------------------- */
public const uint GL_ATI_texture_float = 1;
public const uint GL_RGBA_FLOAT32_ATI = 0x8814;
public const uint GL_RGB_FLOAT32_ATI = 0x8815;
public const uint GL_ALPHA_FLOAT32_ATI = 0x8816;
public const uint GL_INTENSITY_FLOAT32_ATI = 0x8817;
public const uint GL_LUMINANCE_FLOAT32_ATI = 0x8818;
public const uint GL_LUMINANCE_ALPHA_FLOAT32_ATI = 0x8819;
public const uint GL_RGBA_FLOAT16_ATI = 0x881A;
public const uint GL_RGB_FLOAT16_ATI = 0x881B;
public const uint GL_ALPHA_FLOAT16_ATI = 0x881C;
public const uint GL_INTENSITY_FLOAT16_ATI = 0x881D;
public const uint GL_LUMINANCE_FLOAT16_ATI = 0x881E;
public const uint GL_LUMINANCE_ALPHA_FLOAT16_ATI = 0x881F;
/* ----------------------- GL_ATI_texture_mirror_once ---------------------- */
public const uint GL_ATI_texture_mirror_once = 1;
public const uint GL_MIRROR_CLAMP_ATI = 0x8742;
public const uint GL_MIRROR_CLAMP_TO_EDGE_ATI = 0x8743;
/* ----------------------- GL_ATI_vertex_array_object ---------------------- */
public const uint GL_ATI_vertex_array_object = 1;
public const uint GL_STATIC_ATI = 0x8760;
public const uint GL_DYNAMIC_ATI = 0x8761;
public const uint GL_PRESERVE_ATI = 0x8762;
public const uint GL_DISCARD_ATI = 0x8763;
public const uint GL_OBJECT_BUFFER_SIZE_ATI = 0x8764;
public const uint GL_OBJECT_BUFFER_USAGE_ATI = 0x8765;
public const uint GL_ARRAY_OBJECT_BUFFER_ATI = 0x8766;
public const uint GL_ARRAY_OBJECT_OFFSET_ATI = 0x8767;
public delegate void PFNGLARRAYOBJECTATIPROC( uint array,int size,uint type,int stride,uint buffer,uint offset);
public delegate void PFNGLFREEOBJECTBUFFERATIPROC( uint buffer);
public delegate void PFNGLGETARRAYOBJECTFVATIPROC( uint array,uint pname,IntPtr _params);
public delegate void PFNGLGETARRAYOBJECTIVATIPROC( uint array,uint pname,IntPtr _params);
public delegate void PFNGLGETOBJECTBUFFERFVATIPROC( uint buffer,uint pname,IntPtr _params);
public delegate void PFNGLGETOBJECTBUFFERIVATIPROC( uint buffer,uint pname,IntPtr _params);
public delegate void PFNGLGETVARIANTARRAYOBJECTFVATIPROC( uint id,uint pname,IntPtr _params);
public delegate void PFNGLGETVARIANTARRAYOBJECTIVATIPROC( uint id,uint pname,IntPtr _params);
[return: System.Runtime.InteropServices.MarshalAs(System.Runtime.InteropServices.UnmanagedType.I1)]public delegate bool PFNGLISOBJECTBUFFERATIPROC( uint buffer);
public delegate uint PFNGLNEWOBJECTBUFFERATIPROC( int size,IntPtr  pointer,uint usage);
public delegate void PFNGLUPDATEOBJECTBUFFERATIPROC( uint buffer,uint offset,int size,IntPtr  pointer,uint preserve);
public delegate void PFNGLVARIANTARRAYOBJECTATIPROC( uint id,uint type,int stride,uint buffer,uint offset);
/* ------------------- GL_ATI_vertex_attrib_array_object ------------------- */
public const uint GL_ATI_vertex_attrib_array_object = 1;
public delegate void PFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC( uint index,uint pname,IntPtr _params);
public delegate void PFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC( uint index,uint pname,IntPtr _params);
public delegate void PFNGLVERTEXATTRIBARRAYOBJECTATIPROC( uint index,int size,uint type,bool normalized,int stride,uint buffer,uint offset);
/* ------------------------- GL_ATI_vertex_streams ------------------------- */
public const uint GL_ATI_vertex_streams = 1;
public const uint GL_MAX_VERTEX_STREAMS_ATI = 0x876B;
public const uint GL_VERTEX_SOURCE_ATI = 0x876C;
public const uint GL_VERTEX_STREAM0_ATI = 0x876D;
public const uint GL_VERTEX_STREAM1_ATI = 0x876E;
public const uint GL_VERTEX_STREAM2_ATI = 0x876F;
public const uint GL_VERTEX_STREAM3_ATI = 0x8770;
public const uint GL_VERTEX_STREAM4_ATI = 0x8771;
public const uint GL_VERTEX_STREAM5_ATI = 0x8772;
public const uint GL_VERTEX_STREAM6_ATI = 0x8773;
public const uint GL_VERTEX_STREAM7_ATI = 0x8774;
public delegate void PFNGLCLIENTACTIVEVERTEXSTREAMATIPROC( uint stream);
public delegate void PFNGLNORMALSTREAM3BATIPROC( uint stream,sbyte x,sbyte y,sbyte z);
public delegate void PFNGLNORMALSTREAM3BVATIPROC( uint stream,byte[] v);
public delegate void PFNGLNORMALSTREAM3DATIPROC( uint stream,double x,double y,double z);
public delegate void PFNGLNORMALSTREAM3DVATIPROC( uint stream,double[] v);
public delegate void PFNGLNORMALSTREAM3FATIPROC( uint stream,float x,float y,float z);
public delegate void PFNGLNORMALSTREAM3FVATIPROC( uint stream,float[] v);
public delegate void PFNGLNORMALSTREAM3IATIPROC( uint stream,int x,int y,int z);
public delegate void PFNGLNORMALSTREAM3IVATIPROC( uint stream,int[] v);
public delegate void PFNGLNORMALSTREAM3SATIPROC( uint stream,short x,short y,short z);
public delegate void PFNGLNORMALSTREAM3SVATIPROC( uint stream,short[] v);
public delegate void PFNGLVERTEXBLENDENVFATIPROC( uint pname,float param);
public delegate void PFNGLVERTEXBLENDENVIATIPROC( uint pname,int param);
public delegate void PFNGLVERTEXSTREAM2DATIPROC( uint stream,double x,double y);
public delegate void PFNGLVERTEXSTREAM2DVATIPROC( uint stream,double[] v);
public delegate void PFNGLVERTEXSTREAM2FATIPROC( uint stream,float x,float y);
public delegate void PFNGLVERTEXSTREAM2FVATIPROC( uint stream,float[] v);
public delegate void PFNGLVERTEXSTREAM2IATIPROC( uint stream,int x,int y);
public delegate void PFNGLVERTEXSTREAM2IVATIPROC( uint stream,int[] v);
public delegate void PFNGLVERTEXSTREAM2SATIPROC( uint stream,short x,short y);
public delegate void PFNGLVERTEXSTREAM2SVATIPROC( uint stream,short[] v);
public delegate void PFNGLVERTEXSTREAM3DATIPROC( uint stream,double x,double y,double z);
public delegate void PFNGLVERTEXSTREAM3DVATIPROC( uint stream,double[] v);
public delegate void PFNGLVERTEXSTREAM3FATIPROC( uint stream,float x,float y,float z);
public delegate void PFNGLVERTEXSTREAM3FVATIPROC( uint stream,float[] v);
public delegate void PFNGLVERTEXSTREAM3IATIPROC( uint stream,int x,int y,int z);
public delegate void PFNGLVERTEXSTREAM3IVATIPROC( uint stream,int[] v);
public delegate void PFNGLVERTEXSTREAM3SATIPROC( uint stream,short x,short y,short z);
public delegate void PFNGLVERTEXSTREAM3SVATIPROC( uint stream,short[] v);
public delegate void PFNGLVERTEXSTREAM4DATIPROC( uint stream,double x,double y,double z,double w);
public delegate void PFNGLVERTEXSTREAM4DVATIPROC( uint stream,double[] v);
public delegate void PFNGLVERTEXSTREAM4FATIPROC( uint stream,float x,float y,float z,float w);
public delegate void PFNGLVERTEXSTREAM4FVATIPROC( uint stream,float[] v);
public delegate void PFNGLVERTEXSTREAM4IATIPROC( uint stream,int x,int y,int z,int w);
public delegate void PFNGLVERTEXSTREAM4IVATIPROC( uint stream,int[] v);
public delegate void PFNGLVERTEXSTREAM4SATIPROC( uint stream,short x,short y,short z,short w);
public delegate void PFNGLVERTEXSTREAM4SVATIPROC( uint stream,short[] v);
/* --------------------------- GL_EXT_422_pixels --------------------------- */
public const uint GL_EXT_422_pixels = 1;
public const uint GL_422_EXT = 0x80CC;
public const uint GL_422_REV_EXT = 0x80CD;
public const uint GL_422_AVERAGE_EXT = 0x80CE;
public const uint GL_422_REV_AVERAGE_EXT = 0x80CF;
/* ---------------------------- GL_EXT_Cg_shader --------------------------- */
public const uint GL_EXT_Cg_shader = 1;
public const uint GL_CG_VERTEX_SHADER_EXT = 0x890E;
public const uint GL_CG_FRAGMENT_SHADER_EXT = 0x890F;
/* ------------------------------ GL_EXT_abgr ------------------------------ */
public const uint GL_EXT_abgr = 1;
public const uint GL_ABGR_EXT = 0x8000;
/* ------------------------------ GL_EXT_bgra ------------------------------ */
public const uint GL_EXT_bgra = 1;
public const uint GL_BGR_EXT = 0x80E0;
public const uint GL_BGRA_EXT = 0x80E1;
/* ------------------------ GL_EXT_bindable_uniform ------------------------ */
public const uint GL_EXT_bindable_uniform = 1;
public const uint GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT = 0x8DE2;
public const uint GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT = 0x8DE3;
public const uint GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT = 0x8DE4;
public const uint GL_MAX_BINDABLE_UNIFORM_SIZE_EXT = 0x8DED;
public const uint GL_UNIFORM_BUFFER_EXT = 0x8DEE;
public const uint GL_UNIFORM_BUFFER_BINDING_EXT = 0x8DEF;
public delegate int PFNGLGETUNIFORMBUFFERSIZEEXTPROC( uint program,int location);
public delegate IntPtr PFNGLGETUNIFORMOFFSETEXTPROC( uint program,int location);
public delegate void PFNGLUNIFORMBUFFEREXTPROC( uint program,int location,uint buffer);
/* --------------------------- GL_EXT_blend_color -------------------------- */
public const uint GL_EXT_blend_color = 1;
public const uint GL_CONSTANT_COLOR_EXT = 0x8001;
public const uint GL_ONE_MINUS_CONSTANT_COLOR_EXT = 0x8002;
public const uint GL_CONSTANT_ALPHA_EXT = 0x8003;
public const uint GL_ONE_MINUS_CONSTANT_ALPHA_EXT = 0x8004;
public const uint GL_BLEND_COLOR_EXT = 0x8005;
public delegate void PFNGLBLENDCOLOREXTPROC( float red,float green,float blue,float alpha);
/* --------------------- GL_EXT_blend_equation_separate -------------------- */
public const uint GL_EXT_blend_equation_separate = 1;
public const uint GL_BLEND_EQUATION_RGB_EXT = 0x8009;
public const uint GL_BLEND_EQUATION_ALPHA_EXT = 0x883D;
public delegate void PFNGLBLENDEQUATIONSEPARATEEXTPROC( uint modeRGB,uint modeAlpha);
/* ----------------------- GL_EXT_blend_func_separate ---------------------- */
public const uint GL_EXT_blend_func_separate = 1;
public const uint GL_BLEND_DST_RGB_EXT = 0x80C8;
public const uint GL_BLEND_SRC_RGB_EXT = 0x80C9;
public const uint GL_BLEND_DST_ALPHA_EXT = 0x80CA;
public const uint GL_BLEND_SRC_ALPHA_EXT = 0x80CB;
public delegate void PFNGLBLENDFUNCSEPARATEEXTPROC( uint sfactorRGB,uint dfactorRGB,uint sfactorAlpha,uint dfactorAlpha);
/* ------------------------- GL_EXT_blend_logic_op ------------------------- */
public const uint GL_EXT_blend_logic_op = 1;
/* -------------------------- GL_EXT_blend_minmax -------------------------- */
public const uint GL_EXT_blend_minmax = 1;
public const uint GL_FUNC_ADD_EXT = 0x8006;
public const uint GL_MIN_EXT = 0x8007;
public const uint GL_MAX_EXT = 0x8008;
public const uint GL_BLEND_EQUATION_EXT = 0x8009;
public delegate void PFNGLBLENDEQUATIONEXTPROC( uint mode);
/* ------------------------- GL_EXT_blend_subtract ------------------------- */
public const uint GL_EXT_blend_subtract = 1;
public const uint GL_FUNC_SUBTRACT_EXT = 0x800A;
public const uint GL_FUNC_REVERSE_SUBTRACT_EXT = 0x800B;
/* ------------------------ GL_EXT_clip_volume_hint ------------------------ */
public const uint GL_EXT_clip_volume_hint = 1;
public const uint GL_CLIP_VOLUME_CLIPPING_HINT_EXT = 0x80F0;
/* ------------------------------ GL_EXT_cmyka ----------------------------- */
public const uint GL_EXT_cmyka = 1;
public const uint GL_CMYK_EXT = 0x800C;
public const uint GL_CMYKA_EXT = 0x800D;
public const uint GL_PACK_CMYK_HINT_EXT = 0x800E;
public const uint GL_UNPACK_CMYK_HINT_EXT = 0x800F;
/* ------------------------- GL_EXT_color_subtable ------------------------- */
public const uint GL_EXT_color_subtable = 1;
public delegate void PFNGLCOLORSUBTABLEEXTPROC( uint target,int start,int count,uint format,uint type,IntPtr  data);
public delegate void PFNGLCOPYCOLORSUBTABLEEXTPROC( uint target,int start,int x,int y,int width);
/* ---------------------- GL_EXT_compiled_vertex_array --------------------- */
public const uint GL_EXT_compiled_vertex_array = 1;
public const uint GL_ARRAY_ELEMENT_LOCK_FIRST_EXT = 0x81A8;
public const uint GL_ARRAY_ELEMENT_LOCK_COUNT_EXT = 0x81A9;
public delegate void PFNGLLOCKARRAYSEXTPROC( int first,int count);
public delegate void PFNGLUNLOCKARRAYSEXTPROC( );
/* --------------------------- GL_EXT_convolution -------------------------- */
public const uint GL_EXT_convolution = 1;
public const uint GL_CONVOLUTION_1D_EXT = 0x8010;
public const uint GL_CONVOLUTION_2D_EXT = 0x8011;
public const uint GL_SEPARABLE_2D_EXT = 0x8012;
public const uint GL_CONVOLUTION_BORDER_MODE_EXT = 0x8013;
public const uint GL_CONVOLUTION_FILTER_SCALE_EXT = 0x8014;
public const uint GL_CONVOLUTION_FILTER_BIAS_EXT = 0x8015;
public const uint GL_REDUCE_EXT = 0x8016;
public const uint GL_CONVOLUTION_FORMAT_EXT = 0x8017;
public const uint GL_CONVOLUTION_WIDTH_EXT = 0x8018;
public const uint GL_CONVOLUTION_HEIGHT_EXT = 0x8019;
public const uint GL_MAX_CONVOLUTION_WIDTH_EXT = 0x801A;
public const uint GL_MAX_CONVOLUTION_HEIGHT_EXT = 0x801B;
public const uint GL_POST_CONVOLUTION_RED_SCALE_EXT = 0x801C;
public const uint GL_POST_CONVOLUTION_GREEN_SCALE_EXT = 0x801D;
public const uint GL_POST_CONVOLUTION_BLUE_SCALE_EXT = 0x801E;
public const uint GL_POST_CONVOLUTION_ALPHA_SCALE_EXT = 0x801F;
public const uint GL_POST_CONVOLUTION_RED_BIAS_EXT = 0x8020;
public const uint GL_POST_CONVOLUTION_GREEN_BIAS_EXT = 0x8021;
public const uint GL_POST_CONVOLUTION_BLUE_BIAS_EXT = 0x8022;
public const uint GL_POST_CONVOLUTION_ALPHA_BIAS_EXT = 0x8023;
public delegate void PFNGLCONVOLUTIONFILTER1DEXTPROC( uint target,uint internalformat,int width,uint format,uint type,IntPtr  image);
public delegate void PFNGLCONVOLUTIONFILTER2DEXTPROC( uint target,uint internalformat,int width,int height,uint format,uint type,IntPtr  image);
public delegate void PFNGLCONVOLUTIONPARAMETERFEXTPROC( uint target,uint pname,float param);
public delegate void PFNGLCONVOLUTIONPARAMETERFVEXTPROC( uint target,uint pname,float[]  _params);
public delegate void PFNGLCONVOLUTIONPARAMETERIEXTPROC( uint target,uint pname,int param);
public delegate void PFNGLCONVOLUTIONPARAMETERIVEXTPROC( uint target,uint pname,int[]  _params);
public delegate void PFNGLCOPYCONVOLUTIONFILTER1DEXTPROC( uint target,uint internalformat,int x,int y,int width);
public delegate void PFNGLCOPYCONVOLUTIONFILTER2DEXTPROC( uint target,uint internalformat,int x,int y,int width,int height);
public delegate void PFNGLGETCONVOLUTIONFILTEREXTPROC( uint target,uint format,uint type,IntPtr image);
public delegate void PFNGLGETCONVOLUTIONPARAMETERFVEXTPROC( uint target,uint pname,IntPtr _params);
public delegate void PFNGLGETCONVOLUTIONPARAMETERIVEXTPROC( uint target,uint pname,IntPtr _params);
public delegate void PFNGLGETSEPARABLEFILTEREXTPROC( uint target,uint format,uint type,IntPtr row,IntPtr column,IntPtr span);
public delegate void PFNGLSEPARABLEFILTER2DEXTPROC( uint target,uint internalformat,int width,int height,uint format,uint type,IntPtr  row,IntPtr  column);
/* ------------------------ GL_EXT_coordinate_frame ------------------------ */
public const uint GL_EXT_coordinate_frame = 1;
public const uint GL_TANGENT_ARRAY_EXT = 0x8439;
public const uint GL_BINORMAL_ARRAY_EXT = 0x843A;
public const uint GL_CURRENT_TANGENT_EXT = 0x843B;
public const uint GL_CURRENT_BINORMAL_EXT = 0x843C;
public const uint GL_TANGENT_ARRAY_TYPE_EXT = 0x843E;
public const uint GL_TANGENT_ARRAY_STRIDE_EXT = 0x843F;
public const uint GL_BINORMAL_ARRAY_TYPE_EXT = 0x8440;
public const uint GL_BINORMAL_ARRAY_STRIDE_EXT = 0x8441;
public const uint GL_TANGENT_ARRAY_POINTER_EXT = 0x8442;
public const uint GL_BINORMAL_ARRAY_POINTER_EXT = 0x8443;
public const uint GL_MAP1_TANGENT_EXT = 0x8444;
public const uint GL_MAP2_TANGENT_EXT = 0x8445;
public const uint GL_MAP1_BINORMAL_EXT = 0x8446;
public const uint GL_MAP2_BINORMAL_EXT = 0x8447;
public delegate void PFNGLBINORMALPOINTEREXTPROC( uint type,int stride,IntPtr pointer);
public delegate void PFNGLTANGENTPOINTEREXTPROC( uint type,int stride,IntPtr pointer);
/* -------------------------- GL_EXT_copy_texture -------------------------- */
public const uint GL_EXT_copy_texture = 1;
public delegate void PFNGLCOPYTEXIMAGE1DEXTPROC( uint target,int level,uint internalformat,int x,int y,int width,int border);
public delegate void PFNGLCOPYTEXIMAGE2DEXTPROC( uint target,int level,uint internalformat,int x,int y,int width,int height,int border);
public delegate void PFNGLCOPYTEXSUBIMAGE1DEXTPROC( uint target,int level,int xoffset,int x,int y,int width);
public delegate void PFNGLCOPYTEXSUBIMAGE2DEXTPROC( uint target,int level,int xoffset,int yoffset,int x,int y,int width,int height);
public delegate void PFNGLCOPYTEXSUBIMAGE3DEXTPROC( uint target,int level,int xoffset,int yoffset,int zoffset,int x,int y,int width,int height);
/* --------------------------- GL_EXT_cull_vertex -------------------------- */
public const uint GL_EXT_cull_vertex = 1;
public const uint GL_CULL_VERTEX_EXT = 0x81AA;
public const uint GL_CULL_VERTEX_EYE_POSITION_EXT = 0x81AB;
public const uint GL_CULL_VERTEX_OBJECT_POSITION_EXT = 0x81AC;
public delegate void PFNGLCULLPARAMETERDVEXTPROC( uint pname,IntPtr _params);
public delegate void PFNGLCULLPARAMETERFVEXTPROC( uint pname,IntPtr _params);
/* ------------------------ GL_EXT_depth_bounds_test ----------------------- */
public const uint GL_EXT_depth_bounds_test = 1;
public const uint GL_DEPTH_BOUNDS_TEST_EXT = 0x8890;
public const uint GL_DEPTH_BOUNDS_EXT = 0x8891;
public delegate void PFNGLDEPTHBOUNDSEXTPROC( double zmin,double zmax);
/* ----------------------- GL_EXT_direct_state_access ---------------------- */
public const uint GL_EXT_direct_state_access = 1;
public const uint GL_PROGRAM_MATRIX_EXT = 0x8E2D;
public const uint GL_TRANSPOSE_PROGRAM_MATRIX_EXT = 0x8E2E;
public const uint GL_PROGRAM_MATRIX_STACK_DEPTH_EXT = 0x8E2F;
public delegate void PFNGLBINDMULTITEXTUREEXTPROC( uint texunit,uint target,uint texture);
public delegate uint PFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC( uint framebuffer,uint target);
public delegate void PFNGLCLIENTATTRIBDEFAULTEXTPROC( uint mask);
public delegate void PFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC( uint texunit,uint target,int level,uint internalformat,int width,int border,int imageSize,IntPtr  data);
public delegate void PFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC( uint texunit,uint target,int level,uint internalformat,int width,int height,int border,int imageSize,IntPtr  data);
public delegate void PFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC( uint texunit,uint target,int level,uint internalformat,int width,int height,int depth,int border,int imageSize,IntPtr  data);
public delegate void PFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC( uint texunit,uint target,int level,int xoffset,int width,uint format,int imageSize,IntPtr  data);
public delegate void PFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC( uint texunit,uint target,int level,int xoffset,int yoffset,int width,int height,uint format,int imageSize,IntPtr  data);
public delegate void PFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC( uint texunit,uint target,int level,int xoffset,int yoffset,int zoffset,int width,int height,int depth,uint format,int imageSize,IntPtr  data);
public delegate void PFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC( uint texture,uint target,int level,uint internalformat,int width,int border,int imageSize,IntPtr  data);
public delegate void PFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC( uint texture,uint target,int level,uint internalformat,int width,int height,int border,int imageSize,IntPtr  data);
public delegate void PFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC( uint texture,uint target,int level,uint internalformat,int width,int height,int depth,int border,int imageSize,IntPtr  data);
public delegate void PFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC( uint texture,uint target,int level,int xoffset,int width,uint format,int imageSize,IntPtr  data);
public delegate void PFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC( uint texture,uint target,int level,int xoffset,int yoffset,int width,int height,uint format,int imageSize,IntPtr  data);
public delegate void PFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC( uint texture,uint target,int level,int xoffset,int yoffset,int zoffset,int width,int height,int depth,uint format,int imageSize,IntPtr  data);
public delegate void PFNGLCOPYMULTITEXIMAGE1DEXTPROC( uint texunit,uint target,int level,uint internalformat,int x,int y,int width,int border);
public delegate void PFNGLCOPYMULTITEXIMAGE2DEXTPROC( uint texunit,uint target,int level,uint internalformat,int x,int y,int width,int height,int border);
public delegate void PFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC( uint texunit,uint target,int level,int xoffset,int x,int y,int width);
public delegate void PFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC( uint texunit,uint target,int level,int xoffset,int yoffset,int x,int y,int width,int height);
public delegate void PFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC( uint texunit,uint target,int level,int xoffset,int yoffset,int zoffset,int x,int y,int width,int height);
public delegate void PFNGLCOPYTEXTUREIMAGE1DEXTPROC( uint texture,uint target,int level,uint internalformat,int x,int y,int width,int border);
public delegate void PFNGLCOPYTEXTUREIMAGE2DEXTPROC( uint texture,uint target,int level,uint internalformat,int x,int y,int width,int height,int border);
public delegate void PFNGLCOPYTEXTURESUBIMAGE1DEXTPROC( uint texture,uint target,int level,int xoffset,int x,int y,int width);
public delegate void PFNGLCOPYTEXTURESUBIMAGE2DEXTPROC( uint texture,uint target,int level,int xoffset,int yoffset,int x,int y,int width,int height);
public delegate void PFNGLCOPYTEXTURESUBIMAGE3DEXTPROC( uint texture,uint target,int level,int xoffset,int yoffset,int zoffset,int x,int y,int width,int height);
public delegate void PFNGLDISABLECLIENTSTATEINDEXEDEXTPROC( uint array,uint index);
public delegate void PFNGLDISABLECLIENTSTATEIEXTPROC( uint array,uint index);
public delegate void PFNGLDISABLEVERTEXARRAYATTRIBEXTPROC( uint vaobj,uint index);
public delegate void PFNGLDISABLEVERTEXARRAYEXTPROC( uint vaobj,uint array);
public delegate void PFNGLENABLECLIENTSTATEINDEXEDEXTPROC( uint array,uint index);
public delegate void PFNGLENABLECLIENTSTATEIEXTPROC( uint array,uint index);
public delegate void PFNGLENABLEVERTEXARRAYATTRIBEXTPROC( uint vaobj,uint index);
public delegate void PFNGLENABLEVERTEXARRAYEXTPROC( uint vaobj,uint array);
public delegate void PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC( uint buffer,IntPtr offset,IntPtr length);
public delegate void PFNGLFRAMEBUFFERDRAWBUFFEREXTPROC( uint framebuffer,uint mode);
public delegate void PFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC( uint framebuffer,int n,uint[]  bufs);
public delegate void PFNGLFRAMEBUFFERREADBUFFEREXTPROC( uint framebuffer,uint mode);
public delegate void PFNGLGENERATEMULTITEXMIPMAPEXTPROC( uint texunit,uint target);
public delegate void PFNGLGENERATETEXTUREMIPMAPEXTPROC( uint texture,uint target);
public delegate void PFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC( uint texunit,uint target,int level,IntPtr img);
public delegate void PFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC( uint texture,uint target,int level,IntPtr img);
public delegate void PFNGLGETDOUBLEINDEXEDVEXTPROC( uint target,uint index,IntPtr _params);
public delegate void PFNGLGETDOUBLEI_VEXTPROC( uint pname,uint index,IntPtr _params);
public delegate void PFNGLGETFLOATINDEXEDVEXTPROC( uint target,uint index,IntPtr _params);
public delegate void PFNGLGETFLOATI_VEXTPROC( uint pname,uint index,IntPtr _params);
public delegate void PFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC( uint framebuffer,uint pname,IntPtr param);
public delegate void PFNGLGETMULTITEXENVFVEXTPROC( uint texunit,uint target,uint pname,IntPtr _params);
public delegate void PFNGLGETMULTITEXENVIVEXTPROC( uint texunit,uint target,uint pname,IntPtr _params);
public delegate void PFNGLGETMULTITEXGENDVEXTPROC( uint texunit,uint coord,uint pname,IntPtr _params);
public delegate void PFNGLGETMULTITEXGENFVEXTPROC( uint texunit,uint coord,uint pname,IntPtr _params);
public delegate void PFNGLGETMULTITEXGENIVEXTPROC( uint texunit,uint coord,uint pname,IntPtr _params);
public delegate void PFNGLGETMULTITEXIMAGEEXTPROC( uint texunit,uint target,int level,uint format,uint type,IntPtr pixels);
public delegate void PFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC( uint texunit,uint target,int level,uint pname,IntPtr _params);
public delegate void PFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC( uint texunit,uint target,int level,uint pname,IntPtr _params);
public delegate void PFNGLGETMULTITEXPARAMETERIIVEXTPROC( uint texunit,uint target,uint pname,IntPtr _params);
public delegate void PFNGLGETMULTITEXPARAMETERIUIVEXTPROC( uint texunit,uint target,uint pname,IntPtr _params);
public delegate void PFNGLGETMULTITEXPARAMETERFVEXTPROC( uint texunit,uint target,uint pname,IntPtr _params);
public delegate void PFNGLGETMULTITEXPARAMETERIVEXTPROC( uint texunit,uint target,uint pname,IntPtr _params);
public delegate void PFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC( uint buffer,uint pname,IntPtr _params);
public delegate void PFNGLGETNAMEDBUFFERPOINTERVEXTPROC( uint buffer,uint pname,IntPtr _params);
public delegate void PFNGLGETNAMEDBUFFERSUBDATAEXTPROC( uint buffer,IntPtr offset,IntPtr size,IntPtr data);
public delegate void PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC( uint framebuffer,uint attachment,uint pname,IntPtr _params);
public delegate void PFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC( uint program,uint target,uint index,IntPtr _params);
public delegate void PFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC( uint program,uint target,uint index,IntPtr _params);
public delegate void PFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC( uint program,uint target,uint index,IntPtr _params);
public delegate void PFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC( uint program,uint target,uint index,IntPtr _params);
public delegate void PFNGLGETNAMEDPROGRAMSTRINGEXTPROC( uint program,uint target,uint pname,IntPtr _string);
public delegate void PFNGLGETNAMEDPROGRAMIVEXTPROC( uint program,uint target,uint pname,IntPtr _params);
public delegate void PFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC( uint renderbuffer,uint pname,IntPtr _params);
public delegate void PFNGLGETPOINTERINDEXEDVEXTPROC( uint target,uint index,IntPtr _params);
public delegate void PFNGLGETPOINTERI_VEXTPROC( uint pname,uint index,IntPtr _params);
public delegate void PFNGLGETTEXTUREIMAGEEXTPROC( uint texture,uint target,int level,uint format,uint type,IntPtr pixels);
public delegate void PFNGLGETTEXTURELEVELPARAMETERFVEXTPROC( uint texture,uint target,int level,uint pname,IntPtr _params);
public delegate void PFNGLGETTEXTURELEVELPARAMETERIVEXTPROC( uint texture,uint target,int level,uint pname,IntPtr _params);
public delegate void PFNGLGETTEXTUREPARAMETERIIVEXTPROC( uint texture,uint target,uint pname,IntPtr _params);
public delegate void PFNGLGETTEXTUREPARAMETERIUIVEXTPROC( uint texture,uint target,uint pname,IntPtr _params);
public delegate void PFNGLGETTEXTUREPARAMETERFVEXTPROC( uint texture,uint target,uint pname,IntPtr _params);
public delegate void PFNGLGETTEXTUREPARAMETERIVEXTPROC( uint texture,uint target,uint pname,IntPtr _params);
public delegate void PFNGLGETVERTEXARRAYINTEGERI_VEXTPROC( uint vaobj,uint index,uint pname,IntPtr param);
public delegate void PFNGLGETVERTEXARRAYINTEGERVEXTPROC( uint vaobj,uint pname,IntPtr param);
public delegate void PFNGLGETVERTEXARRAYPOINTERI_VEXTPROC( uint vaobj,uint index,uint pname,IntPtr param);
public delegate void PFNGLGETVERTEXARRAYPOINTERVEXTPROC( uint vaobj,uint pname,IntPtr param);
public delegate IntPtr PFNGLMAPNAMEDBUFFEREXTPROC( uint buffer,uint access);
public delegate IntPtr PFNGLMAPNAMEDBUFFERRANGEEXTPROC( uint buffer,IntPtr offset,IntPtr length,uint access);
public delegate void PFNGLMATRIXFRUSTUMEXTPROC( uint matrixMode,double l,double r,double b,double t,double n,double f);
public delegate void PFNGLMATRIXLOADIDENTITYEXTPROC( uint matrixMode);
public delegate void PFNGLMATRIXLOADTRANSPOSEDEXTPROC( uint matrixMode,double[]  m);
public delegate void PFNGLMATRIXLOADTRANSPOSEFEXTPROC( uint matrixMode,float[]  m);
public delegate void PFNGLMATRIXLOADDEXTPROC( uint matrixMode,double[]  m);
public delegate void PFNGLMATRIXLOADFEXTPROC( uint matrixMode,float[]  m);
public delegate void PFNGLMATRIXMULTTRANSPOSEDEXTPROC( uint matrixMode,double[]  m);
public delegate void PFNGLMATRIXMULTTRANSPOSEFEXTPROC( uint matrixMode,float[]  m);
public delegate void PFNGLMATRIXMULTDEXTPROC( uint matrixMode,double[]  m);
public delegate void PFNGLMATRIXMULTFEXTPROC( uint matrixMode,float[]  m);
public delegate void PFNGLMATRIXORTHOEXTPROC( uint matrixMode,double l,double r,double b,double t,double n,double f);
public delegate void PFNGLMATRIXPOPEXTPROC( uint matrixMode);
public delegate void PFNGLMATRIXPUSHEXTPROC( uint matrixMode);
public delegate void PFNGLMATRIXROTATEDEXTPROC( uint matrixMode,double angle,double x,double y,double z);
public delegate void PFNGLMATRIXROTATEFEXTPROC( uint matrixMode,float angle,float x,float y,float z);
public delegate void PFNGLMATRIXSCALEDEXTPROC( uint matrixMode,double x,double y,double z);
public delegate void PFNGLMATRIXSCALEFEXTPROC( uint matrixMode,float x,float y,float z);
public delegate void PFNGLMATRIXTRANSLATEDEXTPROC( uint matrixMode,double x,double y,double z);
public delegate void PFNGLMATRIXTRANSLATEFEXTPROC( uint matrixMode,float x,float y,float z);
public delegate void PFNGLMULTITEXBUFFEREXTPROC( uint texunit,uint target,uint internalformat,uint buffer);
public delegate void PFNGLMULTITEXCOORDPOINTEREXTPROC( uint texunit,int size,uint type,int stride,IntPtr  pointer);
public delegate void PFNGLMULTITEXENVFEXTPROC( uint texunit,uint target,uint pname,float param);
public delegate void PFNGLMULTITEXENVFVEXTPROC( uint texunit,uint target,uint pname,float[]  _params);
public delegate void PFNGLMULTITEXENVIEXTPROC( uint texunit,uint target,uint pname,int param);
public delegate void PFNGLMULTITEXENVIVEXTPROC( uint texunit,uint target,uint pname,int[]  _params);
public delegate void PFNGLMULTITEXGENDEXTPROC( uint texunit,uint coord,uint pname,double param);
public delegate void PFNGLMULTITEXGENDVEXTPROC( uint texunit,uint coord,uint pname,double[]  _params);
public delegate void PFNGLMULTITEXGENFEXTPROC( uint texunit,uint coord,uint pname,float param);
public delegate void PFNGLMULTITEXGENFVEXTPROC( uint texunit,uint coord,uint pname,float[]  _params);
public delegate void PFNGLMULTITEXGENIEXTPROC( uint texunit,uint coord,uint pname,int param);
public delegate void PFNGLMULTITEXGENIVEXTPROC( uint texunit,uint coord,uint pname,int[]  _params);
public delegate void PFNGLMULTITEXIMAGE1DEXTPROC( uint texunit,uint target,int level,int internalformat,int width,int border,uint format,uint type,IntPtr  pixels);
public delegate void PFNGLMULTITEXIMAGE2DEXTPROC( uint texunit,uint target,int level,int internalformat,int width,int height,int border,uint format,uint type,IntPtr  pixels);
public delegate void PFNGLMULTITEXIMAGE3DEXTPROC( uint texunit,uint target,int level,int internalformat,int width,int height,int depth,int border,uint format,uint type,IntPtr  pixels);
public delegate void PFNGLMULTITEXPARAMETERIIVEXTPROC( uint texunit,uint target,uint pname,int[]  _params);
public delegate void PFNGLMULTITEXPARAMETERIUIVEXTPROC( uint texunit,uint target,uint pname,uint[]  _params);
public delegate void PFNGLMULTITEXPARAMETERFEXTPROC( uint texunit,uint target,uint pname,float param);
public delegate void PFNGLMULTITEXPARAMETERFVEXTPROC( uint texunit,uint target,uint pname,float[]  param);
public delegate void PFNGLMULTITEXPARAMETERIEXTPROC( uint texunit,uint target,uint pname,int param);
public delegate void PFNGLMULTITEXPARAMETERIVEXTPROC( uint texunit,uint target,uint pname,int[]  param);
public delegate void PFNGLMULTITEXRENDERBUFFEREXTPROC( uint texunit,uint target,uint renderbuffer);
public delegate void PFNGLMULTITEXSUBIMAGE1DEXTPROC( uint texunit,uint target,int level,int xoffset,int width,uint format,uint type,IntPtr  pixels);
public delegate void PFNGLMULTITEXSUBIMAGE2DEXTPROC( uint texunit,uint target,int level,int xoffset,int yoffset,int width,int height,uint format,uint type,IntPtr  pixels);
public delegate void PFNGLMULTITEXSUBIMAGE3DEXTPROC( uint texunit,uint target,int level,int xoffset,int yoffset,int zoffset,int width,int height,int depth,uint format,uint type,IntPtr  pixels);
public delegate void PFNGLNAMEDBUFFERDATAEXTPROC( uint buffer,IntPtr size,IntPtr  data,uint usage);
public delegate void PFNGLNAMEDBUFFERSUBDATAEXTPROC( uint buffer,IntPtr offset,IntPtr size,IntPtr  data);
public delegate void PFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC( uint readBuffer,uint writeBuffer,IntPtr readOffset,IntPtr writeOffset,IntPtr size);
public delegate void PFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC( uint framebuffer,uint attachment,uint renderbuffertarget,uint renderbuffer);
public delegate void PFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC( uint framebuffer,uint attachment,uint textarget,uint texture,int level);
public delegate void PFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC( uint framebuffer,uint attachment,uint textarget,uint texture,int level);
public delegate void PFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC( uint framebuffer,uint attachment,uint textarget,uint texture,int level,int zoffset);
public delegate void PFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC( uint framebuffer,uint attachment,uint texture,int level);
public delegate void PFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC( uint framebuffer,uint attachment,uint texture,int level,uint face);
public delegate void PFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC( uint framebuffer,uint attachment,uint texture,int level,int layer);
public delegate void PFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC( uint program,uint target,uint index,double x,double y,double z,double w);
public delegate void PFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC( uint program,uint target,uint index,double[]  _params);
public delegate void PFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC( uint program,uint target,uint index,float x,float y,float z,float w);
public delegate void PFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC( uint program,uint target,uint index,float[]  _params);
public delegate void PFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC( uint program,uint target,uint index,int x,int y,int z,int w);
public delegate void PFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC( uint program,uint target,uint index,int[]  _params);
public delegate void PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC( uint program,uint target,uint index,uint x,uint y,uint z,uint w);
public delegate void PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC( uint program,uint target,uint index,uint[]  _params);
public delegate void PFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC( uint program,uint target,uint index,int count,float[]  _params);
public delegate void PFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC( uint program,uint target,uint index,int count,int[]  _params);
public delegate void PFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC( uint program,uint target,uint index,int count,uint[]  _params);
public delegate void PFNGLNAMEDPROGRAMSTRINGEXTPROC( uint program,uint target,uint format,int len,IntPtr  _string);
public delegate void PFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC( uint renderbuffer,uint internalformat,int width,int height);
public delegate void PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC( uint renderbuffer,int coverageSamples,int colorSamples,uint internalformat,int width,int height);
public delegate void PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC( uint renderbuffer,int samples,uint internalformat,int width,int height);
public delegate void PFNGLPROGRAMUNIFORM1FEXTPROC( uint program,int location,float v0);
public delegate void PFNGLPROGRAMUNIFORM1FVEXTPROC( uint program,int location,int count,float[]  value);
public delegate void PFNGLPROGRAMUNIFORM1IEXTPROC( uint program,int location,int v0);
public delegate void PFNGLPROGRAMUNIFORM1IVEXTPROC( uint program,int location,int count,int[]  value);
public delegate void PFNGLPROGRAMUNIFORM1UIEXTPROC( uint program,int location,uint v0);
public delegate void PFNGLPROGRAMUNIFORM1UIVEXTPROC( uint program,int location,int count,uint[]  value);
public delegate void PFNGLPROGRAMUNIFORM2FEXTPROC( uint program,int location,float v0,float v1);
public delegate void PFNGLPROGRAMUNIFORM2FVEXTPROC( uint program,int location,int count,float[]  value);
public delegate void PFNGLPROGRAMUNIFORM2IEXTPROC( uint program,int location,int v0,int v1);
public delegate void PFNGLPROGRAMUNIFORM2IVEXTPROC( uint program,int location,int count,int[]  value);
public delegate void PFNGLPROGRAMUNIFORM2UIEXTPROC( uint program,int location,uint v0,uint v1);
public delegate void PFNGLPROGRAMUNIFORM2UIVEXTPROC( uint program,int location,int count,uint[]  value);
public delegate void PFNGLPROGRAMUNIFORM3FEXTPROC( uint program,int location,float v0,float v1,float v2);
public delegate void PFNGLPROGRAMUNIFORM3FVEXTPROC( uint program,int location,int count,float[]  value);
public delegate void PFNGLPROGRAMUNIFORM3IEXTPROC( uint program,int location,int v0,int v1,int v2);
public delegate void PFNGLPROGRAMUNIFORM3IVEXTPROC( uint program,int location,int count,int[]  value);
public delegate void PFNGLPROGRAMUNIFORM3UIEXTPROC( uint program,int location,uint v0,uint v1,uint v2);
public delegate void PFNGLPROGRAMUNIFORM3UIVEXTPROC( uint program,int location,int count,uint[]  value);
public delegate void PFNGLPROGRAMUNIFORM4FEXTPROC( uint program,int location,float v0,float v1,float v2,float v3);
public delegate void PFNGLPROGRAMUNIFORM4FVEXTPROC( uint program,int location,int count,float[]  value);
public delegate void PFNGLPROGRAMUNIFORM4IEXTPROC( uint program,int location,int v0,int v1,int v2,int v3);
public delegate void PFNGLPROGRAMUNIFORM4IVEXTPROC( uint program,int location,int count,int[]  value);
public delegate void PFNGLPROGRAMUNIFORM4UIEXTPROC( uint program,int location,uint v0,uint v1,uint v2,uint v3);
public delegate void PFNGLPROGRAMUNIFORM4UIVEXTPROC( uint program,int location,int count,uint[]  value);
public delegate void PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC( uint program,int location,int count,bool transpose,float[]  value);
public delegate void PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC( uint program,int location,int count,bool transpose,float[]  value);
public delegate void PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC( uint program,int location,int count,bool transpose,float[]  value);
public delegate void PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC( uint program,int location,int count,bool transpose,float[]  value);
public delegate void PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC( uint program,int location,int count,bool transpose,float[]  value);
public delegate void PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC( uint program,int location,int count,bool transpose,float[]  value);
public delegate void PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC( uint program,int location,int count,bool transpose,float[]  value);
public delegate void PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC( uint program,int location,int count,bool transpose,float[]  value);
public delegate void PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC( uint program,int location,int count,bool transpose,float[]  value);
public delegate void PFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC( uint mask);
public delegate void PFNGLTEXTUREBUFFEREXTPROC( uint texture,uint target,uint internalformat,uint buffer);
public delegate void PFNGLTEXTUREIMAGE1DEXTPROC( uint texture,uint target,int level,int internalformat,int width,int border,uint format,uint type,IntPtr  pixels);
public delegate void PFNGLTEXTUREIMAGE2DEXTPROC( uint texture,uint target,int level,int internalformat,int width,int height,int border,uint format,uint type,IntPtr  pixels);
public delegate void PFNGLTEXTUREIMAGE3DEXTPROC( uint texture,uint target,int level,int internalformat,int width,int height,int depth,int border,uint format,uint type,IntPtr  pixels);
public delegate void PFNGLTEXTUREPARAMETERIIVEXTPROC( uint texture,uint target,uint pname,int[]  _params);
public delegate void PFNGLTEXTUREPARAMETERIUIVEXTPROC( uint texture,uint target,uint pname,uint[]  _params);
public delegate void PFNGLTEXTUREPARAMETERFEXTPROC( uint texture,uint target,uint pname,float param);
public delegate void PFNGLTEXTUREPARAMETERFVEXTPROC( uint texture,uint target,uint pname,float[]  param);
public delegate void PFNGLTEXTUREPARAMETERIEXTPROC( uint texture,uint target,uint pname,int param);
public delegate void PFNGLTEXTUREPARAMETERIVEXTPROC( uint texture,uint target,uint pname,int[]  param);
public delegate void PFNGLTEXTURERENDERBUFFEREXTPROC( uint texture,uint target,uint renderbuffer);
public delegate void PFNGLTEXTURESUBIMAGE1DEXTPROC( uint texture,uint target,int level,int xoffset,int width,uint format,uint type,IntPtr  pixels);
public delegate void PFNGLTEXTURESUBIMAGE2DEXTPROC( uint texture,uint target,int level,int xoffset,int yoffset,int width,int height,uint format,uint type,IntPtr  pixels);
public delegate void PFNGLTEXTURESUBIMAGE3DEXTPROC( uint texture,uint target,int level,int xoffset,int yoffset,int zoffset,int width,int height,int depth,uint format,uint type,IntPtr  pixels);
[return: System.Runtime.InteropServices.MarshalAs(System.Runtime.InteropServices.UnmanagedType.I1)]public delegate bool PFNGLUNMAPNAMEDBUFFEREXTPROC( uint buffer);
public delegate void PFNGLVERTEXARRAYCOLOROFFSETEXTPROC( uint vaobj,uint buffer,int size,uint type,int stride,IntPtr offset);
public delegate void PFNGLVERTEXARRAYEDGEFLAGOFFSETEXTPROC( uint vaobj,uint buffer,int stride,IntPtr offset);
public delegate void PFNGLVERTEXARRAYFOGCOORDOFFSETEXTPROC( uint vaobj,uint buffer,uint type,int stride,IntPtr offset);
public delegate void PFNGLVERTEXARRAYINDEXOFFSETEXTPROC( uint vaobj,uint buffer,uint type,int stride,IntPtr offset);
public delegate void PFNGLVERTEXARRAYMULTITEXCOORDOFFSETEXTPROC( uint vaobj,uint buffer,uint texunit,int size,uint type,int stride,IntPtr offset);
public delegate void PFNGLVERTEXARRAYNORMALOFFSETEXTPROC( uint vaobj,uint buffer,uint type,int stride,IntPtr offset);
public delegate void PFNGLVERTEXARRAYSECONDARYCOLOROFFSETEXTPROC( uint vaobj,uint buffer,int size,uint type,int stride,IntPtr offset);
public delegate void PFNGLVERTEXARRAYTEXCOORDOFFSETEXTPROC( uint vaobj,uint buffer,int size,uint type,int stride,IntPtr offset);
public delegate void PFNGLVERTEXARRAYVERTEXATTRIBIOFFSETEXTPROC( uint vaobj,uint buffer,uint index,int size,uint type,int stride,IntPtr offset);
public delegate void PFNGLVERTEXARRAYVERTEXATTRIBOFFSETEXTPROC( uint vaobj,uint buffer,uint index,int size,uint type,bool normalized,int stride,IntPtr offset);
public delegate void PFNGLVERTEXARRAYVERTEXOFFSETEXTPROC( uint vaobj,uint buffer,int size,uint type,int stride,IntPtr offset);
/* -------------------------- GL_EXT_draw_buffers2 ------------------------- */
public const uint GL_EXT_draw_buffers2 = 1;
public delegate void PFNGLCOLORMASKINDEXEDEXTPROC( uint buf,bool r,bool g,bool b,bool a);
public delegate void PFNGLDISABLEINDEXEDEXTPROC( uint target,uint index);
public delegate void PFNGLENABLEINDEXEDEXTPROC( uint target,uint index);
public delegate void PFNGLGETBOOLEANINDEXEDVEXTPROC( uint value,uint index,IntPtr data);
public delegate void PFNGLGETINTEGERINDEXEDVEXTPROC( uint value,uint index,IntPtr data);
[return: System.Runtime.InteropServices.MarshalAs(System.Runtime.InteropServices.UnmanagedType.I1)]public delegate bool PFNGLISENABLEDINDEXEDEXTPROC( uint target,uint index);
/* ------------------------- GL_EXT_draw_instanced ------------------------- */
public const uint GL_EXT_draw_instanced = 1;
public delegate void PFNGLDRAWARRAYSINSTANCEDEXTPROC( uint mode,int start,int count,int primcount);
public delegate void PFNGLDRAWELEMENTSINSTANCEDEXTPROC( uint mode,int count,uint type,IntPtr indices,int primcount);
/* ----------------------- GL_EXT_draw_range_elements ---------------------- */
public const uint GL_EXT_draw_range_elements = 1;
public const uint GL_MAX_ELEMENTS_VERTICES_EXT = 0x80E8;
public const uint GL_MAX_ELEMENTS_INDICES_EXT = 0x80E9;
public delegate void PFNGLDRAWRANGEELEMENTSEXTPROC( uint mode,uint start,uint end,int count,uint type,IntPtr indices);
/* ---------------------------- GL_EXT_fog_coord --------------------------- */
public const uint GL_EXT_fog_coord = 1;
public const uint GL_FOG_COORDINATE_SOURCE_EXT = 0x8450;
public const uint GL_FOG_COORDINATE_EXT = 0x8451;
public const uint GL_FRAGMENT_DEPTH_EXT = 0x8452;
public const uint GL_CURRENT_FOG_COORDINATE_EXT = 0x8453;
public const uint GL_FOG_COORDINATE_ARRAY_TYPE_EXT = 0x8454;
public const uint GL_FOG_COORDINATE_ARRAY_STRIDE_EXT = 0x8455;
public const uint GL_FOG_COORDINATE_ARRAY_POINTER_EXT = 0x8456;
public const uint GL_FOG_COORDINATE_ARRAY_EXT = 0x8457;
public delegate void PFNGLFOGCOORDPOINTEREXTPROC( uint type,int stride,IntPtr pointer);
public delegate void PFNGLFOGCOORDDEXTPROC( double coord);
public delegate void PFNGLFOGCOORDDVEXTPROC( double[] coord);
public delegate void PFNGLFOGCOORDFEXTPROC( float coord);
public delegate void PFNGLFOGCOORDFVEXTPROC( float[] coord);
/* ------------------------ GL_EXT_fragment_lighting ----------------------- */
public const uint GL_EXT_fragment_lighting = 1;
public const uint GL_FRAGMENT_LIGHTING_EXT = 0x8400;
public const uint GL_FRAGMENT_COLOR_MATERIAL_EXT = 0x8401;
public const uint GL_FRAGMENT_COLOR_MATERIAL_FACE_EXT = 0x8402;
public const uint GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_EXT = 0x8403;
public const uint GL_MAX_FRAGMENT_LIGHTS_EXT = 0x8404;
public const uint GL_MAX_ACTIVE_LIGHTS_EXT = 0x8405;
public const uint GL_CURRENT_RASTER_NORMAL_EXT = 0x8406;
public const uint GL_LIGHT_ENV_MODE_EXT = 0x8407;
public const uint GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_EXT = 0x8408;
public const uint GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_EXT = 0x8409;
public const uint GL_FRAGMENT_LIGHT_MODEL_AMBIENT_EXT = 0x840A;
public const uint GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_EXT = 0x840B;
public const uint GL_FRAGMENT_LIGHT0_EXT = 0x840C;
public const uint GL_FRAGMENT_LIGHT7_EXT = 0x8413;
public delegate void PFNGLFRAGMENTCOLORMATERIALEXTPROC( uint face,uint mode);
public delegate void PFNGLFRAGMENTLIGHTMODELFEXTPROC( uint pname,float param);
public delegate void PFNGLFRAGMENTLIGHTMODELFVEXTPROC( uint pname,IntPtr _params);
public delegate void PFNGLFRAGMENTLIGHTMODELIEXTPROC( uint pname,int param);
public delegate void PFNGLFRAGMENTLIGHTMODELIVEXTPROC( uint pname,IntPtr _params);
public delegate void PFNGLFRAGMENTLIGHTFEXTPROC( uint light,uint pname,float param);
public delegate void PFNGLFRAGMENTLIGHTFVEXTPROC( uint light,uint pname,IntPtr _params);
public delegate void PFNGLFRAGMENTLIGHTIEXTPROC( uint light,uint pname,int param);
public delegate void PFNGLFRAGMENTLIGHTIVEXTPROC( uint light,uint pname,IntPtr _params);
public delegate void PFNGLFRAGMENTMATERIALFEXTPROC( uint face,uint pname,float[] param);
public delegate void PFNGLFRAGMENTMATERIALFVEXTPROC( uint face,uint pname,float[]  _params);
public delegate void PFNGLFRAGMENTMATERIALIEXTPROC( uint face,uint pname,int[] param);
public delegate void PFNGLFRAGMENTMATERIALIVEXTPROC( uint face,uint pname,int[]  _params);
public delegate void PFNGLGETFRAGMENTLIGHTFVEXTPROC( uint light,uint pname,IntPtr _params);
public delegate void PFNGLGETFRAGMENTLIGHTIVEXTPROC( uint light,uint pname,IntPtr _params);
public delegate void PFNGLGETFRAGMENTMATERIALFVEXTPROC( uint face,uint pname,float[]  _params);
public delegate void PFNGLGETFRAGMENTMATERIALIVEXTPROC( uint face,uint pname,int[]  _params);
public delegate void PFNGLLIGHTENVIEXTPROC( uint pname,int param);
/* ------------------------ GL_EXT_framebuffer_blit ------------------------ */
public const uint GL_EXT_framebuffer_blit = 1;
public const uint GL_DRAW_FRAMEBUFFER_BINDING_EXT = 0x8CA6;
public const uint GL_READ_FRAMEBUFFER_EXT = 0x8CA8;
public const uint GL_DRAW_FRAMEBUFFER_EXT = 0x8CA9;
public const uint GL_READ_FRAMEBUFFER_BINDING_EXT = 0x8CAA;
public delegate void PFNGLBLITFRAMEBUFFEREXTPROC( int srcX0,int srcY0,int srcX1,int srcY1,int dstX0,int dstY0,int dstX1,int dstY1,uint mask,uint filter);
/* --------------------- GL_EXT_framebuffer_multisample -------------------- */
public const uint GL_EXT_framebuffer_multisample = 1;
public const uint GL_RENDERBUFFER_SAMPLES_EXT = 0x8CAB;
public const uint GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT = 0x8D56;
public const uint GL_MAX_SAMPLES_EXT = 0x8D57;
public delegate void PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC( uint target,int samples,uint internalformat,int width,int height);
/* ----------------------- GL_EXT_framebuffer_object ----------------------- */
public const uint GL_EXT_framebuffer_object = 1;
public const uint GL_INVALID_FRAMEBUFFER_OPERATION_EXT = 0x0506;
public const uint GL_MAX_RENDERBUFFER_SIZE_EXT = 0x84E8;
public const uint GL_FRAMEBUFFER_BINDING_EXT = 0x8CA6;
public const uint GL_RENDERBUFFER_BINDING_EXT = 0x8CA7;
public const uint GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT = 0x8CD0;
public const uint GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT = 0x8CD1;
public const uint GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT = 0x8CD2;
public const uint GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT = 0x8CD3;
public const uint GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT = 0x8CD4;
public const uint GL_FRAMEBUFFER_COMPLETE_EXT = 0x8CD5;
public const uint GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT = 0x8CD6;
public const uint GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT = 0x8CD7;
public const uint GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT = 0x8CD9;
public const uint GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT = 0x8CDA;
public const uint GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT = 0x8CDB;
public const uint GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT = 0x8CDC;
public const uint GL_FRAMEBUFFER_UNSUPPORTED_EXT = 0x8CDD;
public const uint GL_MAX_COLOR_ATTACHMENTS_EXT = 0x8CDF;
public const uint GL_COLOR_ATTACHMENT0_EXT = 0x8CE0;
public const uint GL_COLOR_ATTACHMENT1_EXT = 0x8CE1;
public const uint GL_COLOR_ATTACHMENT2_EXT = 0x8CE2;
public const uint GL_COLOR_ATTACHMENT3_EXT = 0x8CE3;
public const uint GL_COLOR_ATTACHMENT4_EXT = 0x8CE4;
public const uint GL_COLOR_ATTACHMENT5_EXT = 0x8CE5;
public const uint GL_COLOR_ATTACHMENT6_EXT = 0x8CE6;
public const uint GL_COLOR_ATTACHMENT7_EXT = 0x8CE7;
public const uint GL_COLOR_ATTACHMENT8_EXT = 0x8CE8;
public const uint GL_COLOR_ATTACHMENT9_EXT = 0x8CE9;
public const uint GL_COLOR_ATTACHMENT10_EXT = 0x8CEA;
public const uint GL_COLOR_ATTACHMENT11_EXT = 0x8CEB;
public const uint GL_COLOR_ATTACHMENT12_EXT = 0x8CEC;
public const uint GL_COLOR_ATTACHMENT13_EXT = 0x8CED;
public const uint GL_COLOR_ATTACHMENT14_EXT = 0x8CEE;
public const uint GL_COLOR_ATTACHMENT15_EXT = 0x8CEF;
public const uint GL_DEPTH_ATTACHMENT_EXT = 0x8D00;
public const uint GL_STENCIL_ATTACHMENT_EXT = 0x8D20;
public const uint GL_FRAMEBUFFER_EXT = 0x8D40;
public const uint GL_RENDERBUFFER_EXT = 0x8D41;
public const uint GL_RENDERBUFFER_WIDTH_EXT = 0x8D42;
public const uint GL_RENDERBUFFER_HEIGHT_EXT = 0x8D43;
public const uint GL_RENDERBUFFER_INTERNAL_FORMAT_EXT = 0x8D44;
public const uint GL_STENCIL_INDEX1_EXT = 0x8D46;
public const uint GL_STENCIL_INDEX4_EXT = 0x8D47;
public const uint GL_STENCIL_INDEX8_EXT = 0x8D48;
public const uint GL_STENCIL_INDEX16_EXT = 0x8D49;
public const uint GL_RENDERBUFFER_RED_SIZE_EXT = 0x8D50;
public const uint GL_RENDERBUFFER_GREEN_SIZE_EXT = 0x8D51;
public const uint GL_RENDERBUFFER_BLUE_SIZE_EXT = 0x8D52;
public const uint GL_RENDERBUFFER_ALPHA_SIZE_EXT = 0x8D53;
public const uint GL_RENDERBUFFER_DEPTH_SIZE_EXT = 0x8D54;
public const uint GL_RENDERBUFFER_STENCIL_SIZE_EXT = 0x8D55;
public delegate void PFNGLBINDFRAMEBUFFEREXTPROC( uint target,uint framebuffer);
public delegate void PFNGLBINDRENDERBUFFEREXTPROC( uint target,uint renderbuffer);
public delegate uint PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC( uint target);
public delegate void PFNGLDELETEFRAMEBUFFERSEXTPROC( int n,uint[]  framebuffers);
public delegate void PFNGLDELETERENDERBUFFERSEXTPROC( int n,uint[]  renderbuffers);
public delegate void PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC( uint target,uint attachment,uint renderbuffertarget,uint renderbuffer);
public delegate void PFNGLFRAMEBUFFERTEXTURE1DEXTPROC( uint target,uint attachment,uint textarget,uint texture,int level);
public delegate void PFNGLFRAMEBUFFERTEXTURE2DEXTPROC( uint target,uint attachment,uint textarget,uint texture,int level);
public delegate void PFNGLFRAMEBUFFERTEXTURE3DEXTPROC( uint target,uint attachment,uint textarget,uint texture,int level,int zoffset);
public delegate void PFNGLGENFRAMEBUFFERSEXTPROC( int n,IntPtr framebuffers);
public delegate void PFNGLGENRENDERBUFFERSEXTPROC( int n,IntPtr renderbuffers);
public delegate void PFNGLGENERATEMIPMAPEXTPROC( uint target);
public delegate void PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC( uint target,uint attachment,uint pname,IntPtr _params);
public delegate void PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC( uint target,uint pname,IntPtr _params);
[return: System.Runtime.InteropServices.MarshalAs(System.Runtime.InteropServices.UnmanagedType.I1)]public delegate bool PFNGLISFRAMEBUFFEREXTPROC( uint framebuffer);
[return: System.Runtime.InteropServices.MarshalAs(System.Runtime.InteropServices.UnmanagedType.I1)]public delegate bool PFNGLISRENDERBUFFEREXTPROC( uint renderbuffer);
public delegate void PFNGLRENDERBUFFERSTORAGEEXTPROC( uint target,uint internalformat,int width,int height);
/* ------------------------ GL_EXT_framebuffer_sRGB ------------------------ */
public const uint GL_EXT_framebuffer_sRGB = 1;
public const uint GL_FRAMEBUFFER_SRGB_EXT = 0x8DB9;
public const uint GL_FRAMEBUFFER_SRGB_CAPABLE_EXT = 0x8DBA;
/* ------------------------ GL_EXT_geometry_shader4 ------------------------ */
public const uint GL_EXT_geometry_shader4 = 1;
public const uint GL_LINES_ADJACENCY_EXT = 0xA;
public const uint GL_LINE_STRIP_ADJACENCY_EXT = 0xB;
public const uint GL_TRIANGLES_ADJACENCY_EXT = 0xC;
public const uint GL_TRIANGLE_STRIP_ADJACENCY_EXT = 0xD;
public const uint GL_PROGRAM_POINT_SIZE_EXT = 0x8642;
public const uint GL_MAX_VARYING_COMPONENTS_EXT = 0x8B4B;
public const uint GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT = 0x8C29;
public const uint GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT = 0x8CD4;
public const uint GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT = 0x8DA7;
public const uint GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT = 0x8DA8;
public const uint GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT = 0x8DA9;
public const uint GL_GEOMETRY_SHADER_EXT = 0x8DD9;
public const uint GL_GEOMETRY_VERTICES_OUT_EXT = 0x8DDA;
public const uint GL_GEOMETRY_INPUT_TYPE_EXT = 0x8DDB;
public const uint GL_GEOMETRY_OUTPUT_TYPE_EXT = 0x8DDC;
public const uint GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT = 0x8DDD;
public const uint GL_MAX_VERTEX_VARYING_COMPONENTS_EXT = 0x8DDE;
public const uint GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT = 0x8DDF;
public const uint GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT = 0x8DE0;
public const uint GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT = 0x8DE1;
public delegate void PFNGLFRAMEBUFFERTEXTUREEXTPROC( uint target,uint attachment,uint texture,int level);
public delegate void PFNGLFRAMEBUFFERTEXTUREFACEEXTPROC( uint target,uint attachment,uint texture,int level,uint face);
public delegate void PFNGLPROGRAMPARAMETERIEXTPROC( uint program,uint pname,int value);
/* --------------------- GL_EXT_gpu_program_parameters --------------------- */
public const uint GL_EXT_gpu_program_parameters = 1;
public delegate void PFNGLPROGRAMENVPARAMETERS4FVEXTPROC( uint target,uint index,int count,float[]  _params);
public delegate void PFNGLPROGRAMLOCALPARAMETERS4FVEXTPROC( uint target,uint index,int count,float[]  _params);
/* --------------------------- GL_EXT_gpu_shader4 -------------------------- */
public const uint GL_EXT_gpu_shader4 = 1;
public const uint GL_VERTEX_ATTRIB_ARRAY_INTEGER_EXT = 0x88FD;
public const uint GL_SAMPLER_1D_ARRAY_EXT = 0x8DC0;
public const uint GL_SAMPLER_2D_ARRAY_EXT = 0x8DC1;
public const uint GL_SAMPLER_BUFFER_EXT = 0x8DC2;
public const uint GL_SAMPLER_1D_ARRAY_SHADOW_EXT = 0x8DC3;
public const uint GL_SAMPLER_2D_ARRAY_SHADOW_EXT = 0x8DC4;
public const uint GL_SAMPLER_CUBE_SHADOW_EXT = 0x8DC5;
public const uint GL_UNSIGNED_INT_VEC2_EXT = 0x8DC6;
public const uint GL_UNSIGNED_INT_VEC3_EXT = 0x8DC7;
public const uint GL_UNSIGNED_INT_VEC4_EXT = 0x8DC8;
public const uint GL_INT_SAMPLER_1D_EXT = 0x8DC9;
public const uint GL_INT_SAMPLER_2D_EXT = 0x8DCA;
public const uint GL_INT_SAMPLER_3D_EXT = 0x8DCB;
public const uint GL_INT_SAMPLER_CUBE_EXT = 0x8DCC;
public const uint GL_INT_SAMPLER_2D_RECT_EXT = 0x8DCD;
public const uint GL_INT_SAMPLER_1D_ARRAY_EXT = 0x8DCE;
public const uint GL_INT_SAMPLER_2D_ARRAY_EXT = 0x8DCF;
public const uint GL_INT_SAMPLER_BUFFER_EXT = 0x8DD0;
public const uint GL_UNSIGNED_INT_SAMPLER_1D_EXT = 0x8DD1;
public const uint GL_UNSIGNED_INT_SAMPLER_2D_EXT = 0x8DD2;
public const uint GL_UNSIGNED_INT_SAMPLER_3D_EXT = 0x8DD3;
public const uint GL_UNSIGNED_INT_SAMPLER_CUBE_EXT = 0x8DD4;
public const uint GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT = 0x8DD5;
public const uint GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT = 0x8DD6;
public const uint GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT = 0x8DD7;
public const uint GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT = 0x8DD8;
public delegate void PFNGLBINDFRAGDATALOCATIONEXTPROC( uint program,uint color,string name);
public delegate int PFNGLGETFRAGDATALOCATIONEXTPROC( uint program,string name);
public delegate void PFNGLGETUNIFORMUIVEXTPROC( uint program,int location,IntPtr _params);
public delegate void PFNGLGETVERTEXATTRIBIIVEXTPROC( uint index,uint pname,IntPtr _params);
public delegate void PFNGLGETVERTEXATTRIBIUIVEXTPROC( uint index,uint pname,IntPtr _params);
public delegate void PFNGLUNIFORM1UIEXTPROC( int location,uint v0);
public delegate void PFNGLUNIFORM1UIVEXTPROC( int location,int count,uint[] value);
public delegate void PFNGLUNIFORM2UIEXTPROC( int location,uint v0,uint v1);
public delegate void PFNGLUNIFORM2UIVEXTPROC( int location,int count,uint[] value);
public delegate void PFNGLUNIFORM3UIEXTPROC( int location,uint v0,uint v1,uint v2);
public delegate void PFNGLUNIFORM3UIVEXTPROC( int location,int count,uint[] value);
public delegate void PFNGLUNIFORM4UIEXTPROC( int location,uint v0,uint v1,uint v2,uint v3);
public delegate void PFNGLUNIFORM4UIVEXTPROC( int location,int count,uint[] value);
public delegate void PFNGLVERTEXATTRIBI1IEXTPROC( uint index,int x);
public delegate void PFNGLVERTEXATTRIBI1IVEXTPROC( uint index,int[] v);
public delegate void PFNGLVERTEXATTRIBI1UIEXTPROC( uint index,uint x);
public delegate void PFNGLVERTEXATTRIBI1UIVEXTPROC( uint index,uint[] v);
public delegate void PFNGLVERTEXATTRIBI2IEXTPROC( uint index,int x,int y);
public delegate void PFNGLVERTEXATTRIBI2IVEXTPROC( uint index,int[] v);
public delegate void PFNGLVERTEXATTRIBI2UIEXTPROC( uint index,uint x,uint y);
public delegate void PFNGLVERTEXATTRIBI2UIVEXTPROC( uint index,uint[] v);
public delegate void PFNGLVERTEXATTRIBI3IEXTPROC( uint index,int x,int y,int z);
public delegate void PFNGLVERTEXATTRIBI3IVEXTPROC( uint index,int[] v);
public delegate void PFNGLVERTEXATTRIBI3UIEXTPROC( uint index,uint x,uint y,uint z);
public delegate void PFNGLVERTEXATTRIBI3UIVEXTPROC( uint index,uint[] v);
public delegate void PFNGLVERTEXATTRIBI4BVEXTPROC( uint index,byte[] v);
public delegate void PFNGLVERTEXATTRIBI4IEXTPROC( uint index,int x,int y,int z,int w);
public delegate void PFNGLVERTEXATTRIBI4IVEXTPROC( uint index,int[] v);
public delegate void PFNGLVERTEXATTRIBI4SVEXTPROC( uint index,short[] v);
public delegate void PFNGLVERTEXATTRIBI4UBVEXTPROC( uint index,byte[] v);
public delegate void PFNGLVERTEXATTRIBI4UIEXTPROC( uint index,uint x,uint y,uint z,uint w);
public delegate void PFNGLVERTEXATTRIBI4UIVEXTPROC( uint index,uint[] v);
public delegate void PFNGLVERTEXATTRIBI4USVEXTPROC( uint index,ushort[] v);
public delegate void PFNGLVERTEXATTRIBIPOINTEREXTPROC( uint index,int size,uint type,int stride,IntPtr pointer);
/* ---------------------------- GL_EXT_histogram --------------------------- */
public const uint GL_EXT_histogram = 1;
public const uint GL_HISTOGRAM_EXT = 0x8024;
public const uint GL_PROXY_HISTOGRAM_EXT = 0x8025;
public const uint GL_HISTOGRAM_WIDTH_EXT = 0x8026;
public const uint GL_HISTOGRAM_FORMAT_EXT = 0x8027;
public const uint GL_HISTOGRAM_RED_SIZE_EXT = 0x8028;
public const uint GL_HISTOGRAM_GREEN_SIZE_EXT = 0x8029;
public const uint GL_HISTOGRAM_BLUE_SIZE_EXT = 0x802A;
public const uint GL_HISTOGRAM_ALPHA_SIZE_EXT = 0x802B;
public const uint GL_HISTOGRAM_LUMINANCE_SIZE_EXT = 0x802C;
public const uint GL_HISTOGRAM_SINK_EXT = 0x802D;
public const uint GL_MINMAX_EXT = 0x802E;
public const uint GL_MINMAX_FORMAT_EXT = 0x802F;
public const uint GL_MINMAX_SINK_EXT = 0x8030;
public delegate void PFNGLGETHISTOGRAMEXTPROC( uint target,bool reset,uint format,uint type,IntPtr values);
public delegate void PFNGLGETHISTOGRAMPARAMETERFVEXTPROC( uint target,uint pname,IntPtr _params);
public delegate void PFNGLGETHISTOGRAMPARAMETERIVEXTPROC( uint target,uint pname,IntPtr _params);
public delegate void PFNGLGETMINMAXEXTPROC( uint target,bool reset,uint format,uint type,IntPtr values);
public delegate void PFNGLGETMINMAXPARAMETERFVEXTPROC( uint target,uint pname,IntPtr _params);
public delegate void PFNGLGETMINMAXPARAMETERIVEXTPROC( uint target,uint pname,IntPtr _params);
public delegate void PFNGLHISTOGRAMEXTPROC( uint target,int width,uint internalformat,bool sink);
public delegate void PFNGLMINMAXEXTPROC( uint target,uint internalformat,bool sink);
public delegate void PFNGLRESETHISTOGRAMEXTPROC( uint target);
public delegate void PFNGLRESETMINMAXEXTPROC( uint target);
/* ----------------------- GL_EXT_index_array_formats ---------------------- */
public const uint GL_EXT_index_array_formats = 1;
/* --------------------------- GL_EXT_index_func --------------------------- */
public const uint GL_EXT_index_func = 1;
public delegate void PFNGLINDEXFUNCEXTPROC( uint func,float _ref);
/* ------------------------- GL_EXT_index_material ------------------------- */
public const uint GL_EXT_index_material = 1;
public delegate void PFNGLINDEXMATERIALEXTPROC( uint face,uint mode);
/* -------------------------- GL_EXT_index_texture ------------------------- */
public const uint GL_EXT_index_texture = 1;
/* -------------------------- GL_EXT_light_texture ------------------------- */
public const uint GL_EXT_light_texture = 1;
public const uint GL_FRAGMENT_MATERIAL_EXT = 0x8349;
public const uint GL_FRAGMENT_NORMAL_EXT = 0x834A;
public const uint GL_FRAGMENT_COLOR_EXT = 0x834C;
public const uint GL_ATTENUATION_EXT = 0x834D;
public const uint GL_SHADOW_ATTENUATION_EXT = 0x834E;
public const uint GL_TEXTURE_APPLICATION_MODE_EXT = 0x834F;
public const uint GL_TEXTURE_LIGHT_EXT = 0x8350;
public const uint GL_TEXTURE_MATERIAL_FACE_EXT = 0x8351;
public const uint GL_TEXTURE_MATERIAL_PARAMETER_EXT = 0x8352;
//public const uint GL_FRAGMENT_DEPTH_EXT = 0x8452;
public delegate void PFNGLAPPLYTEXTUREEXTPROC( uint mode);
public delegate void PFNGLTEXTURELIGHTEXTPROC( uint pname);
public delegate void PFNGLTEXTUREMATERIALEXTPROC( uint face,uint mode);
/* ------------------------- GL_EXT_misc_attribute ------------------------- */
public const uint GL_EXT_misc_attribute = 1;
/* ------------------------ GL_EXT_multi_draw_arrays ----------------------- */
public const uint GL_EXT_multi_draw_arrays = 1;
public delegate void PFNGLMULTIDRAWARRAYSEXTPROC( uint mode,int[]  first,int[] count,int primcount);
public delegate void PFNGLMULTIDRAWELEMENTSEXTPROC( uint mode,IntPtr count,uint type,IntPtr indices,int primcount);
/* --------------------------- GL_EXT_multisample -------------------------- */
public const uint GL_EXT_multisample = 1;
public const uint GL_MULTISAMPLE_EXT = 0x809D;
public const uint GL_SAMPLE_ALPHA_TO_MASK_EXT = 0x809E;
public const uint GL_SAMPLE_ALPHA_TO_ONE_EXT = 0x809F;
public const uint GL_SAMPLE_MASK_EXT = 0x80A0;
public const uint GL_1PASS_EXT = 0x80A1;
public const uint GL_2PASS_0_EXT = 0x80A2;
public const uint GL_2PASS_1_EXT = 0x80A3;
public const uint GL_4PASS_0_EXT = 0x80A4;
public const uint GL_4PASS_1_EXT = 0x80A5;
public const uint GL_4PASS_2_EXT = 0x80A6;
public const uint GL_4PASS_3_EXT = 0x80A7;
public const uint GL_SAMPLE_BUFFERS_EXT = 0x80A8;
public const uint GL_SAMPLES_EXT = 0x80A9;
public const uint GL_SAMPLE_MASK_VALUE_EXT = 0x80AA;
public const uint GL_SAMPLE_MASK_INVERT_EXT = 0x80AB;
public const uint GL_SAMPLE_PATTERN_EXT = 0x80AC;
public const uint GL_MULTISAMPLE_BIT_EXT = 0x20000000;
public delegate void PFNGLSAMPLEMASKEXTPROC( float value,bool invert);
public delegate void PFNGLSAMPLEPATTERNEXTPROC( uint pattern);
/* ---------------------- GL_EXT_packed_depth_stencil ---------------------- */
public const uint GL_EXT_packed_depth_stencil = 1;
public const uint GL_DEPTH_STENCIL_EXT = 0x84F9;
public const uint GL_UNSIGNED_INT_24_8_EXT = 0x84FA;
public const uint GL_DEPTH24_STENCIL8_EXT = 0x88F0;
public const uint GL_TEXTURE_STENCIL_SIZE_EXT = 0x88F1;
/* -------------------------- GL_EXT_packed_float -------------------------- */
public const uint GL_EXT_packed_float = 1;
public const uint GL_R11F_G11F_B10F_EXT = 0x8C3A;
public const uint GL_UNSIGNED_INT_10F_11F_11F_REV_EXT = 0x8C3B;
public const uint GL_RGBA_SIGNED_COMPONENTS_EXT = 0x8C3C;
/* -------------------------- GL_EXT_packed_pixels ------------------------- */
public const uint GL_EXT_packed_pixels = 1;
public const uint GL_UNSIGNED_BYTE_3_3_2_EXT = 0x8032;
public const uint GL_UNSIGNED_SHORT_4_4_4_4_EXT = 0x8033;
public const uint GL_UNSIGNED_SHORT_5_5_5_1_EXT = 0x8034;
public const uint GL_UNSIGNED_INT_8_8_8_8_EXT = 0x8035;
public const uint GL_UNSIGNED_INT_10_10_10_2_EXT = 0x8036;
/* ------------------------ GL_EXT_paletted_texture ------------------------ */
public const uint GL_EXT_paletted_texture = 1;
//public const uint GL_TEXTURE_1D = 0x0DE0;
//public const uint GL_TEXTURE_2D = 0x0DE1;
//public const uint GL_PROXY_TEXTURE_1D = 0x8063;
//public const uint GL_PROXY_TEXTURE_2D = 0x8064;
public const uint GL_TEXTURE_3D_EXT = 0x806F;
public const uint GL_PROXY_TEXTURE_3D_EXT = 0x8070;
public const uint GL_COLOR_TABLE_FORMAT_EXT = 0x80D8;
public const uint GL_COLOR_TABLE_WIDTH_EXT = 0x80D9;
public const uint GL_COLOR_TABLE_RED_SIZE_EXT = 0x80DA;
public const uint GL_COLOR_TABLE_GREEN_SIZE_EXT = 0x80DB;
public const uint GL_COLOR_TABLE_BLUE_SIZE_EXT = 0x80DC;
public const uint GL_COLOR_TABLE_ALPHA_SIZE_EXT = 0x80DD;
public const uint GL_COLOR_TABLE_LUMINANCE_SIZE_EXT = 0x80DE;
public const uint GL_COLOR_TABLE_INTENSITY_SIZE_EXT = 0x80DF;
//public const uint GL_COLOR_INDEX1_EXT = 0x80E2;
//public const uint GL_COLOR_INDEX2_EXT = 0x80E3;
//public const uint GL_COLOR_INDEX4_EXT = 0x80E4;
//public const uint GL_COLOR_INDEX8_EXT = 0x80E5;
//public const uint GL_COLOR_INDEX12_EXT = 0x80E6;
//public const uint GL_COLOR_INDEX16_EXT = 0x80E7;
public const uint GL_TEXTURE_INDEX_SIZE_EXT = 0x80ED;
//public const uint GL_TEXTURE_CUBE_MAP_ARB = 0x8513;
//public const uint GL_PROXY_TEXTURE_CUBE_MAP_ARB = 0x851B;
public delegate void PFNGLCOLORTABLEEXTPROC( uint target,uint internalFormat,int width,uint format,uint type,IntPtr  data);
public delegate void PFNGLGETCOLORTABLEEXTPROC( uint target,uint format,uint type,IntPtr data);
public delegate void PFNGLGETCOLORTABLEPARAMETERFVEXTPROC( uint target,uint pname,IntPtr _params);
public delegate void PFNGLGETCOLORTABLEPARAMETERIVEXTPROC( uint target,uint pname,IntPtr _params);
/* ----------------------- GL_EXT_pixel_buffer_object ---------------------- */
public const uint GL_EXT_pixel_buffer_object = 1;
public const uint GL_PIXEL_PACK_BUFFER_EXT = 0x88EB;
public const uint GL_PIXEL_UNPACK_BUFFER_EXT = 0x88EC;
public const uint GL_PIXEL_PACK_BUFFER_BINDING_EXT = 0x88ED;
public const uint GL_PIXEL_UNPACK_BUFFER_BINDING_EXT = 0x88EF;
/* ------------------------- GL_EXT_pixel_transform ------------------------ */
public const uint GL_EXT_pixel_transform = 1;
public const uint GL_PIXEL_TRANSFORM_2D_EXT = 0x8330;
public const uint GL_PIXEL_MAG_FILTER_EXT = 0x8331;
public const uint GL_PIXEL_MIN_FILTER_EXT = 0x8332;
public const uint GL_PIXEL_CUBIC_WEIGHT_EXT = 0x8333;
public const uint GL_CUBIC_EXT = 0x8334;
public const uint GL_AVERAGE_EXT = 0x8335;
public const uint GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT = 0x8336;
public const uint GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT = 0x8337;
public const uint GL_PIXEL_TRANSFORM_2D_MATRIX_EXT = 0x8338;
public delegate void PFNGLGETPIXELTRANSFORMPARAMETERFVEXTPROC( uint target,uint pname,float[]  _params);
public delegate void PFNGLGETPIXELTRANSFORMPARAMETERIVEXTPROC( uint target,uint pname,int[]  _params);
public delegate void PFNGLPIXELTRANSFORMPARAMETERFEXTPROC( uint target,uint pname,float[] param);
public delegate void PFNGLPIXELTRANSFORMPARAMETERFVEXTPROC( uint target,uint pname,float[]  _params);
public delegate void PFNGLPIXELTRANSFORMPARAMETERIEXTPROC( uint target,uint pname,int[] param);
public delegate void PFNGLPIXELTRANSFORMPARAMETERIVEXTPROC( uint target,uint pname,int[]  _params);
/* ------------------- GL_EXT_pixel_transform_color_table ------------------ */
public const uint GL_EXT_pixel_transform_color_table = 1;
/* ------------------------ GL_EXT_point_parameters ------------------------ */
public const uint GL_EXT_point_parameters = 1;
public const uint GL_POINT_SIZE_MIN_EXT = 0x8126;
public const uint GL_POINT_SIZE_MAX_EXT = 0x8127;
public const uint GL_POINT_FADE_THRESHOLD_SIZE_EXT = 0x8128;
public const uint GL_DISTANCE_ATTENUATION_EXT = 0x8129;
public delegate void PFNGLPOINTPARAMETERFEXTPROC( uint pname,float param);
public delegate void PFNGLPOINTPARAMETERFVEXTPROC( uint pname,float[]  _params);
/* ------------------------- GL_EXT_polygon_offset ------------------------- */
public const uint GL_EXT_polygon_offset = 1;
public const uint GL_POLYGON_OFFSET_EXT = 0x8037;
public const uint GL_POLYGON_OFFSET_FACTOR_EXT = 0x8038;
public const uint GL_POLYGON_OFFSET_BIAS_EXT = 0x8039;
public delegate void PFNGLPOLYGONOFFSETEXTPROC( float factor,float bias);
/* ------------------------ GL_EXT_provoking_vertex ------------------------ */
public const uint GL_EXT_provoking_vertex = 1;
public const uint GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT = 0x8E4C;
public const uint GL_FIRST_VERTEX_CONVENTION_EXT = 0x8E4D;
public const uint GL_LAST_VERTEX_CONVENTION_EXT = 0x8E4E;
public const uint GL_PROVOKING_VERTEX_EXT = 0x8E4F;
public delegate void PFNGLPROVOKINGVERTEXEXTPROC( uint mode);
/* ------------------------- GL_EXT_rescale_normal ------------------------- */
public const uint GL_EXT_rescale_normal = 1;
public const uint GL_RESCALE_NORMAL_EXT = 0x803A;
/* -------------------------- GL_EXT_scene_marker -------------------------- */
public const uint GL_EXT_scene_marker = 1;
public delegate void PFNGLBEGINSCENEEXTPROC( );
public delegate void PFNGLENDSCENEEXTPROC( );
/* ------------------------- GL_EXT_secondary_color ------------------------ */
public const uint GL_EXT_secondary_color = 1;
public const uint GL_COLOR_SUM_EXT = 0x8458;
public const uint GL_CURRENT_SECONDARY_COLOR_EXT = 0x8459;
public const uint GL_SECONDARY_COLOR_ARRAY_SIZE_EXT = 0x845A;
public const uint GL_SECONDARY_COLOR_ARRAY_TYPE_EXT = 0x845B;
public const uint GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT = 0x845C;
public const uint GL_SECONDARY_COLOR_ARRAY_POINTER_EXT = 0x845D;
public const uint GL_SECONDARY_COLOR_ARRAY_EXT = 0x845E;
public delegate void PFNGLSECONDARYCOLOR3BEXTPROC( sbyte red,sbyte green,sbyte blue);
public delegate void PFNGLSECONDARYCOLOR3BVEXTPROC( byte[] v);
public delegate void PFNGLSECONDARYCOLOR3DEXTPROC( double red,double green,double blue);
public delegate void PFNGLSECONDARYCOLOR3DVEXTPROC( double[] v);
public delegate void PFNGLSECONDARYCOLOR3FEXTPROC( float red,float green,float blue);
public delegate void PFNGLSECONDARYCOLOR3FVEXTPROC( float[] v);
public delegate void PFNGLSECONDARYCOLOR3IEXTPROC( int red,int green,int blue);
public delegate void PFNGLSECONDARYCOLOR3IVEXTPROC( int[] v);
public delegate void PFNGLSECONDARYCOLOR3SEXTPROC( short red,short green,short blue);
public delegate void PFNGLSECONDARYCOLOR3SVEXTPROC( short[] v);
public delegate void PFNGLSECONDARYCOLOR3UBEXTPROC( byte red,byte green,byte blue);
public delegate void PFNGLSECONDARYCOLOR3UBVEXTPROC( byte[] v);
public delegate void PFNGLSECONDARYCOLOR3UIEXTPROC( uint red,uint green,uint blue);
public delegate void PFNGLSECONDARYCOLOR3UIVEXTPROC( uint[] v);
public delegate void PFNGLSECONDARYCOLOR3USEXTPROC( ushort red,ushort green,ushort blue);
public delegate void PFNGLSECONDARYCOLOR3USVEXTPROC( ushort[] v);
public delegate void PFNGLSECONDARYCOLORPOINTEREXTPROC( int size,uint type,int stride,IntPtr pointer);
/* --------------------- GL_EXT_separate_shader_objects -------------------- */
public const uint GL_EXT_separate_shader_objects = 1;
public const uint GL_ACTIVE_PROGRAM_EXT = 0x8B8D;
public delegate void PFNGLACTIVEPROGRAMEXTPROC( uint program);
public delegate uint PFNGLCREATESHADERPROGRAMEXTPROC( uint type,string  _string);
public delegate void PFNGLUSESHADERPROGRAMEXTPROC( uint type,uint program);
/* --------------------- GL_EXT_separate_specular_color -------------------- */
public const uint GL_EXT_separate_specular_color = 1;
public const uint GL_LIGHT_MODEL_COLOR_CONTROL_EXT = 0x81F8;
public const uint GL_SINGLE_COLOR_EXT = 0x81F9;
public const uint GL_SEPARATE_SPECULAR_COLOR_EXT = 0x81FA;
/* --------------------- GL_EXT_shader_image_load_store -------------------- */
public const uint GL_EXT_shader_image_load_store = 1;
public const uint GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT_EXT = 0x00000001;
public const uint GL_ELEMENT_ARRAY_BARRIER_BIT_EXT = 0x00000002;
public const uint GL_UNIFORM_BARRIER_BIT_EXT = 0x00000004;
public const uint GL_TEXTURE_FETCH_BARRIER_BIT_EXT = 0x00000008;
public const uint GL_SHADER_IMAGE_ACCESS_BARRIER_BIT_EXT = 0x00000020;
public const uint GL_COMMAND_BARRIER_BIT_EXT = 0x00000040;
public const uint GL_PIXEL_BUFFER_BARRIER_BIT_EXT = 0x00000080;
public const uint GL_TEXTURE_UPDATE_BARRIER_BIT_EXT = 0x00000100;
public const uint GL_BUFFER_UPDATE_BARRIER_BIT_EXT = 0x00000200;
public const uint GL_FRAMEBUFFER_BARRIER_BIT_EXT = 0x00000400;
public const uint GL_TRANSFORM_FEEDBACK_BARRIER_BIT_EXT = 0x00000800;
public const uint GL_ATOMIC_COUNTER_BARRIER_BIT_EXT = 0x00001000;
public const uint GL_MAX_IMAGE_UNITS_EXT = 0x8F38;
public const uint GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS_EXT = 0x8F39;
public const uint GL_IMAGE_BINDING_NAME_EXT = 0x8F3A;
public const uint GL_IMAGE_BINDING_LEVEL_EXT = 0x8F3B;
public const uint GL_IMAGE_BINDING_LAYERED_EXT = 0x8F3C;
public const uint GL_IMAGE_BINDING_LAYER_EXT = 0x8F3D;
public const uint GL_IMAGE_BINDING_ACCESS_EXT = 0x8F3E;
public const uint GL_IMAGE_1D_EXT = 0x904C;
public const uint GL_IMAGE_2D_EXT = 0x904D;
public const uint GL_IMAGE_3D_EXT = 0x904E;
public const uint GL_IMAGE_2D_RECT_EXT = 0x904F;
public const uint GL_IMAGE_CUBE_EXT = 0x9050;
public const uint GL_IMAGE_BUFFER_EXT = 0x9051;
public const uint GL_IMAGE_1D_ARRAY_EXT = 0x9052;
public const uint GL_IMAGE_2D_ARRAY_EXT = 0x9053;
public const uint GL_IMAGE_CUBE_MAP_ARRAY_EXT = 0x9054;
public const uint GL_IMAGE_2D_MULTISAMPLE_EXT = 0x9055;
public const uint GL_IMAGE_2D_MULTISAMPLE_ARRAY_EXT = 0x9056;
public const uint GL_INT_IMAGE_1D_EXT = 0x9057;
public const uint GL_INT_IMAGE_2D_EXT = 0x9058;
public const uint GL_INT_IMAGE_3D_EXT = 0x9059;
public const uint GL_INT_IMAGE_2D_RECT_EXT = 0x905A;
public const uint GL_INT_IMAGE_CUBE_EXT = 0x905B;
public const uint GL_INT_IMAGE_BUFFER_EXT = 0x905C;
public const uint GL_INT_IMAGE_1D_ARRAY_EXT = 0x905D;
public const uint GL_INT_IMAGE_2D_ARRAY_EXT = 0x905E;
public const uint GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT = 0x905F;
public const uint GL_INT_IMAGE_2D_MULTISAMPLE_EXT = 0x9060;
public const uint GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT = 0x9061;
public const uint GL_UNSIGNED_INT_IMAGE_1D_EXT = 0x9062;
public const uint GL_UNSIGNED_INT_IMAGE_2D_EXT = 0x9063;
public const uint GL_UNSIGNED_INT_IMAGE_3D_EXT = 0x9064;
public const uint GL_UNSIGNED_INT_IMAGE_2D_RECT_EXT = 0x9065;
public const uint GL_UNSIGNED_INT_IMAGE_CUBE_EXT = 0x9066;
public const uint GL_UNSIGNED_INT_IMAGE_BUFFER_EXT = 0x9067;
public const uint GL_UNSIGNED_INT_IMAGE_1D_ARRAY_EXT = 0x9068;
public const uint GL_UNSIGNED_INT_IMAGE_2D_ARRAY_EXT = 0x9069;
public const uint GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT = 0x906A;
public const uint GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_EXT = 0x906B;
public const uint GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT = 0x906C;
public const uint GL_MAX_IMAGE_SAMPLES_EXT = 0x906D;
public const uint GL_IMAGE_BINDING_FORMAT_EXT = 0x906E;
public const uint GL_ALL_BARRIER_BITS_EXT = 0xFFFFFFFF;
public delegate void PFNGLBINDIMAGETEXTUREEXTPROC( uint index,uint texture,int level,bool layered,int layer,uint access,int format);
public delegate void PFNGLMEMORYBARRIEREXTPROC( uint barriers);
/* -------------------------- GL_EXT_shadow_funcs -------------------------- */
public const uint GL_EXT_shadow_funcs = 1;
/* --------------------- GL_EXT_shared_texture_palette --------------------- */
public const uint GL_EXT_shared_texture_palette = 1;
public const uint GL_SHARED_TEXTURE_PALETTE_EXT = 0x81FB;
/* ------------------------ GL_EXT_stencil_clear_tag ----------------------- */
public const uint GL_EXT_stencil_clear_tag = 1;
public const uint GL_STENCIL_TAG_BITS_EXT = 0x88F2;
public const uint GL_STENCIL_CLEAR_TAG_VALUE_EXT = 0x88F3;
/* ------------------------ GL_EXT_stencil_two_side ------------------------ */
public const uint GL_EXT_stencil_two_side = 1;
public const uint GL_STENCIL_TEST_TWO_SIDE_EXT = 0x8910;
public const uint GL_ACTIVE_STENCIL_FACE_EXT = 0x8911;
public delegate void PFNGLACTIVESTENCILFACEEXTPROC( uint face);
/* -------------------------- GL_EXT_stencil_wrap -------------------------- */
public const uint GL_EXT_stencil_wrap = 1;
public const uint GL_INCR_WRAP_EXT = 0x8507;
public const uint GL_DECR_WRAP_EXT = 0x8508;
/* --------------------------- GL_EXT_subtexture --------------------------- */
public const uint GL_EXT_subtexture = 1;
public delegate void PFNGLTEXSUBIMAGE1DEXTPROC( uint target,int level,int xoffset,int width,uint format,uint type,IntPtr  pixels);
public delegate void PFNGLTEXSUBIMAGE2DEXTPROC( uint target,int level,int xoffset,int yoffset,int width,int height,uint format,uint type,IntPtr  pixels);
public delegate void PFNGLTEXSUBIMAGE3DEXTPROC( uint target,int level,int xoffset,int yoffset,int zoffset,int width,int height,int depth,uint format,uint type,IntPtr  pixels);
/* ----------------------------- GL_EXT_texture ---------------------------- */
public const uint GL_EXT_texture = 1;
public const uint GL_ALPHA4_EXT = 0x803B;
public const uint GL_ALPHA8_EXT = 0x803C;
public const uint GL_ALPHA12_EXT = 0x803D;
public const uint GL_ALPHA16_EXT = 0x803E;
public const uint GL_LUMINANCE4_EXT = 0x803F;
public const uint GL_LUMINANCE8_EXT = 0x8040;
public const uint GL_LUMINANCE12_EXT = 0x8041;
public const uint GL_LUMINANCE16_EXT = 0x8042;
public const uint GL_LUMINANCE4_ALPHA4_EXT = 0x8043;
public const uint GL_LUMINANCE6_ALPHA2_EXT = 0x8044;
public const uint GL_LUMINANCE8_ALPHA8_EXT = 0x8045;
public const uint GL_LUMINANCE12_ALPHA4_EXT = 0x8046;
public const uint GL_LUMINANCE12_ALPHA12_EXT = 0x8047;
public const uint GL_LUMINANCE16_ALPHA16_EXT = 0x8048;
public const uint GL_INTENSITY_EXT = 0x8049;
public const uint GL_INTENSITY4_EXT = 0x804A;
public const uint GL_INTENSITY8_EXT = 0x804B;
public const uint GL_INTENSITY12_EXT = 0x804C;
public const uint GL_INTENSITY16_EXT = 0x804D;
public const uint GL_RGB2_EXT = 0x804E;
public const uint GL_RGB4_EXT = 0x804F;
public const uint GL_RGB5_EXT = 0x8050;
public const uint GL_RGB8_EXT = 0x8051;
public const uint GL_RGB10_EXT = 0x8052;
public const uint GL_RGB12_EXT = 0x8053;
public const uint GL_RGB16_EXT = 0x8054;
public const uint GL_RGBA2_EXT = 0x8055;
public const uint GL_RGBA4_EXT = 0x8056;
public const uint GL_RGB5_A1_EXT = 0x8057;
public const uint GL_RGBA8_EXT = 0x8058;
public const uint GL_RGB10_A2_EXT = 0x8059;
public const uint GL_RGBA12_EXT = 0x805A;
public const uint GL_RGBA16_EXT = 0x805B;
public const uint GL_TEXTURE_RED_SIZE_EXT = 0x805C;
public const uint GL_TEXTURE_GREEN_SIZE_EXT = 0x805D;
public const uint GL_TEXTURE_BLUE_SIZE_EXT = 0x805E;
public const uint GL_TEXTURE_ALPHA_SIZE_EXT = 0x805F;
public const uint GL_TEXTURE_LUMINANCE_SIZE_EXT = 0x8060;
public const uint GL_TEXTURE_INTENSITY_SIZE_EXT = 0x8061;
public const uint GL_REPLACE_EXT = 0x8062;
public const uint GL_PROXY_TEXTURE_1D_EXT = 0x8063;
public const uint GL_PROXY_TEXTURE_2D_EXT = 0x8064;
/* ---------------------------- GL_EXT_texture3D --------------------------- */
public const uint GL_EXT_texture3D = 1;
public const uint GL_PACK_SKIP_IMAGES_EXT = 0x806B;
public const uint GL_PACK_IMAGE_HEIGHT_EXT = 0x806C;
public const uint GL_UNPACK_SKIP_IMAGES_EXT = 0x806D;
public const uint GL_UNPACK_IMAGE_HEIGHT_EXT = 0x806E;
//public const uint GL_TEXTURE_3D_EXT = 0x806F;
//public const uint GL_PROXY_TEXTURE_3D_EXT = 0x8070;
public const uint GL_TEXTURE_DEPTH_EXT = 0x8071;
public const uint GL_TEXTURE_WRAP_R_EXT = 0x8072;
public const uint GL_MAX_3D_TEXTURE_SIZE_EXT = 0x8073;
public delegate void PFNGLTEXIMAGE3DEXTPROC( uint target,int level,uint internalformat,int width,int height,int depth,int border,uint format,uint type,IntPtr  pixels);
/* -------------------------- GL_EXT_texture_array ------------------------- */
public const uint GL_EXT_texture_array = 1;
public const uint GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT = 0x884E;
public const uint GL_MAX_ARRAY_TEXTURE_LAYERS_EXT = 0x88FF;
public const uint GL_TEXTURE_1D_ARRAY_EXT = 0x8C18;
public const uint GL_PROXY_TEXTURE_1D_ARRAY_EXT = 0x8C19;
public const uint GL_TEXTURE_2D_ARRAY_EXT = 0x8C1A;
public const uint GL_PROXY_TEXTURE_2D_ARRAY_EXT = 0x8C1B;
public const uint GL_TEXTURE_BINDING_1D_ARRAY_EXT = 0x8C1C;
public const uint GL_TEXTURE_BINDING_2D_ARRAY_EXT = 0x8C1D;
public delegate void PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC( uint target,uint attachment,uint texture,int level,int layer);
/* ---------------------- GL_EXT_texture_buffer_object --------------------- */
public const uint GL_EXT_texture_buffer_object = 1;
public const uint GL_TEXTURE_BUFFER_EXT = 0x8C2A;
public const uint GL_MAX_TEXTURE_BUFFER_SIZE_EXT = 0x8C2B;
public const uint GL_TEXTURE_BINDING_BUFFER_EXT = 0x8C2C;
public const uint GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT = 0x8C2D;
public const uint GL_TEXTURE_BUFFER_FORMAT_EXT = 0x8C2E;
public delegate void PFNGLTEXBUFFEREXTPROC( uint target,uint internalformat,uint buffer);
/* -------------------- GL_EXT_texture_compression_dxt1 -------------------- */
public const uint GL_EXT_texture_compression_dxt1 = 1;
public const uint GL_COMPRESSED_RGB_S3TC_DXT1_EXT = 0x83F0;
public const uint GL_COMPRESSED_RGBA_S3TC_DXT1_EXT = 0x83F1;
/* -------------------- GL_EXT_texture_compression_latc -------------------- */
public const uint GL_EXT_texture_compression_latc = 1;
public const uint GL_COMPRESSED_LUMINANCE_LATC1_EXT = 0x8C70;
public const uint GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT = 0x8C71;
public const uint GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT = 0x8C72;
public const uint GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT = 0x8C73;
/* -------------------- GL_EXT_texture_compression_rgtc -------------------- */
public const uint GL_EXT_texture_compression_rgtc = 1;
public const uint GL_COMPRESSED_RED_RGTC1_EXT = 0x8DBB;
public const uint GL_COMPRESSED_SIGNED_RED_RGTC1_EXT = 0x8DBC;
public const uint GL_COMPRESSED_RED_GREEN_RGTC2_EXT = 0x8DBD;
public const uint GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT = 0x8DBE;
/* -------------------- GL_EXT_texture_compression_s3tc -------------------- */
public const uint GL_EXT_texture_compression_s3tc = 1;
//public const uint GL_COMPRESSED_RGB_S3TC_DXT1_EXT = 0x83F0;
//public const uint GL_COMPRESSED_RGBA_S3TC_DXT1_EXT = 0x83F1;
public const uint GL_COMPRESSED_RGBA_S3TC_DXT3_EXT = 0x83F2;
public const uint GL_COMPRESSED_RGBA_S3TC_DXT5_EXT = 0x83F3;
/* ------------------------ GL_EXT_texture_cube_map ------------------------ */
public const uint GL_EXT_texture_cube_map = 1;
public const uint GL_NORMAL_MAP_EXT = 0x8511;
public const uint GL_REFLECTION_MAP_EXT = 0x8512;
public const uint GL_TEXTURE_CUBE_MAP_EXT = 0x8513;
public const uint GL_TEXTURE_BINDING_CUBE_MAP_EXT = 0x8514;
public const uint GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT = 0x8515;
public const uint GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT = 0x8516;
public const uint GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT = 0x8517;
public const uint GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT = 0x8518;
public const uint GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT = 0x8519;
public const uint GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT = 0x851A;
public const uint GL_PROXY_TEXTURE_CUBE_MAP_EXT = 0x851B;
public const uint GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT = 0x851C;
/* ----------------------- GL_EXT_texture_edge_clamp ----------------------- */
public const uint GL_EXT_texture_edge_clamp = 1;
public const uint GL_CLAMP_TO_EDGE_EXT = 0x812F;
/* --------------------------- GL_EXT_texture_env -------------------------- */
public const uint GL_EXT_texture_env = 1;
public const uint GL_TEXTURE_ENV0_EXT = 0;
public const uint GL_ENV_BLEND_EXT = 0;
public const uint GL_TEXTURE_ENV_SHIFT_EXT = 0;
public const uint GL_ENV_REPLACE_EXT = 0;
public const uint GL_ENV_ADD_EXT = 0;
public const uint GL_ENV_SUBTRACT_EXT = 0;
public const uint GL_TEXTURE_ENV_MODE_ALPHA_EXT = 0;
public const uint GL_ENV_REVERSE_SUBTRACT_EXT = 0;
public const uint GL_ENV_REVERSE_BLEND_EXT = 0;
public const uint GL_ENV_COPY_EXT = 0;
public const uint GL_ENV_MODULATE_EXT = 0;
/* ------------------------- GL_EXT_texture_env_add ------------------------ */
public const uint GL_EXT_texture_env_add = 1;
/* ----------------------- GL_EXT_texture_env_combine ---------------------- */
public const uint GL_EXT_texture_env_combine = 1;
public const uint GL_COMBINE_EXT = 0x8570;
public const uint GL_COMBINE_RGB_EXT = 0x8571;
public const uint GL_COMBINE_ALPHA_EXT = 0x8572;
public const uint GL_RGB_SCALE_EXT = 0x8573;
public const uint GL_ADD_SIGNED_EXT = 0x8574;
public const uint GL_INTERPOLATE_EXT = 0x8575;
public const uint GL_CONSTANT_EXT = 0x8576;
public const uint GL_PRIMARY_COLOR_EXT = 0x8577;
public const uint GL_PREVIOUS_EXT = 0x8578;
public const uint GL_SOURCE0_RGB_EXT = 0x8580;
public const uint GL_SOURCE1_RGB_EXT = 0x8581;
public const uint GL_SOURCE2_RGB_EXT = 0x8582;
public const uint GL_SOURCE0_ALPHA_EXT = 0x8588;
public const uint GL_SOURCE1_ALPHA_EXT = 0x8589;
public const uint GL_SOURCE2_ALPHA_EXT = 0x858A;
public const uint GL_OPERAND0_RGB_EXT = 0x8590;
public const uint GL_OPERAND1_RGB_EXT = 0x8591;
public const uint GL_OPERAND2_RGB_EXT = 0x8592;
public const uint GL_OPERAND0_ALPHA_EXT = 0x8598;
public const uint GL_OPERAND1_ALPHA_EXT = 0x8599;
public const uint GL_OPERAND2_ALPHA_EXT = 0x859A;
/* ------------------------ GL_EXT_texture_env_dot3 ------------------------ */
public const uint GL_EXT_texture_env_dot3 = 1;
public const uint GL_DOT3_RGB_EXT = 0x8740;
public const uint GL_DOT3_RGBA_EXT = 0x8741;
/* ------------------- GL_EXT_texture_filter_anisotropic ------------------- */
public const uint GL_EXT_texture_filter_anisotropic = 1;
public const uint GL_TEXTURE_MAX_ANISOTROPY_EXT = 0x84FE;
public const uint GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT = 0x84FF;
/* ------------------------- GL_EXT_texture_integer ------------------------ */
public const uint GL_EXT_texture_integer = 1;
public const uint GL_RGBA32UI_EXT = 0x8D70;
public const uint GL_RGB32UI_EXT = 0x8D71;
public const uint GL_ALPHA32UI_EXT = 0x8D72;
public const uint GL_INTENSITY32UI_EXT = 0x8D73;
public const uint GL_LUMINANCE32UI_EXT = 0x8D74;
public const uint GL_LUMINANCE_ALPHA32UI_EXT = 0x8D75;
public const uint GL_RGBA16UI_EXT = 0x8D76;
public const uint GL_RGB16UI_EXT = 0x8D77;
public const uint GL_ALPHA16UI_EXT = 0x8D78;
public const uint GL_INTENSITY16UI_EXT = 0x8D79;
public const uint GL_LUMINANCE16UI_EXT = 0x8D7A;
public const uint GL_LUMINANCE_ALPHA16UI_EXT = 0x8D7B;
public const uint GL_RGBA8UI_EXT = 0x8D7C;
public const uint GL_RGB8UI_EXT = 0x8D7D;
public const uint GL_ALPHA8UI_EXT = 0x8D7E;
public const uint GL_INTENSITY8UI_EXT = 0x8D7F;
public const uint GL_LUMINANCE8UI_EXT = 0x8D80;
public const uint GL_LUMINANCE_ALPHA8UI_EXT = 0x8D81;
public const uint GL_RGBA32I_EXT = 0x8D82;
public const uint GL_RGB32I_EXT = 0x8D83;
public const uint GL_ALPHA32I_EXT = 0x8D84;
public const uint GL_INTENSITY32I_EXT = 0x8D85;
public const uint GL_LUMINANCE32I_EXT = 0x8D86;
public const uint GL_LUMINANCE_ALPHA32I_EXT = 0x8D87;
public const uint GL_RGBA16I_EXT = 0x8D88;
public const uint GL_RGB16I_EXT = 0x8D89;
public const uint GL_ALPHA16I_EXT = 0x8D8A;
public const uint GL_INTENSITY16I_EXT = 0x8D8B;
public const uint GL_LUMINANCE16I_EXT = 0x8D8C;
public const uint GL_LUMINANCE_ALPHA16I_EXT = 0x8D8D;
public const uint GL_RGBA8I_EXT = 0x8D8E;
public const uint GL_RGB8I_EXT = 0x8D8F;
public const uint GL_ALPHA8I_EXT = 0x8D90;
public const uint GL_INTENSITY8I_EXT = 0x8D91;
public const uint GL_LUMINANCE8I_EXT = 0x8D92;
public const uint GL_LUMINANCE_ALPHA8I_EXT = 0x8D93;
public const uint GL_RED_INTEGER_EXT = 0x8D94;
public const uint GL_GREEN_INTEGER_EXT = 0x8D95;
public const uint GL_BLUE_INTEGER_EXT = 0x8D96;
public const uint GL_ALPHA_INTEGER_EXT = 0x8D97;
public const uint GL_RGB_INTEGER_EXT = 0x8D98;
public const uint GL_RGBA_INTEGER_EXT = 0x8D99;
public const uint GL_BGR_INTEGER_EXT = 0x8D9A;
public const uint GL_BGRA_INTEGER_EXT = 0x8D9B;
public const uint GL_LUMINANCE_INTEGER_EXT = 0x8D9C;
public const uint GL_LUMINANCE_ALPHA_INTEGER_EXT = 0x8D9D;
public const uint GL_RGBA_INTEGER_MODE_EXT = 0x8D9E;
public delegate void PFNGLCLEARCOLORIIEXTPROC( int red,int green,int blue,int alpha);
public delegate void PFNGLCLEARCOLORIUIEXTPROC( uint red,uint green,uint blue,uint alpha);
public delegate void PFNGLGETTEXPARAMETERIIVEXTPROC( uint target,uint pname,IntPtr _params);
public delegate void PFNGLGETTEXPARAMETERIUIVEXTPROC( uint target,uint pname,IntPtr _params);
public delegate void PFNGLTEXPARAMETERIIVEXTPROC( uint target,uint pname,int[] _params);
public delegate void PFNGLTEXPARAMETERIUIVEXTPROC( uint target,uint pname,uint[] _params);
/* ------------------------ GL_EXT_texture_lod_bias ------------------------ */
public const uint GL_EXT_texture_lod_bias = 1;
public const uint GL_MAX_TEXTURE_LOD_BIAS_EXT = 0x84FD;
public const uint GL_TEXTURE_FILTER_CONTROL_EXT = 0x8500;
public const uint GL_TEXTURE_LOD_BIAS_EXT = 0x8501;
/* ---------------------- GL_EXT_texture_mirror_clamp ---------------------- */
public const uint GL_EXT_texture_mirror_clamp = 1;
public const uint GL_MIRROR_CLAMP_EXT = 0x8742;
public const uint GL_MIRROR_CLAMP_TO_EDGE_EXT = 0x8743;
public const uint GL_MIRROR_CLAMP_TO_BORDER_EXT = 0x8912;
/* ------------------------- GL_EXT_texture_object ------------------------- */
public const uint GL_EXT_texture_object = 1;
public const uint GL_TEXTURE_PRIORITY_EXT = 0x8066;
public const uint GL_TEXTURE_RESIDENT_EXT = 0x8067;
public const uint GL_TEXTURE_1D_BINDING_EXT = 0x8068;
public const uint GL_TEXTURE_2D_BINDING_EXT = 0x8069;
public const uint GL_TEXTURE_3D_BINDING_EXT = 0x806A;
[return: System.Runtime.InteropServices.MarshalAs(System.Runtime.InteropServices.UnmanagedType.I1)]public delegate bool PFNGLARETEXTURESRESIDENTEXTPROC( int n,uint[]  textures,IntPtr residences);
public delegate void PFNGLBINDTEXTUREEXTPROC( uint target,uint texture);
public delegate void PFNGLDELETETEXTURESEXTPROC( int n,uint[]  textures);
public delegate void PFNGLGENTEXTURESEXTPROC( int n,IntPtr textures);
[return: System.Runtime.InteropServices.MarshalAs(System.Runtime.InteropServices.UnmanagedType.I1)]public delegate bool PFNGLISTEXTUREEXTPROC( uint texture);
public delegate void PFNGLPRIORITIZETEXTURESEXTPROC( int n,uint[]  textures,float[]  priorities);
/* --------------------- GL_EXT_texture_perturb_normal --------------------- */
public const uint GL_EXT_texture_perturb_normal = 1;
public const uint GL_PERTURB_EXT = 0x85AE;
public const uint GL_TEXTURE_NORMAL_EXT = 0x85AF;
public delegate void PFNGLTEXTURENORMALEXTPROC( uint mode);
/* ------------------------ GL_EXT_texture_rectangle ----------------------- */
public const uint GL_EXT_texture_rectangle = 1;
public const uint GL_TEXTURE_RECTANGLE_EXT = 0x84F5;
public const uint GL_TEXTURE_BINDING_RECTANGLE_EXT = 0x84F6;
public const uint GL_PROXY_TEXTURE_RECTANGLE_EXT = 0x84F7;
public const uint GL_MAX_RECTANGLE_TEXTURE_SIZE_EXT = 0x84F8;
/* -------------------------- GL_EXT_texture_sRGB -------------------------- */
public const uint GL_EXT_texture_sRGB = 1;
public const uint GL_SRGB_EXT = 0x8C40;
public const uint GL_SRGB8_EXT = 0x8C41;
public const uint GL_SRGB_ALPHA_EXT = 0x8C42;
public const uint GL_SRGB8_ALPHA8_EXT = 0x8C43;
public const uint GL_SLUMINANCE_ALPHA_EXT = 0x8C44;
public const uint GL_SLUMINANCE8_ALPHA8_EXT = 0x8C45;
public const uint GL_SLUMINANCE_EXT = 0x8C46;
public const uint GL_SLUMINANCE8_EXT = 0x8C47;
public const uint GL_COMPRESSED_SRGB_EXT = 0x8C48;
public const uint GL_COMPRESSED_SRGB_ALPHA_EXT = 0x8C49;
public const uint GL_COMPRESSED_SLUMINANCE_EXT = 0x8C4A;
public const uint GL_COMPRESSED_SLUMINANCE_ALPHA_EXT = 0x8C4B;
public const uint GL_COMPRESSED_SRGB_S3TC_DXT1_EXT = 0x8C4C;
public const uint GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT = 0x8C4D;
public const uint GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT = 0x8C4E;
public const uint GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT = 0x8C4F;
/* ----------------------- GL_EXT_texture_sRGB_decode ---------------------- */
public const uint GL_EXT_texture_sRGB_decode = 1;
public const uint GL_TEXTURE_SRGB_DECODE_EXT = 0x8A48;
public const uint GL_DECODE_EXT = 0x8A49;
public const uint GL_SKIP_DECODE_EXT = 0x8A4A;
/* --------------------- GL_EXT_texture_shared_exponent -------------------- */
public const uint GL_EXT_texture_shared_exponent = 1;
public const uint GL_RGB9_E5_EXT = 0x8C3D;
public const uint GL_UNSIGNED_INT_5_9_9_9_REV_EXT = 0x8C3E;
public const uint GL_TEXTURE_SHARED_SIZE_EXT = 0x8C3F;
/* -------------------------- GL_EXT_texture_snorm ------------------------- */
public const uint GL_EXT_texture_snorm = 1;
//public const uint GL_RED_SNORM = 0x8F90;
//public const uint GL_RG_SNORM = 0x8F91;
//public const uint GL_RGB_SNORM = 0x8F92;
//public const uint GL_RGBA_SNORM = 0x8F93;
//public const uint GL_R8_SNORM = 0x8F94;
//public const uint GL_RG8_SNORM = 0x8F95;
//public const uint GL_RGB8_SNORM = 0x8F96;
//public const uint GL_RGBA8_SNORM = 0x8F97;
//public const uint GL_R16_SNORM = 0x8F98;
//public const uint GL_RG16_SNORM = 0x8F99;
//public const uint GL_RGB16_SNORM = 0x8F9A;
//public const uint GL_RGBA16_SNORM = 0x8F9B;
//public const uint GL_SIGNED_NORMALIZED = 0x8F9C;
public const uint GL_ALPHA_SNORM = 0x9010;
public const uint GL_LUMINANCE_SNORM = 0x9011;
public const uint GL_LUMINANCE_ALPHA_SNORM = 0x9012;
public const uint GL_INTENSITY_SNORM = 0x9013;
public const uint GL_ALPHA8_SNORM = 0x9014;
public const uint GL_LUMINANCE8_SNORM = 0x9015;
public const uint GL_LUMINANCE8_ALPHA8_SNORM = 0x9016;
public const uint GL_INTENSITY8_SNORM = 0x9017;
public const uint GL_ALPHA16_SNORM = 0x9018;
public const uint GL_LUMINANCE16_SNORM = 0x9019;
public const uint GL_LUMINANCE16_ALPHA16_SNORM = 0x901A;
public const uint GL_INTENSITY16_SNORM = 0x901B;
/* ------------------------- GL_EXT_texture_swizzle ------------------------ */
public const uint GL_EXT_texture_swizzle = 1;
public const uint GL_TEXTURE_SWIZZLE_R_EXT = 0x8E42;
public const uint GL_TEXTURE_SWIZZLE_G_EXT = 0x8E43;
public const uint GL_TEXTURE_SWIZZLE_B_EXT = 0x8E44;
public const uint GL_TEXTURE_SWIZZLE_A_EXT = 0x8E45;
public const uint GL_TEXTURE_SWIZZLE_RGBA_EXT = 0x8E46;
/* --------------------------- GL_EXT_timer_query -------------------------- */
public const uint GL_EXT_timer_query = 1;
public const uint GL_TIME_ELAPSED_EXT = 0x88BF;
public delegate void PFNGLGETQUERYOBJECTI64VEXTPROC( uint id,uint pname,IntPtr _params);
public delegate void PFNGLGETQUERYOBJECTUI64VEXTPROC( uint id,uint pname,IntPtr _params);
/* ----------------------- GL_EXT_transform_feedback ----------------------- */
public const uint GL_EXT_transform_feedback = 1;
public const uint GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT = 0x8C76;
public const uint GL_TRANSFORM_FEEDBACK_BUFFER_MODE_EXT = 0x8C7F;
public const uint GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT = 0x8C80;
public const uint GL_TRANSFORM_FEEDBACK_VARYINGS_EXT = 0x8C83;
public const uint GL_TRANSFORM_FEEDBACK_BUFFER_START_EXT = 0x8C84;
public const uint GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT = 0x8C85;
public const uint GL_PRIMITIVES_GENERATED_EXT = 0x8C87;
public const uint GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT = 0x8C88;
public const uint GL_RASTERIZER_DISCARD_EXT = 0x8C89;
public const uint GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT = 0x8C8A;
public const uint GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT = 0x8C8B;
public const uint GL_INTERLEAVED_ATTRIBS_EXT = 0x8C8C;
public const uint GL_SEPARATE_ATTRIBS_EXT = 0x8C8D;
public const uint GL_TRANSFORM_FEEDBACK_BUFFER_EXT = 0x8C8E;
public const uint GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT = 0x8C8F;
public delegate void PFNGLBEGINTRANSFORMFEEDBACKEXTPROC( uint primitiveMode);
public delegate void PFNGLBINDBUFFERBASEEXTPROC( uint target,uint index,uint buffer);
public delegate void PFNGLBINDBUFFEROFFSETEXTPROC( uint target,uint index,uint buffer,IntPtr offset);
public delegate void PFNGLBINDBUFFERRANGEEXTPROC( uint target,uint index,uint buffer,IntPtr offset,IntPtr size);
public delegate void PFNGLENDTRANSFORMFEEDBACKEXTPROC( );
public delegate void PFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC( uint program,uint index,int bufSize,IntPtr length,IntPtr size,IntPtr type,IntPtr name);
public delegate void PFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC( uint program,int count,IntPtr varyings,uint bufferMode);
/* -------------------------- GL_EXT_vertex_array -------------------------- */
public const uint GL_EXT_vertex_array = 1;
public const uint GL_DOUBLE_EXT = 0x140A;
public const uint GL_VERTEX_ARRAY_EXT = 0x8074;
public const uint GL_NORMAL_ARRAY_EXT = 0x8075;
public const uint GL_COLOR_ARRAY_EXT = 0x8076;
public const uint GL_INDEX_ARRAY_EXT = 0x8077;
public const uint GL_TEXTURE_COORD_ARRAY_EXT = 0x8078;
public const uint GL_EDGE_FLAG_ARRAY_EXT = 0x8079;
public const uint GL_VERTEX_ARRAY_SIZE_EXT = 0x807A;
public const uint GL_VERTEX_ARRAY_TYPE_EXT = 0x807B;
public const uint GL_VERTEX_ARRAY_STRIDE_EXT = 0x807C;
public const uint GL_VERTEX_ARRAY_COUNT_EXT = 0x807D;
public const uint GL_NORMAL_ARRAY_TYPE_EXT = 0x807E;
public const uint GL_NORMAL_ARRAY_STRIDE_EXT = 0x807F;
public const uint GL_NORMAL_ARRAY_COUNT_EXT = 0x8080;
public const uint GL_COLOR_ARRAY_SIZE_EXT = 0x8081;
public const uint GL_COLOR_ARRAY_TYPE_EXT = 0x8082;
public const uint GL_COLOR_ARRAY_STRIDE_EXT = 0x8083;
public const uint GL_COLOR_ARRAY_COUNT_EXT = 0x8084;
public const uint GL_INDEX_ARRAY_TYPE_EXT = 0x8085;
public const uint GL_INDEX_ARRAY_STRIDE_EXT = 0x8086;
public const uint GL_INDEX_ARRAY_COUNT_EXT = 0x8087;
public const uint GL_TEXTURE_COORD_ARRAY_SIZE_EXT = 0x8088;
public const uint GL_TEXTURE_COORD_ARRAY_TYPE_EXT = 0x8089;
public const uint GL_TEXTURE_COORD_ARRAY_STRIDE_EXT = 0x808A;
public const uint GL_TEXTURE_COORD_ARRAY_COUNT_EXT = 0x808B;
public const uint GL_EDGE_FLAG_ARRAY_STRIDE_EXT = 0x808C;
public const uint GL_EDGE_FLAG_ARRAY_COUNT_EXT = 0x808D;
public const uint GL_VERTEX_ARRAY_POINTER_EXT = 0x808E;
public const uint GL_NORMAL_ARRAY_POINTER_EXT = 0x808F;
public const uint GL_COLOR_ARRAY_POINTER_EXT = 0x8090;
public const uint GL_INDEX_ARRAY_POINTER_EXT = 0x8091;
public const uint GL_TEXTURE_COORD_ARRAY_POINTER_EXT = 0x8092;
public const uint GL_EDGE_FLAG_ARRAY_POINTER_EXT = 0x8093;
public delegate void PFNGLARRAYELEMENTEXTPROC( int i);
public delegate void PFNGLCOLORPOINTEREXTPROC( int size,uint type,int stride,int count,IntPtr  pointer);
public delegate void PFNGLDRAWARRAYSEXTPROC( uint mode,int first,int count);
public delegate void PFNGLEDGEFLAGPOINTEREXTPROC( int stride,int count,bool[]  pointer);
public delegate void PFNGLINDEXPOINTEREXTPROC( uint type,int stride,int count,IntPtr  pointer);
public delegate void PFNGLNORMALPOINTEREXTPROC( uint type,int stride,int count,IntPtr  pointer);
public delegate void PFNGLTEXCOORDPOINTEREXTPROC( int size,uint type,int stride,int count,IntPtr  pointer);
public delegate void PFNGLVERTEXPOINTEREXTPROC( int size,uint type,int stride,int count,IntPtr  pointer);
/* ------------------------ GL_EXT_vertex_array_bgra ----------------------- */
public const uint GL_EXT_vertex_array_bgra = 1;
//public const uint GL_BGRA = 0x80E1;
/* ----------------------- GL_EXT_vertex_attrib_64bit ---------------------- */
public const uint GL_EXT_vertex_attrib_64bit = 1;
public const uint GL_DOUBLE_MAT2_EXT = 0x8F46;
public const uint GL_DOUBLE_MAT3_EXT = 0x8F47;
public const uint GL_DOUBLE_MAT4_EXT = 0x8F48;
public const uint GL_DOUBLE_MAT2x3_EXT = 0x8F49;
public const uint GL_DOUBLE_MAT2x4_EXT = 0x8F4A;
public const uint GL_DOUBLE_MAT3x2_EXT = 0x8F4B;
public const uint GL_DOUBLE_MAT3x4_EXT = 0x8F4C;
public const uint GL_DOUBLE_MAT4x2_EXT = 0x8F4D;
public const uint GL_DOUBLE_MAT4x3_EXT = 0x8F4E;
public const uint GL_DOUBLE_VEC2_EXT = 0x8FFC;
public const uint GL_DOUBLE_VEC3_EXT = 0x8FFD;
public const uint GL_DOUBLE_VEC4_EXT = 0x8FFE;
public delegate void PFNGLGETVERTEXATTRIBLDVEXTPROC( uint index,uint pname,IntPtr _params);
public delegate void PFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC( uint vaobj,uint buffer,uint index,int size,uint type,int stride,IntPtr offset);
public delegate void PFNGLVERTEXATTRIBL1DEXTPROC( uint index,double x);
public delegate void PFNGLVERTEXATTRIBL1DVEXTPROC( uint index,double[]  v);
public delegate void PFNGLVERTEXATTRIBL2DEXTPROC( uint index,double x,double y);
public delegate void PFNGLVERTEXATTRIBL2DVEXTPROC( uint index,double[]  v);
public delegate void PFNGLVERTEXATTRIBL3DEXTPROC( uint index,double x,double y,double z);
public delegate void PFNGLVERTEXATTRIBL3DVEXTPROC( uint index,double[]  v);
public delegate void PFNGLVERTEXATTRIBL4DEXTPROC( uint index,double x,double y,double z,double w);
public delegate void PFNGLVERTEXATTRIBL4DVEXTPROC( uint index,double[]  v);
public delegate void PFNGLVERTEXATTRIBLPOINTEREXTPROC( uint index,int size,uint type,int stride,IntPtr  pointer);
/* -------------------------- GL_EXT_vertex_shader ------------------------- */
public const uint GL_EXT_vertex_shader = 1;
public const uint GL_VERTEX_SHADER_EXT = 0x8780;
public const uint GL_VERTEX_SHADER_BINDING_EXT = 0x8781;
public const uint GL_OP_INDEX_EXT = 0x8782;
public const uint GL_OP_NEGATE_EXT = 0x8783;
public const uint GL_OP_DOT3_EXT = 0x8784;
public const uint GL_OP_DOT4_EXT = 0x8785;
public const uint GL_OP_MUL_EXT = 0x8786;
public const uint GL_OP_ADD_EXT = 0x8787;
public const uint GL_OP_MADD_EXT = 0x8788;
public const uint GL_OP_FRAC_EXT = 0x8789;
public const uint GL_OP_MAX_EXT = 0x878A;
public const uint GL_OP_MIN_EXT = 0x878B;
public const uint GL_OP_SET_GE_EXT = 0x878C;
public const uint GL_OP_SET_LT_EXT = 0x878D;
public const uint GL_OP_CLAMP_EXT = 0x878E;
public const uint GL_OP_FLOOR_EXT = 0x878F;
public const uint GL_OP_ROUND_EXT = 0x8790;
public const uint GL_OP_EXP_BASE_2_EXT = 0x8791;
public const uint GL_OP_LOG_BASE_2_EXT = 0x8792;
public const uint GL_OP_POWER_EXT = 0x8793;
public const uint GL_OP_RECIP_EXT = 0x8794;
public const uint GL_OP_RECIP_SQRT_EXT = 0x8795;
public const uint GL_OP_SUB_EXT = 0x8796;
public const uint GL_OP_CROSS_PRODUCT_EXT = 0x8797;
public const uint GL_OP_MULTIPLY_MATRIX_EXT = 0x8798;
public const uint GL_OP_MOV_EXT = 0x8799;
public const uint GL_OUTPUT_VERTEX_EXT = 0x879A;
public const uint GL_OUTPUT_COLOR0_EXT = 0x879B;
public const uint GL_OUTPUT_COLOR1_EXT = 0x879C;
public const uint GL_OUTPUT_TEXTURE_COORD0_EXT = 0x879D;
public const uint GL_OUTPUT_TEXTURE_COORD1_EXT = 0x879E;
public const uint GL_OUTPUT_TEXTURE_COORD2_EXT = 0x879F;
public const uint GL_OUTPUT_TEXTURE_COORD3_EXT = 0x87A0;
public const uint GL_OUTPUT_TEXTURE_COORD4_EXT = 0x87A1;
public const uint GL_OUTPUT_TEXTURE_COORD5_EXT = 0x87A2;
public const uint GL_OUTPUT_TEXTURE_COORD6_EXT = 0x87A3;
public const uint GL_OUTPUT_TEXTURE_COORD7_EXT = 0x87A4;
public const uint GL_OUTPUT_TEXTURE_COORD8_EXT = 0x87A5;
public const uint GL_OUTPUT_TEXTURE_COORD9_EXT = 0x87A6;
public const uint GL_OUTPUT_TEXTURE_COORD10_EXT = 0x87A7;
public const uint GL_OUTPUT_TEXTURE_COORD11_EXT = 0x87A8;
public const uint GL_OUTPUT_TEXTURE_COORD12_EXT = 0x87A9;
public const uint GL_OUTPUT_TEXTURE_COORD13_EXT = 0x87AA;
public const uint GL_OUTPUT_TEXTURE_COORD14_EXT = 0x87AB;
public const uint GL_OUTPUT_TEXTURE_COORD15_EXT = 0x87AC;
public const uint GL_OUTPUT_TEXTURE_COORD16_EXT = 0x87AD;
public const uint GL_OUTPUT_TEXTURE_COORD17_EXT = 0x87AE;
public const uint GL_OUTPUT_TEXTURE_COORD18_EXT = 0x87AF;
public const uint GL_OUTPUT_TEXTURE_COORD19_EXT = 0x87B0;
public const uint GL_OUTPUT_TEXTURE_COORD20_EXT = 0x87B1;
public const uint GL_OUTPUT_TEXTURE_COORD21_EXT = 0x87B2;
public const uint GL_OUTPUT_TEXTURE_COORD22_EXT = 0x87B3;
public const uint GL_OUTPUT_TEXTURE_COORD23_EXT = 0x87B4;
public const uint GL_OUTPUT_TEXTURE_COORD24_EXT = 0x87B5;
public const uint GL_OUTPUT_TEXTURE_COORD25_EXT = 0x87B6;
public const uint GL_OUTPUT_TEXTURE_COORD26_EXT = 0x87B7;
public const uint GL_OUTPUT_TEXTURE_COORD27_EXT = 0x87B8;
public const uint GL_OUTPUT_TEXTURE_COORD28_EXT = 0x87B9;
public const uint GL_OUTPUT_TEXTURE_COORD29_EXT = 0x87BA;
public const uint GL_OUTPUT_TEXTURE_COORD30_EXT = 0x87BB;
public const uint GL_OUTPUT_TEXTURE_COORD31_EXT = 0x87BC;
public const uint GL_OUTPUT_FOG_EXT = 0x87BD;
public const uint GL_SCALAR_EXT = 0x87BE;
public const uint GL_VECTOR_EXT = 0x87BF;
public const uint GL_MATRIX_EXT = 0x87C0;
public const uint GL_VARIANT_EXT = 0x87C1;
public const uint GL_INVARIANT_EXT = 0x87C2;
public const uint GL_LOCAL_CONSTANT_EXT = 0x87C3;
public const uint GL_LOCAL_EXT = 0x87C4;
public const uint GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT = 0x87C5;
public const uint GL_MAX_VERTEX_SHADER_VARIANTS_EXT = 0x87C6;
public const uint GL_MAX_VERTEX_SHADER_INVARIANTS_EXT = 0x87C7;
public const uint GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 0x87C8;
public const uint GL_MAX_VERTEX_SHADER_LOCALS_EXT = 0x87C9;
public const uint GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT = 0x87CA;
public const uint GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT = 0x87CB;
public const uint GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT = 0x87CC;
public const uint GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 0x87CD;
public const uint GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT = 0x87CE;
public const uint GL_VERTEX_SHADER_INSTRUCTIONS_EXT = 0x87CF;
public const uint GL_VERTEX_SHADER_VARIANTS_EXT = 0x87D0;
public const uint GL_VERTEX_SHADER_INVARIANTS_EXT = 0x87D1;
public const uint GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 0x87D2;
public const uint GL_VERTEX_SHADER_LOCALS_EXT = 0x87D3;
public const uint GL_VERTEX_SHADER_OPTIMIZED_EXT = 0x87D4;
public const uint GL_X_EXT = 0x87D5;
public const uint GL_Y_EXT = 0x87D6;
public const uint GL_Z_EXT = 0x87D7;
public const uint GL_W_EXT = 0x87D8;
public const uint GL_NEGATIVE_X_EXT = 0x87D9;
public const uint GL_NEGATIVE_Y_EXT = 0x87DA;
public const uint GL_NEGATIVE_Z_EXT = 0x87DB;
public const uint GL_NEGATIVE_W_EXT = 0x87DC;
public const uint GL_ZERO_EXT = 0x87DD;
public const uint GL_ONE_EXT = 0x87DE;
public const uint GL_NEGATIVE_ONE_EXT = 0x87DF;
public const uint GL_NORMALIZED_RANGE_EXT = 0x87E0;
public const uint GL_FULL_RANGE_EXT = 0x87E1;
public const uint GL_CURRENT_VERTEX_EXT = 0x87E2;
public const uint GL_MVP_MATRIX_EXT = 0x87E3;
public const uint GL_VARIANT_VALUE_EXT = 0x87E4;
public const uint GL_VARIANT_DATATYPE_EXT = 0x87E5;
public const uint GL_VARIANT_ARRAY_STRIDE_EXT = 0x87E6;
public const uint GL_VARIANT_ARRAY_TYPE_EXT = 0x87E7;
public const uint GL_VARIANT_ARRAY_EXT = 0x87E8;
public const uint GL_VARIANT_ARRAY_POINTER_EXT = 0x87E9;
public const uint GL_INVARIANT_VALUE_EXT = 0x87EA;
public const uint GL_INVARIANT_DATATYPE_EXT = 0x87EB;
public const uint GL_LOCAL_CONSTANT_VALUE_EXT = 0x87EC;
public const uint GL_LOCAL_CONSTANT_DATATYPE_EXT = 0x87ED;
public delegate void PFNGLBEGINVERTEXSHADEREXTPROC( );
public delegate uint PFNGLBINDLIGHTPARAMETEREXTPROC( uint light,uint value);
public delegate uint PFNGLBINDMATERIALPARAMETEREXTPROC( uint face,uint value);
public delegate uint PFNGLBINDPARAMETEREXTPROC( uint value);
public delegate uint PFNGLBINDTEXGENPARAMETEREXTPROC( uint unit,uint coord,uint value);
public delegate uint PFNGLBINDTEXTUREUNITPARAMETEREXTPROC( uint unit,uint value);
public delegate void PFNGLBINDVERTEXSHADEREXTPROC( uint id);
public delegate void PFNGLDELETEVERTEXSHADEREXTPROC( uint id);
public delegate void PFNGLDISABLEVARIANTCLIENTSTATEEXTPROC( uint id);
public delegate void PFNGLENABLEVARIANTCLIENTSTATEEXTPROC( uint id);
public delegate void PFNGLENDVERTEXSHADEREXTPROC( );
public delegate void PFNGLEXTRACTCOMPONENTEXTPROC( uint res,uint src,uint num);
public delegate uint PFNGLGENSYMBOLSEXTPROC( uint dataType,uint storageType,uint range,uint components);
public delegate uint PFNGLGENVERTEXSHADERSEXTPROC( uint range);
public delegate void PFNGLGETINVARIANTBOOLEANVEXTPROC( uint id,uint value,IntPtr data);
public delegate void PFNGLGETINVARIANTFLOATVEXTPROC( uint id,uint value,IntPtr data);
public delegate void PFNGLGETINVARIANTINTEGERVEXTPROC( uint id,uint value,IntPtr data);
public delegate void PFNGLGETLOCALCONSTANTBOOLEANVEXTPROC( uint id,uint value,IntPtr data);
public delegate void PFNGLGETLOCALCONSTANTFLOATVEXTPROC( uint id,uint value,IntPtr data);
public delegate void PFNGLGETLOCALCONSTANTINTEGERVEXTPROC( uint id,uint value,IntPtr data);
public delegate void PFNGLGETVARIANTBOOLEANVEXTPROC( uint id,uint value,IntPtr data);
public delegate void PFNGLGETVARIANTFLOATVEXTPROC( uint id,uint value,IntPtr data);
public delegate void PFNGLGETVARIANTINTEGERVEXTPROC( uint id,uint value,IntPtr data);
public delegate void PFNGLGETVARIANTPOINTERVEXTPROC( uint id,uint value,IntPtr data);
public delegate void PFNGLINSERTCOMPONENTEXTPROC( uint res,uint src,uint num);
[return: System.Runtime.InteropServices.MarshalAs(System.Runtime.InteropServices.UnmanagedType.I1)]public delegate bool PFNGLISVARIANTENABLEDEXTPROC( uint id,uint cap);
public delegate void PFNGLSETINVARIANTEXTPROC( uint id,uint type,IntPtr addr);
public delegate void PFNGLSETLOCALCONSTANTEXTPROC( uint id,uint type,IntPtr addr);
public delegate void PFNGLSHADEROP1EXTPROC( uint op,uint res,uint arg1);
public delegate void PFNGLSHADEROP2EXTPROC( uint op,uint res,uint arg1,uint arg2);
public delegate void PFNGLSHADEROP3EXTPROC( uint op,uint res,uint arg1,uint arg2,uint arg3);
public delegate void PFNGLSWIZZLEEXTPROC( uint res,uint _in,uint outX,uint outY,uint outZ,uint outW);
public delegate void PFNGLVARIANTPOINTEREXTPROC( uint id,uint type,uint stride,IntPtr addr);
public delegate void PFNGLVARIANTBVEXTPROC( uint id,IntPtr addr);
public delegate void PFNGLVARIANTDVEXTPROC( uint id,IntPtr addr);
public delegate void PFNGLVARIANTFVEXTPROC( uint id,IntPtr addr);
public delegate void PFNGLVARIANTIVEXTPROC( uint id,IntPtr addr);
public delegate void PFNGLVARIANTSVEXTPROC( uint id,IntPtr addr);
public delegate void PFNGLVARIANTUBVEXTPROC( uint id,IntPtr addr);
public delegate void PFNGLVARIANTUIVEXTPROC( uint id,IntPtr addr);
public delegate void PFNGLVARIANTUSVEXTPROC( uint id,IntPtr addr);
public delegate void PFNGLWRITEMASKEXTPROC( uint res,uint _in,uint outX,uint outY,uint outZ,uint outW);
/* ------------------------ GL_EXT_vertex_weighting ------------------------ */
public const uint GL_EXT_vertex_weighting = 1;
public const uint GL_MODELVIEW0_STACK_DEPTH_EXT = 0x0BA3;
public const uint GL_MODELVIEW0_MATRIX_EXT = 0x0BA6;
public const uint GL_MODELVIEW0_EXT = 0x1700;
public const uint GL_MODELVIEW1_STACK_DEPTH_EXT = 0x8502;
public const uint GL_MODELVIEW1_MATRIX_EXT = 0x8506;
public const uint GL_VERTEX_WEIGHTING_EXT = 0x8509;
public const uint GL_MODELVIEW1_EXT = 0x850A;
public const uint GL_CURRENT_VERTEX_WEIGHT_EXT = 0x850B;
public const uint GL_VERTEX_WEIGHT_ARRAY_EXT = 0x850C;
public const uint GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT = 0x850D;
public const uint GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT = 0x850E;
public const uint GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT = 0x850F;
public const uint GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT = 0x8510;
public delegate void PFNGLVERTEXWEIGHTPOINTEREXTPROC( int size,uint type,int stride,IntPtr pointer);
public delegate void PFNGLVERTEXWEIGHTFEXTPROC( float weight);
public delegate void PFNGLVERTEXWEIGHTFVEXTPROC( IntPtr weight);
/* ------------------------- GL_EXT_x11_sync_object ------------------------ */
public const uint GL_EXT_x11_sync_object = 1;
public const uint GL_SYNC_X11_FENCE_EXT = 0x90E1;
public delegate IntPtr PFNGLIMPORTSYNCEXTPROC( uint external_sync_type,IntPtr external_sync,uint flags);
/* ---------------------- GL_GREMEDY_frame_terminator ---------------------- */
public const uint GL_GREMEDY_frame_terminator = 1;
public delegate void PFNGLFRAMETERMINATORGREMEDYPROC( );
/* ------------------------ GL_GREMEDY_string_marker ----------------------- */
public const uint GL_GREMEDY_string_marker = 1;
public delegate void PFNGLSTRINGMARKERGREMEDYPROC( int len,IntPtr  _string);
/* --------------------- GL_HP_convolution_border_modes -------------------- */
public const uint GL_HP_convolution_border_modes = 1;
/* ------------------------- GL_HP_image_transform ------------------------- */
public const uint GL_HP_image_transform = 1;
public delegate void PFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC( uint target,uint pname,float[]  _params);
public delegate void PFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC( uint target,uint pname,int[]  _params);
public delegate void PFNGLIMAGETRANSFORMPARAMETERFHPPROC( uint target,uint pname,float[] param);
public delegate void PFNGLIMAGETRANSFORMPARAMETERFVHPPROC( uint target,uint pname,float[]  _params);
public delegate void PFNGLIMAGETRANSFORMPARAMETERIHPPROC( uint target,uint pname,int[] param);
public delegate void PFNGLIMAGETRANSFORMPARAMETERIVHPPROC( uint target,uint pname,int[]  _params);
/* -------------------------- GL_HP_occlusion_test ------------------------- */
public const uint GL_HP_occlusion_test = 1;
public const uint GL_OCCLUSION_TEST_HP = 0x8165;
public const uint GL_OCCLUSION_TEST_RESULT_HP = 0x8166;
/* ------------------------- GL_HP_texture_lighting ------------------------ */
public const uint GL_HP_texture_lighting = 1;
/* --------------------------- GL_IBM_cull_vertex -------------------------- */
public const uint GL_IBM_cull_vertex = 1;
public const uint GL_CULL_VERTEX_IBM = 103050;
/* ---------------------- GL_IBM_multimode_draw_arrays --------------------- */
public const uint GL_IBM_multimode_draw_arrays = 1;
public delegate void PFNGLMULTIMODEDRAWARRAYSIBMPROC( uint[]  mode,int[] first,int[] count,int primcount,int modestride);
public delegate void PFNGLMULTIMODEDRAWELEMENTSIBMPROC( uint[]  mode,int[] count,uint type,ref IntPtr indices,int primcount,int modestride);
/* ------------------------- GL_IBM_rasterpos_clip ------------------------- */
public const uint GL_IBM_rasterpos_clip = 1;
public const uint GL_RASTER_POSITION_UNCLIPPED_IBM = 103010;
/* --------------------------- GL_IBM_static_data -------------------------- */
public const uint GL_IBM_static_data = 1;
public const uint GL_ALL_STATIC_DATA_IBM = 103060;
public const uint GL_STATIC_VERTEX_ARRAY_IBM = 103061;
/* --------------------- GL_IBM_texture_mirrored_repeat -------------------- */
public const uint GL_IBM_texture_mirrored_repeat = 1;
public const uint GL_MIRRORED_REPEAT_IBM = 0x8370;
/* ----------------------- GL_IBM_vertex_array_lists ----------------------- */
public const uint GL_IBM_vertex_array_lists = 1;
public const uint GL_VERTEX_ARRAY_LIST_IBM = 103070;
public const uint GL_NORMAL_ARRAY_LIST_IBM = 103071;
public const uint GL_COLOR_ARRAY_LIST_IBM = 103072;
public const uint GL_INDEX_ARRAY_LIST_IBM = 103073;
public const uint GL_TEXTURE_COORD_ARRAY_LIST_IBM = 103074;
public const uint GL_EDGE_FLAG_ARRAY_LIST_IBM = 103075;
public const uint GL_FOG_COORDINATE_ARRAY_LIST_IBM = 103076;
public const uint GL_SECONDARY_COLOR_ARRAY_LIST_IBM = 103077;
public const uint GL_VERTEX_ARRAY_LIST_STRIDE_IBM = 103080;
public const uint GL_NORMAL_ARRAY_LIST_STRIDE_IBM = 103081;
public const uint GL_COLOR_ARRAY_LIST_STRIDE_IBM = 103082;
public const uint GL_INDEX_ARRAY_LIST_STRIDE_IBM = 103083;
public const uint GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM = 103084;
public const uint GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM = 103085;
public const uint GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM = 103086;
public const uint GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM = 103087;
public delegate void PFNGLCOLORPOINTERLISTIBMPROC( int size,uint type,int stride,IntPtr pointer,int ptrstride);
public delegate void PFNGLEDGEFLAGPOINTERLISTIBMPROC( int stride,IntPtr pointer,int ptrstride);
public delegate void PFNGLFOGCOORDPOINTERLISTIBMPROC( uint type,int stride,IntPtr pointer,int ptrstride);
public delegate void PFNGLINDEXPOINTERLISTIBMPROC( uint type,int stride,IntPtr pointer,int ptrstride);
public delegate void PFNGLNORMALPOINTERLISTIBMPROC( uint type,int stride,IntPtr pointer,int ptrstride);
public delegate void PFNGLSECONDARYCOLORPOINTERLISTIBMPROC( int size,uint type,int stride,IntPtr pointer,int ptrstride);
public delegate void PFNGLTEXCOORDPOINTERLISTIBMPROC( int size,uint type,int stride,IntPtr pointer,int ptrstride);
public delegate void PFNGLVERTEXPOINTERLISTIBMPROC( int size,uint type,int stride,IntPtr pointer,int ptrstride);
/* -------------------------- GL_INGR_color_clamp -------------------------- */
public const uint GL_INGR_color_clamp = 1;
public const uint GL_RED_MIN_CLAMP_INGR = 0x8560;
public const uint GL_GREEN_MIN_CLAMP_INGR = 0x8561;
public const uint GL_BLUE_MIN_CLAMP_INGR = 0x8562;
public const uint GL_ALPHA_MIN_CLAMP_INGR = 0x8563;
public const uint GL_RED_MAX_CLAMP_INGR = 0x8564;
public const uint GL_GREEN_MAX_CLAMP_INGR = 0x8565;
public const uint GL_BLUE_MAX_CLAMP_INGR = 0x8566;
public const uint GL_ALPHA_MAX_CLAMP_INGR = 0x8567;
/* ------------------------- GL_INGR_interlace_read ------------------------ */
public const uint GL_INGR_interlace_read = 1;
public const uint GL_INTERLACE_READ_INGR = 0x8568;
/* ------------------------ GL_INTEL_parallel_arrays ----------------------- */
public const uint GL_INTEL_parallel_arrays = 1;
public const uint GL_PARALLEL_ARRAYS_INTEL = 0x83F4;
public const uint GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL = 0x83F5;
public const uint GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL = 0x83F6;
public const uint GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL = 0x83F7;
public const uint GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL = 0x83F8;
public delegate void PFNGLCOLORPOINTERVINTELPROC( int size,uint type,IntPtr pointer);
public delegate void PFNGLNORMALPOINTERVINTELPROC( uint type,IntPtr pointer);
public delegate void PFNGLTEXCOORDPOINTERVINTELPROC( int size,uint type,IntPtr pointer);
public delegate void PFNGLVERTEXPOINTERVINTELPROC( int size,uint type,IntPtr pointer);
/* ------------------------ GL_INTEL_texture_scissor ----------------------- */
public const uint GL_INTEL_texture_scissor = 1;
public delegate void PFNGLTEXSCISSORFUNCINTELPROC( uint target,uint lfunc,uint hfunc);
public delegate void PFNGLTEXSCISSORINTELPROC( uint target,float tlow,float thigh);
/* -------------------------- GL_KTX_buffer_region ------------------------- */
public const uint GL_KTX_buffer_region = 1;
public const uint GL_KTX_FRONT_REGION = 0x0;
public const uint GL_KTX_BACK_REGION = 0x1;
public const uint GL_KTX_Z_REGION = 0x2;
public const uint GL_KTX_STENCIL_REGION = 0x3;
public delegate uint PFNGLBUFFERREGIONENABLEDEXTPROC( );
public delegate void PFNGLDELETEBUFFERREGIONEXTPROC( uint region);
public delegate void PFNGLDRAWBUFFERREGIONEXTPROC( uint region,int x,int y,int width,int height,int xDest,int yDest);
public delegate uint PFNGLNEWBUFFERREGIONEXTPROC( uint region);
public delegate void PFNGLREADBUFFERREGIONEXTPROC( uint region,int x,int y,int width,int height);
/* ------------------------- GL_MESAX_texture_stack ------------------------ */
public const uint GL_MESAX_texture_stack = 1;
public const uint GL_TEXTURE_1D_STACK_MESAX = 0x8759;
public const uint GL_TEXTURE_2D_STACK_MESAX = 0x875A;
public const uint GL_PROXY_TEXTURE_1D_STACK_MESAX = 0x875B;
public const uint GL_PROXY_TEXTURE_2D_STACK_MESAX = 0x875C;
public const uint GL_TEXTURE_1D_STACK_BINDING_MESAX = 0x875D;
public const uint GL_TEXTURE_2D_STACK_BINDING_MESAX = 0x875E;
/* -------------------------- GL_MESA_pack_invert -------------------------- */
public const uint GL_MESA_pack_invert = 1;
public const uint GL_PACK_INVERT_MESA = 0x8758;
/* ------------------------- GL_MESA_resize_buffers ------------------------ */
public const uint GL_MESA_resize_buffers = 1;
public delegate void PFNGLRESIZEBUFFERSMESAPROC( );
/* --------------------------- GL_MESA_window_pos -------------------------- */
public const uint GL_MESA_window_pos = 1;
public delegate void PFNGLWINDOWPOS2DMESAPROC( double x,double y);
public delegate void PFNGLWINDOWPOS2DVMESAPROC( double[]  p);
public delegate void PFNGLWINDOWPOS2FMESAPROC( float x,float y);
public delegate void PFNGLWINDOWPOS2FVMESAPROC( float[]  p);
public delegate void PFNGLWINDOWPOS2IMESAPROC( int x,int y);
public delegate void PFNGLWINDOWPOS2IVMESAPROC( int[]  p);
public delegate void PFNGLWINDOWPOS2SMESAPROC( short x,short y);
public delegate void PFNGLWINDOWPOS2SVMESAPROC( short[]  p);
public delegate void PFNGLWINDOWPOS3DMESAPROC( double x,double y,double z);
public delegate void PFNGLWINDOWPOS3DVMESAPROC( double[]  p);
public delegate void PFNGLWINDOWPOS3FMESAPROC( float x,float y,float z);
public delegate void PFNGLWINDOWPOS3FVMESAPROC( float[]  p);
public delegate void PFNGLWINDOWPOS3IMESAPROC( int x,int y,int z);
public delegate void PFNGLWINDOWPOS3IVMESAPROC( int[]  p);
public delegate void PFNGLWINDOWPOS3SMESAPROC( short x,short y,short z);
public delegate void PFNGLWINDOWPOS3SVMESAPROC( short[]  p);
public delegate void PFNGLWINDOWPOS4DMESAPROC( double x,double y,double z,double arg_3);
public delegate void PFNGLWINDOWPOS4DVMESAPROC( double[]  p);
public delegate void PFNGLWINDOWPOS4FMESAPROC( float x,float y,float z,float w);
public delegate void PFNGLWINDOWPOS4FVMESAPROC( float[]  p);
public delegate void PFNGLWINDOWPOS4IMESAPROC( int x,int y,int z,int w);
public delegate void PFNGLWINDOWPOS4IVMESAPROC( int[]  p);
public delegate void PFNGLWINDOWPOS4SMESAPROC( short x,short y,short z,short w);
public delegate void PFNGLWINDOWPOS4SVMESAPROC( short[]  p);
/* ------------------------- GL_MESA_ycbcr_texture ------------------------- */
public const uint GL_MESA_ycbcr_texture = 1;
public const uint GL_UNSIGNED_SHORT_8_8_MESA = 0x85BA;
public const uint GL_UNSIGNED_SHORT_8_8_REV_MESA = 0x85BB;
public const uint GL_YCBCR_MESA = 0x8757;
/* ------------------------- GL_NVX_gpu_memory_info ------------------------ */
public const uint GL_NVX_gpu_memory_info = 1;
public const uint GL_GPU_MEMORY_INFO_DEDICATED_VIDMEM_NVX = 0x9047;
public const uint GL_GPU_MEMORY_INFO_TOTAL_AVAILABLE_MEMORY_NVX = 0x9048;
public const uint GL_GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX = 0x9049;
public const uint GL_GPU_MEMORY_INFO_EVICTION_COUNT_NVX = 0x904A;
public const uint GL_GPU_MEMORY_INFO_EVICTED_MEMORY_NVX = 0x904B;
/* --------------------------- GL_NV_blend_square -------------------------- */
public const uint GL_NV_blend_square = 1;
/* ------------------------ GL_NV_conditional_render ----------------------- */
public const uint GL_NV_conditional_render = 1;
public const uint GL_QUERY_WAIT_NV = 0x8E13;
public const uint GL_QUERY_NO_WAIT_NV = 0x8E14;
public const uint GL_QUERY_BY_REGION_WAIT_NV = 0x8E15;
public const uint GL_QUERY_BY_REGION_NO_WAIT_NV = 0x8E16;
public delegate void PFNGLBEGINCONDITIONALRENDERNVPROC( uint id,uint mode);
public delegate void PFNGLENDCONDITIONALRENDERNVPROC( );
/* ----------------------- GL_NV_copy_depth_to_color ----------------------- */
public const uint GL_NV_copy_depth_to_color = 1;
public const uint GL_DEPTH_STENCIL_TO_RGBA_NV = 0x886E;
public const uint GL_DEPTH_STENCIL_TO_BGRA_NV = 0x886F;
/* ---------------------------- GL_NV_copy_image --------------------------- */
public const uint GL_NV_copy_image = 1;
public delegate void PFNGLCOPYIMAGESUBDATANVPROC( uint srcName,uint srcTarget,int srcLevel,int srcX,int srcY,int srcZ,uint dstName,uint dstTarget,int dstLevel,int dstX,int dstY,int dstZ,int width,int height,int depth);
/* ------------------------ GL_NV_depth_buffer_float ----------------------- */
public const uint GL_NV_depth_buffer_float = 1;
public const uint GL_DEPTH_COMPONENT32F_NV = 0x8DAB;
public const uint GL_DEPTH32F_STENCIL8_NV = 0x8DAC;
public const uint GL_FLOAT_32_UNSIGNED_INT_24_8_REV_NV = 0x8DAD;
public const uint GL_DEPTH_BUFFER_FLOAT_MODE_NV = 0x8DAF;
public delegate void PFNGLCLEARDEPTHDNVPROC( double depth);
public delegate void PFNGLDEPTHBOUNDSDNVPROC( double zmin,double zmax);
public delegate void PFNGLDEPTHRANGEDNVPROC( double zNear,double zFar);
/* --------------------------- GL_NV_depth_clamp --------------------------- */
public const uint GL_NV_depth_clamp = 1;
public const uint GL_DEPTH_CLAMP_NV = 0x864F;
/* ---------------------- GL_NV_depth_range_unclamped ---------------------- */
public const uint GL_NV_depth_range_unclamped = 1;
public const uint GL_SAMPLE_COUNT_BITS_NV = 0x8864;
public const uint GL_CURRENT_SAMPLE_COUNT_QUERY_NV = 0x8865;
public const uint GL_QUERY_RESULT_NV = 0x8866;
public const uint GL_QUERY_RESULT_AVAILABLE_NV = 0x8867;
public const uint GL_SAMPLE_COUNT_NV = 0x8914;
/* ---------------------------- GL_NV_evaluators --------------------------- */
public const uint GL_NV_evaluators = 1;
public const uint GL_EVAL_2D_NV = 0x86C0;
public const uint GL_EVAL_TRIANGULAR_2D_NV = 0x86C1;
public const uint GL_MAP_TESSELLATION_NV = 0x86C2;
public const uint GL_MAP_ATTRIB_U_ORDER_NV = 0x86C3;
public const uint GL_MAP_ATTRIB_V_ORDER_NV = 0x86C4;
public const uint GL_EVAL_FRACTIONAL_TESSELLATION_NV = 0x86C5;
public const uint GL_EVAL_VERTEX_ATTRIB0_NV = 0x86C6;
public const uint GL_EVAL_VERTEX_ATTRIB1_NV = 0x86C7;
public const uint GL_EVAL_VERTEX_ATTRIB2_NV = 0x86C8;
public const uint GL_EVAL_VERTEX_ATTRIB3_NV = 0x86C9;
public const uint GL_EVAL_VERTEX_ATTRIB4_NV = 0x86CA;
public const uint GL_EVAL_VERTEX_ATTRIB5_NV = 0x86CB;
public const uint GL_EVAL_VERTEX_ATTRIB6_NV = 0x86CC;
public const uint GL_EVAL_VERTEX_ATTRIB7_NV = 0x86CD;
public const uint GL_EVAL_VERTEX_ATTRIB8_NV = 0x86CE;
public const uint GL_EVAL_VERTEX_ATTRIB9_NV = 0x86CF;
public const uint GL_EVAL_VERTEX_ATTRIB10_NV = 0x86D0;
public const uint GL_EVAL_VERTEX_ATTRIB11_NV = 0x86D1;
public const uint GL_EVAL_VERTEX_ATTRIB12_NV = 0x86D2;
public const uint GL_EVAL_VERTEX_ATTRIB13_NV = 0x86D3;
public const uint GL_EVAL_VERTEX_ATTRIB14_NV = 0x86D4;
public const uint GL_EVAL_VERTEX_ATTRIB15_NV = 0x86D5;
public const uint GL_MAX_MAP_TESSELLATION_NV = 0x86D6;
public const uint GL_MAX_RATIONAL_EVAL_ORDER_NV = 0x86D7;
public delegate void PFNGLEVALMAPSNVPROC( uint target,uint mode);
public delegate void PFNGLGETMAPATTRIBPARAMETERFVNVPROC( uint target,uint index,uint pname,IntPtr _params);
public delegate void PFNGLGETMAPATTRIBPARAMETERIVNVPROC( uint target,uint index,uint pname,IntPtr _params);
public delegate void PFNGLGETMAPCONTROLPOINTSNVPROC( uint target,uint index,uint type,int ustride,int vstride,bool packed,IntPtr points);
public delegate void PFNGLGETMAPPARAMETERFVNVPROC( uint target,uint pname,IntPtr _params);
public delegate void PFNGLGETMAPPARAMETERIVNVPROC( uint target,uint pname,IntPtr _params);
public delegate void PFNGLMAPCONTROLPOINTSNVPROC( uint target,uint index,uint type,int ustride,int vstride,int uorder,int vorder,bool packed,IntPtr  points);
public delegate void PFNGLMAPPARAMETERFVNVPROC( uint target,uint pname,float[]  _params);
public delegate void PFNGLMAPPARAMETERIVNVPROC( uint target,uint pname,int[]  _params);
/* ----------------------- GL_NV_explicit_multisample ---------------------- */
public const uint GL_NV_explicit_multisample = 1;
public const uint GL_SAMPLE_POSITION_NV = 0x8E50;
public const uint GL_SAMPLE_MASK_NV = 0x8E51;
public const uint GL_SAMPLE_MASK_VALUE_NV = 0x8E52;
public const uint GL_TEXTURE_BINDING_RENDERBUFFER_NV = 0x8E53;
public const uint GL_TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV = 0x8E54;
public const uint GL_TEXTURE_RENDERBUFFER_NV = 0x8E55;
public const uint GL_SAMPLER_RENDERBUFFER_NV = 0x8E56;
public const uint GL_INT_SAMPLER_RENDERBUFFER_NV = 0x8E57;
public const uint GL_UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV = 0x8E58;
public const uint GL_MAX_SAMPLE_MASK_WORDS_NV = 0x8E59;
public delegate void PFNGLGETMULTISAMPLEFVNVPROC( uint pname,uint index,IntPtr val);
public delegate void PFNGLSAMPLEMASKINDEXEDNVPROC( uint index,uint mask);
public delegate void PFNGLTEXRENDERBUFFERNVPROC( uint target,uint renderbuffer);
/* ------------------------------ GL_NV_fence ------------------------------ */
public const uint GL_NV_fence = 1;
public const uint GL_ALL_COMPLETED_NV = 0x84F2;
public const uint GL_FENCE_STATUS_NV = 0x84F3;
public const uint GL_FENCE_CONDITION_NV = 0x84F4;
public delegate void PFNGLDELETEFENCESNVPROC( int n,uint[]  fences);
public delegate void PFNGLFINISHFENCENVPROC( uint fence);
public delegate void PFNGLGENFENCESNVPROC( int n,IntPtr fences);
public delegate void PFNGLGETFENCEIVNVPROC( uint fence,uint pname,IntPtr _params);
[return: System.Runtime.InteropServices.MarshalAs(System.Runtime.InteropServices.UnmanagedType.I1)]public delegate bool PFNGLISFENCENVPROC( uint fence);
public delegate void PFNGLSETFENCENVPROC( uint fence,uint condition);
[return: System.Runtime.InteropServices.MarshalAs(System.Runtime.InteropServices.UnmanagedType.I1)]public delegate bool PFNGLTESTFENCENVPROC( uint fence);
/* --------------------------- GL_NV_float_buffer -------------------------- */
public const uint GL_NV_float_buffer = 1;
public const uint GL_FLOAT_R_NV = 0x8880;
public const uint GL_FLOAT_RG_NV = 0x8881;
public const uint GL_FLOAT_RGB_NV = 0x8882;
public const uint GL_FLOAT_RGBA_NV = 0x8883;
public const uint GL_FLOAT_R16_NV = 0x8884;
public const uint GL_FLOAT_R32_NV = 0x8885;
public const uint GL_FLOAT_RG16_NV = 0x8886;
public const uint GL_FLOAT_RG32_NV = 0x8887;
public const uint GL_FLOAT_RGB16_NV = 0x8888;
public const uint GL_FLOAT_RGB32_NV = 0x8889;
public const uint GL_FLOAT_RGBA16_NV = 0x888A;
public const uint GL_FLOAT_RGBA32_NV = 0x888B;
public const uint GL_TEXTURE_FLOAT_COMPONENTS_NV = 0x888C;
public const uint GL_FLOAT_CLEAR_COLOR_VALUE_NV = 0x888D;
public const uint GL_FLOAT_RGBA_MODE_NV = 0x888E;
/* --------------------------- GL_NV_fog_distance -------------------------- */
public const uint GL_NV_fog_distance = 1;
public const uint GL_FOG_DISTANCE_MODE_NV = 0x855A;
public const uint GL_EYE_RADIAL_NV = 0x855B;
public const uint GL_EYE_PLANE_ABSOLUTE_NV = 0x855C;
/* ------------------------- GL_NV_fragment_program ------------------------ */
public const uint GL_NV_fragment_program = 1;
public const uint GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV = 0x8868;
public const uint GL_FRAGMENT_PROGRAM_NV = 0x8870;
public const uint GL_MAX_TEXTURE_COORDS_NV = 0x8871;
public const uint GL_MAX_TEXTURE_IMAGE_UNITS_NV = 0x8872;
public const uint GL_FRAGMENT_PROGRAM_BINDING_NV = 0x8873;
public const uint GL_PROGRAM_ERROR_STRING_NV = 0x8874;
public delegate void PFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC( uint id,int len,byte[]  name,IntPtr _params);
public delegate void PFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC( uint id,int len,byte[]  name,IntPtr _params);
public delegate void PFNGLPROGRAMNAMEDPARAMETER4DNVPROC( uint id,int len,byte[]  name,double x,double y,double z,double w);
public delegate void PFNGLPROGRAMNAMEDPARAMETER4DVNVPROC( uint id,int len,byte[]  name,double[] v);
public delegate void PFNGLPROGRAMNAMEDPARAMETER4FNVPROC( uint id,int len,byte[]  name,float x,float y,float z,float w);
public delegate void PFNGLPROGRAMNAMEDPARAMETER4FVNVPROC( uint id,int len,byte[]  name,float[] v);
/* ------------------------ GL_NV_fragment_program2 ------------------------ */
public const uint GL_NV_fragment_program2 = 1;
public const uint GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV = 0x88F4;
public const uint GL_MAX_PROGRAM_CALL_DEPTH_NV = 0x88F5;
public const uint GL_MAX_PROGRAM_IF_DEPTH_NV = 0x88F6;
public const uint GL_MAX_PROGRAM_LOOP_DEPTH_NV = 0x88F7;
public const uint GL_MAX_PROGRAM_LOOP_COUNT_NV = 0x88F8;
/* ------------------------ GL_NV_fragment_program4 ------------------------ */
public const uint GL_NV_fragment_program4 = 1;
/* --------------------- GL_NV_fragment_program_option --------------------- */
public const uint GL_NV_fragment_program_option = 1;
/* ----------------- GL_NV_framebuffer_multisample_coverage ---------------- */
public const uint GL_NV_framebuffer_multisample_coverage = 1;
public const uint GL_RENDERBUFFER_COVERAGE_SAMPLES_NV = 0x8CAB;
public const uint GL_RENDERBUFFER_COLOR_SAMPLES_NV = 0x8E10;
public const uint GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV = 0x8E11;
public const uint GL_MULTISAMPLE_COVERAGE_MODES_NV = 0x8E12;
public delegate void PFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC( uint target,int coverageSamples,int colorSamples,uint internalformat,int width,int height);
/* ------------------------ GL_NV_geometry_program4 ------------------------ */
public const uint GL_NV_geometry_program4 = 1;
public const uint GL_GEOMETRY_PROGRAM_NV = 0x8C26;
public const uint GL_MAX_PROGRAM_OUTPUT_VERTICES_NV = 0x8C27;
public const uint GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV = 0x8C28;
public delegate void PFNGLPROGRAMVERTEXLIMITNVPROC( uint target,int limit);
/* ------------------------- GL_NV_geometry_shader4 ------------------------ */
public const uint GL_NV_geometry_shader4 = 1;
/* --------------------------- GL_NV_gpu_program4 -------------------------- */
public const uint GL_NV_gpu_program4 = 1;
public const uint GL_MIN_PROGRAM_TEXEL_OFFSET_NV = 0x8904;
public const uint GL_MAX_PROGRAM_TEXEL_OFFSET_NV = 0x8905;
public const uint GL_PROGRAM_ATTRIB_COMPONENTS_NV = 0x8906;
public const uint GL_PROGRAM_RESULT_COMPONENTS_NV = 0x8907;
public const uint GL_MAX_PROGRAM_ATTRIB_COMPONENTS_NV = 0x8908;
public const uint GL_MAX_PROGRAM_RESULT_COMPONENTS_NV = 0x8909;
public const uint GL_MAX_PROGRAM_GENERIC_ATTRIBS_NV = 0x8DA5;
public const uint GL_MAX_PROGRAM_GENERIC_RESULTS_NV = 0x8DA6;
public delegate void PFNGLPROGRAMENVPARAMETERI4INVPROC( uint target,uint index,int x,int y,int z,int w);
public delegate void PFNGLPROGRAMENVPARAMETERI4IVNVPROC( uint target,uint index,int[] _params);
public delegate void PFNGLPROGRAMENVPARAMETERI4UINVPROC( uint target,uint index,uint x,uint y,uint z,uint w);
public delegate void PFNGLPROGRAMENVPARAMETERI4UIVNVPROC( uint target,uint index,uint[] _params);
public delegate void PFNGLPROGRAMENVPARAMETERSI4IVNVPROC( uint target,uint index,int count,int[] _params);
public delegate void PFNGLPROGRAMENVPARAMETERSI4UIVNVPROC( uint target,uint index,int count,uint[] _params);
public delegate void PFNGLPROGRAMLOCALPARAMETERI4INVPROC( uint target,uint index,int x,int y,int z,int w);
public delegate void PFNGLPROGRAMLOCALPARAMETERI4IVNVPROC( uint target,uint index,int[] _params);
public delegate void PFNGLPROGRAMLOCALPARAMETERI4UINVPROC( uint target,uint index,uint x,uint y,uint z,uint w);
public delegate void PFNGLPROGRAMLOCALPARAMETERI4UIVNVPROC( uint target,uint index,uint[] _params);
public delegate void PFNGLPROGRAMLOCALPARAMETERSI4IVNVPROC( uint target,uint index,int count,int[] _params);
public delegate void PFNGLPROGRAMLOCALPARAMETERSI4UIVNVPROC( uint target,uint index,int count,uint[] _params);
/* --------------------------- GL_NV_gpu_program5 -------------------------- */
public const uint GL_NV_gpu_program5 = 1;
public const uint GL_MAX_GEOMETRY_PROGRAM_INVOCATIONS_NV = 0x8E5A;
public const uint GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_NV = 0x8E5B;
public const uint GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_NV = 0x8E5C;
public const uint GL_FRAGMENT_PROGRAM_INTERPOLATION_OFFSET_BITS_NV = 0x8E5D;
public const uint GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_NV = 0x8E5E;
public const uint GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_NV = 0x8E5F;
/* ------------------------- GL_NV_gpu_program_fp64 ------------------------ */
public const uint GL_NV_gpu_program_fp64 = 1;
/* --------------------------- GL_NV_gpu_shader5 --------------------------- */
public const uint GL_NV_gpu_shader5 = 1;
public const uint GL_INT64_NV = 0x140E;
public const uint GL_UNSIGNED_INT64_NV = 0x140F;
public const uint GL_INT8_NV = 0x8FE0;
public const uint GL_INT8_VEC2_NV = 0x8FE1;
public const uint GL_INT8_VEC3_NV = 0x8FE2;
public const uint GL_INT8_VEC4_NV = 0x8FE3;
public const uint GL_INT16_NV = 0x8FE4;
public const uint GL_INT16_VEC2_NV = 0x8FE5;
public const uint GL_INT16_VEC3_NV = 0x8FE6;
public const uint GL_INT16_VEC4_NV = 0x8FE7;
public const uint GL_INT64_VEC2_NV = 0x8FE9;
public const uint GL_INT64_VEC3_NV = 0x8FEA;
public const uint GL_INT64_VEC4_NV = 0x8FEB;
public const uint GL_UNSIGNED_INT8_NV = 0x8FEC;
public const uint GL_UNSIGNED_INT8_VEC2_NV = 0x8FED;
public const uint GL_UNSIGNED_INT8_VEC3_NV = 0x8FEE;
public const uint GL_UNSIGNED_INT8_VEC4_NV = 0x8FEF;
public const uint GL_UNSIGNED_INT16_NV = 0x8FF0;
public const uint GL_UNSIGNED_INT16_VEC2_NV = 0x8FF1;
public const uint GL_UNSIGNED_INT16_VEC3_NV = 0x8FF2;
public const uint GL_UNSIGNED_INT16_VEC4_NV = 0x8FF3;
public const uint GL_UNSIGNED_INT64_VEC2_NV = 0x8FF5;
public const uint GL_UNSIGNED_INT64_VEC3_NV = 0x8FF6;
public const uint GL_UNSIGNED_INT64_VEC4_NV = 0x8FF7;
public const uint GL_FLOAT16_NV = 0x8FF8;
public const uint GL_FLOAT16_VEC2_NV = 0x8FF9;
public const uint GL_FLOAT16_VEC3_NV = 0x8FFA;
public const uint GL_FLOAT16_VEC4_NV = 0x8FFB;
public delegate void PFNGLGETUNIFORMI64VNVPROC( uint program,int location,IntPtr _params);
public delegate void PFNGLGETUNIFORMUI64VNVPROC( uint program,int location,IntPtr _params);
public delegate void PFNGLPROGRAMUNIFORM1I64NVPROC( uint program,int location,IntPtr x);
public delegate void PFNGLPROGRAMUNIFORM1I64VNVPROC( uint program,int location,int count,IntPtr value);
public delegate void PFNGLPROGRAMUNIFORM1UI64NVPROC( uint program,int location,IntPtr x);
public delegate void PFNGLPROGRAMUNIFORM1UI64VNVPROC( uint program,int location,int count,IntPtr value);
public delegate void PFNGLPROGRAMUNIFORM2I64NVPROC( uint program,int location,IntPtr x,IntPtr y);
public delegate void PFNGLPROGRAMUNIFORM2I64VNVPROC( uint program,int location,int count,IntPtr value);
public delegate void PFNGLPROGRAMUNIFORM2UI64NVPROC( uint program,int location,IntPtr x,IntPtr y);
public delegate void PFNGLPROGRAMUNIFORM2UI64VNVPROC( uint program,int location,int count,IntPtr value);
public delegate void PFNGLPROGRAMUNIFORM3I64NVPROC( uint program,int location,IntPtr x,IntPtr y,IntPtr z);
public delegate void PFNGLPROGRAMUNIFORM3I64VNVPROC( uint program,int location,int count,IntPtr value);
public delegate void PFNGLPROGRAMUNIFORM3UI64NVPROC( uint program,int location,IntPtr x,IntPtr y,IntPtr z);
public delegate void PFNGLPROGRAMUNIFORM3UI64VNVPROC( uint program,int location,int count,IntPtr value);
public delegate void PFNGLPROGRAMUNIFORM4I64NVPROC( uint program,int location,IntPtr x,IntPtr y,IntPtr z,IntPtr w);
public delegate void PFNGLPROGRAMUNIFORM4I64VNVPROC( uint program,int location,int count,IntPtr value);
public delegate void PFNGLPROGRAMUNIFORM4UI64NVPROC( uint program,int location,IntPtr x,IntPtr y,IntPtr z,IntPtr w);
public delegate void PFNGLPROGRAMUNIFORM4UI64VNVPROC( uint program,int location,int count,IntPtr value);
public delegate void PFNGLUNIFORM1I64NVPROC( int location,IntPtr x);
public delegate void PFNGLUNIFORM1I64VNVPROC( int location,int count,IntPtr value);
public delegate void PFNGLUNIFORM1UI64NVPROC( int location,IntPtr x);
public delegate void PFNGLUNIFORM1UI64VNVPROC( int location,int count,IntPtr value);
public delegate void PFNGLUNIFORM2I64NVPROC( int location,IntPtr x,IntPtr y);
public delegate void PFNGLUNIFORM2I64VNVPROC( int location,int count,IntPtr value);
public delegate void PFNGLUNIFORM2UI64NVPROC( int location,IntPtr x,IntPtr y);
public delegate void PFNGLUNIFORM2UI64VNVPROC( int location,int count,IntPtr value);
public delegate void PFNGLUNIFORM3I64NVPROC( int location,IntPtr x,IntPtr y,IntPtr z);
public delegate void PFNGLUNIFORM3I64VNVPROC( int location,int count,IntPtr value);
public delegate void PFNGLUNIFORM3UI64NVPROC( int location,IntPtr x,IntPtr y,IntPtr z);
public delegate void PFNGLUNIFORM3UI64VNVPROC( int location,int count,IntPtr value);
public delegate void PFNGLUNIFORM4I64NVPROC( int location,IntPtr x,IntPtr y,IntPtr z,IntPtr w);
public delegate void PFNGLUNIFORM4I64VNVPROC( int location,int count,IntPtr value);
public delegate void PFNGLUNIFORM4UI64NVPROC( int location,IntPtr x,IntPtr y,IntPtr z,IntPtr w);
public delegate void PFNGLUNIFORM4UI64VNVPROC( int location,int count,IntPtr value);
/* ---------------------------- GL_NV_half_float --------------------------- */
public const uint GL_NV_half_float = 1;
public const uint GL_HALF_FLOAT_NV = 0x140B;
public delegate void PFNGLCOLOR3HNVPROC( int red,int green,int blue);
public delegate void PFNGLCOLOR3HVNVPROC( IntPtr  v);
public delegate void PFNGLCOLOR4HNVPROC( int red,int green,int blue,int alpha);
public delegate void PFNGLCOLOR4HVNVPROC( IntPtr  v);
public delegate void PFNGLFOGCOORDHNVPROC( int fog);
public delegate void PFNGLFOGCOORDHVNVPROC( IntPtr  fog);
public delegate void PFNGLMULTITEXCOORD1HNVPROC( uint target,int s);
public delegate void PFNGLMULTITEXCOORD1HVNVPROC( uint target,IntPtr  v);
public delegate void PFNGLMULTITEXCOORD2HNVPROC( uint target,int s,int t);
public delegate void PFNGLMULTITEXCOORD2HVNVPROC( uint target,IntPtr  v);
public delegate void PFNGLMULTITEXCOORD3HNVPROC( uint target,int s,int t,int r);
public delegate void PFNGLMULTITEXCOORD3HVNVPROC( uint target,IntPtr  v);
public delegate void PFNGLMULTITEXCOORD4HNVPROC( uint target,int s,int t,int r,int q);
public delegate void PFNGLMULTITEXCOORD4HVNVPROC( uint target,IntPtr  v);
public delegate void PFNGLNORMAL3HNVPROC( int nx,int ny,int nz);
public delegate void PFNGLNORMAL3HVNVPROC( IntPtr  v);
public delegate void PFNGLSECONDARYCOLOR3HNVPROC( int red,int green,int blue);
public delegate void PFNGLSECONDARYCOLOR3HVNVPROC( IntPtr  v);
public delegate void PFNGLTEXCOORD1HNVPROC( int s);
public delegate void PFNGLTEXCOORD1HVNVPROC( IntPtr  v);
public delegate void PFNGLTEXCOORD2HNVPROC( int s,int t);
public delegate void PFNGLTEXCOORD2HVNVPROC( IntPtr  v);
public delegate void PFNGLTEXCOORD3HNVPROC( int s,int t,int r);
public delegate void PFNGLTEXCOORD3HVNVPROC( IntPtr  v);
public delegate void PFNGLTEXCOORD4HNVPROC( int s,int t,int r,int q);
public delegate void PFNGLTEXCOORD4HVNVPROC( IntPtr  v);
public delegate void PFNGLVERTEX2HNVPROC( int x,int y);
public delegate void PFNGLVERTEX2HVNVPROC( IntPtr  v);
public delegate void PFNGLVERTEX3HNVPROC( int x,int y,int z);
public delegate void PFNGLVERTEX3HVNVPROC( IntPtr  v);
public delegate void PFNGLVERTEX4HNVPROC( int x,int y,int z,int w);
public delegate void PFNGLVERTEX4HVNVPROC( IntPtr  v);
public delegate void PFNGLVERTEXATTRIB1HNVPROC( uint index,int x);
public delegate void PFNGLVERTEXATTRIB1HVNVPROC( uint index,IntPtr  v);
public delegate void PFNGLVERTEXATTRIB2HNVPROC( uint index,int x,int y);
public delegate void PFNGLVERTEXATTRIB2HVNVPROC( uint index,IntPtr  v);
public delegate void PFNGLVERTEXATTRIB3HNVPROC( uint index,int x,int y,int z);
public delegate void PFNGLVERTEXATTRIB3HVNVPROC( uint index,IntPtr  v);
public delegate void PFNGLVERTEXATTRIB4HNVPROC( uint index,int x,int y,int z,int w);
public delegate void PFNGLVERTEXATTRIB4HVNVPROC( uint index,IntPtr  v);
public delegate void PFNGLVERTEXATTRIBS1HVNVPROC( uint index,int n,IntPtr  v);
public delegate void PFNGLVERTEXATTRIBS2HVNVPROC( uint index,int n,IntPtr  v);
public delegate void PFNGLVERTEXATTRIBS3HVNVPROC( uint index,int n,IntPtr  v);
public delegate void PFNGLVERTEXATTRIBS4HVNVPROC( uint index,int n,IntPtr  v);
public delegate void PFNGLVERTEXWEIGHTHNVPROC( int weight);
public delegate void PFNGLVERTEXWEIGHTHVNVPROC( IntPtr  weight);
/* ------------------------ GL_NV_light_max_exponent ----------------------- */
public const uint GL_NV_light_max_exponent = 1;
public const uint GL_MAX_SHININESS_NV = 0x8504;
public const uint GL_MAX_SPOT_EXPONENT_NV = 0x8505;
/* ----------------------- GL_NV_multisample_coverage ---------------------- */
public const uint GL_NV_multisample_coverage = 1;
public const uint GL_COVERAGE_SAMPLES_NV = 0x80A9;
public const uint GL_COLOR_SAMPLES_NV = 0x8E20;
/* --------------------- GL_NV_multisample_filter_hint --------------------- */
public const uint GL_NV_multisample_filter_hint = 1;
public const uint GL_MULTISAMPLE_FILTER_HINT_NV = 0x8534;
/* ------------------------- GL_NV_occlusion_query ------------------------- */
public const uint GL_NV_occlusion_query = 1;
public const uint GL_PIXEL_COUNTER_BITS_NV = 0x8864;
public const uint GL_CURRENT_OCCLUSION_QUERY_ID_NV = 0x8865;
public const uint GL_PIXEL_COUNT_NV = 0x8866;
public const uint GL_PIXEL_COUNT_AVAILABLE_NV = 0x8867;
public delegate void PFNGLBEGINOCCLUSIONQUERYNVPROC( uint id);
public delegate void PFNGLDELETEOCCLUSIONQUERIESNVPROC( int n,uint[]  ids);
public delegate void PFNGLENDOCCLUSIONQUERYNVPROC( );
public delegate void PFNGLGENOCCLUSIONQUERIESNVPROC( int n,IntPtr ids);
public delegate void PFNGLGETOCCLUSIONQUERYIVNVPROC( uint id,uint pname,IntPtr _params);
public delegate void PFNGLGETOCCLUSIONQUERYUIVNVPROC( uint id,uint pname,IntPtr _params);
[return: System.Runtime.InteropServices.MarshalAs(System.Runtime.InteropServices.UnmanagedType.I1)]public delegate bool PFNGLISOCCLUSIONQUERYNVPROC( uint id);
/* ----------------------- GL_NV_packed_depth_stencil ---------------------- */
public const uint GL_NV_packed_depth_stencil = 1;
public const uint GL_DEPTH_STENCIL_NV = 0x84F9;
public const uint GL_UNSIGNED_INT_24_8_NV = 0x84FA;
/* --------------------- GL_NV_parameter_buffer_object --------------------- */
public const uint GL_NV_parameter_buffer_object = 1;
public const uint GL_MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV = 0x8DA0;
public const uint GL_MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV = 0x8DA1;
public const uint GL_VERTEX_PROGRAM_PARAMETER_BUFFER_NV = 0x8DA2;
public const uint GL_GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV = 0x8DA3;
public const uint GL_FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV = 0x8DA4;
public delegate void PFNGLPROGRAMBUFFERPARAMETERSIIVNVPROC( uint target,uint buffer,uint index,int count,int[] _params);
public delegate void PFNGLPROGRAMBUFFERPARAMETERSIUIVNVPROC( uint target,uint buffer,uint index,int count,uint[] _params);
public delegate void PFNGLPROGRAMBUFFERPARAMETERSFVNVPROC( uint target,uint buffer,uint index,int count,float[] _params);
/* --------------------- GL_NV_parameter_buffer_object2 -------------------- */
public const uint GL_NV_parameter_buffer_object2 = 1;
/* ------------------------- GL_NV_pixel_data_range ------------------------ */
public const uint GL_NV_pixel_data_range = 1;
public const uint GL_WRITE_PIXEL_DATA_RANGE_NV = 0x8878;
public const uint GL_READ_PIXEL_DATA_RANGE_NV = 0x8879;
public const uint GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV = 0x887A;
public const uint GL_READ_PIXEL_DATA_RANGE_LENGTH_NV = 0x887B;
public const uint GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV = 0x887C;
public const uint GL_READ_PIXEL_DATA_RANGE_POINTER_NV = 0x887D;
public delegate void PFNGLFLUSHPIXELDATARANGENVPROC( uint target);
public delegate void PFNGLPIXELDATARANGENVPROC( uint target,int length,IntPtr pointer);
/* --------------------------- GL_NV_point_sprite -------------------------- */
public const uint GL_NV_point_sprite = 1;
public const uint GL_POINT_SPRITE_NV = 0x8861;
public const uint GL_COORD_REPLACE_NV = 0x8862;
public const uint GL_POINT_SPRITE_R_MODE_NV = 0x8863;
public delegate void PFNGLPOINTPARAMETERINVPROC( uint pname,int param);
public delegate void PFNGLPOINTPARAMETERIVNVPROC( uint pname,int[]  _params);
/* -------------------------- GL_NV_present_video -------------------------- */
public const uint GL_NV_present_video = 1;
public const uint GL_FRAME_NV = 0x8E26;
public const uint GL_FIELDS_NV = 0x8E27;
public const uint GL_CURRENT_TIME_NV = 0x8E28;
public const uint GL_NUM_FILL_STREAMS_NV = 0x8E29;
public const uint GL_PRESENT_TIME_NV = 0x8E2A;
public const uint GL_PRESENT_DURATION_NV = 0x8E2B;
public delegate void PFNGLGETVIDEOI64VNVPROC( uint video_slot,uint pname,IntPtr _params);
public delegate void PFNGLGETVIDEOIVNVPROC( uint video_slot,uint pname,IntPtr _params);
public delegate void PFNGLGETVIDEOUI64VNVPROC( uint video_slot,uint pname,IntPtr _params);
public delegate void PFNGLGETVIDEOUIVNVPROC( uint video_slot,uint pname,IntPtr _params);
public delegate void PFNGLPRESENTFRAMEDUALFILLNVPROC( uint video_slot,IntPtr minPresentTime,uint beginPresentTimeId,uint presentDurationId,uint type,uint target0,uint fill0,uint target1,uint fill1,uint target2,uint fill2,uint target3,uint fill3);
public delegate void PFNGLPRESENTFRAMEKEYEDNVPROC( uint video_slot,IntPtr minPresentTime,uint beginPresentTimeId,uint presentDurationId,uint type,uint target0,uint fill0,uint key0,uint target1,uint fill1,uint key1);
/* ------------------------ GL_NV_primitive_restart ------------------------ */
public const uint GL_NV_primitive_restart = 1;
public const uint GL_PRIMITIVE_RESTART_NV = 0x8558;
public const uint GL_PRIMITIVE_RESTART_INDEX_NV = 0x8559;
public delegate void PFNGLPRIMITIVERESTARTINDEXNVPROC( uint index);
public delegate void PFNGLPRIMITIVERESTARTNVPROC( );
/* ------------------------ GL_NV_register_combiners ----------------------- */
public const uint GL_NV_register_combiners = 1;
public const uint GL_REGISTER_COMBINERS_NV = 0x8522;
public const uint GL_VARIABLE_A_NV = 0x8523;
public const uint GL_VARIABLE_B_NV = 0x8524;
public const uint GL_VARIABLE_C_NV = 0x8525;
public const uint GL_VARIABLE_D_NV = 0x8526;
public const uint GL_VARIABLE_E_NV = 0x8527;
public const uint GL_VARIABLE_F_NV = 0x8528;
public const uint GL_VARIABLE_G_NV = 0x8529;
public const uint GL_CONSTANT_COLOR0_NV = 0x852A;
public const uint GL_CONSTANT_COLOR1_NV = 0x852B;
public const uint GL_PRIMARY_COLOR_NV = 0x852C;
public const uint GL_SECONDARY_COLOR_NV = 0x852D;
public const uint GL_SPARE0_NV = 0x852E;
public const uint GL_SPARE1_NV = 0x852F;
public const uint GL_DISCARD_NV = 0x8530;
public const uint GL_E_TIMES_F_NV = 0x8531;
public const uint GL_SPARE0_PLUS_SECONDARY_COLOR_NV = 0x8532;
public const uint GL_UNSIGNED_IDENTITY_NV = 0x8536;
public const uint GL_UNSIGNED_INVERT_NV = 0x8537;
public const uint GL_EXPAND_NORMAL_NV = 0x8538;
public const uint GL_EXPAND_NEGATE_NV = 0x8539;
public const uint GL_HALF_BIAS_NORMAL_NV = 0x853A;
public const uint GL_HALF_BIAS_NEGATE_NV = 0x853B;
public const uint GL_SIGNED_IDENTITY_NV = 0x853C;
public const uint GL_SIGNED_NEGATE_NV = 0x853D;
public const uint GL_SCALE_BY_TWO_NV = 0x853E;
public const uint GL_SCALE_BY_FOUR_NV = 0x853F;
public const uint GL_SCALE_BY_ONE_HALF_NV = 0x8540;
public const uint GL_BIAS_BY_NEGATIVE_ONE_HALF_NV = 0x8541;
public const uint GL_COMBINER_INPUT_NV = 0x8542;
public const uint GL_COMBINER_MAPPING_NV = 0x8543;
public const uint GL_COMBINER_COMPONENT_USAGE_NV = 0x8544;
public const uint GL_COMBINER_AB_DOT_PRODUCT_NV = 0x8545;
public const uint GL_COMBINER_CD_DOT_PRODUCT_NV = 0x8546;
public const uint GL_COMBINER_MUX_SUM_NV = 0x8547;
public const uint GL_COMBINER_SCALE_NV = 0x8548;
public const uint GL_COMBINER_BIAS_NV = 0x8549;
public const uint GL_COMBINER_AB_OUTPUT_NV = 0x854A;
public const uint GL_COMBINER_CD_OUTPUT_NV = 0x854B;
public const uint GL_COMBINER_SUM_OUTPUT_NV = 0x854C;
public const uint GL_MAX_GENERAL_COMBINERS_NV = 0x854D;
public const uint GL_NUM_GENERAL_COMBINERS_NV = 0x854E;
public const uint GL_COLOR_SUM_CLAMP_NV = 0x854F;
public const uint GL_COMBINER0_NV = 0x8550;
public const uint GL_COMBINER1_NV = 0x8551;
public const uint GL_COMBINER2_NV = 0x8552;
public const uint GL_COMBINER3_NV = 0x8553;
public const uint GL_COMBINER4_NV = 0x8554;
public const uint GL_COMBINER5_NV = 0x8555;
public const uint GL_COMBINER6_NV = 0x8556;
public const uint GL_COMBINER7_NV = 0x8557;
public delegate void PFNGLCOMBINERINPUTNVPROC( uint stage,uint portion,uint variable,uint input,uint mapping,uint componentUsage);
public delegate void PFNGLCOMBINEROUTPUTNVPROC( uint stage,uint portion,uint abOutput,uint cdOutput,uint sumOutput,uint scale,uint bias,bool abDotProduct,bool cdDotProduct,bool muxSum);
public delegate void PFNGLCOMBINERPARAMETERFNVPROC( uint pname,float param);
public delegate void PFNGLCOMBINERPARAMETERFVNVPROC( uint pname,float[]  _params);
public delegate void PFNGLCOMBINERPARAMETERINVPROC( uint pname,int param);
public delegate void PFNGLCOMBINERPARAMETERIVNVPROC( uint pname,int[]  _params);
public delegate void PFNGLFINALCOMBINERINPUTNVPROC( uint variable,uint input,uint mapping,uint componentUsage);
public delegate void PFNGLGETCOMBINERINPUTPARAMETERFVNVPROC( uint stage,uint portion,uint variable,uint pname,IntPtr _params);
public delegate void PFNGLGETCOMBINERINPUTPARAMETERIVNVPROC( uint stage,uint portion,uint variable,uint pname,IntPtr _params);
public delegate void PFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC( uint stage,uint portion,uint pname,IntPtr _params);
public delegate void PFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC( uint stage,uint portion,uint pname,IntPtr _params);
public delegate void PFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC( uint variable,uint pname,IntPtr _params);
public delegate void PFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC( uint variable,uint pname,IntPtr _params);
/* ----------------------- GL_NV_register_combiners2 ----------------------- */
public const uint GL_NV_register_combiners2 = 1;
public const uint GL_PER_STAGE_CONSTANTS_NV = 0x8535;
public delegate void PFNGLCOMBINERSTAGEPARAMETERFVNVPROC( uint stage,uint pname,float[]  _params);
public delegate void PFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC( uint stage,uint pname,IntPtr _params);
/* ------------------------ GL_NV_shader_buffer_load ----------------------- */
public const uint GL_NV_shader_buffer_load = 1;
public const uint GL_BUFFER_GPU_ADDRESS_NV = 0x8F1D;
public const uint GL_GPU_ADDRESS_NV = 0x8F34;
public const uint GL_MAX_SHADER_BUFFER_ADDRESS_NV = 0x8F35;
public delegate void PFNGLGETBUFFERPARAMETERUI64VNVPROC( uint target,uint pname,IntPtr _params);
public delegate void PFNGLGETINTEGERUI64VNVPROC( uint value,IntPtr result);
public delegate void PFNGLGETNAMEDBUFFERPARAMETERUI64VNVPROC( uint buffer,uint pname,IntPtr _params);
[return: System.Runtime.InteropServices.MarshalAs(System.Runtime.InteropServices.UnmanagedType.I1)]public delegate bool PFNGLISBUFFERRESIDENTNVPROC( uint target);
[return: System.Runtime.InteropServices.MarshalAs(System.Runtime.InteropServices.UnmanagedType.I1)]public delegate bool PFNGLISNAMEDBUFFERRESIDENTNVPROC( uint buffer);
public delegate void PFNGLMAKEBUFFERNONRESIDENTNVPROC( uint target);
public delegate void PFNGLMAKEBUFFERRESIDENTNVPROC( uint target,uint access);
public delegate void PFNGLMAKENAMEDBUFFERNONRESIDENTNVPROC( uint buffer);
public delegate void PFNGLMAKENAMEDBUFFERRESIDENTNVPROC( uint buffer,uint access);
public delegate void PFNGLPROGRAMUNIFORMUI64NVPROC( uint program,int location,IntPtr value);
public delegate void PFNGLPROGRAMUNIFORMUI64VNVPROC( uint program,int location,int count,IntPtr value);
public delegate void PFNGLUNIFORMUI64NVPROC( int location,IntPtr value);
public delegate void PFNGLUNIFORMUI64VNVPROC( int location,int count,IntPtr value);
/* ---------------------- GL_NV_tessellation_program5 ---------------------- */
public const uint GL_NV_tessellation_program5 = 1;
public const uint GL_MAX_PROGRAM_PATCH_ATTRIBS_NV = 0x86D8;
public const uint GL_TESS_CONTROL_PROGRAM_NV = 0x891E;
public const uint GL_TESS_EVALUATION_PROGRAM_NV = 0x891F;
public const uint GL_TESS_CONTROL_PROGRAM_PARAMETER_BUFFER_NV = 0x8C74;
public const uint GL_TESS_EVALUATION_PROGRAM_PARAMETER_BUFFER_NV = 0x8C75;
/* -------------------------- GL_NV_texgen_emboss -------------------------- */
public const uint GL_NV_texgen_emboss = 1;
public const uint GL_EMBOSS_LIGHT_NV = 0x855D;
public const uint GL_EMBOSS_CONSTANT_NV = 0x855E;
public const uint GL_EMBOSS_MAP_NV = 0x855F;
/* ------------------------ GL_NV_texgen_reflection ------------------------ */
public const uint GL_NV_texgen_reflection = 1;
public const uint GL_NORMAL_MAP_NV = 0x8511;
public const uint GL_REFLECTION_MAP_NV = 0x8512;
/* ------------------------- GL_NV_texture_barrier ------------------------- */
public const uint GL_NV_texture_barrier = 1;
public delegate void PFNGLTEXTUREBARRIERNVPROC( );
/* --------------------- GL_NV_texture_compression_vtc --------------------- */
public const uint GL_NV_texture_compression_vtc = 1;
/* ----------------------- GL_NV_texture_env_combine4 ---------------------- */
public const uint GL_NV_texture_env_combine4 = 1;
public const uint GL_COMBINE4_NV = 0x8503;
public const uint GL_SOURCE3_RGB_NV = 0x8583;
public const uint GL_SOURCE3_ALPHA_NV = 0x858B;
public const uint GL_OPERAND3_RGB_NV = 0x8593;
public const uint GL_OPERAND3_ALPHA_NV = 0x859B;
/* ---------------------- GL_NV_texture_expand_normal ---------------------- */
public const uint GL_NV_texture_expand_normal = 1;
public const uint GL_TEXTURE_UNSIGNED_REMAP_MODE_NV = 0x888F;
/* ----------------------- GL_NV_texture_multisample ----------------------- */
public const uint GL_NV_texture_multisample = 1;
public const uint GL_TEXTURE_COVERAGE_SAMPLES_NV = 0x9045;
public const uint GL_TEXTURE_COLOR_SAMPLES_NV = 0x9046;
public delegate void PFNGLTEXIMAGE2DMULTISAMPLECOVERAGENVPROC( uint target,int coverageSamples,int colorSamples,int internalFormat,int width,int height,bool fixedSampleLocations);
public delegate void PFNGLTEXIMAGE3DMULTISAMPLECOVERAGENVPROC( uint target,int coverageSamples,int colorSamples,int internalFormat,int width,int height,int depth,bool fixedSampleLocations);
public delegate void PFNGLTEXTUREIMAGE2DMULTISAMPLECOVERAGENVPROC( uint texture,uint target,int coverageSamples,int colorSamples,int internalFormat,int width,int height,bool fixedSampleLocations);
public delegate void PFNGLTEXTUREIMAGE2DMULTISAMPLENVPROC( uint texture,uint target,int samples,int internalFormat,int width,int height,bool fixedSampleLocations);
public delegate void PFNGLTEXTUREIMAGE3DMULTISAMPLECOVERAGENVPROC( uint texture,uint target,int coverageSamples,int colorSamples,int internalFormat,int width,int height,int depth,bool fixedSampleLocations);
public delegate void PFNGLTEXTUREIMAGE3DMULTISAMPLENVPROC( uint texture,uint target,int samples,int internalFormat,int width,int height,int depth,bool fixedSampleLocations);
/* ------------------------ GL_NV_texture_rectangle ------------------------ */
public const uint GL_NV_texture_rectangle = 1;
public const uint GL_TEXTURE_RECTANGLE_NV = 0x84F5;
public const uint GL_TEXTURE_BINDING_RECTANGLE_NV = 0x84F6;
public const uint GL_PROXY_TEXTURE_RECTANGLE_NV = 0x84F7;
public const uint GL_MAX_RECTANGLE_TEXTURE_SIZE_NV = 0x84F8;
/* -------------------------- GL_NV_texture_shader ------------------------- */
public const uint GL_NV_texture_shader = 1;
public const uint GL_OFFSET_TEXTURE_RECTANGLE_NV = 0x864C;
public const uint GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV = 0x864D;
public const uint GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV = 0x864E;
public const uint GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV = 0x86D9;
public const uint GL_UNSIGNED_INT_S8_S8_8_8_NV = 0x86DA;
public const uint GL_UNSIGNED_INT_8_8_S8_S8_REV_NV = 0x86DB;
public const uint GL_DSDT_MAG_INTENSITY_NV = 0x86DC;
public const uint GL_SHADER_CONSISTENT_NV = 0x86DD;
public const uint GL_TEXTURE_SHADER_NV = 0x86DE;
public const uint GL_SHADER_OPERATION_NV = 0x86DF;
public const uint GL_CULL_MODES_NV = 0x86E0;
public const uint GL_OFFSET_TEXTURE_2D_MATRIX_NV = 0x86E1;
public const uint GL_OFFSET_TEXTURE_MATRIX_NV = 0x86E1;
public const uint GL_OFFSET_TEXTURE_2D_SCALE_NV = 0x86E2;
public const uint GL_OFFSET_TEXTURE_SCALE_NV = 0x86E2;
public const uint GL_OFFSET_TEXTURE_BIAS_NV = 0x86E3;
public const uint GL_OFFSET_TEXTURE_2D_BIAS_NV = 0x86E3;
public const uint GL_PREVIOUS_TEXTURE_INPUT_NV = 0x86E4;
public const uint GL_CONST_EYE_NV = 0x86E5;
public const uint GL_PASS_THROUGH_NV = 0x86E6;
public const uint GL_CULL_FRAGMENT_NV = 0x86E7;
public const uint GL_OFFSET_TEXTURE_2D_NV = 0x86E8;
public const uint GL_DEPENDENT_AR_TEXTURE_2D_NV = 0x86E9;
public const uint GL_DEPENDENT_GB_TEXTURE_2D_NV = 0x86EA;
public const uint GL_DOT_PRODUCT_NV = 0x86EC;
public const uint GL_DOT_PRODUCT_DEPTH_REPLACE_NV = 0x86ED;
public const uint GL_DOT_PRODUCT_TEXTURE_2D_NV = 0x86EE;
public const uint GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV = 0x86F0;
public const uint GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV = 0x86F1;
public const uint GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV = 0x86F2;
public const uint GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV = 0x86F3;
public const uint GL_HILO_NV = 0x86F4;
public const uint GL_DSDT_NV = 0x86F5;
public const uint GL_DSDT_MAG_NV = 0x86F6;
public const uint GL_DSDT_MAG_VIB_NV = 0x86F7;
public const uint GL_HILO16_NV = 0x86F8;
public const uint GL_SIGNED_HILO_NV = 0x86F9;
public const uint GL_SIGNED_HILO16_NV = 0x86FA;
public const uint GL_SIGNED_RGBA_NV = 0x86FB;
public const uint GL_SIGNED_RGBA8_NV = 0x86FC;
public const uint GL_SIGNED_RGB_NV = 0x86FE;
public const uint GL_SIGNED_RGB8_NV = 0x86FF;
public const uint GL_SIGNED_LUMINANCE_NV = 0x8701;
public const uint GL_SIGNED_LUMINANCE8_NV = 0x8702;
public const uint GL_SIGNED_LUMINANCE_ALPHA_NV = 0x8703;
public const uint GL_SIGNED_LUMINANCE8_ALPHA8_NV = 0x8704;
public const uint GL_SIGNED_ALPHA_NV = 0x8705;
public const uint GL_SIGNED_ALPHA8_NV = 0x8706;
public const uint GL_SIGNED_INTENSITY_NV = 0x8707;
public const uint GL_SIGNED_INTENSITY8_NV = 0x8708;
public const uint GL_DSDT8_NV = 0x8709;
public const uint GL_DSDT8_MAG8_NV = 0x870A;
public const uint GL_DSDT8_MAG8_INTENSITY8_NV = 0x870B;
public const uint GL_SIGNED_RGB_UNSIGNED_ALPHA_NV = 0x870C;
public const uint GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV = 0x870D;
public const uint GL_HI_SCALE_NV = 0x870E;
public const uint GL_LO_SCALE_NV = 0x870F;
public const uint GL_DS_SCALE_NV = 0x8710;
public const uint GL_DT_SCALE_NV = 0x8711;
public const uint GL_MAGNITUDE_SCALE_NV = 0x8712;
public const uint GL_VIBRANCE_SCALE_NV = 0x8713;
public const uint GL_HI_BIAS_NV = 0x8714;
public const uint GL_LO_BIAS_NV = 0x8715;
public const uint GL_DS_BIAS_NV = 0x8716;
public const uint GL_DT_BIAS_NV = 0x8717;
public const uint GL_MAGNITUDE_BIAS_NV = 0x8718;
public const uint GL_VIBRANCE_BIAS_NV = 0x8719;
public const uint GL_TEXTURE_BORDER_VALUES_NV = 0x871A;
public const uint GL_TEXTURE_HI_SIZE_NV = 0x871B;
public const uint GL_TEXTURE_LO_SIZE_NV = 0x871C;
public const uint GL_TEXTURE_DS_SIZE_NV = 0x871D;
public const uint GL_TEXTURE_DT_SIZE_NV = 0x871E;
public const uint GL_TEXTURE_MAG_SIZE_NV = 0x871F;
/* ------------------------- GL_NV_texture_shader2 ------------------------- */
public const uint GL_NV_texture_shader2 = 1;
//public const uint GL_UNSIGNED_INT_S8_S8_8_8_NV = 0x86DA;
//public const uint GL_UNSIGNED_INT_8_8_S8_S8_REV_NV = 0x86DB;
//public const uint GL_DSDT_MAG_INTENSITY_NV = 0x86DC;
public const uint GL_DOT_PRODUCT_TEXTURE_3D_NV = 0x86EF;
//public const uint GL_HILO_NV = 0x86F4;
//public const uint GL_DSDT_NV = 0x86F5;
//public const uint GL_DSDT_MAG_NV = 0x86F6;
//public const uint GL_DSDT_MAG_VIB_NV = 0x86F7;
//public const uint GL_HILO16_NV = 0x86F8;
//public const uint GL_SIGNED_HILO_NV = 0x86F9;
//public const uint GL_SIGNED_HILO16_NV = 0x86FA;
//public const uint GL_SIGNED_RGBA_NV = 0x86FB;
//public const uint GL_SIGNED_RGBA8_NV = 0x86FC;
//public const uint GL_SIGNED_RGB_NV = 0x86FE;
//public const uint GL_SIGNED_RGB8_NV = 0x86FF;
//public const uint GL_SIGNED_LUMINANCE_NV = 0x8701;
//public const uint GL_SIGNED_LUMINANCE8_NV = 0x8702;
//public const uint GL_SIGNED_LUMINANCE_ALPHA_NV = 0x8703;
//public const uint GL_SIGNED_LUMINANCE8_ALPHA8_NV = 0x8704;
//public const uint GL_SIGNED_ALPHA_NV = 0x8705;
//public const uint GL_SIGNED_ALPHA8_NV = 0x8706;
//public const uint GL_SIGNED_INTENSITY_NV = 0x8707;
//public const uint GL_SIGNED_INTENSITY8_NV = 0x8708;
//public const uint GL_DSDT8_NV = 0x8709;
//public const uint GL_DSDT8_MAG8_NV = 0x870A;
//public const uint GL_DSDT8_MAG8_INTENSITY8_NV = 0x870B;
//public const uint GL_SIGNED_RGB_UNSIGNED_ALPHA_NV = 0x870C;
//public const uint GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV = 0x870D;
/* ------------------------- GL_NV_texture_shader3 ------------------------- */
public const uint GL_NV_texture_shader3 = 1;
public const uint GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV = 0x8850;
public const uint GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV = 0x8851;
public const uint GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV = 0x8852;
public const uint GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV = 0x8853;
public const uint GL_OFFSET_HILO_TEXTURE_2D_NV = 0x8854;
public const uint GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV = 0x8855;
public const uint GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV = 0x8856;
public const uint GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV = 0x8857;
public const uint GL_DEPENDENT_HILO_TEXTURE_2D_NV = 0x8858;
public const uint GL_DEPENDENT_RGB_TEXTURE_3D_NV = 0x8859;
public const uint GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV = 0x885A;
public const uint GL_DOT_PRODUCT_PASS_THROUGH_NV = 0x885B;
public const uint GL_DOT_PRODUCT_TEXTURE_1D_NV = 0x885C;
public const uint GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV = 0x885D;
public const uint GL_HILO8_NV = 0x885E;
public const uint GL_SIGNED_HILO8_NV = 0x885F;
public const uint GL_FORCE_BLUE_TO_ONE_NV = 0x8860;
/* ------------------------ GL_NV_transform_feedback ----------------------- */
public const uint GL_NV_transform_feedback = 1;
public const uint GL_BACK_PRIMARY_COLOR_NV = 0x8C77;
public const uint GL_BACK_SECONDARY_COLOR_NV = 0x8C78;
public const uint GL_TEXTURE_COORD_NV = 0x8C79;
public const uint GL_CLIP_DISTANCE_NV = 0x8C7A;
public const uint GL_VERTEX_ID_NV = 0x8C7B;
public const uint GL_PRIMITIVE_ID_NV = 0x8C7C;
public const uint GL_GENERIC_ATTRIB_NV = 0x8C7D;
public const uint GL_TRANSFORM_FEEDBACK_ATTRIBS_NV = 0x8C7E;
public const uint GL_TRANSFORM_FEEDBACK_BUFFER_MODE_NV = 0x8C7F;
public const uint GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV = 0x8C80;
public const uint GL_ACTIVE_VARYINGS_NV = 0x8C81;
public const uint GL_ACTIVE_VARYING_MAX_LENGTH_NV = 0x8C82;
public const uint GL_TRANSFORM_FEEDBACK_VARYINGS_NV = 0x8C83;
public const uint GL_TRANSFORM_FEEDBACK_BUFFER_START_NV = 0x8C84;
public const uint GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_NV = 0x8C85;
public const uint GL_TRANSFORM_FEEDBACK_RECORD_NV = 0x8C86;
public const uint GL_PRIMITIVES_GENERATED_NV = 0x8C87;
public const uint GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV = 0x8C88;
public const uint GL_RASTERIZER_DISCARD_NV = 0x8C89;
public const uint GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_NV = 0x8C8A;
public const uint GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV = 0x8C8B;
public const uint GL_INTERLEAVED_ATTRIBS_NV = 0x8C8C;
public const uint GL_SEPARATE_ATTRIBS_NV = 0x8C8D;
public const uint GL_TRANSFORM_FEEDBACK_BUFFER_NV = 0x8C8E;
public const uint GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_NV = 0x8C8F;
public delegate void PFNGLACTIVEVARYINGNVPROC( uint program,string name);
public delegate void PFNGLBEGINTRANSFORMFEEDBACKNVPROC( uint primitiveMode);
public delegate void PFNGLBINDBUFFERBASENVPROC( uint target,uint index,uint buffer);
public delegate void PFNGLBINDBUFFEROFFSETNVPROC( uint target,uint index,uint buffer,IntPtr offset);
public delegate void PFNGLBINDBUFFERRANGENVPROC( uint target,uint index,uint buffer,IntPtr offset,IntPtr size);
public delegate void PFNGLENDTRANSFORMFEEDBACKNVPROC( );
public delegate void PFNGLGETACTIVEVARYINGNVPROC( uint program,uint index,int bufSize,IntPtr length,IntPtr size,IntPtr type,IntPtr name);
public delegate void PFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC( uint program,uint index,IntPtr location);
public delegate int PFNGLGETVARYINGLOCATIONNVPROC( uint program,string name);
public delegate void PFNGLTRANSFORMFEEDBACKATTRIBSNVPROC( uint count,int[] attribs,uint bufferMode);
public delegate void PFNGLTRANSFORMFEEDBACKVARYINGSNVPROC( uint program,int count,int[] locations,uint bufferMode);
/* ----------------------- GL_NV_transform_feedback2 ----------------------- */
public const uint GL_NV_transform_feedback2 = 1;
public const uint GL_TRANSFORM_FEEDBACK_NV = 0x8E22;
public const uint GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV = 0x8E23;
public const uint GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV = 0x8E24;
public const uint GL_TRANSFORM_FEEDBACK_BINDING_NV = 0x8E25;
public delegate void PFNGLBINDTRANSFORMFEEDBACKNVPROC( uint target,uint id);
public delegate void PFNGLDELETETRANSFORMFEEDBACKSNVPROC( int n,uint[]  ids);
public delegate void PFNGLDRAWTRANSFORMFEEDBACKNVPROC( uint mode,uint id);
public delegate void PFNGLGENTRANSFORMFEEDBACKSNVPROC( int n,IntPtr ids);
[return: System.Runtime.InteropServices.MarshalAs(System.Runtime.InteropServices.UnmanagedType.I1)]public delegate bool PFNGLISTRANSFORMFEEDBACKNVPROC( uint id);
public delegate void PFNGLPAUSETRANSFORMFEEDBACKNVPROC( );
public delegate void PFNGLRESUMETRANSFORMFEEDBACKNVPROC( );
/* -------------------------- GL_NV_vdpau_interop -------------------------- */
public const uint GL_NV_vdpau_interop = 1;
public const uint GL_SURFACE_STATE_NV = 0x86EB;
public const uint GL_SURFACE_REGISTERED_NV = 0x86FD;
public const uint GL_SURFACE_MAPPED_NV = 0x8700;
public const uint GL_WRITE_DISCARD_NV = 0x88BE;
public delegate void PFNGLVDPAUFININVPROC( );
public delegate void PFNGLVDPAUGETSURFACEIVNVPROC( IntPtr surface,uint pname,int bufSize,IntPtr length,IntPtr values);
public delegate void PFNGLVDPAUINITNVPROC( IntPtr  vdpDevice,IntPtr getProcAddress);
public delegate void PFNGLVDPAUISSURFACENVPROC( IntPtr surface);
public delegate void PFNGLVDPAUMAPSURFACESNVPROC( int numSurfaces,IntPtr surfaces);
public delegate IntPtr PFNGLVDPAUREGISTEROUTPUTSURFACENVPROC( IntPtr  vdpSurface,uint target,int numTextureNames,uint[] textureNames);
public delegate IntPtr PFNGLVDPAUREGISTERVIDEOSURFACENVPROC( IntPtr  vdpSurface,uint target,int numTextureNames,uint[] textureNames);
public delegate void PFNGLVDPAUSURFACEACCESSNVPROC( IntPtr surface,uint access);
public delegate void PFNGLVDPAUUNMAPSURFACESNVPROC( int numSurface,IntPtr surfaces);
public delegate void PFNGLVDPAUUNREGISTERSURFACENVPROC( IntPtr surface);
/* ------------------------ GL_NV_vertex_array_range ----------------------- */
public const uint GL_NV_vertex_array_range = 1;
public const uint GL_VERTEX_ARRAY_RANGE_NV = 0x851D;
public const uint GL_VERTEX_ARRAY_RANGE_LENGTH_NV = 0x851E;
public const uint GL_VERTEX_ARRAY_RANGE_VALID_NV = 0x851F;
public const uint GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV = 0x8520;
public const uint GL_VERTEX_ARRAY_RANGE_POINTER_NV = 0x8521;
public delegate void PFNGLFLUSHVERTEXARRAYRANGENVPROC( );
public delegate void PFNGLVERTEXARRAYRANGENVPROC( int length,IntPtr pointer);
/* ----------------------- GL_NV_vertex_array_range2 ----------------------- */
public const uint GL_NV_vertex_array_range2 = 1;
public const uint GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV = 0x8533;
/* ------------------- GL_NV_vertex_attrib_integer_64bit ------------------- */
public const uint GL_NV_vertex_attrib_integer_64bit = 1;
//public const uint GL_INT64_NV = 0x140E;
//public const uint GL_UNSIGNED_INT64_NV = 0x140F;
public delegate void PFNGLGETVERTEXATTRIBLI64VNVPROC( uint index,uint pname,IntPtr _params);
public delegate void PFNGLGETVERTEXATTRIBLUI64VNVPROC( uint index,uint pname,IntPtr _params);
public delegate void PFNGLVERTEXATTRIBL1I64NVPROC( uint index,IntPtr x);
public delegate void PFNGLVERTEXATTRIBL1I64VNVPROC( uint index,IntPtr v);
public delegate void PFNGLVERTEXATTRIBL1UI64NVPROC( uint index,IntPtr x);
public delegate void PFNGLVERTEXATTRIBL1UI64VNVPROC( uint index,IntPtr v);
public delegate void PFNGLVERTEXATTRIBL2I64NVPROC( uint index,IntPtr x,IntPtr y);
public delegate void PFNGLVERTEXATTRIBL2I64VNVPROC( uint index,IntPtr v);
public delegate void PFNGLVERTEXATTRIBL2UI64NVPROC( uint index,IntPtr x,IntPtr y);
public delegate void PFNGLVERTEXATTRIBL2UI64VNVPROC( uint index,IntPtr v);
public delegate void PFNGLVERTEXATTRIBL3I64NVPROC( uint index,IntPtr x,IntPtr y,IntPtr z);
public delegate void PFNGLVERTEXATTRIBL3I64VNVPROC( uint index,IntPtr v);
public delegate void PFNGLVERTEXATTRIBL3UI64NVPROC( uint index,IntPtr x,IntPtr y,IntPtr z);
public delegate void PFNGLVERTEXATTRIBL3UI64VNVPROC( uint index,IntPtr v);
public delegate void PFNGLVERTEXATTRIBL4I64NVPROC( uint index,IntPtr x,IntPtr y,IntPtr z,IntPtr w);
public delegate void PFNGLVERTEXATTRIBL4I64VNVPROC( uint index,IntPtr v);
public delegate void PFNGLVERTEXATTRIBL4UI64NVPROC( uint index,IntPtr x,IntPtr y,IntPtr z,IntPtr w);
public delegate void PFNGLVERTEXATTRIBL4UI64VNVPROC( uint index,IntPtr v);
public delegate void PFNGLVERTEXATTRIBLFORMATNVPROC( uint index,int size,uint type,int stride);
/* ------------------- GL_NV_vertex_buffer_unified_memory ------------------ */
public const uint GL_NV_vertex_buffer_unified_memory = 1;
public const uint GL_VERTEX_ATTRIB_ARRAY_UNIFIED_NV = 0x8F1E;
public const uint GL_ELEMENT_ARRAY_UNIFIED_NV = 0x8F1F;
public const uint GL_VERTEX_ATTRIB_ARRAY_ADDRESS_NV = 0x8F20;
public const uint GL_VERTEX_ARRAY_ADDRESS_NV = 0x8F21;
public const uint GL_NORMAL_ARRAY_ADDRESS_NV = 0x8F22;
public const uint GL_COLOR_ARRAY_ADDRESS_NV = 0x8F23;
public const uint GL_INDEX_ARRAY_ADDRESS_NV = 0x8F24;
public const uint GL_TEXTURE_COORD_ARRAY_ADDRESS_NV = 0x8F25;
public const uint GL_EDGE_FLAG_ARRAY_ADDRESS_NV = 0x8F26;
public const uint GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV = 0x8F27;
public const uint GL_FOG_COORD_ARRAY_ADDRESS_NV = 0x8F28;
public const uint GL_ELEMENT_ARRAY_ADDRESS_NV = 0x8F29;
public const uint GL_VERTEX_ATTRIB_ARRAY_LENGTH_NV = 0x8F2A;
public const uint GL_VERTEX_ARRAY_LENGTH_NV = 0x8F2B;
public const uint GL_NORMAL_ARRAY_LENGTH_NV = 0x8F2C;
public const uint GL_COLOR_ARRAY_LENGTH_NV = 0x8F2D;
public const uint GL_INDEX_ARRAY_LENGTH_NV = 0x8F2E;
public const uint GL_TEXTURE_COORD_ARRAY_LENGTH_NV = 0x8F2F;
public const uint GL_EDGE_FLAG_ARRAY_LENGTH_NV = 0x8F30;
public const uint GL_SECONDARY_COLOR_ARRAY_LENGTH_NV = 0x8F31;
public const uint GL_FOG_COORD_ARRAY_LENGTH_NV = 0x8F32;
public const uint GL_ELEMENT_ARRAY_LENGTH_NV = 0x8F33;
public const uint GL_DRAW_INDIRECT_UNIFIED_NV = 0x8F40;
public const uint GL_DRAW_INDIRECT_ADDRESS_NV = 0x8F41;
public const uint GL_DRAW_INDIRECT_LENGTH_NV = 0x8F42;
public delegate void PFNGLBUFFERADDRESSRANGENVPROC( uint pname,uint index,IntPtr address,IntPtr length);
public delegate void PFNGLCOLORFORMATNVPROC( int size,uint type,int stride);
public delegate void PFNGLEDGEFLAGFORMATNVPROC( int stride);
public delegate void PFNGLFOGCOORDFORMATNVPROC( uint type,int stride);
public delegate void PFNGLGETINTEGERUI64I_VNVPROC( uint value,uint index,IntPtr result);
public delegate void PFNGLINDEXFORMATNVPROC( uint type,int stride);
public delegate void PFNGLNORMALFORMATNVPROC( uint type,int stride);
public delegate void PFNGLSECONDARYCOLORFORMATNVPROC( int size,uint type,int stride);
public delegate void PFNGLTEXCOORDFORMATNVPROC( int size,uint type,int stride);
public delegate void PFNGLVERTEXATTRIBFORMATNVPROC( uint index,int size,uint type,bool normalized,int stride);
public delegate void PFNGLVERTEXATTRIBIFORMATNVPROC( uint index,int size,uint type,int stride);
public delegate void PFNGLVERTEXFORMATNVPROC( int size,uint type,int stride);
/* -------------------------- GL_NV_vertex_program ------------------------- */
public const uint GL_NV_vertex_program = 1;
public const uint GL_VERTEX_PROGRAM_NV = 0x8620;
public const uint GL_VERTEX_STATE_PROGRAM_NV = 0x8621;
public const uint GL_ATTRIB_ARRAY_SIZE_NV = 0x8623;
public const uint GL_ATTRIB_ARRAY_STRIDE_NV = 0x8624;
public const uint GL_ATTRIB_ARRAY_TYPE_NV = 0x8625;
public const uint GL_CURRENT_ATTRIB_NV = 0x8626;
public const uint GL_PROGRAM_LENGTH_NV = 0x8627;
public const uint GL_PROGRAM_STRING_NV = 0x8628;
public const uint GL_MODELVIEW_PROJECTION_NV = 0x8629;
public const uint GL_IDENTITY_NV = 0x862A;
public const uint GL_INVERSE_NV = 0x862B;
public const uint GL_TRANSPOSE_NV = 0x862C;
public const uint GL_INVERSE_TRANSPOSE_NV = 0x862D;
public const uint GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV = 0x862E;
public const uint GL_MAX_TRACK_MATRICES_NV = 0x862F;
public const uint GL_MATRIX0_NV = 0x8630;
public const uint GL_MATRIX1_NV = 0x8631;
public const uint GL_MATRIX2_NV = 0x8632;
public const uint GL_MATRIX3_NV = 0x8633;
public const uint GL_MATRIX4_NV = 0x8634;
public const uint GL_MATRIX5_NV = 0x8635;
public const uint GL_MATRIX6_NV = 0x8636;
public const uint GL_MATRIX7_NV = 0x8637;
public const uint GL_CURRENT_MATRIX_STACK_DEPTH_NV = 0x8640;
public const uint GL_CURRENT_MATRIX_NV = 0x8641;
public const uint GL_VERTEX_PROGRAM_POINT_SIZE_NV = 0x8642;
public const uint GL_VERTEX_PROGRAM_TWO_SIDE_NV = 0x8643;
public const uint GL_PROGRAM_PARAMETER_NV = 0x8644;
public const uint GL_ATTRIB_ARRAY_POINTER_NV = 0x8645;
public const uint GL_PROGRAM_TARGET_NV = 0x8646;
public const uint GL_PROGRAM_RESIDENT_NV = 0x8647;
public const uint GL_TRACK_MATRIX_NV = 0x8648;
public const uint GL_TRACK_MATRIX_TRANSFORM_NV = 0x8649;
public const uint GL_VERTEX_PROGRAM_BINDING_NV = 0x864A;
public const uint GL_PROGRAM_ERROR_POSITION_NV = 0x864B;
public const uint GL_VERTEX_ATTRIB_ARRAY0_NV = 0x8650;
public const uint GL_VERTEX_ATTRIB_ARRAY1_NV = 0x8651;
public const uint GL_VERTEX_ATTRIB_ARRAY2_NV = 0x8652;
public const uint GL_VERTEX_ATTRIB_ARRAY3_NV = 0x8653;
public const uint GL_VERTEX_ATTRIB_ARRAY4_NV = 0x8654;
public const uint GL_VERTEX_ATTRIB_ARRAY5_NV = 0x8655;
public const uint GL_VERTEX_ATTRIB_ARRAY6_NV = 0x8656;
public const uint GL_VERTEX_ATTRIB_ARRAY7_NV = 0x8657;
public const uint GL_VERTEX_ATTRIB_ARRAY8_NV = 0x8658;
public const uint GL_VERTEX_ATTRIB_ARRAY9_NV = 0x8659;
public const uint GL_VERTEX_ATTRIB_ARRAY10_NV = 0x865A;
public const uint GL_VERTEX_ATTRIB_ARRAY11_NV = 0x865B;
public const uint GL_VERTEX_ATTRIB_ARRAY12_NV = 0x865C;
public const uint GL_VERTEX_ATTRIB_ARRAY13_NV = 0x865D;
public const uint GL_VERTEX_ATTRIB_ARRAY14_NV = 0x865E;
public const uint GL_VERTEX_ATTRIB_ARRAY15_NV = 0x865F;
public const uint GL_MAP1_VERTEX_ATTRIB0_4_NV = 0x8660;
public const uint GL_MAP1_VERTEX_ATTRIB1_4_NV = 0x8661;
public const uint GL_MAP1_VERTEX_ATTRIB2_4_NV = 0x8662;
public const uint GL_MAP1_VERTEX_ATTRIB3_4_NV = 0x8663;
public const uint GL_MAP1_VERTEX_ATTRIB4_4_NV = 0x8664;
public const uint GL_MAP1_VERTEX_ATTRIB5_4_NV = 0x8665;
public const uint GL_MAP1_VERTEX_ATTRIB6_4_NV = 0x8666;
public const uint GL_MAP1_VERTEX_ATTRIB7_4_NV = 0x8667;
public const uint GL_MAP1_VERTEX_ATTRIB8_4_NV = 0x8668;
public const uint GL_MAP1_VERTEX_ATTRIB9_4_NV = 0x8669;
public const uint GL_MAP1_VERTEX_ATTRIB10_4_NV = 0x866A;
public const uint GL_MAP1_VERTEX_ATTRIB11_4_NV = 0x866B;
public const uint GL_MAP1_VERTEX_ATTRIB12_4_NV = 0x866C;
public const uint GL_MAP1_VERTEX_ATTRIB13_4_NV = 0x866D;
public const uint GL_MAP1_VERTEX_ATTRIB14_4_NV = 0x866E;
public const uint GL_MAP1_VERTEX_ATTRIB15_4_NV = 0x866F;
public const uint GL_MAP2_VERTEX_ATTRIB0_4_NV = 0x8670;
public const uint GL_MAP2_VERTEX_ATTRIB1_4_NV = 0x8671;
public const uint GL_MAP2_VERTEX_ATTRIB2_4_NV = 0x8672;
public const uint GL_MAP2_VERTEX_ATTRIB3_4_NV = 0x8673;
public const uint GL_MAP2_VERTEX_ATTRIB4_4_NV = 0x8674;
public const uint GL_MAP2_VERTEX_ATTRIB5_4_NV = 0x8675;
public const uint GL_MAP2_VERTEX_ATTRIB6_4_NV = 0x8676;
public const uint GL_MAP2_VERTEX_ATTRIB7_4_NV = 0x8677;
public const uint GL_MAP2_VERTEX_ATTRIB8_4_NV = 0x8678;
public const uint GL_MAP2_VERTEX_ATTRIB9_4_NV = 0x8679;
public const uint GL_MAP2_VERTEX_ATTRIB10_4_NV = 0x867A;
public const uint GL_MAP2_VERTEX_ATTRIB11_4_NV = 0x867B;
public const uint GL_MAP2_VERTEX_ATTRIB12_4_NV = 0x867C;
public const uint GL_MAP2_VERTEX_ATTRIB13_4_NV = 0x867D;
public const uint GL_MAP2_VERTEX_ATTRIB14_4_NV = 0x867E;
public const uint GL_MAP2_VERTEX_ATTRIB15_4_NV = 0x867F;
[return: System.Runtime.InteropServices.MarshalAs(System.Runtime.InteropServices.UnmanagedType.I1)]public delegate bool PFNGLAREPROGRAMSRESIDENTNVPROC( int n,uint[]  ids,IntPtr residences);
public delegate void PFNGLBINDPROGRAMNVPROC( uint target,uint id);
public delegate void PFNGLDELETEPROGRAMSNVPROC( int n,uint[]  ids);
public delegate void PFNGLEXECUTEPROGRAMNVPROC( uint target,uint id,float[]  _params);
public delegate void PFNGLGENPROGRAMSNVPROC( int n,IntPtr ids);
public delegate void PFNGLGETPROGRAMPARAMETERDVNVPROC( uint target,uint index,uint pname,IntPtr _params);
public delegate void PFNGLGETPROGRAMPARAMETERFVNVPROC( uint target,uint index,uint pname,IntPtr _params);
public delegate void PFNGLGETPROGRAMSTRINGNVPROC( uint id,uint pname,IntPtr program);
public delegate void PFNGLGETPROGRAMIVNVPROC( uint id,uint pname,IntPtr _params);
public delegate void PFNGLGETTRACKMATRIXIVNVPROC( uint target,uint address,uint pname,IntPtr _params);
public delegate void PFNGLGETVERTEXATTRIBPOINTERVNVPROC( uint index,uint pname,IntPtr pointer);
public delegate void PFNGLGETVERTEXATTRIBDVNVPROC( uint index,uint pname,IntPtr _params);
public delegate void PFNGLGETVERTEXATTRIBFVNVPROC( uint index,uint pname,IntPtr _params);
public delegate void PFNGLGETVERTEXATTRIBIVNVPROC( uint index,uint pname,IntPtr _params);
[return: System.Runtime.InteropServices.MarshalAs(System.Runtime.InteropServices.UnmanagedType.I1)]public delegate bool PFNGLISPROGRAMNVPROC( uint id);
public delegate void PFNGLLOADPROGRAMNVPROC( uint target,uint id,int len,byte[]  program);
public delegate void PFNGLPROGRAMPARAMETER4DNVPROC( uint target,uint index,double x,double y,double z,double w);
public delegate void PFNGLPROGRAMPARAMETER4DVNVPROC( uint target,uint index,double[]  _params);
public delegate void PFNGLPROGRAMPARAMETER4FNVPROC( uint target,uint index,float x,float y,float z,float w);
public delegate void PFNGLPROGRAMPARAMETER4FVNVPROC( uint target,uint index,float[]  _params);
public delegate void PFNGLPROGRAMPARAMETERS4DVNVPROC( uint target,uint index,int num,double[]  _params);
public delegate void PFNGLPROGRAMPARAMETERS4FVNVPROC( uint target,uint index,int num,float[]  _params);
public delegate void PFNGLREQUESTRESIDENTPROGRAMSNVPROC( int n,IntPtr ids);
public delegate void PFNGLTRACKMATRIXNVPROC( uint target,uint address,uint matrix,uint transform);
public delegate void PFNGLVERTEXATTRIB1DNVPROC( uint index,double x);
public delegate void PFNGLVERTEXATTRIB1DVNVPROC( uint index,double[]  v);
public delegate void PFNGLVERTEXATTRIB1FNVPROC( uint index,float x);
public delegate void PFNGLVERTEXATTRIB1FVNVPROC( uint index,float[]  v);
public delegate void PFNGLVERTEXATTRIB1SNVPROC( uint index,short x);
public delegate void PFNGLVERTEXATTRIB1SVNVPROC( uint index,short[]  v);
public delegate void PFNGLVERTEXATTRIB2DNVPROC( uint index,double x,double y);
public delegate void PFNGLVERTEXATTRIB2DVNVPROC( uint index,double[]  v);
public delegate void PFNGLVERTEXATTRIB2FNVPROC( uint index,float x,float y);
public delegate void PFNGLVERTEXATTRIB2FVNVPROC( uint index,float[]  v);
public delegate void PFNGLVERTEXATTRIB2SNVPROC( uint index,short x,short y);
public delegate void PFNGLVERTEXATTRIB2SVNVPROC( uint index,short[]  v);
public delegate void PFNGLVERTEXATTRIB3DNVPROC( uint index,double x,double y,double z);
public delegate void PFNGLVERTEXATTRIB3DVNVPROC( uint index,double[]  v);
public delegate void PFNGLVERTEXATTRIB3FNVPROC( uint index,float x,float y,float z);
public delegate void PFNGLVERTEXATTRIB3FVNVPROC( uint index,float[]  v);
public delegate void PFNGLVERTEXATTRIB3SNVPROC( uint index,short x,short y,short z);
public delegate void PFNGLVERTEXATTRIB3SVNVPROC( uint index,short[]  v);
public delegate void PFNGLVERTEXATTRIB4DNVPROC( uint index,double x,double y,double z,double w);
public delegate void PFNGLVERTEXATTRIB4DVNVPROC( uint index,double[]  v);
public delegate void PFNGLVERTEXATTRIB4FNVPROC( uint index,float x,float y,float z,float w);
public delegate void PFNGLVERTEXATTRIB4FVNVPROC( uint index,float[]  v);
public delegate void PFNGLVERTEXATTRIB4SNVPROC( uint index,short x,short y,short z,short w);
public delegate void PFNGLVERTEXATTRIB4SVNVPROC( uint index,short[]  v);
public delegate void PFNGLVERTEXATTRIB4UBNVPROC( uint index,byte x,byte y,byte z,byte w);
public delegate void PFNGLVERTEXATTRIB4UBVNVPROC( uint index,byte[]  v);
public delegate void PFNGLVERTEXATTRIBPOINTERNVPROC( uint index,int size,uint type,int stride,IntPtr  pointer);
public delegate void PFNGLVERTEXATTRIBS1DVNVPROC( uint index,int n,double[]  v);
public delegate void PFNGLVERTEXATTRIBS1FVNVPROC( uint index,int n,float[]  v);
public delegate void PFNGLVERTEXATTRIBS1SVNVPROC( uint index,int n,short[]  v);
public delegate void PFNGLVERTEXATTRIBS2DVNVPROC( uint index,int n,double[]  v);
public delegate void PFNGLVERTEXATTRIBS2FVNVPROC( uint index,int n,float[]  v);
public delegate void PFNGLVERTEXATTRIBS2SVNVPROC( uint index,int n,short[]  v);
public delegate void PFNGLVERTEXATTRIBS3DVNVPROC( uint index,int n,double[]  v);
public delegate void PFNGLVERTEXATTRIBS3FVNVPROC( uint index,int n,float[]  v);
public delegate void PFNGLVERTEXATTRIBS3SVNVPROC( uint index,int n,short[]  v);
public delegate void PFNGLVERTEXATTRIBS4DVNVPROC( uint index,int n,double[]  v);
public delegate void PFNGLVERTEXATTRIBS4FVNVPROC( uint index,int n,float[]  v);
public delegate void PFNGLVERTEXATTRIBS4SVNVPROC( uint index,int n,short[]  v);
public delegate void PFNGLVERTEXATTRIBS4UBVNVPROC( uint index,int n,byte[]  v);
/* ------------------------ GL_NV_vertex_program1_1 ------------------------ */
public const uint GL_NV_vertex_program1_1 = 1;
/* ------------------------- GL_NV_vertex_program2 ------------------------- */
public const uint GL_NV_vertex_program2 = 1;
/* ---------------------- GL_NV_vertex_program2_option --------------------- */
public const uint GL_NV_vertex_program2_option = 1;
//public const uint GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV = 0x88F4;
//public const uint GL_MAX_PROGRAM_CALL_DEPTH_NV = 0x88F5;
/* ------------------------- GL_NV_vertex_program3 ------------------------- */
public const uint GL_NV_vertex_program3 = 1;
/* ------------------------- GL_NV_vertex_program4 ------------------------- */
public const uint GL_NV_vertex_program4 = 1;
public const uint GL_VERTEX_ATTRIB_ARRAY_INTEGER_NV = 0x88FD;
/* -------------------------- GL_NV_video_capture -------------------------- */
public const uint GL_NV_video_capture = 1;
public const uint GL_VIDEO_BUFFER_NV = 0x9020;
public const uint GL_VIDEO_BUFFER_BINDING_NV = 0x9021;
public const uint GL_FIELD_UPPER_NV = 0x9022;
public const uint GL_FIELD_LOWER_NV = 0x9023;
public const uint GL_NUM_VIDEO_CAPTURE_STREAMS_NV = 0x9024;
public const uint GL_NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV = 0x9025;
public const uint GL_VIDEO_CAPTURE_TO_422_SUPPORTED_NV = 0x9026;
public const uint GL_LAST_VIDEO_CAPTURE_STATUS_NV = 0x9027;
public const uint GL_VIDEO_BUFFER_PITCH_NV = 0x9028;
public const uint GL_VIDEO_COLOR_CONVERSION_MATRIX_NV = 0x9029;
public const uint GL_VIDEO_COLOR_CONVERSION_MAX_NV = 0x902A;
public const uint GL_VIDEO_COLOR_CONVERSION_MIN_NV = 0x902B;
public const uint GL_VIDEO_COLOR_CONVERSION_OFFSET_NV = 0x902C;
public const uint GL_VIDEO_BUFFER_INTERNAL_FORMAT_NV = 0x902D;
public const uint GL_PARTIAL_SUCCESS_NV = 0x902E;
public const uint GL_SUCCESS_NV = 0x902F;
public const uint GL_FAILURE_NV = 0x9030;
public const uint GL_YCBYCR8_422_NV = 0x9031;
public const uint GL_YCBAYCR8A_4224_NV = 0x9032;
public const uint GL_Z6Y10Z6CB10Z6Y10Z6CR10_422_NV = 0x9033;
public const uint GL_Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV = 0x9034;
public const uint GL_Z4Y12Z4CB12Z4Y12Z4CR12_422_NV = 0x9035;
public const uint GL_Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV = 0x9036;
public const uint GL_Z4Y12Z4CB12Z4CR12_444_NV = 0x9037;
public const uint GL_VIDEO_CAPTURE_FRAME_WIDTH_NV = 0x9038;
public const uint GL_VIDEO_CAPTURE_FRAME_HEIGHT_NV = 0x9039;
public const uint GL_VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV = 0x903A;
public const uint GL_VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV = 0x903B;
public const uint GL_VIDEO_CAPTURE_SURFACE_ORIGIN_NV = 0x903C;
public delegate void PFNGLBEGINVIDEOCAPTURENVPROC( uint video_capture_slot);
public delegate void PFNGLBINDVIDEOCAPTURESTREAMBUFFERNVPROC( uint video_capture_slot,uint stream,uint frame_region,IntPtr offset);
public delegate void PFNGLBINDVIDEOCAPTURESTREAMTEXTURENVPROC( uint video_capture_slot,uint stream,uint frame_region,uint target,uint texture);
public delegate void PFNGLENDVIDEOCAPTURENVPROC( uint video_capture_slot);
public delegate void PFNGLGETVIDEOCAPTURESTREAMDVNVPROC( uint video_capture_slot,uint stream,uint pname,IntPtr _params);
public delegate void PFNGLGETVIDEOCAPTURESTREAMFVNVPROC( uint video_capture_slot,uint stream,uint pname,IntPtr _params);
public delegate void PFNGLGETVIDEOCAPTURESTREAMIVNVPROC( uint video_capture_slot,uint stream,uint pname,IntPtr _params);
public delegate void PFNGLGETVIDEOCAPTUREIVNVPROC( uint video_capture_slot,uint pname,IntPtr _params);
public delegate uint PFNGLVIDEOCAPTURENVPROC( uint video_capture_slot,IntPtr sequence_num,IntPtr capture_time);
public delegate void PFNGLVIDEOCAPTURESTREAMPARAMETERDVNVPROC( uint video_capture_slot,uint stream,uint pname,double[]  _params);
public delegate void PFNGLVIDEOCAPTURESTREAMPARAMETERFVNVPROC( uint video_capture_slot,uint stream,uint pname,float[]  _params);
public delegate void PFNGLVIDEOCAPTURESTREAMPARAMETERIVNVPROC( uint video_capture_slot,uint stream,uint pname,int[]  _params);
/* ------------------------ GL_OES_byte_coordinates ------------------------ */
public const uint GL_OES_byte_coordinates = 1;
//public const uint GL_BYTE = 0x1400;
/* ------------------- GL_OES_compressed_paletted_texture ------------------ */
public const uint GL_OES_compressed_paletted_texture = 1;
public const uint GL_PALETTE4_RGB8_OES = 0x8B90;
public const uint GL_PALETTE4_RGBA8_OES = 0x8B91;
public const uint GL_PALETTE4_R5_G6_B5_OES = 0x8B92;
public const uint GL_PALETTE4_RGBA4_OES = 0x8B93;
public const uint GL_PALETTE4_RGB5_A1_OES = 0x8B94;
public const uint GL_PALETTE8_RGB8_OES = 0x8B95;
public const uint GL_PALETTE8_RGBA8_OES = 0x8B96;
public const uint GL_PALETTE8_R5_G6_B5_OES = 0x8B97;
public const uint GL_PALETTE8_RGBA4_OES = 0x8B98;
public const uint GL_PALETTE8_RGB5_A1_OES = 0x8B99;
/* --------------------------- GL_OES_read_format -------------------------- */
public const uint GL_OES_read_format = 1;
public const uint GL_IMPLEMENTATION_COLOR_READ_TYPE_OES = 0x8B9A;
public const uint GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES = 0x8B9B;
/* ------------------------ GL_OES_single_precision ------------------------ */
public const uint GL_OES_single_precision = 1;
public delegate void PFNGLCLEARDEPTHFOESPROC( double depth);
public delegate void PFNGLCLIPPLANEFOESPROC( uint plane,float[]  equation);
public delegate void PFNGLDEPTHRANGEFOESPROC( float n,float f);
public delegate void PFNGLFRUSTUMFOESPROC( float l,float r,float b,float t,float n,float f);
public delegate void PFNGLGETCLIPPLANEFOESPROC( uint plane,IntPtr equation);
public delegate void PFNGLORTHOFOESPROC( float l,float r,float b,float t,float n,float f);
/* ---------------------------- GL_OML_interlace --------------------------- */
public const uint GL_OML_interlace = 1;
public const uint GL_INTERLACE_OML = 0x8980;
public const uint GL_INTERLACE_READ_OML = 0x8981;
/* ---------------------------- GL_OML_resample ---------------------------- */
public const uint GL_OML_resample = 1;
public const uint GL_PACK_RESAMPLE_OML = 0x8984;
public const uint GL_UNPACK_RESAMPLE_OML = 0x8985;
public const uint GL_RESAMPLE_REPLICATE_OML = 0x8986;
public const uint GL_RESAMPLE_ZERO_FILL_OML = 0x8987;
public const uint GL_RESAMPLE_AVERAGE_OML = 0x8988;
public const uint GL_RESAMPLE_DECIMATE_OML = 0x8989;
/* ---------------------------- GL_OML_subsample --------------------------- */
public const uint GL_OML_subsample = 1;
public const uint GL_FORMAT_SUBSAMPLE_24_24_OML = 0x8982;
public const uint GL_FORMAT_SUBSAMPLE_244_244_OML = 0x8983;
/* --------------------------- GL_PGI_misc_hints --------------------------- */
public const uint GL_PGI_misc_hints = 1;
public const uint GL_PREFER_DOUBLEBUFFER_HINT_PGI = 107000;
public const uint GL_CONSERVE_MEMORY_HINT_PGI = 107005;
public const uint GL_RECLAIM_MEMORY_HINT_PGI = 107006;
public const uint GL_NATIVE_GRAPHICS_HANDLE_PGI = 107010;
public const uint GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI = 107011;
public const uint GL_NATIVE_GRAPHICS_END_HINT_PGI = 107012;
public const uint GL_ALWAYS_FAST_HINT_PGI = 107020;
public const uint GL_ALWAYS_SOFT_HINT_PGI = 107021;
public const uint GL_ALLOW_DRAW_OBJ_HINT_PGI = 107022;
public const uint GL_ALLOW_DRAW_WIN_HINT_PGI = 107023;
public const uint GL_ALLOW_DRAW_FRG_HINT_PGI = 107024;
public const uint GL_ALLOW_DRAW_MEM_HINT_PGI = 107025;
public const uint GL_STRICT_DEPTHFUNC_HINT_PGI = 107030;
public const uint GL_STRICT_LIGHTING_HINT_PGI = 107031;
public const uint GL_STRICT_SCISSOR_HINT_PGI = 107032;
public const uint GL_FULL_STIPPLE_HINT_PGI = 107033;
public const uint GL_CLIP_NEAR_HINT_PGI = 107040;
public const uint GL_CLIP_FAR_HINT_PGI = 107041;
public const uint GL_WIDE_LINE_HINT_PGI = 107042;
public const uint GL_BACK_NORMALS_HINT_PGI = 107043;
/* -------------------------- GL_PGI_vertex_hints -------------------------- */
public const uint GL_PGI_vertex_hints = 1;
public const uint GL_VERTEX23_BIT_PGI = 0x00000004;
public const uint GL_VERTEX4_BIT_PGI = 0x00000008;
public const uint GL_COLOR3_BIT_PGI = 0x00010000;
public const uint GL_COLOR4_BIT_PGI = 0x00020000;
public const uint GL_EDGEFLAG_BIT_PGI = 0x00040000;
public const uint GL_INDEX_BIT_PGI = 0x00080000;
public const uint GL_MAT_AMBIENT_BIT_PGI = 0x00100000;
public const uint GL_VERTEX_DATA_HINT_PGI = 107050;
public const uint GL_VERTEX_CONSISTENT_HINT_PGI = 107051;
public const uint GL_MATERIAL_SIDE_HINT_PGI = 107052;
public const uint GL_MAX_VERTEX_HINT_PGI = 107053;
public const uint GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI = 0x00200000;
public const uint GL_MAT_DIFFUSE_BIT_PGI = 0x00400000;
public const uint GL_MAT_EMISSION_BIT_PGI = 0x00800000;
public const uint GL_MAT_COLOR_INDEXES_BIT_PGI = 0x01000000;
public const uint GL_MAT_SHININESS_BIT_PGI = 0x02000000;
public const uint GL_MAT_SPECULAR_BIT_PGI = 0x04000000;
public const uint GL_NORMAL_BIT_PGI = 0x08000000;
public const uint GL_TEXCOORD1_BIT_PGI = 0x10000000;
public const uint GL_TEXCOORD2_BIT_PGI = 0x20000000;
public const uint GL_TEXCOORD3_BIT_PGI = 0x40000000;
public const uint GL_TEXCOORD4_BIT_PGI = 0x80000000;
/* ----------------------- GL_REND_screen_coordinates ---------------------- */
public const uint GL_REND_screen_coordinates = 1;
public const uint GL_SCREEN_COORDINATES_REND = 0x8490;
public const uint GL_INVERTED_SCREEN_W_REND = 0x8491;
/* ------------------------------- GL_S3_s3tc ------------------------------ */
public const uint GL_S3_s3tc = 1;
public const uint GL_RGB_S3TC = 0x83A0;
public const uint GL_RGB4_S3TC = 0x83A1;
public const uint GL_RGBA_S3TC = 0x83A2;
public const uint GL_RGBA4_S3TC = 0x83A3;
public const uint GL_RGBA_DXT5_S3TC = 0x83A4;
public const uint GL_RGBA4_DXT5_S3TC = 0x83A5;
/* -------------------------- GL_SGIS_color_range -------------------------- */
public const uint GL_SGIS_color_range = 1;
public const uint GL_EXTENDED_RANGE_SGIS = 0x85A5;
public const uint GL_MIN_RED_SGIS = 0x85A6;
public const uint GL_MAX_RED_SGIS = 0x85A7;
public const uint GL_MIN_GREEN_SGIS = 0x85A8;
public const uint GL_MAX_GREEN_SGIS = 0x85A9;
public const uint GL_MIN_BLUE_SGIS = 0x85AA;
public const uint GL_MAX_BLUE_SGIS = 0x85AB;
public const uint GL_MIN_ALPHA_SGIS = 0x85AC;
public const uint GL_MAX_ALPHA_SGIS = 0x85AD;
/* ------------------------- GL_SGIS_detail_texture ------------------------ */
public const uint GL_SGIS_detail_texture = 1;
public delegate void PFNGLDETAILTEXFUNCSGISPROC( uint target,int n,float[]  points);
public delegate void PFNGLGETDETAILTEXFUNCSGISPROC( uint target,IntPtr points);
/* -------------------------- GL_SGIS_fog_function ------------------------- */
public const uint GL_SGIS_fog_function = 1;
public delegate void PFNGLFOGFUNCSGISPROC( int n,float[]  points);
public delegate void PFNGLGETFOGFUNCSGISPROC( IntPtr points);
/* ------------------------ GL_SGIS_generate_mipmap ------------------------ */
public const uint GL_SGIS_generate_mipmap = 1;
public const uint GL_GENERATE_MIPMAP_SGIS = 0x8191;
public const uint GL_GENERATE_MIPMAP_HINT_SGIS = 0x8192;
/* -------------------------- GL_SGIS_multisample -------------------------- */
public const uint GL_SGIS_multisample = 1;
public const uint GL_MULTISAMPLE_SGIS = 0x809D;
public const uint GL_SAMPLE_ALPHA_TO_MASK_SGIS = 0x809E;
public const uint GL_SAMPLE_ALPHA_TO_ONE_SGIS = 0x809F;
public const uint GL_SAMPLE_MASK_SGIS = 0x80A0;
public const uint GL_1PASS_SGIS = 0x80A1;
public const uint GL_2PASS_0_SGIS = 0x80A2;
public const uint GL_2PASS_1_SGIS = 0x80A3;
public const uint GL_4PASS_0_SGIS = 0x80A4;
public const uint GL_4PASS_1_SGIS = 0x80A5;
public const uint GL_4PASS_2_SGIS = 0x80A6;
public const uint GL_4PASS_3_SGIS = 0x80A7;
public const uint GL_SAMPLE_BUFFERS_SGIS = 0x80A8;
public const uint GL_SAMPLES_SGIS = 0x80A9;
public const uint GL_SAMPLE_MASK_VALUE_SGIS = 0x80AA;
public const uint GL_SAMPLE_MASK_INVERT_SGIS = 0x80AB;
public const uint GL_SAMPLE_PATTERN_SGIS = 0x80AC;
//public const uint GL_MULTISAMPLE_BIT_EXT = 0x20000000;
public delegate void PFNGLSAMPLEMASKSGISPROC( float value,bool invert);
public delegate void PFNGLSAMPLEPATTERNSGISPROC( uint pattern);
/* ------------------------- GL_SGIS_pixel_texture ------------------------- */
public const uint GL_SGIS_pixel_texture = 1;
/* ----------------------- GL_SGIS_point_line_texgen ----------------------- */
public const uint GL_SGIS_point_line_texgen = 1;
public const uint GL_EYE_DISTANCE_TO_POINT_SGIS = 0x81F0;
public const uint GL_OBJECT_DISTANCE_TO_POINT_SGIS = 0x81F1;
public const uint GL_EYE_DISTANCE_TO_LINE_SGIS = 0x81F2;
public const uint GL_OBJECT_DISTANCE_TO_LINE_SGIS = 0x81F3;
public const uint GL_EYE_POINT_SGIS = 0x81F4;
public const uint GL_OBJECT_POINT_SGIS = 0x81F5;
public const uint GL_EYE_LINE_SGIS = 0x81F6;
public const uint GL_OBJECT_LINE_SGIS = 0x81F7;
/* ------------------------ GL_SGIS_sharpen_texture ------------------------ */
public const uint GL_SGIS_sharpen_texture = 1;
public delegate void PFNGLGETSHARPENTEXFUNCSGISPROC( uint target,IntPtr points);
public delegate void PFNGLSHARPENTEXFUNCSGISPROC( uint target,int n,float[]  points);
/* --------------------------- GL_SGIS_texture4D --------------------------- */
public const uint GL_SGIS_texture4D = 1;
public delegate void PFNGLTEXIMAGE4DSGISPROC( uint target,int level,uint internalformat,int width,int height,int depth,int extent,int border,uint format,uint type,IntPtr  pixels);
public delegate void PFNGLTEXSUBIMAGE4DSGISPROC( uint target,int level,int xoffset,int yoffset,int zoffset,int woffset,int width,int height,int depth,int extent,uint format,uint type,IntPtr  pixels);
/* ---------------------- GL_SGIS_texture_border_clamp --------------------- */
public const uint GL_SGIS_texture_border_clamp = 1;
public const uint GL_CLAMP_TO_BORDER_SGIS = 0x812D;
/* ----------------------- GL_SGIS_texture_edge_clamp ---------------------- */
public const uint GL_SGIS_texture_edge_clamp = 1;
public const uint GL_CLAMP_TO_EDGE_SGIS = 0x812F;
/* ------------------------ GL_SGIS_texture_filter4 ------------------------ */
public const uint GL_SGIS_texture_filter4 = 1;
public delegate void PFNGLGETTEXFILTERFUNCSGISPROC( uint target,uint filter,IntPtr weights);
public delegate void PFNGLTEXFILTERFUNCSGISPROC( uint target,uint filter,int n,float[]  weights);
/* -------------------------- GL_SGIS_texture_lod -------------------------- */
public const uint GL_SGIS_texture_lod = 1;
public const uint GL_TEXTURE_MIN_LOD_SGIS = 0x813A;
public const uint GL_TEXTURE_MAX_LOD_SGIS = 0x813B;
public const uint GL_TEXTURE_BASE_LEVEL_SGIS = 0x813C;
public const uint GL_TEXTURE_MAX_LEVEL_SGIS = 0x813D;
/* ------------------------- GL_SGIS_texture_select ------------------------ */
public const uint GL_SGIS_texture_select = 1;
/* ----------------------------- GL_SGIX_async ----------------------------- */
public const uint GL_SGIX_async = 1;
public const uint GL_ASYNC_MARKER_SGIX = 0x8329;
public delegate void PFNGLASYNCMARKERSGIXPROC( uint marker);
public delegate void PFNGLDELETEASYNCMARKERSSGIXPROC( uint marker,int range);
public delegate int PFNGLFINISHASYNCSGIXPROC( IntPtr markerp);
public delegate uint PFNGLGENASYNCMARKERSSGIXPROC( int range);
[return: System.Runtime.InteropServices.MarshalAs(System.Runtime.InteropServices.UnmanagedType.I1)]public delegate bool PFNGLISASYNCMARKERSGIXPROC( uint marker);
public delegate int PFNGLPOLLASYNCSGIXPROC( IntPtr markerp);
/* ------------------------ GL_SGIX_async_histogram ------------------------ */
public const uint GL_SGIX_async_histogram = 1;
public const uint GL_ASYNC_HISTOGRAM_SGIX = 0x832C;
public const uint GL_MAX_ASYNC_HISTOGRAM_SGIX = 0x832D;
/* -------------------------- GL_SGIX_async_pixel -------------------------- */
public const uint GL_SGIX_async_pixel = 1;
public const uint GL_ASYNC_TEX_IMAGE_SGIX = 0x835C;
public const uint GL_ASYNC_DRAW_PIXELS_SGIX = 0x835D;
public const uint GL_ASYNC_READ_PIXELS_SGIX = 0x835E;
public const uint GL_MAX_ASYNC_TEX_IMAGE_SGIX = 0x835F;
public const uint GL_MAX_ASYNC_DRAW_PIXELS_SGIX = 0x8360;
public const uint GL_MAX_ASYNC_READ_PIXELS_SGIX = 0x8361;
/* ----------------------- GL_SGIX_blend_alpha_minmax ---------------------- */
public const uint GL_SGIX_blend_alpha_minmax = 1;
public const uint GL_ALPHA_MIN_SGIX = 0x8320;
public const uint GL_ALPHA_MAX_SGIX = 0x8321;
/* ---------------------------- GL_SGIX_clipmap ---------------------------- */
public const uint GL_SGIX_clipmap = 1;
/* ---------------------- GL_SGIX_convolution_accuracy --------------------- */
public const uint GL_SGIX_convolution_accuracy = 1;
public const uint GL_CONVOLUTION_HINT_SGIX = 0x8316;
/* ------------------------- GL_SGIX_depth_texture ------------------------- */
public const uint GL_SGIX_depth_texture = 1;
public const uint GL_DEPTH_COMPONENT16_SGIX = 0x81A5;
public const uint GL_DEPTH_COMPONENT24_SGIX = 0x81A6;
public const uint GL_DEPTH_COMPONENT32_SGIX = 0x81A7;
/* -------------------------- GL_SGIX_flush_raster ------------------------- */
public const uint GL_SGIX_flush_raster = 1;
public delegate void PFNGLFLUSHRASTERSGIXPROC( );
/* --------------------------- GL_SGIX_fog_offset -------------------------- */
public const uint GL_SGIX_fog_offset = 1;
public const uint GL_FOG_OFFSET_SGIX = 0x8198;
public const uint GL_FOG_OFFSET_VALUE_SGIX = 0x8199;
/* -------------------------- GL_SGIX_fog_texture -------------------------- */
public const uint GL_SGIX_fog_texture = 1;
public const uint GL_TEXTURE_FOG_SGIX = 0;
public const uint GL_FOG_PATCHY_FACTOR_SGIX = 0;
public const uint GL_FRAGMENT_FOG_SGIX = 0;
public delegate void PFNGLTEXTUREFOGSGIXPROC( uint pname);
/* ------------------- GL_SGIX_fragment_specular_lighting ------------------ */
public const uint GL_SGIX_fragment_specular_lighting = 1;
public delegate void PFNGLFRAGMENTCOLORMATERIALSGIXPROC( uint face,uint mode);
public delegate void PFNGLFRAGMENTLIGHTMODELFSGIXPROC( uint pname,float param);
public delegate void PFNGLFRAGMENTLIGHTMODELFVSGIXPROC( uint pname,IntPtr _params);
public delegate void PFNGLFRAGMENTLIGHTMODELISGIXPROC( uint pname,int param);
public delegate void PFNGLFRAGMENTLIGHTMODELIVSGIXPROC( uint pname,IntPtr _params);
public delegate void PFNGLFRAGMENTLIGHTFSGIXPROC( uint light,uint pname,float param);
public delegate void PFNGLFRAGMENTLIGHTFVSGIXPROC( uint light,uint pname,IntPtr _params);
public delegate void PFNGLFRAGMENTLIGHTISGIXPROC( uint light,uint pname,int param);
public delegate void PFNGLFRAGMENTLIGHTIVSGIXPROC( uint light,uint pname,IntPtr _params);
public delegate void PFNGLFRAGMENTMATERIALFSGIXPROC( uint face,uint pname,float[] param);
public delegate void PFNGLFRAGMENTMATERIALFVSGIXPROC( uint face,uint pname,float[]  _params);
public delegate void PFNGLFRAGMENTMATERIALISGIXPROC( uint face,uint pname,int[] param);
public delegate void PFNGLFRAGMENTMATERIALIVSGIXPROC( uint face,uint pname,int[]  _params);
public delegate void PFNGLGETFRAGMENTLIGHTFVSGIXPROC( uint light,uint value,IntPtr data);
public delegate void PFNGLGETFRAGMENTLIGHTIVSGIXPROC( uint light,uint value,IntPtr data);
public delegate void PFNGLGETFRAGMENTMATERIALFVSGIXPROC( uint face,uint pname,float[]  data);
public delegate void PFNGLGETFRAGMENTMATERIALIVSGIXPROC( uint face,uint pname,int[]  data);
/* --------------------------- GL_SGIX_framezoom --------------------------- */
public const uint GL_SGIX_framezoom = 1;
public delegate void PFNGLFRAMEZOOMSGIXPROC( int factor);
/* --------------------------- GL_SGIX_interlace --------------------------- */
public const uint GL_SGIX_interlace = 1;
public const uint GL_INTERLACE_SGIX = 0x8094;
/* ------------------------- GL_SGIX_ir_instrument1 ------------------------ */
public const uint GL_SGIX_ir_instrument1 = 1;
/* ------------------------- GL_SGIX_list_priority ------------------------- */
public const uint GL_SGIX_list_priority = 1;
/* ------------------------- GL_SGIX_pixel_texture ------------------------- */
public const uint GL_SGIX_pixel_texture = 1;
public delegate void PFNGLPIXELTEXGENSGIXPROC( uint mode);
/* ----------------------- GL_SGIX_pixel_texture_bits ---------------------- */
public const uint GL_SGIX_pixel_texture_bits = 1;
/* ------------------------ GL_SGIX_reference_plane ------------------------ */
public const uint GL_SGIX_reference_plane = 1;
public delegate void PFNGLREFERENCEPLANESGIXPROC( double[]  equation);
/* ---------------------------- GL_SGIX_resample --------------------------- */
public const uint GL_SGIX_resample = 1;
public const uint GL_PACK_RESAMPLE_SGIX = 0x842E;
public const uint GL_UNPACK_RESAMPLE_SGIX = 0x842F;
public const uint GL_RESAMPLE_DECIMATE_SGIX = 0x8430;
public const uint GL_RESAMPLE_REPLICATE_SGIX = 0x8433;
public const uint GL_RESAMPLE_ZERO_FILL_SGIX = 0x8434;
/* ----------------------------- GL_SGIX_shadow ---------------------------- */
public const uint GL_SGIX_shadow = 1;
public const uint GL_TEXTURE_COMPARE_SGIX = 0x819A;
public const uint GL_TEXTURE_COMPARE_OPERATOR_SGIX = 0x819B;
public const uint GL_TEXTURE_LEQUAL_R_SGIX = 0x819C;
public const uint GL_TEXTURE_GEQUAL_R_SGIX = 0x819D;
/* ------------------------- GL_SGIX_shadow_ambient ------------------------ */
public const uint GL_SGIX_shadow_ambient = 1;
public const uint GL_SHADOW_AMBIENT_SGIX = 0x80BF;
/* ----------------------------- GL_SGIX_sprite ---------------------------- */
public const uint GL_SGIX_sprite = 1;
public delegate void PFNGLSPRITEPARAMETERFSGIXPROC( uint pname,float param);
public delegate void PFNGLSPRITEPARAMETERFVSGIXPROC( uint pname,IntPtr _params);
public delegate void PFNGLSPRITEPARAMETERISGIXPROC( uint pname,int param);
public delegate void PFNGLSPRITEPARAMETERIVSGIXPROC( uint pname,IntPtr _params);
/* ----------------------- GL_SGIX_tag_sample_buffer ----------------------- */
public const uint GL_SGIX_tag_sample_buffer = 1;
public delegate void PFNGLTAGSAMPLEBUFFERSGIXPROC( );
/* ------------------------ GL_SGIX_texture_add_env ------------------------ */
public const uint GL_SGIX_texture_add_env = 1;
/* -------------------- GL_SGIX_texture_coordinate_clamp ------------------- */
public const uint GL_SGIX_texture_coordinate_clamp = 1;
public const uint GL_TEXTURE_MAX_CLAMP_S_SGIX = 0x8369;
public const uint GL_TEXTURE_MAX_CLAMP_T_SGIX = 0x836A;
public const uint GL_TEXTURE_MAX_CLAMP_R_SGIX = 0x836B;
/* ------------------------ GL_SGIX_texture_lod_bias ----------------------- */
public const uint GL_SGIX_texture_lod_bias = 1;
/* ---------------------- GL_SGIX_texture_multi_buffer --------------------- */
public const uint GL_SGIX_texture_multi_buffer = 1;
public const uint GL_TEXTURE_MULTI_BUFFER_HINT_SGIX = 0x812E;
/* ------------------------- GL_SGIX_texture_range ------------------------- */
public const uint GL_SGIX_texture_range = 1;
public const uint GL_RGB_SIGNED_SGIX = 0x85E0;
public const uint GL_RGBA_SIGNED_SGIX = 0x85E1;
public const uint GL_ALPHA_SIGNED_SGIX = 0x85E2;
public const uint GL_LUMINANCE_SIGNED_SGIX = 0x85E3;
public const uint GL_INTENSITY_SIGNED_SGIX = 0x85E4;
public const uint GL_LUMINANCE_ALPHA_SIGNED_SGIX = 0x85E5;
public const uint GL_RGB16_SIGNED_SGIX = 0x85E6;
public const uint GL_RGBA16_SIGNED_SGIX = 0x85E7;
public const uint GL_ALPHA16_SIGNED_SGIX = 0x85E8;
public const uint GL_LUMINANCE16_SIGNED_SGIX = 0x85E9;
public const uint GL_INTENSITY16_SIGNED_SGIX = 0x85EA;
public const uint GL_LUMINANCE16_ALPHA16_SIGNED_SGIX = 0x85EB;
public const uint GL_RGB_EXTENDED_RANGE_SGIX = 0x85EC;
public const uint GL_RGBA_EXTENDED_RANGE_SGIX = 0x85ED;
public const uint GL_ALPHA_EXTENDED_RANGE_SGIX = 0x85EE;
public const uint GL_LUMINANCE_EXTENDED_RANGE_SGIX = 0x85EF;
public const uint GL_INTENSITY_EXTENDED_RANGE_SGIX = 0x85F0;
public const uint GL_LUMINANCE_ALPHA_EXTENDED_RANGE_SGIX = 0x85F1;
public const uint GL_RGB16_EXTENDED_RANGE_SGIX = 0x85F2;
public const uint GL_RGBA16_EXTENDED_RANGE_SGIX = 0x85F3;
public const uint GL_ALPHA16_EXTENDED_RANGE_SGIX = 0x85F4;
public const uint GL_LUMINANCE16_EXTENDED_RANGE_SGIX = 0x85F5;
public const uint GL_INTENSITY16_EXTENDED_RANGE_SGIX = 0x85F6;
public const uint GL_LUMINANCE16_ALPHA16_EXTENDED_RANGE_SGIX = 0x85F7;
public const uint GL_MIN_LUMINANCE_SGIS = 0x85F8;
public const uint GL_MAX_LUMINANCE_SGIS = 0x85F9;
public const uint GL_MIN_INTENSITY_SGIS = 0x85FA;
public const uint GL_MAX_INTENSITY_SGIS = 0x85FB;
/* ----------------------- GL_SGIX_texture_scale_bias ---------------------- */
public const uint GL_SGIX_texture_scale_bias = 1;
public const uint GL_POST_TEXTURE_FILTER_BIAS_SGIX = 0x8179;
public const uint GL_POST_TEXTURE_FILTER_SCALE_SGIX = 0x817A;
public const uint GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX = 0x817B;
public const uint GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX = 0x817C;
/* ------------------------- GL_SGIX_vertex_preclip ------------------------ */
public const uint GL_SGIX_vertex_preclip = 1;
public const uint GL_VERTEX_PRECLIP_SGIX = 0x83EE;
public const uint GL_VERTEX_PRECLIP_HINT_SGIX = 0x83EF;
/* ---------------------- GL_SGIX_vertex_preclip_hint ---------------------- */
public const uint GL_SGIX_vertex_preclip_hint = 1;
//public const uint GL_VERTEX_PRECLIP_SGIX = 0x83EE;
//public const uint GL_VERTEX_PRECLIP_HINT_SGIX = 0x83EF;
/* ----------------------------- GL_SGIX_ycrcb ----------------------------- */
public const uint GL_SGIX_ycrcb = 1;
/* -------------------------- GL_SGI_color_matrix -------------------------- */
public const uint GL_SGI_color_matrix = 1;
public const uint GL_COLOR_MATRIX_SGI = 0x80B1;
public const uint GL_COLOR_MATRIX_STACK_DEPTH_SGI = 0x80B2;
public const uint GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI = 0x80B3;
public const uint GL_POST_COLOR_MATRIX_RED_SCALE_SGI = 0x80B4;
public const uint GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI = 0x80B5;
public const uint GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI = 0x80B6;
public const uint GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI = 0x80B7;
public const uint GL_POST_COLOR_MATRIX_RED_BIAS_SGI = 0x80B8;
public const uint GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI = 0x80B9;
public const uint GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI = 0x80BA;
public const uint GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI = 0x80BB;
/* --------------------------- GL_SGI_color_table -------------------------- */
public const uint GL_SGI_color_table = 1;
public const uint GL_COLOR_TABLE_SGI = 0x80D0;
public const uint GL_POST_CONVOLUTION_COLOR_TABLE_SGI = 0x80D1;
public const uint GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI = 0x80D2;
public const uint GL_PROXY_COLOR_TABLE_SGI = 0x80D3;
public const uint GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI = 0x80D4;
public const uint GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI = 0x80D5;
public const uint GL_COLOR_TABLE_SCALE_SGI = 0x80D6;
public const uint GL_COLOR_TABLE_BIAS_SGI = 0x80D7;
public const uint GL_COLOR_TABLE_FORMAT_SGI = 0x80D8;
public const uint GL_COLOR_TABLE_WIDTH_SGI = 0x80D9;
public const uint GL_COLOR_TABLE_RED_SIZE_SGI = 0x80DA;
public const uint GL_COLOR_TABLE_GREEN_SIZE_SGI = 0x80DB;
public const uint GL_COLOR_TABLE_BLUE_SIZE_SGI = 0x80DC;
public const uint GL_COLOR_TABLE_ALPHA_SIZE_SGI = 0x80DD;
public const uint GL_COLOR_TABLE_LUMINANCE_SIZE_SGI = 0x80DE;
public const uint GL_COLOR_TABLE_INTENSITY_SIZE_SGI = 0x80DF;
public delegate void PFNGLCOLORTABLEPARAMETERFVSGIPROC( uint target,uint pname,float[]  _params);
public delegate void PFNGLCOLORTABLEPARAMETERIVSGIPROC( uint target,uint pname,int[]  _params);
public delegate void PFNGLCOLORTABLESGIPROC( uint target,uint internalformat,int width,uint format,uint type,IntPtr  table);
public delegate void PFNGLCOPYCOLORTABLESGIPROC( uint target,uint internalformat,int x,int y,int width);
public delegate void PFNGLGETCOLORTABLEPARAMETERFVSGIPROC( uint target,uint pname,IntPtr _params);
public delegate void PFNGLGETCOLORTABLEPARAMETERIVSGIPROC( uint target,uint pname,IntPtr _params);
public delegate void PFNGLGETCOLORTABLESGIPROC( uint target,uint format,uint type,IntPtr table);
/* ----------------------- GL_SGI_texture_color_table ---------------------- */
public const uint GL_SGI_texture_color_table = 1;
public const uint GL_TEXTURE_COLOR_TABLE_SGI = 0x80BC;
public const uint GL_PROXY_TEXTURE_COLOR_TABLE_SGI = 0x80BD;
/* ------------------------- GL_SUNX_constant_data ------------------------- */
public const uint GL_SUNX_constant_data = 1;
public const uint GL_UNPACK_CONSTANT_DATA_SUNX = 0x81D5;
public const uint GL_TEXTURE_CONSTANT_DATA_SUNX = 0x81D6;
public delegate void PFNGLFINISHTEXTURESUNXPROC( );
/* -------------------- GL_SUN_convolution_border_modes -------------------- */
public const uint GL_SUN_convolution_border_modes = 1;
public const uint GL_WRAP_BORDER_SUN = 0x81D4;
/* -------------------------- GL_SUN_global_alpha -------------------------- */
public const uint GL_SUN_global_alpha = 1;
public const uint GL_GLOBAL_ALPHA_SUN = 0x81D9;
public const uint GL_GLOBAL_ALPHA_FACTOR_SUN = 0x81DA;
public delegate void PFNGLGLOBALALPHAFACTORBSUNPROC( sbyte factor);
public delegate void PFNGLGLOBALALPHAFACTORDSUNPROC( double factor);
public delegate void PFNGLGLOBALALPHAFACTORFSUNPROC( float factor);
public delegate void PFNGLGLOBALALPHAFACTORISUNPROC( int factor);
public delegate void PFNGLGLOBALALPHAFACTORSSUNPROC( short factor);
public delegate void PFNGLGLOBALALPHAFACTORUBSUNPROC( byte factor);
public delegate void PFNGLGLOBALALPHAFACTORUISUNPROC( uint factor);
public delegate void PFNGLGLOBALALPHAFACTORUSSUNPROC( ushort factor);
/* --------------------------- GL_SUN_mesh_array --------------------------- */
public const uint GL_SUN_mesh_array = 1;
public const uint GL_QUAD_MESH_SUN = 0x8614;
public const uint GL_TRIANGLE_MESH_SUN = 0x8615;
/* ------------------------ GL_SUN_read_video_pixels ----------------------- */
public const uint GL_SUN_read_video_pixels = 1;
public delegate void PFNGLREADVIDEOPIXELSSUNPROC( int x,int y,int width,int height,uint format,uint type,IntPtr pixels);
/* --------------------------- GL_SUN_slice_accum -------------------------- */
public const uint GL_SUN_slice_accum = 1;
public const uint GL_SLICE_ACCUM_SUN = 0x85CC;
/* -------------------------- GL_SUN_triangle_list ------------------------- */
public const uint GL_SUN_triangle_list = 1;
public const uint GL_RESTART_SUN = 0x01;
public const uint GL_REPLACE_MIDDLE_SUN = 0x02;
public const uint GL_REPLACE_OLDEST_SUN = 0x03;
public const uint GL_TRIANGLE_LIST_SUN = 0x81D7;
public const uint GL_REPLACEMENT_CODE_SUN = 0x81D8;
public const uint GL_REPLACEMENT_CODE_ARRAY_SUN = 0x85C0;
public const uint GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN = 0x85C1;
public const uint GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN = 0x85C2;
public const uint GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN = 0x85C3;
public const uint GL_R1UI_V3F_SUN = 0x85C4;
public const uint GL_R1UI_C4UB_V3F_SUN = 0x85C5;
public const uint GL_R1UI_C3F_V3F_SUN = 0x85C6;
public const uint GL_R1UI_N3F_V3F_SUN = 0x85C7;
public const uint GL_R1UI_C4F_N3F_V3F_SUN = 0x85C8;
public const uint GL_R1UI_T2F_V3F_SUN = 0x85C9;
public const uint GL_R1UI_T2F_N3F_V3F_SUN = 0x85CA;
public const uint GL_R1UI_T2F_C4F_N3F_V3F_SUN = 0x85CB;
public delegate void PFNGLREPLACEMENTCODEPOINTERSUNPROC( uint type,int stride,IntPtr  pointer);
public delegate void PFNGLREPLACEMENTCODEUBSUNPROC( byte code);
public delegate void PFNGLREPLACEMENTCODEUBVSUNPROC( byte[]  code);
public delegate void PFNGLREPLACEMENTCODEUISUNPROC( uint code);
public delegate void PFNGLREPLACEMENTCODEUIVSUNPROC( uint[]  code);
public delegate void PFNGLREPLACEMENTCODEUSSUNPROC( ushort code);
public delegate void PFNGLREPLACEMENTCODEUSVSUNPROC( ushort[]  code);
/* ----------------------------- GL_SUN_vertex ----------------------------- */
public const uint GL_SUN_vertex = 1;
public delegate void PFNGLCOLOR3FVERTEX3FSUNPROC( float r,float g,float b,float x,float y,float z);
public delegate void PFNGLCOLOR3FVERTEX3FVSUNPROC( float[]  c,float[] v);
public delegate void PFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC( float r,float g,float b,float a,float nx,float ny,float nz,float x,float y,float z);
public delegate void PFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC( float[]  c,float[] n,float[] v);
public delegate void PFNGLCOLOR4UBVERTEX2FSUNPROC( byte r,byte g,byte b,byte a,float x,float y);
public delegate void PFNGLCOLOR4UBVERTEX2FVSUNPROC( byte[]  c,float[] v);
public delegate void PFNGLCOLOR4UBVERTEX3FSUNPROC( byte r,byte g,byte b,byte a,float x,float y,float z);
public delegate void PFNGLCOLOR4UBVERTEX3FVSUNPROC( byte[]  c,float[] v);
public delegate void PFNGLNORMAL3FVERTEX3FSUNPROC( float nx,float ny,float nz,float x,float y,float z);
public delegate void PFNGLNORMAL3FVERTEX3FVSUNPROC( float[]  n,float[] v);
public delegate void PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC( uint rc,float r,float g,float b,float x,float y,float z);
public delegate void PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC( uint[]  rc,float[] c,float[] v);
public delegate void PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC( uint rc,float r,float g,float b,float a,float nx,float ny,float nz,float x,float y,float z);
public delegate void PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC( uint[]  rc,float[] c,float[] n,float[] v);
public delegate void PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC( uint rc,byte r,byte g,byte b,byte a,float x,float y,float z);
public delegate void PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC( uint[]  rc,byte[] c,float[] v);
public delegate void PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC( uint rc,float nx,float ny,float nz,float x,float y,float z);
public delegate void PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC( uint[]  rc,float[] n,float[] v);
public delegate void PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC( uint rc,float s,float t,float r,float g,float b,float a,float nx,float ny,float nz,float x,float y,float z);
public delegate void PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC( uint[]  rc,float[] tc,float[] c,float[] n,float[] v);
public delegate void PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC( uint rc,float s,float t,float nx,float ny,float nz,float x,float y,float z);
public delegate void PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC( uint[]  rc,float[] tc,float[] n,float[] v);
public delegate void PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC( uint rc,float s,float t,float x,float y,float z);
public delegate void PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC( uint[]  rc,float[] tc,float[] v);
public delegate void PFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC( uint rc,float x,float y,float z);
public delegate void PFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC( uint[]  rc,float[] v);
public delegate void PFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC( float s,float t,float r,float g,float b,float x,float y,float z);
public delegate void PFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC( float[]  tc,float[] c,float[] v);
public delegate void PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC( float s,float t,float r,float g,float b,float a,float nx,float ny,float nz,float x,float y,float z);
public delegate void PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC( float[]  tc,float[] c,float[] n,float[] v);
public delegate void PFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC( float s,float t,byte r,byte g,byte b,byte a,float x,float y,float z);
public delegate void PFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC( float[]  tc,byte[] c,float[] v);
public delegate void PFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC( float s,float t,float nx,float ny,float nz,float x,float y,float z);
public delegate void PFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC( float[]  tc,float[] n,float[] v);
public delegate void PFNGLTEXCOORD2FVERTEX3FSUNPROC( float s,float t,float x,float y,float z);
public delegate void PFNGLTEXCOORD2FVERTEX3FVSUNPROC( float[]  tc,float[] v);
public delegate void PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC( float s,float t,float p,float q,float r,float g,float b,float a,float nx,float ny,float nz,float x,float y,float z,float w);
public delegate void PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC( float[]  tc,float[] c,float[] n,float[] v);
public delegate void PFNGLTEXCOORD4FVERTEX4FSUNPROC( float s,float t,float p,float q,float x,float y,float z,float w);
public delegate void PFNGLTEXCOORD4FVERTEX4FVSUNPROC( float[]  tc,float[] v);
/* -------------------------- GL_WIN_phong_shading ------------------------- */
public const uint GL_WIN_phong_shading = 1;
public const uint GL_PHONG_WIN = 0x80EA;
public const uint GL_PHONG_HINT_WIN = 0x80EB;
/* -------------------------- GL_WIN_specular_fog -------------------------- */
public const uint GL_WIN_specular_fog = 1;
public const uint GL_FOG_SPECULAR_TEXTURE_WIN = 0x80EC;
/* ---------------------------- GL_WIN_swap_hint --------------------------- */
public const uint GL_WIN_swap_hint = 1;
public delegate void PFNGLADDSWAPHINTRECTWINPROC( int x,int y,int width,int height);
/* ------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------- */
/* error codes */
/* string codes */
/* API */
/* #undef GLEWAPI */
public static void glCopyTexSubImage3D ( uint target,int level,int xoffset,int yoffset,int zoffset,int x,int y,int width,int height ){if (__glCopyTexSubImage3D!=null) __glCopyTexSubImage3D(target,level,xoffset,yoffset,zoffset,x,y,width,height);else throw new NotImplementedException("glCopyTexSubImage3D");}
public static void glDrawRangeElements ( uint mode,uint start,uint end,int count,uint type,IntPtr indices ){if (__glDrawRangeElements!=null) __glDrawRangeElements(mode,start,end,count,type,indices);else throw new NotImplementedException("glDrawRangeElements");}
public static void glTexImage3D ( uint target,int level,int internalFormat,int width,int height,int depth,int border,uint format,uint type,IntPtr pixels ){if (__glTexImage3D!=null) __glTexImage3D(target,level,internalFormat,width,height,depth,border,format,type,pixels);else throw new NotImplementedException("glTexImage3D");}
public static void glTexSubImage3D ( uint target,int level,int xoffset,int yoffset,int zoffset,int width,int height,int depth,uint format,uint type,IntPtr pixels ){if (__glTexSubImage3D!=null) __glTexSubImage3D(target,level,xoffset,yoffset,zoffset,width,height,depth,format,type,pixels);else throw new NotImplementedException("glTexSubImage3D");}
public static void glActiveTexture ( uint texture ){if (__glActiveTexture!=null) __glActiveTexture(texture);else throw new NotImplementedException("glActiveTexture");}
public static void glClientActiveTexture ( uint texture ){if (__glClientActiveTexture!=null) __glClientActiveTexture(texture);else throw new NotImplementedException("glClientActiveTexture");}
public static void glCompressedTexImage1D ( uint target,int level,uint internalformat,int width,int border,int imageSize,IntPtr data ){if (__glCompressedTexImage1D!=null) __glCompressedTexImage1D(target,level,internalformat,width,border,imageSize,data);else throw new NotImplementedException("glCompressedTexImage1D");}
public static void glCompressedTexImage2D ( uint target,int level,uint internalformat,int width,int height,int border,int imageSize,IntPtr data ){if (__glCompressedTexImage2D!=null) __glCompressedTexImage2D(target,level,internalformat,width,height,border,imageSize,data);else throw new NotImplementedException("glCompressedTexImage2D");}
public static void glCompressedTexImage3D ( uint target,int level,uint internalformat,int width,int height,int depth,int border,int imageSize,IntPtr data ){if (__glCompressedTexImage3D!=null) __glCompressedTexImage3D(target,level,internalformat,width,height,depth,border,imageSize,data);else throw new NotImplementedException("glCompressedTexImage3D");}
public static void glCompressedTexSubImage1D ( uint target,int level,int xoffset,int width,uint format,int imageSize,IntPtr data ){if (__glCompressedTexSubImage1D!=null) __glCompressedTexSubImage1D(target,level,xoffset,width,format,imageSize,data);else throw new NotImplementedException("glCompressedTexSubImage1D");}
public static void glCompressedTexSubImage2D ( uint target,int level,int xoffset,int yoffset,int width,int height,uint format,int imageSize,IntPtr data ){if (__glCompressedTexSubImage2D!=null) __glCompressedTexSubImage2D(target,level,xoffset,yoffset,width,height,format,imageSize,data);else throw new NotImplementedException("glCompressedTexSubImage2D");}
public static void glCompressedTexSubImage3D ( uint target,int level,int xoffset,int yoffset,int zoffset,int width,int height,int depth,uint format,int imageSize,IntPtr data ){if (__glCompressedTexSubImage3D!=null) __glCompressedTexSubImage3D(target,level,xoffset,yoffset,zoffset,width,height,depth,format,imageSize,data);else throw new NotImplementedException("glCompressedTexSubImage3D");}
public static void glGetCompressedTexImage ( uint target,int lod,IntPtr img ){if (__glGetCompressedTexImage!=null) __glGetCompressedTexImage(target,lod,img);else throw new NotImplementedException("glGetCompressedTexImage");}
public static void glLoadTransposeMatrixd ( double[] m ){if (__glLoadTransposeMatrixd!=null) __glLoadTransposeMatrixd(m);else throw new NotImplementedException("glLoadTransposeMatrixd");}
public static void glLoadTransposeMatrixf ( float[] m ){if (__glLoadTransposeMatrixf!=null) __glLoadTransposeMatrixf(m);else throw new NotImplementedException("glLoadTransposeMatrixf");}
public static void glMultTransposeMatrixd ( double[] m ){if (__glMultTransposeMatrixd!=null) __glMultTransposeMatrixd(m);else throw new NotImplementedException("glMultTransposeMatrixd");}
public static void glMultTransposeMatrixf ( float[] m ){if (__glMultTransposeMatrixf!=null) __glMultTransposeMatrixf(m);else throw new NotImplementedException("glMultTransposeMatrixf");}
public static void glMultiTexCoord1d ( uint target,double s ){if (__glMultiTexCoord1d!=null) __glMultiTexCoord1d(target,s);else throw new NotImplementedException("glMultiTexCoord1d");}
public static void glMultiTexCoord1dv ( uint target,double[] v ){if (__glMultiTexCoord1dv!=null) __glMultiTexCoord1dv(target,v);else throw new NotImplementedException("glMultiTexCoord1dv");}
public static void glMultiTexCoord1f ( uint target,float s ){if (__glMultiTexCoord1f!=null) __glMultiTexCoord1f(target,s);else throw new NotImplementedException("glMultiTexCoord1f");}
public static void glMultiTexCoord1fv ( uint target,float[] v ){if (__glMultiTexCoord1fv!=null) __glMultiTexCoord1fv(target,v);else throw new NotImplementedException("glMultiTexCoord1fv");}
public static void glMultiTexCoord1i ( uint target,int s ){if (__glMultiTexCoord1i!=null) __glMultiTexCoord1i(target,s);else throw new NotImplementedException("glMultiTexCoord1i");}
public static void glMultiTexCoord1iv ( uint target,int[] v ){if (__glMultiTexCoord1iv!=null) __glMultiTexCoord1iv(target,v);else throw new NotImplementedException("glMultiTexCoord1iv");}
public static void glMultiTexCoord1s ( uint target,short s ){if (__glMultiTexCoord1s!=null) __glMultiTexCoord1s(target,s);else throw new NotImplementedException("glMultiTexCoord1s");}
public static void glMultiTexCoord1sv ( uint target,short[] v ){if (__glMultiTexCoord1sv!=null) __glMultiTexCoord1sv(target,v);else throw new NotImplementedException("glMultiTexCoord1sv");}
public static void glMultiTexCoord2d ( uint target,double s,double t ){if (__glMultiTexCoord2d!=null) __glMultiTexCoord2d(target,s,t);else throw new NotImplementedException("glMultiTexCoord2d");}
public static void glMultiTexCoord2dv ( uint target,double[] v ){if (__glMultiTexCoord2dv!=null) __glMultiTexCoord2dv(target,v);else throw new NotImplementedException("glMultiTexCoord2dv");}
public static void glMultiTexCoord2f ( uint target,float s,float t ){if (__glMultiTexCoord2f!=null) __glMultiTexCoord2f(target,s,t);else throw new NotImplementedException("glMultiTexCoord2f");}
public static void glMultiTexCoord2fv ( uint target,float[] v ){if (__glMultiTexCoord2fv!=null) __glMultiTexCoord2fv(target,v);else throw new NotImplementedException("glMultiTexCoord2fv");}
public static void glMultiTexCoord2i ( uint target,int s,int t ){if (__glMultiTexCoord2i!=null) __glMultiTexCoord2i(target,s,t);else throw new NotImplementedException("glMultiTexCoord2i");}
public static void glMultiTexCoord2iv ( uint target,int[] v ){if (__glMultiTexCoord2iv!=null) __glMultiTexCoord2iv(target,v);else throw new NotImplementedException("glMultiTexCoord2iv");}
public static void glMultiTexCoord2s ( uint target,short s,short t ){if (__glMultiTexCoord2s!=null) __glMultiTexCoord2s(target,s,t);else throw new NotImplementedException("glMultiTexCoord2s");}
public static void glMultiTexCoord2sv ( uint target,short[] v ){if (__glMultiTexCoord2sv!=null) __glMultiTexCoord2sv(target,v);else throw new NotImplementedException("glMultiTexCoord2sv");}
public static void glMultiTexCoord3d ( uint target,double s,double t,double r ){if (__glMultiTexCoord3d!=null) __glMultiTexCoord3d(target,s,t,r);else throw new NotImplementedException("glMultiTexCoord3d");}
public static void glMultiTexCoord3dv ( uint target,double[] v ){if (__glMultiTexCoord3dv!=null) __glMultiTexCoord3dv(target,v);else throw new NotImplementedException("glMultiTexCoord3dv");}
public static void glMultiTexCoord3f ( uint target,float s,float t,float r ){if (__glMultiTexCoord3f!=null) __glMultiTexCoord3f(target,s,t,r);else throw new NotImplementedException("glMultiTexCoord3f");}
public static void glMultiTexCoord3fv ( uint target,float[] v ){if (__glMultiTexCoord3fv!=null) __glMultiTexCoord3fv(target,v);else throw new NotImplementedException("glMultiTexCoord3fv");}
public static void glMultiTexCoord3i ( uint target,int s,int t,int r ){if (__glMultiTexCoord3i!=null) __glMultiTexCoord3i(target,s,t,r);else throw new NotImplementedException("glMultiTexCoord3i");}
public static void glMultiTexCoord3iv ( uint target,int[] v ){if (__glMultiTexCoord3iv!=null) __glMultiTexCoord3iv(target,v);else throw new NotImplementedException("glMultiTexCoord3iv");}
public static void glMultiTexCoord3s ( uint target,short s,short t,short r ){if (__glMultiTexCoord3s!=null) __glMultiTexCoord3s(target,s,t,r);else throw new NotImplementedException("glMultiTexCoord3s");}
public static void glMultiTexCoord3sv ( uint target,short[] v ){if (__glMultiTexCoord3sv!=null) __glMultiTexCoord3sv(target,v);else throw new NotImplementedException("glMultiTexCoord3sv");}
public static void glMultiTexCoord4d ( uint target,double s,double t,double r,double q ){if (__glMultiTexCoord4d!=null) __glMultiTexCoord4d(target,s,t,r,q);else throw new NotImplementedException("glMultiTexCoord4d");}
public static void glMultiTexCoord4dv ( uint target,double[] v ){if (__glMultiTexCoord4dv!=null) __glMultiTexCoord4dv(target,v);else throw new NotImplementedException("glMultiTexCoord4dv");}
public static void glMultiTexCoord4f ( uint target,float s,float t,float r,float q ){if (__glMultiTexCoord4f!=null) __glMultiTexCoord4f(target,s,t,r,q);else throw new NotImplementedException("glMultiTexCoord4f");}
public static void glMultiTexCoord4fv ( uint target,float[] v ){if (__glMultiTexCoord4fv!=null) __glMultiTexCoord4fv(target,v);else throw new NotImplementedException("glMultiTexCoord4fv");}
public static void glMultiTexCoord4i ( uint target,int s,int t,int r,int q ){if (__glMultiTexCoord4i!=null) __glMultiTexCoord4i(target,s,t,r,q);else throw new NotImplementedException("glMultiTexCoord4i");}
public static void glMultiTexCoord4iv ( uint target,int[] v ){if (__glMultiTexCoord4iv!=null) __glMultiTexCoord4iv(target,v);else throw new NotImplementedException("glMultiTexCoord4iv");}
public static void glMultiTexCoord4s ( uint target,short s,short t,short r,short q ){if (__glMultiTexCoord4s!=null) __glMultiTexCoord4s(target,s,t,r,q);else throw new NotImplementedException("glMultiTexCoord4s");}
public static void glMultiTexCoord4sv ( uint target,short[] v ){if (__glMultiTexCoord4sv!=null) __glMultiTexCoord4sv(target,v);else throw new NotImplementedException("glMultiTexCoord4sv");}
public static void glSampleCoverage ( float value,bool invert ){if (__glSampleCoverage!=null) __glSampleCoverage(value,invert);else throw new NotImplementedException("glSampleCoverage");}
public static void glBlendColor ( float red,float green,float blue,float alpha ){if (__glBlendColor!=null) __glBlendColor(red,green,blue,alpha);else throw new NotImplementedException("glBlendColor");}
public static void glBlendEquation ( uint mode ){if (__glBlendEquation!=null) __glBlendEquation(mode);else throw new NotImplementedException("glBlendEquation");}
public static void glBlendFuncSeparate ( uint sfactorRGB,uint dfactorRGB,uint sfactorAlpha,uint dfactorAlpha ){if (__glBlendFuncSeparate!=null) __glBlendFuncSeparate(sfactorRGB,dfactorRGB,sfactorAlpha,dfactorAlpha);else throw new NotImplementedException("glBlendFuncSeparate");}
public static void glFogCoordPointer ( uint type,int stride,IntPtr pointer ){if (__glFogCoordPointer!=null) __glFogCoordPointer(type,stride,pointer);else throw new NotImplementedException("glFogCoordPointer");}
public static void glFogCoordd ( double coord ){if (__glFogCoordd!=null) __glFogCoordd(coord);else throw new NotImplementedException("glFogCoordd");}
public static void glFogCoorddv ( double[] coord ){if (__glFogCoorddv!=null) __glFogCoorddv(coord);else throw new NotImplementedException("glFogCoorddv");}
public static void glFogCoordf ( float coord ){if (__glFogCoordf!=null) __glFogCoordf(coord);else throw new NotImplementedException("glFogCoordf");}
public static void glFogCoordfv ( float[] coord ){if (__glFogCoordfv!=null) __glFogCoordfv(coord);else throw new NotImplementedException("glFogCoordfv");}
public static void glMultiDrawArrays ( uint mode,IntPtr first,IntPtr count,int primcount ){if (__glMultiDrawArrays!=null) __glMultiDrawArrays(mode,first,count,primcount);else throw new NotImplementedException("glMultiDrawArrays");}
public static void glMultiDrawElements ( uint mode,IntPtr count,uint type,IntPtr indices,int primcount ){if (__glMultiDrawElements!=null) __glMultiDrawElements(mode,count,type,indices,primcount);else throw new NotImplementedException("glMultiDrawElements");}
public static void glPointParameterf ( uint pname,float param ){if (__glPointParameterf!=null) __glPointParameterf(pname,param);else throw new NotImplementedException("glPointParameterf");}
public static void glPointParameterfv ( uint pname,float[] _params ){if (__glPointParameterfv!=null) __glPointParameterfv(pname,_params);else throw new NotImplementedException("glPointParameterfv");}
public static void glPointParameteri ( uint pname,int param ){if (__glPointParameteri!=null) __glPointParameteri(pname,param);else throw new NotImplementedException("glPointParameteri");}
public static void glPointParameteriv ( uint pname,int[] _params ){if (__glPointParameteriv!=null) __glPointParameteriv(pname,_params);else throw new NotImplementedException("glPointParameteriv");}
public static void glSecondaryColor3b ( sbyte red,sbyte green,sbyte blue ){if (__glSecondaryColor3b!=null) __glSecondaryColor3b(red,green,blue);else throw new NotImplementedException("glSecondaryColor3b");}
public static void glSecondaryColor3bv ( byte[] v ){if (__glSecondaryColor3bv!=null) __glSecondaryColor3bv(v);else throw new NotImplementedException("glSecondaryColor3bv");}
public static void glSecondaryColor3d ( double red,double green,double blue ){if (__glSecondaryColor3d!=null) __glSecondaryColor3d(red,green,blue);else throw new NotImplementedException("glSecondaryColor3d");}
public static void glSecondaryColor3dv ( double[] v ){if (__glSecondaryColor3dv!=null) __glSecondaryColor3dv(v);else throw new NotImplementedException("glSecondaryColor3dv");}
public static void glSecondaryColor3f ( float red,float green,float blue ){if (__glSecondaryColor3f!=null) __glSecondaryColor3f(red,green,blue);else throw new NotImplementedException("glSecondaryColor3f");}
public static void glSecondaryColor3fv ( float[] v ){if (__glSecondaryColor3fv!=null) __glSecondaryColor3fv(v);else throw new NotImplementedException("glSecondaryColor3fv");}
public static void glSecondaryColor3i ( int red,int green,int blue ){if (__glSecondaryColor3i!=null) __glSecondaryColor3i(red,green,blue);else throw new NotImplementedException("glSecondaryColor3i");}
public static void glSecondaryColor3iv ( int[] v ){if (__glSecondaryColor3iv!=null) __glSecondaryColor3iv(v);else throw new NotImplementedException("glSecondaryColor3iv");}
public static void glSecondaryColor3s ( short red,short green,short blue ){if (__glSecondaryColor3s!=null) __glSecondaryColor3s(red,green,blue);else throw new NotImplementedException("glSecondaryColor3s");}
public static void glSecondaryColor3sv ( short[] v ){if (__glSecondaryColor3sv!=null) __glSecondaryColor3sv(v);else throw new NotImplementedException("glSecondaryColor3sv");}
public static void glSecondaryColor3ub ( byte red,byte green,byte blue ){if (__glSecondaryColor3ub!=null) __glSecondaryColor3ub(red,green,blue);else throw new NotImplementedException("glSecondaryColor3ub");}
public static void glSecondaryColor3ubv ( byte[] v ){if (__glSecondaryColor3ubv!=null) __glSecondaryColor3ubv(v);else throw new NotImplementedException("glSecondaryColor3ubv");}
public static void glSecondaryColor3ui ( uint red,uint green,uint blue ){if (__glSecondaryColor3ui!=null) __glSecondaryColor3ui(red,green,blue);else throw new NotImplementedException("glSecondaryColor3ui");}
public static void glSecondaryColor3uiv ( uint[] v ){if (__glSecondaryColor3uiv!=null) __glSecondaryColor3uiv(v);else throw new NotImplementedException("glSecondaryColor3uiv");}
public static void glSecondaryColor3us ( ushort red,ushort green,ushort blue ){if (__glSecondaryColor3us!=null) __glSecondaryColor3us(red,green,blue);else throw new NotImplementedException("glSecondaryColor3us");}
public static void glSecondaryColor3usv ( ushort[] v ){if (__glSecondaryColor3usv!=null) __glSecondaryColor3usv(v);else throw new NotImplementedException("glSecondaryColor3usv");}
public static void glSecondaryColorPointer ( int size,uint type,int stride,IntPtr pointer ){if (__glSecondaryColorPointer!=null) __glSecondaryColorPointer(size,type,stride,pointer);else throw new NotImplementedException("glSecondaryColorPointer");}
public static void glWindowPos2d ( double x,double y ){if (__glWindowPos2d!=null) __glWindowPos2d(x,y);else throw new NotImplementedException("glWindowPos2d");}
public static void glWindowPos2dv ( double[] p ){if (__glWindowPos2dv!=null) __glWindowPos2dv(p);else throw new NotImplementedException("glWindowPos2dv");}
public static void glWindowPos2f ( float x,float y ){if (__glWindowPos2f!=null) __glWindowPos2f(x,y);else throw new NotImplementedException("glWindowPos2f");}
public static void glWindowPos2fv ( float[] p ){if (__glWindowPos2fv!=null) __glWindowPos2fv(p);else throw new NotImplementedException("glWindowPos2fv");}
public static void glWindowPos2i ( int x,int y ){if (__glWindowPos2i!=null) __glWindowPos2i(x,y);else throw new NotImplementedException("glWindowPos2i");}
public static void glWindowPos2iv ( int[] p ){if (__glWindowPos2iv!=null) __glWindowPos2iv(p);else throw new NotImplementedException("glWindowPos2iv");}
public static void glWindowPos2s ( short x,short y ){if (__glWindowPos2s!=null) __glWindowPos2s(x,y);else throw new NotImplementedException("glWindowPos2s");}
public static void glWindowPos2sv ( short[] p ){if (__glWindowPos2sv!=null) __glWindowPos2sv(p);else throw new NotImplementedException("glWindowPos2sv");}
public static void glWindowPos3d ( double x,double y,double z ){if (__glWindowPos3d!=null) __glWindowPos3d(x,y,z);else throw new NotImplementedException("glWindowPos3d");}
public static void glWindowPos3dv ( double[] p ){if (__glWindowPos3dv!=null) __glWindowPos3dv(p);else throw new NotImplementedException("glWindowPos3dv");}
public static void glWindowPos3f ( float x,float y,float z ){if (__glWindowPos3f!=null) __glWindowPos3f(x,y,z);else throw new NotImplementedException("glWindowPos3f");}
public static void glWindowPos3fv ( float[] p ){if (__glWindowPos3fv!=null) __glWindowPos3fv(p);else throw new NotImplementedException("glWindowPos3fv");}
public static void glWindowPos3i ( int x,int y,int z ){if (__glWindowPos3i!=null) __glWindowPos3i(x,y,z);else throw new NotImplementedException("glWindowPos3i");}
public static void glWindowPos3iv ( int[] p ){if (__glWindowPos3iv!=null) __glWindowPos3iv(p);else throw new NotImplementedException("glWindowPos3iv");}
public static void glWindowPos3s ( short x,short y,short z ){if (__glWindowPos3s!=null) __glWindowPos3s(x,y,z);else throw new NotImplementedException("glWindowPos3s");}
public static void glWindowPos3sv ( short[] p ){if (__glWindowPos3sv!=null) __glWindowPos3sv(p);else throw new NotImplementedException("glWindowPos3sv");}
public static void glBeginQuery ( uint target,uint id ){if (__glBeginQuery!=null) __glBeginQuery(target,id);else throw new NotImplementedException("glBeginQuery");}
public static void glBindBuffer ( uint target,uint buffer ){if (__glBindBuffer!=null) __glBindBuffer(target,buffer);else throw new NotImplementedException("glBindBuffer");}
public static void glBufferData ( uint target,IntPtr size,IntPtr  data,uint usage ){if (__glBufferData!=null) __glBufferData(target,size,data,usage);else throw new NotImplementedException("glBufferData");}
public static void glBufferSubData ( uint target,IntPtr offset,IntPtr size,IntPtr  data ){if (__glBufferSubData!=null) __glBufferSubData(target,offset,size,data);else throw new NotImplementedException("glBufferSubData");}
public static void glDeleteBuffers ( int n,uint[]  buffers ){if (__glDeleteBuffers!=null) __glDeleteBuffers(n,buffers);else throw new NotImplementedException("glDeleteBuffers");}
public static void glDeleteQueries ( int n,uint[]  ids ){if (__glDeleteQueries!=null) __glDeleteQueries(n,ids);else throw new NotImplementedException("glDeleteQueries");}
public static void glEndQuery ( uint target ){if (__glEndQuery!=null) __glEndQuery(target);else throw new NotImplementedException("glEndQuery");}
public static void glGenBuffers ( int n,IntPtr buffers ){if (__glGenBuffers!=null) __glGenBuffers(n,buffers);else throw new NotImplementedException("glGenBuffers");}
public static void glGenQueries ( int n,IntPtr ids ){if (__glGenQueries!=null) __glGenQueries(n,ids);else throw new NotImplementedException("glGenQueries");}
public static void glGetBufferParameteriv ( uint target,uint pname,IntPtr _params ){if (__glGetBufferParameteriv!=null) __glGetBufferParameteriv(target,pname,_params);else throw new NotImplementedException("glGetBufferParameteriv");}
public static void glGetBufferPointerv ( uint target,uint pname,IntPtr _params ){if (__glGetBufferPointerv!=null) __glGetBufferPointerv(target,pname,_params);else throw new NotImplementedException("glGetBufferPointerv");}
public static void glGetBufferSubData ( uint target,IntPtr offset,IntPtr size,IntPtr data ){if (__glGetBufferSubData!=null) __glGetBufferSubData(target,offset,size,data);else throw new NotImplementedException("glGetBufferSubData");}
public static void glGetQueryObjectiv ( uint id,uint pname,IntPtr _params ){if (__glGetQueryObjectiv!=null) __glGetQueryObjectiv(id,pname,_params);else throw new NotImplementedException("glGetQueryObjectiv");}
public static void glGetQueryObjectuiv ( uint id,uint pname,IntPtr _params ){if (__glGetQueryObjectuiv!=null) __glGetQueryObjectuiv(id,pname,_params);else throw new NotImplementedException("glGetQueryObjectuiv");}
public static void glGetQueryiv ( uint target,uint pname,IntPtr _params ){if (__glGetQueryiv!=null) __glGetQueryiv(target,pname,_params);else throw new NotImplementedException("glGetQueryiv");}
public static bool glIsBuffer ( uint buffer ){if (__glIsBuffer!=null) return __glIsBuffer(buffer);else throw new NotImplementedException("glIsBuffer");}
public static bool glIsQuery ( uint id ){if (__glIsQuery!=null) return __glIsQuery(id);else throw new NotImplementedException("glIsQuery");}
public static IntPtr glMapBuffer ( uint target,uint access ){if (__glMapBuffer!=null) return __glMapBuffer(target,access);else throw new NotImplementedException("glMapBuffer");}
public static bool glUnmapBuffer ( uint target ){if (__glUnmapBuffer!=null) return __glUnmapBuffer(target);else throw new NotImplementedException("glUnmapBuffer");}
public static void glAttachShader ( uint program,uint shader ){if (__glAttachShader!=null) __glAttachShader(program,shader);else throw new NotImplementedException("glAttachShader");}
public static void glBindAttribLocation ( uint program,uint index,string  name ){if (__glBindAttribLocation!=null) __glBindAttribLocation(program,index,name);else throw new NotImplementedException("glBindAttribLocation");}
public static void glBlendEquationSeparate ( uint arg_0,uint arg_1 ){if (__glBlendEquationSeparate!=null) __glBlendEquationSeparate(arg_0,arg_1);else throw new NotImplementedException("glBlendEquationSeparate");}
public static void glCompileShader ( uint shader ){if (__glCompileShader!=null) __glCompileShader(shader);else throw new NotImplementedException("glCompileShader");}
public static uint glCreateProgram (  ){if (__glCreateProgram!=null) return __glCreateProgram();else throw new NotImplementedException("glCreateProgram");}
public static uint glCreateShader ( uint type ){if (__glCreateShader!=null) return __glCreateShader(type);else throw new NotImplementedException("glCreateShader");}
public static void glDeleteProgram ( uint program ){if (__glDeleteProgram!=null) __glDeleteProgram(program);else throw new NotImplementedException("glDeleteProgram");}
public static void glDeleteShader ( uint shader ){if (__glDeleteShader!=null) __glDeleteShader(shader);else throw new NotImplementedException("glDeleteShader");}
public static void glDetachShader ( uint program,uint shader ){if (__glDetachShader!=null) __glDetachShader(program,shader);else throw new NotImplementedException("glDetachShader");}
public static void glDisableVertexAttribArray ( uint arg_0 ){if (__glDisableVertexAttribArray!=null) __glDisableVertexAttribArray(arg_0);else throw new NotImplementedException("glDisableVertexAttribArray");}
public static void glDrawBuffers ( int n,uint[]  bufs ){if (__glDrawBuffers!=null) __glDrawBuffers(n,bufs);else throw new NotImplementedException("glDrawBuffers");}
public static void glEnableVertexAttribArray ( uint arg_0 ){if (__glEnableVertexAttribArray!=null) __glEnableVertexAttribArray(arg_0);else throw new NotImplementedException("glEnableVertexAttribArray");}
public static void glGetActiveAttrib ( uint program,uint index,int maxLength,IntPtr length,IntPtr size,IntPtr type,IntPtr name ){if (__glGetActiveAttrib!=null) __glGetActiveAttrib(program,index,maxLength,length,size,type,name);else throw new NotImplementedException("glGetActiveAttrib");}
public static void glGetActiveUniform ( uint program,uint index,int maxLength,IntPtr length,IntPtr size,IntPtr type,IntPtr name ){if (__glGetActiveUniform!=null) __glGetActiveUniform(program,index,maxLength,length,size,type,name);else throw new NotImplementedException("glGetActiveUniform");}
public static void glGetAttachedShaders ( uint program,int maxCount,IntPtr count,IntPtr shaders ){if (__glGetAttachedShaders!=null) __glGetAttachedShaders(program,maxCount,count,shaders);else throw new NotImplementedException("glGetAttachedShaders");}
public static int glGetAttribLocation ( uint program,string  name ){if (__glGetAttribLocation!=null) return __glGetAttribLocation(program,name);else throw new NotImplementedException("glGetAttribLocation");}
public static void glGetProgramInfoLog ( uint program,int bufSize,IntPtr length,IntPtr infoLog ){if (__glGetProgramInfoLog!=null) __glGetProgramInfoLog(program,bufSize,length,infoLog);else throw new NotImplementedException("glGetProgramInfoLog");}
public static void glGetProgramiv ( uint program,uint pname,IntPtr param ){if (__glGetProgramiv!=null) __glGetProgramiv(program,pname,param);else throw new NotImplementedException("glGetProgramiv");}
public static void glGetShaderInfoLog ( uint shader,int bufSize,IntPtr length,IntPtr infoLog ){if (__glGetShaderInfoLog!=null) __glGetShaderInfoLog(shader,bufSize,length,infoLog);else throw new NotImplementedException("glGetShaderInfoLog");}
public static void glGetShaderSource ( uint obj,int maxLength,IntPtr length,IntPtr source ){if (__glGetShaderSource!=null) __glGetShaderSource(obj,maxLength,length,source);else throw new NotImplementedException("glGetShaderSource");}
public static void glGetShaderiv ( uint shader,uint pname,IntPtr param ){if (__glGetShaderiv!=null) __glGetShaderiv(shader,pname,param);else throw new NotImplementedException("glGetShaderiv");}
public static int glGetUniformLocation ( uint program,string  name ){if (__glGetUniformLocation!=null) return __glGetUniformLocation(program,name);else throw new NotImplementedException("glGetUniformLocation");}
public static void glGetUniformfv ( uint program,int location,IntPtr _params ){if (__glGetUniformfv!=null) __glGetUniformfv(program,location,_params);else throw new NotImplementedException("glGetUniformfv");}
public static void glGetUniformiv ( uint program,int location,IntPtr _params ){if (__glGetUniformiv!=null) __glGetUniformiv(program,location,_params);else throw new NotImplementedException("glGetUniformiv");}
public static void glGetVertexAttribPointerv ( uint arg_0,uint arg_1,IntPtr arg_2 ){if (__glGetVertexAttribPointerv!=null) __glGetVertexAttribPointerv(arg_0,arg_1,arg_2);else throw new NotImplementedException("glGetVertexAttribPointerv");}
public static void glGetVertexAttribdv ( uint arg_0,uint arg_1,IntPtr arg_2 ){if (__glGetVertexAttribdv!=null) __glGetVertexAttribdv(arg_0,arg_1,arg_2);else throw new NotImplementedException("glGetVertexAttribdv");}
public static void glGetVertexAttribfv ( uint arg_0,uint arg_1,IntPtr arg_2 ){if (__glGetVertexAttribfv!=null) __glGetVertexAttribfv(arg_0,arg_1,arg_2);else throw new NotImplementedException("glGetVertexAttribfv");}
public static void glGetVertexAttribiv ( uint arg_0,uint arg_1,IntPtr arg_2 ){if (__glGetVertexAttribiv!=null) __glGetVertexAttribiv(arg_0,arg_1,arg_2);else throw new NotImplementedException("glGetVertexAttribiv");}
public static bool glIsProgram ( uint program ){if (__glIsProgram!=null) return __glIsProgram(program);else throw new NotImplementedException("glIsProgram");}
public static bool glIsShader ( uint shader ){if (__glIsShader!=null) return __glIsShader(shader);else throw new NotImplementedException("glIsShader");}
public static void glLinkProgram ( uint program ){if (__glLinkProgram!=null) __glLinkProgram(program);else throw new NotImplementedException("glLinkProgram");}
public static void glShaderSource ( uint shader,int count,string[]  strings,int[]  lengths ){if (__glShaderSource!=null) __glShaderSource(shader,count,strings,lengths);else throw new NotImplementedException("glShaderSource");}
public static void glStencilFuncSeparate ( uint frontfunc,uint backfunc,int _ref,uint mask ){if (__glStencilFuncSeparate!=null) __glStencilFuncSeparate(frontfunc,backfunc,_ref,mask);else throw new NotImplementedException("glStencilFuncSeparate");}
public static void glStencilMaskSeparate ( uint arg_0,uint arg_1 ){if (__glStencilMaskSeparate!=null) __glStencilMaskSeparate(arg_0,arg_1);else throw new NotImplementedException("glStencilMaskSeparate");}
public static void glStencilOpSeparate ( uint face,uint sfail,uint dpfail,uint dppass ){if (__glStencilOpSeparate!=null) __glStencilOpSeparate(face,sfail,dpfail,dppass);else throw new NotImplementedException("glStencilOpSeparate");}
public static void glUniform1f ( int location,float v0 ){if (__glUniform1f!=null) __glUniform1f(location,v0);else throw new NotImplementedException("glUniform1f");}
public static void glUniform1fv ( int location,int count,float[]  value ){if (__glUniform1fv!=null) __glUniform1fv(location,count,value);else throw new NotImplementedException("glUniform1fv");}
public static void glUniform1i ( int location,int v0 ){if (__glUniform1i!=null) __glUniform1i(location,v0);else throw new NotImplementedException("glUniform1i");}
public static void glUniform1iv ( int location,int count,int[]  value ){if (__glUniform1iv!=null) __glUniform1iv(location,count,value);else throw new NotImplementedException("glUniform1iv");}
public static void glUniform2f ( int location,float v0,float v1 ){if (__glUniform2f!=null) __glUniform2f(location,v0,v1);else throw new NotImplementedException("glUniform2f");}
public static void glUniform2fv ( int location,int count,float[]  value ){if (__glUniform2fv!=null) __glUniform2fv(location,count,value);else throw new NotImplementedException("glUniform2fv");}
public static void glUniform2i ( int location,int v0,int v1 ){if (__glUniform2i!=null) __glUniform2i(location,v0,v1);else throw new NotImplementedException("glUniform2i");}
public static void glUniform2iv ( int location,int count,int[]  value ){if (__glUniform2iv!=null) __glUniform2iv(location,count,value);else throw new NotImplementedException("glUniform2iv");}
public static void glUniform3f ( int location,float v0,float v1,float v2 ){if (__glUniform3f!=null) __glUniform3f(location,v0,v1,v2);else throw new NotImplementedException("glUniform3f");}
public static void glUniform3fv ( int location,int count,float[]  value ){if (__glUniform3fv!=null) __glUniform3fv(location,count,value);else throw new NotImplementedException("glUniform3fv");}
public static void glUniform3i ( int location,int v0,int v1,int v2 ){if (__glUniform3i!=null) __glUniform3i(location,v0,v1,v2);else throw new NotImplementedException("glUniform3i");}
public static void glUniform3iv ( int location,int count,int[]  value ){if (__glUniform3iv!=null) __glUniform3iv(location,count,value);else throw new NotImplementedException("glUniform3iv");}
public static void glUniform4f ( int location,float v0,float v1,float v2,float v3 ){if (__glUniform4f!=null) __glUniform4f(location,v0,v1,v2,v3);else throw new NotImplementedException("glUniform4f");}
public static void glUniform4fv ( int location,int count,float[]  value ){if (__glUniform4fv!=null) __glUniform4fv(location,count,value);else throw new NotImplementedException("glUniform4fv");}
public static void glUniform4i ( int location,int v0,int v1,int v2,int v3 ){if (__glUniform4i!=null) __glUniform4i(location,v0,v1,v2,v3);else throw new NotImplementedException("glUniform4i");}
public static void glUniform4iv ( int location,int count,int[]  value ){if (__glUniform4iv!=null) __glUniform4iv(location,count,value);else throw new NotImplementedException("glUniform4iv");}
public static void glUniformMatrix2fv ( int location,int count,bool transpose,float[]  value ){if (__glUniformMatrix2fv!=null) __glUniformMatrix2fv(location,count,transpose,value);else throw new NotImplementedException("glUniformMatrix2fv");}
public static void glUniformMatrix3fv ( int location,int count,bool transpose,float[]  value ){if (__glUniformMatrix3fv!=null) __glUniformMatrix3fv(location,count,transpose,value);else throw new NotImplementedException("glUniformMatrix3fv");}
public static void glUniformMatrix4fv ( int location,int count,bool transpose,float[]  value ){if (__glUniformMatrix4fv!=null) __glUniformMatrix4fv(location,count,transpose,value);else throw new NotImplementedException("glUniformMatrix4fv");}
public static void glUseProgram ( uint program ){if (__glUseProgram!=null) __glUseProgram(program);else throw new NotImplementedException("glUseProgram");}
public static void glValidateProgram ( uint program ){if (__glValidateProgram!=null) __glValidateProgram(program);else throw new NotImplementedException("glValidateProgram");}
public static void glVertexAttrib1d ( uint index,double x ){if (__glVertexAttrib1d!=null) __glVertexAttrib1d(index,x);else throw new NotImplementedException("glVertexAttrib1d");}
public static void glVertexAttrib1dv ( uint index,double[]  v ){if (__glVertexAttrib1dv!=null) __glVertexAttrib1dv(index,v);else throw new NotImplementedException("glVertexAttrib1dv");}
public static void glVertexAttrib1f ( uint index,float x ){if (__glVertexAttrib1f!=null) __glVertexAttrib1f(index,x);else throw new NotImplementedException("glVertexAttrib1f");}
public static void glVertexAttrib1fv ( uint index,float[]  v ){if (__glVertexAttrib1fv!=null) __glVertexAttrib1fv(index,v);else throw new NotImplementedException("glVertexAttrib1fv");}
public static void glVertexAttrib1s ( uint index,short x ){if (__glVertexAttrib1s!=null) __glVertexAttrib1s(index,x);else throw new NotImplementedException("glVertexAttrib1s");}
public static void glVertexAttrib1sv ( uint index,short[]  v ){if (__glVertexAttrib1sv!=null) __glVertexAttrib1sv(index,v);else throw new NotImplementedException("glVertexAttrib1sv");}
public static void glVertexAttrib2d ( uint index,double x,double y ){if (__glVertexAttrib2d!=null) __glVertexAttrib2d(index,x,y);else throw new NotImplementedException("glVertexAttrib2d");}
public static void glVertexAttrib2dv ( uint index,double[]  v ){if (__glVertexAttrib2dv!=null) __glVertexAttrib2dv(index,v);else throw new NotImplementedException("glVertexAttrib2dv");}
public static void glVertexAttrib2f ( uint index,float x,float y ){if (__glVertexAttrib2f!=null) __glVertexAttrib2f(index,x,y);else throw new NotImplementedException("glVertexAttrib2f");}
public static void glVertexAttrib2fv ( uint index,float[]  v ){if (__glVertexAttrib2fv!=null) __glVertexAttrib2fv(index,v);else throw new NotImplementedException("glVertexAttrib2fv");}
public static void glVertexAttrib2s ( uint index,short x,short y ){if (__glVertexAttrib2s!=null) __glVertexAttrib2s(index,x,y);else throw new NotImplementedException("glVertexAttrib2s");}
public static void glVertexAttrib2sv ( uint index,short[]  v ){if (__glVertexAttrib2sv!=null) __glVertexAttrib2sv(index,v);else throw new NotImplementedException("glVertexAttrib2sv");}
public static void glVertexAttrib3d ( uint index,double x,double y,double z ){if (__glVertexAttrib3d!=null) __glVertexAttrib3d(index,x,y,z);else throw new NotImplementedException("glVertexAttrib3d");}
public static void glVertexAttrib3dv ( uint index,double[]  v ){if (__glVertexAttrib3dv!=null) __glVertexAttrib3dv(index,v);else throw new NotImplementedException("glVertexAttrib3dv");}
public static void glVertexAttrib3f ( uint index,float x,float y,float z ){if (__glVertexAttrib3f!=null) __glVertexAttrib3f(index,x,y,z);else throw new NotImplementedException("glVertexAttrib3f");}
public static void glVertexAttrib3fv ( uint index,float[]  v ){if (__glVertexAttrib3fv!=null) __glVertexAttrib3fv(index,v);else throw new NotImplementedException("glVertexAttrib3fv");}
public static void glVertexAttrib3s ( uint index,short x,short y,short z ){if (__glVertexAttrib3s!=null) __glVertexAttrib3s(index,x,y,z);else throw new NotImplementedException("glVertexAttrib3s");}
public static void glVertexAttrib3sv ( uint index,short[]  v ){if (__glVertexAttrib3sv!=null) __glVertexAttrib3sv(index,v);else throw new NotImplementedException("glVertexAttrib3sv");}
public static void glVertexAttrib4Nbv ( uint index,byte[]  v ){if (__glVertexAttrib4Nbv!=null) __glVertexAttrib4Nbv(index,v);else throw new NotImplementedException("glVertexAttrib4Nbv");}
public static void glVertexAttrib4Niv ( uint index,int[]  v ){if (__glVertexAttrib4Niv!=null) __glVertexAttrib4Niv(index,v);else throw new NotImplementedException("glVertexAttrib4Niv");}
public static void glVertexAttrib4Nsv ( uint index,short[]  v ){if (__glVertexAttrib4Nsv!=null) __glVertexAttrib4Nsv(index,v);else throw new NotImplementedException("glVertexAttrib4Nsv");}
public static void glVertexAttrib4Nub ( uint index,byte x,byte y,byte z,byte w ){if (__glVertexAttrib4Nub!=null) __glVertexAttrib4Nub(index,x,y,z,w);else throw new NotImplementedException("glVertexAttrib4Nub");}
public static void glVertexAttrib4Nubv ( uint index,byte[]  v ){if (__glVertexAttrib4Nubv!=null) __glVertexAttrib4Nubv(index,v);else throw new NotImplementedException("glVertexAttrib4Nubv");}
public static void glVertexAttrib4Nuiv ( uint index,uint[]  v ){if (__glVertexAttrib4Nuiv!=null) __glVertexAttrib4Nuiv(index,v);else throw new NotImplementedException("glVertexAttrib4Nuiv");}
public static void glVertexAttrib4Nusv ( uint index,ushort[]  v ){if (__glVertexAttrib4Nusv!=null) __glVertexAttrib4Nusv(index,v);else throw new NotImplementedException("glVertexAttrib4Nusv");}
public static void glVertexAttrib4bv ( uint index,byte[]  v ){if (__glVertexAttrib4bv!=null) __glVertexAttrib4bv(index,v);else throw new NotImplementedException("glVertexAttrib4bv");}
public static void glVertexAttrib4d ( uint index,double x,double y,double z,double w ){if (__glVertexAttrib4d!=null) __glVertexAttrib4d(index,x,y,z,w);else throw new NotImplementedException("glVertexAttrib4d");}
public static void glVertexAttrib4dv ( uint index,double[]  v ){if (__glVertexAttrib4dv!=null) __glVertexAttrib4dv(index,v);else throw new NotImplementedException("glVertexAttrib4dv");}
public static void glVertexAttrib4f ( uint index,float x,float y,float z,float w ){if (__glVertexAttrib4f!=null) __glVertexAttrib4f(index,x,y,z,w);else throw new NotImplementedException("glVertexAttrib4f");}
public static void glVertexAttrib4fv ( uint index,float[]  v ){if (__glVertexAttrib4fv!=null) __glVertexAttrib4fv(index,v);else throw new NotImplementedException("glVertexAttrib4fv");}
public static void glVertexAttrib4iv ( uint index,int[]  v ){if (__glVertexAttrib4iv!=null) __glVertexAttrib4iv(index,v);else throw new NotImplementedException("glVertexAttrib4iv");}
public static void glVertexAttrib4s ( uint index,short x,short y,short z,short w ){if (__glVertexAttrib4s!=null) __glVertexAttrib4s(index,x,y,z,w);else throw new NotImplementedException("glVertexAttrib4s");}
public static void glVertexAttrib4sv ( uint index,short[]  v ){if (__glVertexAttrib4sv!=null) __glVertexAttrib4sv(index,v);else throw new NotImplementedException("glVertexAttrib4sv");}
public static void glVertexAttrib4ubv ( uint index,byte[]  v ){if (__glVertexAttrib4ubv!=null) __glVertexAttrib4ubv(index,v);else throw new NotImplementedException("glVertexAttrib4ubv");}
public static void glVertexAttrib4uiv ( uint index,uint[]  v ){if (__glVertexAttrib4uiv!=null) __glVertexAttrib4uiv(index,v);else throw new NotImplementedException("glVertexAttrib4uiv");}
public static void glVertexAttrib4usv ( uint index,ushort[]  v ){if (__glVertexAttrib4usv!=null) __glVertexAttrib4usv(index,v);else throw new NotImplementedException("glVertexAttrib4usv");}
public static void glVertexAttribPointer ( uint index,int size,uint type,bool normalized,int stride,IntPtr  pointer ){if (__glVertexAttribPointer!=null) __glVertexAttribPointer(index,size,type,normalized,stride,pointer);else throw new NotImplementedException("glVertexAttribPointer");}
public static void glUniformMatrix2x3fv ( int location,int count,bool transpose,float[] value ){if (__glUniformMatrix2x3fv!=null) __glUniformMatrix2x3fv(location,count,transpose,value);else throw new NotImplementedException("glUniformMatrix2x3fv");}
public static void glUniformMatrix2x4fv ( int location,int count,bool transpose,float[] value ){if (__glUniformMatrix2x4fv!=null) __glUniformMatrix2x4fv(location,count,transpose,value);else throw new NotImplementedException("glUniformMatrix2x4fv");}
public static void glUniformMatrix3x2fv ( int location,int count,bool transpose,float[] value ){if (__glUniformMatrix3x2fv!=null) __glUniformMatrix3x2fv(location,count,transpose,value);else throw new NotImplementedException("glUniformMatrix3x2fv");}
public static void glUniformMatrix3x4fv ( int location,int count,bool transpose,float[] value ){if (__glUniformMatrix3x4fv!=null) __glUniformMatrix3x4fv(location,count,transpose,value);else throw new NotImplementedException("glUniformMatrix3x4fv");}
public static void glUniformMatrix4x2fv ( int location,int count,bool transpose,float[] value ){if (__glUniformMatrix4x2fv!=null) __glUniformMatrix4x2fv(location,count,transpose,value);else throw new NotImplementedException("glUniformMatrix4x2fv");}
public static void glUniformMatrix4x3fv ( int location,int count,bool transpose,float[] value ){if (__glUniformMatrix4x3fv!=null) __glUniformMatrix4x3fv(location,count,transpose,value);else throw new NotImplementedException("glUniformMatrix4x3fv");}
public static void glBeginConditionalRender ( uint arg_0,uint arg_1 ){if (__glBeginConditionalRender!=null) __glBeginConditionalRender(arg_0,arg_1);else throw new NotImplementedException("glBeginConditionalRender");}
public static void glBeginTransformFeedback ( uint arg_0 ){if (__glBeginTransformFeedback!=null) __glBeginTransformFeedback(arg_0);else throw new NotImplementedException("glBeginTransformFeedback");}
public static void glBindFragDataLocation ( uint arg_0,uint arg_1,string arg_2 ){if (__glBindFragDataLocation!=null) __glBindFragDataLocation(arg_0,arg_1,arg_2);else throw new NotImplementedException("glBindFragDataLocation");}
public static void glClampColor ( uint arg_0,uint arg_1 ){if (__glClampColor!=null) __glClampColor(arg_0,arg_1);else throw new NotImplementedException("glClampColor");}
public static void glClearBufferfi ( uint arg_0,int arg_1,float arg_2,int arg_3 ){if (__glClearBufferfi!=null) __glClearBufferfi(arg_0,arg_1,arg_2,arg_3);else throw new NotImplementedException("glClearBufferfi");}
public static void glClearBufferfv ( uint arg_0,int arg_1,float[] arg_2 ){if (__glClearBufferfv!=null) __glClearBufferfv(arg_0,arg_1,arg_2);else throw new NotImplementedException("glClearBufferfv");}
public static void glClearBufferiv ( uint arg_0,int arg_1,int[] arg_2 ){if (__glClearBufferiv!=null) __glClearBufferiv(arg_0,arg_1,arg_2);else throw new NotImplementedException("glClearBufferiv");}
public static void glClearBufferuiv ( uint arg_0,int arg_1,uint[] arg_2 ){if (__glClearBufferuiv!=null) __glClearBufferuiv(arg_0,arg_1,arg_2);else throw new NotImplementedException("glClearBufferuiv");}
public static void glColorMaski ( uint arg_0,bool arg_1,bool arg_2,bool arg_3,bool arg_4 ){if (__glColorMaski!=null) __glColorMaski(arg_0,arg_1,arg_2,arg_3,arg_4);else throw new NotImplementedException("glColorMaski");}
public static void glDisablei ( uint arg_0,uint arg_1 ){if (__glDisablei!=null) __glDisablei(arg_0,arg_1);else throw new NotImplementedException("glDisablei");}
public static void glEnablei ( uint arg_0,uint arg_1 ){if (__glEnablei!=null) __glEnablei(arg_0,arg_1);else throw new NotImplementedException("glEnablei");}
public static void glEndConditionalRender (  ){if (__glEndConditionalRender!=null) __glEndConditionalRender();else throw new NotImplementedException("glEndConditionalRender");}
public static void glEndTransformFeedback (  ){if (__glEndTransformFeedback!=null) __glEndTransformFeedback();else throw new NotImplementedException("glEndTransformFeedback");}
public static void glGetBooleani_v ( uint arg_0,uint arg_1,IntPtr arg_2 ){if (__glGetBooleani_v!=null) __glGetBooleani_v(arg_0,arg_1,arg_2);else throw new NotImplementedException("glGetBooleani_v");}
public static int glGetFragDataLocation ( uint arg_0,string arg_1 ){if (__glGetFragDataLocation!=null) return __glGetFragDataLocation(arg_0,arg_1);else throw new NotImplementedException("glGetFragDataLocation");}
public static IntPtr  glGetStringi ( uint arg_0,uint arg_1 ){if (__glGetStringi!=null) return __glGetStringi(arg_0,arg_1);else throw new NotImplementedException("glGetStringi");}
public static void glGetTexParameterIiv ( uint arg_0,uint arg_1,IntPtr arg_2 ){if (__glGetTexParameterIiv!=null) __glGetTexParameterIiv(arg_0,arg_1,arg_2);else throw new NotImplementedException("glGetTexParameterIiv");}
public static void glGetTexParameterIuiv ( uint arg_0,uint arg_1,IntPtr arg_2 ){if (__glGetTexParameterIuiv!=null) __glGetTexParameterIuiv(arg_0,arg_1,arg_2);else throw new NotImplementedException("glGetTexParameterIuiv");}
public static void glGetTransformFeedbackVarying ( uint arg_0,uint arg_1,int arg_2,IntPtr arg_3,IntPtr arg_4,IntPtr arg_5,IntPtr arg_6 ){if (__glGetTransformFeedbackVarying!=null) __glGetTransformFeedbackVarying(arg_0,arg_1,arg_2,arg_3,arg_4,arg_5,arg_6);else throw new NotImplementedException("glGetTransformFeedbackVarying");}
public static void glGetUniformuiv ( uint arg_0,int arg_1,IntPtr arg_2 ){if (__glGetUniformuiv!=null) __glGetUniformuiv(arg_0,arg_1,arg_2);else throw new NotImplementedException("glGetUniformuiv");}
public static void glGetVertexAttribIiv ( uint arg_0,uint arg_1,IntPtr arg_2 ){if (__glGetVertexAttribIiv!=null) __glGetVertexAttribIiv(arg_0,arg_1,arg_2);else throw new NotImplementedException("glGetVertexAttribIiv");}
public static void glGetVertexAttribIuiv ( uint arg_0,uint arg_1,IntPtr arg_2 ){if (__glGetVertexAttribIuiv!=null) __glGetVertexAttribIuiv(arg_0,arg_1,arg_2);else throw new NotImplementedException("glGetVertexAttribIuiv");}
public static bool glIsEnabledi ( uint arg_0,uint arg_1 ){if (__glIsEnabledi!=null) return __glIsEnabledi(arg_0,arg_1);else throw new NotImplementedException("glIsEnabledi");}
public static void glTexParameterIiv ( uint arg_0,uint arg_1,int[] arg_2 ){if (__glTexParameterIiv!=null) __glTexParameterIiv(arg_0,arg_1,arg_2);else throw new NotImplementedException("glTexParameterIiv");}
public static void glTexParameterIuiv ( uint arg_0,uint arg_1,uint[] arg_2 ){if (__glTexParameterIuiv!=null) __glTexParameterIuiv(arg_0,arg_1,arg_2);else throw new NotImplementedException("glTexParameterIuiv");}
public static void glTransformFeedbackVaryings ( uint arg_0,int arg_1,string[]  arg_2,uint arg_3 ){if (__glTransformFeedbackVaryings!=null) __glTransformFeedbackVaryings(arg_0,arg_1,arg_2,arg_3);else throw new NotImplementedException("glTransformFeedbackVaryings");}
public static void glUniform1ui ( int arg_0,uint arg_1 ){if (__glUniform1ui!=null) __glUniform1ui(arg_0,arg_1);else throw new NotImplementedException("glUniform1ui");}
public static void glUniform1uiv ( int arg_0,int arg_1,uint[] arg_2 ){if (__glUniform1uiv!=null) __glUniform1uiv(arg_0,arg_1,arg_2);else throw new NotImplementedException("glUniform1uiv");}
public static void glUniform2ui ( int arg_0,uint arg_1,uint arg_2 ){if (__glUniform2ui!=null) __glUniform2ui(arg_0,arg_1,arg_2);else throw new NotImplementedException("glUniform2ui");}
public static void glUniform2uiv ( int arg_0,int arg_1,uint[] arg_2 ){if (__glUniform2uiv!=null) __glUniform2uiv(arg_0,arg_1,arg_2);else throw new NotImplementedException("glUniform2uiv");}
public static void glUniform3ui ( int arg_0,uint arg_1,uint arg_2,uint arg_3 ){if (__glUniform3ui!=null) __glUniform3ui(arg_0,arg_1,arg_2,arg_3);else throw new NotImplementedException("glUniform3ui");}
public static void glUniform3uiv ( int arg_0,int arg_1,uint[] arg_2 ){if (__glUniform3uiv!=null) __glUniform3uiv(arg_0,arg_1,arg_2);else throw new NotImplementedException("glUniform3uiv");}
public static void glUniform4ui ( int arg_0,uint arg_1,uint arg_2,uint arg_3,uint arg_4 ){if (__glUniform4ui!=null) __glUniform4ui(arg_0,arg_1,arg_2,arg_3,arg_4);else throw new NotImplementedException("glUniform4ui");}
public static void glUniform4uiv ( int arg_0,int arg_1,uint[] arg_2 ){if (__glUniform4uiv!=null) __glUniform4uiv(arg_0,arg_1,arg_2);else throw new NotImplementedException("glUniform4uiv");}
public static void glVertexAttribI1i ( uint arg_0,int arg_1 ){if (__glVertexAttribI1i!=null) __glVertexAttribI1i(arg_0,arg_1);else throw new NotImplementedException("glVertexAttribI1i");}
public static void glVertexAttribI1iv ( uint arg_0,int[] arg_1 ){if (__glVertexAttribI1iv!=null) __glVertexAttribI1iv(arg_0,arg_1);else throw new NotImplementedException("glVertexAttribI1iv");}
public static void glVertexAttribI1ui ( uint arg_0,uint arg_1 ){if (__glVertexAttribI1ui!=null) __glVertexAttribI1ui(arg_0,arg_1);else throw new NotImplementedException("glVertexAttribI1ui");}
public static void glVertexAttribI1uiv ( uint arg_0,uint[] arg_1 ){if (__glVertexAttribI1uiv!=null) __glVertexAttribI1uiv(arg_0,arg_1);else throw new NotImplementedException("glVertexAttribI1uiv");}
public static void glVertexAttribI2i ( uint arg_0,int arg_1,int arg_2 ){if (__glVertexAttribI2i!=null) __glVertexAttribI2i(arg_0,arg_1,arg_2);else throw new NotImplementedException("glVertexAttribI2i");}
public static void glVertexAttribI2iv ( uint arg_0,int[] arg_1 ){if (__glVertexAttribI2iv!=null) __glVertexAttribI2iv(arg_0,arg_1);else throw new NotImplementedException("glVertexAttribI2iv");}
public static void glVertexAttribI2ui ( uint arg_0,uint arg_1,uint arg_2 ){if (__glVertexAttribI2ui!=null) __glVertexAttribI2ui(arg_0,arg_1,arg_2);else throw new NotImplementedException("glVertexAttribI2ui");}
public static void glVertexAttribI2uiv ( uint arg_0,uint[] arg_1 ){if (__glVertexAttribI2uiv!=null) __glVertexAttribI2uiv(arg_0,arg_1);else throw new NotImplementedException("glVertexAttribI2uiv");}
public static void glVertexAttribI3i ( uint arg_0,int arg_1,int arg_2,int arg_3 ){if (__glVertexAttribI3i!=null) __glVertexAttribI3i(arg_0,arg_1,arg_2,arg_3);else throw new NotImplementedException("glVertexAttribI3i");}
public static void glVertexAttribI3iv ( uint arg_0,int[] arg_1 ){if (__glVertexAttribI3iv!=null) __glVertexAttribI3iv(arg_0,arg_1);else throw new NotImplementedException("glVertexAttribI3iv");}
public static void glVertexAttribI3ui ( uint arg_0,uint arg_1,uint arg_2,uint arg_3 ){if (__glVertexAttribI3ui!=null) __glVertexAttribI3ui(arg_0,arg_1,arg_2,arg_3);else throw new NotImplementedException("glVertexAttribI3ui");}
public static void glVertexAttribI3uiv ( uint arg_0,uint[] arg_1 ){if (__glVertexAttribI3uiv!=null) __glVertexAttribI3uiv(arg_0,arg_1);else throw new NotImplementedException("glVertexAttribI3uiv");}
public static void glVertexAttribI4bv ( uint arg_0,byte[] arg_1 ){if (__glVertexAttribI4bv!=null) __glVertexAttribI4bv(arg_0,arg_1);else throw new NotImplementedException("glVertexAttribI4bv");}
public static void glVertexAttribI4i ( uint arg_0,int arg_1,int arg_2,int arg_3,int arg_4 ){if (__glVertexAttribI4i!=null) __glVertexAttribI4i(arg_0,arg_1,arg_2,arg_3,arg_4);else throw new NotImplementedException("glVertexAttribI4i");}
public static void glVertexAttribI4iv ( uint arg_0,int[] arg_1 ){if (__glVertexAttribI4iv!=null) __glVertexAttribI4iv(arg_0,arg_1);else throw new NotImplementedException("glVertexAttribI4iv");}
public static void glVertexAttribI4sv ( uint arg_0,short[] arg_1 ){if (__glVertexAttribI4sv!=null) __glVertexAttribI4sv(arg_0,arg_1);else throw new NotImplementedException("glVertexAttribI4sv");}
public static void glVertexAttribI4ubv ( uint arg_0,byte[] arg_1 ){if (__glVertexAttribI4ubv!=null) __glVertexAttribI4ubv(arg_0,arg_1);else throw new NotImplementedException("glVertexAttribI4ubv");}
public static void glVertexAttribI4ui ( uint arg_0,uint arg_1,uint arg_2,uint arg_3,uint arg_4 ){if (__glVertexAttribI4ui!=null) __glVertexAttribI4ui(arg_0,arg_1,arg_2,arg_3,arg_4);else throw new NotImplementedException("glVertexAttribI4ui");}
public static void glVertexAttribI4uiv ( uint arg_0,uint[] arg_1 ){if (__glVertexAttribI4uiv!=null) __glVertexAttribI4uiv(arg_0,arg_1);else throw new NotImplementedException("glVertexAttribI4uiv");}
public static void glVertexAttribI4usv ( uint arg_0,ushort[] arg_1 ){if (__glVertexAttribI4usv!=null) __glVertexAttribI4usv(arg_0,arg_1);else throw new NotImplementedException("glVertexAttribI4usv");}
public static void glVertexAttribIPointer ( uint arg_0,int arg_1,uint arg_2,int arg_3,IntPtr arg_4 ){if (__glVertexAttribIPointer!=null) __glVertexAttribIPointer(arg_0,arg_1,arg_2,arg_3,arg_4);else throw new NotImplementedException("glVertexAttribIPointer");}
public static void glDrawArraysInstanced ( uint arg_0,int arg_1,int arg_2,int arg_3 ){if (__glDrawArraysInstanced!=null) __glDrawArraysInstanced(arg_0,arg_1,arg_2,arg_3);else throw new NotImplementedException("glDrawArraysInstanced");}
public static void glDrawElementsInstanced ( uint arg_0,int arg_1,uint arg_2,IntPtr arg_3,int arg_4 ){if (__glDrawElementsInstanced!=null) __glDrawElementsInstanced(arg_0,arg_1,arg_2,arg_3,arg_4);else throw new NotImplementedException("glDrawElementsInstanced");}
public static void glPrimitiveRestartIndex ( uint arg_0 ){if (__glPrimitiveRestartIndex!=null) __glPrimitiveRestartIndex(arg_0);else throw new NotImplementedException("glPrimitiveRestartIndex");}
public static void glTexBuffer ( uint arg_0,uint arg_1,uint arg_2 ){if (__glTexBuffer!=null) __glTexBuffer(arg_0,arg_1,arg_2);else throw new NotImplementedException("glTexBuffer");}
public static void glFramebufferTexture ( uint arg_0,uint arg_1,uint arg_2,int arg_3 ){if (__glFramebufferTexture!=null) __glFramebufferTexture(arg_0,arg_1,arg_2,arg_3);else throw new NotImplementedException("glFramebufferTexture");}
public static void glGetBufferParameteri64v ( uint arg_0,uint arg_1,IntPtr arg_2 ){if (__glGetBufferParameteri64v!=null) __glGetBufferParameteri64v(arg_0,arg_1,arg_2);else throw new NotImplementedException("glGetBufferParameteri64v");}
public static void glGetInteger64i_v ( uint arg_0,uint arg_1,IntPtr arg_2 ){if (__glGetInteger64i_v!=null) __glGetInteger64i_v(arg_0,arg_1,arg_2);else throw new NotImplementedException("glGetInteger64i_v");}
public static void glVertexAttribDivisor ( uint index,uint divisor ){if (__glVertexAttribDivisor!=null) __glVertexAttribDivisor(index,divisor);else throw new NotImplementedException("glVertexAttribDivisor");}
public static void glBlendEquationSeparatei ( uint buf,uint modeRGB,uint modeAlpha ){if (__glBlendEquationSeparatei!=null) __glBlendEquationSeparatei(buf,modeRGB,modeAlpha);else throw new NotImplementedException("glBlendEquationSeparatei");}
public static void glBlendEquationi ( uint buf,uint mode ){if (__glBlendEquationi!=null) __glBlendEquationi(buf,mode);else throw new NotImplementedException("glBlendEquationi");}
public static void glBlendFuncSeparatei ( uint buf,uint srcRGB,uint dstRGB,uint srcAlpha,uint dstAlpha ){if (__glBlendFuncSeparatei!=null) __glBlendFuncSeparatei(buf,srcRGB,dstRGB,srcAlpha,dstAlpha);else throw new NotImplementedException("glBlendFuncSeparatei");}
public static void glBlendFunci ( uint buf,uint src,uint dst ){if (__glBlendFunci!=null) __glBlendFunci(buf,src,dst);else throw new NotImplementedException("glBlendFunci");}
public static void glMinSampleShading ( float value ){if (__glMinSampleShading!=null) __glMinSampleShading(value);else throw new NotImplementedException("glMinSampleShading");}
public static void glTbufferMask3DFX ( uint mask ){if (__glTbufferMask3DFX!=null) __glTbufferMask3DFX(mask);else throw new NotImplementedException("glTbufferMask3DFX");}
public static void glDebugMessageCallbackAMD ( GLDEBUGPROCAMD callback,IntPtr userParam ){if (__glDebugMessageCallbackAMD!=null) __glDebugMessageCallbackAMD(callback,userParam);else throw new NotImplementedException("glDebugMessageCallbackAMD");}
public static void glDebugMessageEnableAMD ( uint category,uint severity,int count,uint[]  ids,bool enabled ){if (__glDebugMessageEnableAMD!=null) __glDebugMessageEnableAMD(category,severity,count,ids,enabled);else throw new NotImplementedException("glDebugMessageEnableAMD");}
public static void glDebugMessageInsertAMD ( uint category,uint severity,uint id,int length,string  buf ){if (__glDebugMessageInsertAMD!=null) __glDebugMessageInsertAMD(category,severity,id,length,buf);else throw new NotImplementedException("glDebugMessageInsertAMD");}
public static uint glGetDebugMessageLogAMD ( uint count,int bufsize,IntPtr categories,IntPtr severities,IntPtr ids,IntPtr lengths,IntPtr message ){if (__glGetDebugMessageLogAMD!=null) return __glGetDebugMessageLogAMD(count,bufsize,categories,severities,ids,lengths,message);else throw new NotImplementedException("glGetDebugMessageLogAMD");}
public static void glBlendEquationIndexedAMD ( uint buf,uint mode ){if (__glBlendEquationIndexedAMD!=null) __glBlendEquationIndexedAMD(buf,mode);else throw new NotImplementedException("glBlendEquationIndexedAMD");}
public static void glBlendEquationSeparateIndexedAMD ( uint buf,uint modeRGB,uint modeAlpha ){if (__glBlendEquationSeparateIndexedAMD!=null) __glBlendEquationSeparateIndexedAMD(buf,modeRGB,modeAlpha);else throw new NotImplementedException("glBlendEquationSeparateIndexedAMD");}
public static void glBlendFuncIndexedAMD ( uint buf,uint src,uint dst ){if (__glBlendFuncIndexedAMD!=null) __glBlendFuncIndexedAMD(buf,src,dst);else throw new NotImplementedException("glBlendFuncIndexedAMD");}
public static void glBlendFuncSeparateIndexedAMD ( uint buf,uint srcRGB,uint dstRGB,uint srcAlpha,uint dstAlpha ){if (__glBlendFuncSeparateIndexedAMD!=null) __glBlendFuncSeparateIndexedAMD(buf,srcRGB,dstRGB,srcAlpha,dstAlpha);else throw new NotImplementedException("glBlendFuncSeparateIndexedAMD");}
public static void glDeleteNamesAMD ( uint identifier,uint num,uint[]  names ){if (__glDeleteNamesAMD!=null) __glDeleteNamesAMD(identifier,num,names);else throw new NotImplementedException("glDeleteNamesAMD");}
public static void glGenNamesAMD ( uint identifier,uint num,IntPtr names ){if (__glGenNamesAMD!=null) __glGenNamesAMD(identifier,num,names);else throw new NotImplementedException("glGenNamesAMD");}
public static bool glIsNameAMD ( uint identifier,uint name ){if (__glIsNameAMD!=null) return __glIsNameAMD(identifier,name);else throw new NotImplementedException("glIsNameAMD");}
public static void glBeginPerfMonitorAMD ( uint monitor ){if (__glBeginPerfMonitorAMD!=null) __glBeginPerfMonitorAMD(monitor);else throw new NotImplementedException("glBeginPerfMonitorAMD");}
public static void glDeletePerfMonitorsAMD ( int n,IntPtr monitors ){if (__glDeletePerfMonitorsAMD!=null) __glDeletePerfMonitorsAMD(n,monitors);else throw new NotImplementedException("glDeletePerfMonitorsAMD");}
public static void glEndPerfMonitorAMD ( uint monitor ){if (__glEndPerfMonitorAMD!=null) __glEndPerfMonitorAMD(monitor);else throw new NotImplementedException("glEndPerfMonitorAMD");}
public static void glGenPerfMonitorsAMD ( int n,IntPtr monitors ){if (__glGenPerfMonitorsAMD!=null) __glGenPerfMonitorsAMD(n,monitors);else throw new NotImplementedException("glGenPerfMonitorsAMD");}
public static void glGetPerfMonitorCounterDataAMD ( uint monitor,uint pname,int dataSize,IntPtr data,IntPtr bytesWritten ){if (__glGetPerfMonitorCounterDataAMD!=null) __glGetPerfMonitorCounterDataAMD(monitor,pname,dataSize,data,bytesWritten);else throw new NotImplementedException("glGetPerfMonitorCounterDataAMD");}
public static void glGetPerfMonitorCounterInfoAMD ( uint group,uint counter,uint pname,IntPtr data ){if (__glGetPerfMonitorCounterInfoAMD!=null) __glGetPerfMonitorCounterInfoAMD(group,counter,pname,data);else throw new NotImplementedException("glGetPerfMonitorCounterInfoAMD");}
public static void glGetPerfMonitorCounterStringAMD ( uint group,uint counter,int bufSize,IntPtr length,IntPtr counterString ){if (__glGetPerfMonitorCounterStringAMD!=null) __glGetPerfMonitorCounterStringAMD(group,counter,bufSize,length,counterString);else throw new NotImplementedException("glGetPerfMonitorCounterStringAMD");}
public static void glGetPerfMonitorCountersAMD ( uint group,IntPtr numCounters,IntPtr maxActiveCounters,int countersSize,IntPtr counters ){if (__glGetPerfMonitorCountersAMD!=null) __glGetPerfMonitorCountersAMD(group,numCounters,maxActiveCounters,countersSize,counters);else throw new NotImplementedException("glGetPerfMonitorCountersAMD");}
public static void glGetPerfMonitorGroupStringAMD ( uint group,int bufSize,IntPtr length,IntPtr groupString ){if (__glGetPerfMonitorGroupStringAMD!=null) __glGetPerfMonitorGroupStringAMD(group,bufSize,length,groupString);else throw new NotImplementedException("glGetPerfMonitorGroupStringAMD");}
public static void glGetPerfMonitorGroupsAMD ( IntPtr numGroups,int groupsSize,IntPtr groups ){if (__glGetPerfMonitorGroupsAMD!=null) __glGetPerfMonitorGroupsAMD(numGroups,groupsSize,groups);else throw new NotImplementedException("glGetPerfMonitorGroupsAMD");}
public static void glSelectPerfMonitorCountersAMD ( uint monitor,bool enable,uint group,int numCounters,IntPtr counterList ){if (__glSelectPerfMonitorCountersAMD!=null) __glSelectPerfMonitorCountersAMD(monitor,enable,group,numCounters,counterList);else throw new NotImplementedException("glSelectPerfMonitorCountersAMD");}
public static void glSetMultisamplefvAMD ( uint pname,uint index,float[]  val ){if (__glSetMultisamplefvAMD!=null) __glSetMultisamplefvAMD(pname,index,val);else throw new NotImplementedException("glSetMultisamplefvAMD");}
public static void glTessellationFactorAMD ( float factor ){if (__glTessellationFactorAMD!=null) __glTessellationFactorAMD(factor);else throw new NotImplementedException("glTessellationFactorAMD");}
public static void glTessellationModeAMD ( uint mode ){if (__glTessellationModeAMD!=null) __glTessellationModeAMD(mode);else throw new NotImplementedException("glTessellationModeAMD");}
public static void glDrawElementArrayAPPLE ( uint mode,int first,int count ){if (__glDrawElementArrayAPPLE!=null) __glDrawElementArrayAPPLE(mode,first,count);else throw new NotImplementedException("glDrawElementArrayAPPLE");}
public static void glDrawRangeElementArrayAPPLE ( uint mode,uint start,uint end,int first,int count ){if (__glDrawRangeElementArrayAPPLE!=null) __glDrawRangeElementArrayAPPLE(mode,start,end,first,count);else throw new NotImplementedException("glDrawRangeElementArrayAPPLE");}
public static void glElementPointerAPPLE ( uint type,IntPtr  pointer ){if (__glElementPointerAPPLE!=null) __glElementPointerAPPLE(type,pointer);else throw new NotImplementedException("glElementPointerAPPLE");}
public static void glMultiDrawElementArrayAPPLE ( uint mode,int[]  first,int[] count,int primcount ){if (__glMultiDrawElementArrayAPPLE!=null) __glMultiDrawElementArrayAPPLE(mode,first,count,primcount);else throw new NotImplementedException("glMultiDrawElementArrayAPPLE");}
public static void glMultiDrawRangeElementArrayAPPLE ( uint mode,uint start,uint end,int[]  first,int[] count,int primcount ){if (__glMultiDrawRangeElementArrayAPPLE!=null) __glMultiDrawRangeElementArrayAPPLE(mode,start,end,first,count,primcount);else throw new NotImplementedException("glMultiDrawRangeElementArrayAPPLE");}
public static void glDeleteFencesAPPLE ( int n,uint[]  fences ){if (__glDeleteFencesAPPLE!=null) __glDeleteFencesAPPLE(n,fences);else throw new NotImplementedException("glDeleteFencesAPPLE");}
public static void glFinishFenceAPPLE ( uint fence ){if (__glFinishFenceAPPLE!=null) __glFinishFenceAPPLE(fence);else throw new NotImplementedException("glFinishFenceAPPLE");}
public static void glFinishObjectAPPLE ( uint _object,int name ){if (__glFinishObjectAPPLE!=null) __glFinishObjectAPPLE(_object,name);else throw new NotImplementedException("glFinishObjectAPPLE");}
public static void glGenFencesAPPLE ( int n,IntPtr fences ){if (__glGenFencesAPPLE!=null) __glGenFencesAPPLE(n,fences);else throw new NotImplementedException("glGenFencesAPPLE");}
public static bool glIsFenceAPPLE ( uint fence ){if (__glIsFenceAPPLE!=null) return __glIsFenceAPPLE(fence);else throw new NotImplementedException("glIsFenceAPPLE");}
public static void glSetFenceAPPLE ( uint fence ){if (__glSetFenceAPPLE!=null) __glSetFenceAPPLE(fence);else throw new NotImplementedException("glSetFenceAPPLE");}
public static bool glTestFenceAPPLE ( uint fence ){if (__glTestFenceAPPLE!=null) return __glTestFenceAPPLE(fence);else throw new NotImplementedException("glTestFenceAPPLE");}
public static bool glTestObjectAPPLE ( uint _object,uint name ){if (__glTestObjectAPPLE!=null) return __glTestObjectAPPLE(_object,name);else throw new NotImplementedException("glTestObjectAPPLE");}
public static void glBufferParameteriAPPLE ( uint target,uint pname,int param ){if (__glBufferParameteriAPPLE!=null) __glBufferParameteriAPPLE(target,pname,param);else throw new NotImplementedException("glBufferParameteriAPPLE");}
public static void glFlushMappedBufferRangeAPPLE ( uint target,IntPtr offset,IntPtr size ){if (__glFlushMappedBufferRangeAPPLE!=null) __glFlushMappedBufferRangeAPPLE(target,offset,size);else throw new NotImplementedException("glFlushMappedBufferRangeAPPLE");}
public static void glGetObjectParameterivAPPLE ( uint objectType,uint name,uint pname,IntPtr _params ){if (__glGetObjectParameterivAPPLE!=null) __glGetObjectParameterivAPPLE(objectType,name,pname,_params);else throw new NotImplementedException("glGetObjectParameterivAPPLE");}
public static uint glObjectPurgeableAPPLE ( uint objectType,uint name,uint option ){if (__glObjectPurgeableAPPLE!=null) return __glObjectPurgeableAPPLE(objectType,name,option);else throw new NotImplementedException("glObjectPurgeableAPPLE");}
public static uint glObjectUnpurgeableAPPLE ( uint objectType,uint name,uint option ){if (__glObjectUnpurgeableAPPLE!=null) return __glObjectUnpurgeableAPPLE(objectType,name,option);else throw new NotImplementedException("glObjectUnpurgeableAPPLE");}
public static void glGetTexParameterPointervAPPLE ( uint target,uint pname,IntPtr _params ){if (__glGetTexParameterPointervAPPLE!=null) __glGetTexParameterPointervAPPLE(target,pname,_params);else throw new NotImplementedException("glGetTexParameterPointervAPPLE");}
public static void glTextureRangeAPPLE ( uint target,int length,IntPtr pointer ){if (__glTextureRangeAPPLE!=null) __glTextureRangeAPPLE(target,length,pointer);else throw new NotImplementedException("glTextureRangeAPPLE");}
public static void glBindVertexArrayAPPLE ( uint array ){if (__glBindVertexArrayAPPLE!=null) __glBindVertexArrayAPPLE(array);else throw new NotImplementedException("glBindVertexArrayAPPLE");}
public static void glDeleteVertexArraysAPPLE ( int n,uint[]  arrays ){if (__glDeleteVertexArraysAPPLE!=null) __glDeleteVertexArraysAPPLE(n,arrays);else throw new NotImplementedException("glDeleteVertexArraysAPPLE");}
public static void glGenVertexArraysAPPLE ( int n,uint[]  arrays ){if (__glGenVertexArraysAPPLE!=null) __glGenVertexArraysAPPLE(n,arrays);else throw new NotImplementedException("glGenVertexArraysAPPLE");}
public static bool glIsVertexArrayAPPLE ( uint array ){if (__glIsVertexArrayAPPLE!=null) return __glIsVertexArrayAPPLE(array);else throw new NotImplementedException("glIsVertexArrayAPPLE");}
public static void glFlushVertexArrayRangeAPPLE ( int length,IntPtr pointer ){if (__glFlushVertexArrayRangeAPPLE!=null) __glFlushVertexArrayRangeAPPLE(length,pointer);else throw new NotImplementedException("glFlushVertexArrayRangeAPPLE");}
public static void glVertexArrayParameteriAPPLE ( uint pname,int param ){if (__glVertexArrayParameteriAPPLE!=null) __glVertexArrayParameteriAPPLE(pname,param);else throw new NotImplementedException("glVertexArrayParameteriAPPLE");}
public static void glVertexArrayRangeAPPLE ( int length,IntPtr pointer ){if (__glVertexArrayRangeAPPLE!=null) __glVertexArrayRangeAPPLE(length,pointer);else throw new NotImplementedException("glVertexArrayRangeAPPLE");}
public static void glDisableVertexAttribAPPLE ( uint index,uint pname ){if (__glDisableVertexAttribAPPLE!=null) __glDisableVertexAttribAPPLE(index,pname);else throw new NotImplementedException("glDisableVertexAttribAPPLE");}
public static void glEnableVertexAttribAPPLE ( uint index,uint pname ){if (__glEnableVertexAttribAPPLE!=null) __glEnableVertexAttribAPPLE(index,pname);else throw new NotImplementedException("glEnableVertexAttribAPPLE");}
public static bool glIsVertexAttribEnabledAPPLE ( uint index,uint pname ){if (__glIsVertexAttribEnabledAPPLE!=null) return __glIsVertexAttribEnabledAPPLE(index,pname);else throw new NotImplementedException("glIsVertexAttribEnabledAPPLE");}
public static void glMapVertexAttrib1dAPPLE ( uint index,uint size,double u1,double u2,int stride,int order,double[]  points ){if (__glMapVertexAttrib1dAPPLE!=null) __glMapVertexAttrib1dAPPLE(index,size,u1,u2,stride,order,points);else throw new NotImplementedException("glMapVertexAttrib1dAPPLE");}
public static void glMapVertexAttrib1fAPPLE ( uint index,uint size,float u1,float u2,int stride,int order,float[]  points ){if (__glMapVertexAttrib1fAPPLE!=null) __glMapVertexAttrib1fAPPLE(index,size,u1,u2,stride,order,points);else throw new NotImplementedException("glMapVertexAttrib1fAPPLE");}
public static void glMapVertexAttrib2dAPPLE ( uint index,uint size,double u1,double u2,int ustride,int uorder,double v1,double v2,int vstride,int vorder,double[]  points ){if (__glMapVertexAttrib2dAPPLE!=null) __glMapVertexAttrib2dAPPLE(index,size,u1,u2,ustride,uorder,v1,v2,vstride,vorder,points);else throw new NotImplementedException("glMapVertexAttrib2dAPPLE");}
public static void glMapVertexAttrib2fAPPLE ( uint index,uint size,float u1,float u2,int ustride,int uorder,float v1,float v2,int vstride,int vorder,float[]  points ){if (__glMapVertexAttrib2fAPPLE!=null) __glMapVertexAttrib2fAPPLE(index,size,u1,u2,ustride,uorder,v1,v2,vstride,vorder,points);else throw new NotImplementedException("glMapVertexAttrib2fAPPLE");}
public static void glClearDepthf ( float d ){if (__glClearDepthf!=null) __glClearDepthf(d);else throw new NotImplementedException("glClearDepthf");}
public static void glDepthRangef ( float n,float f ){if (__glDepthRangef!=null) __glDepthRangef(n,f);else throw new NotImplementedException("glDepthRangef");}
public static void glGetShaderPrecisionFormat ( uint shadertype,uint precisiontype,IntPtr range,IntPtr precision ){if (__glGetShaderPrecisionFormat!=null) __glGetShaderPrecisionFormat(shadertype,precisiontype,range,precision);else throw new NotImplementedException("glGetShaderPrecisionFormat");}
public static void glReleaseShaderCompiler (  ){if (__glReleaseShaderCompiler!=null) __glReleaseShaderCompiler();else throw new NotImplementedException("glReleaseShaderCompiler");}
public static void glShaderBinary ( int count,uint[]  shaders,uint binaryformat,IntPtr binary,int length ){if (__glShaderBinary!=null) __glShaderBinary(count,shaders,binaryformat,binary,length);else throw new NotImplementedException("glShaderBinary");}
public static void glBindFragDataLocationIndexed ( uint program,uint colorNumber,uint index,string  name ){if (__glBindFragDataLocationIndexed!=null) __glBindFragDataLocationIndexed(program,colorNumber,index,name);else throw new NotImplementedException("glBindFragDataLocationIndexed");}
public static int glGetFragDataIndex ( uint program,string  name ){if (__glGetFragDataIndex!=null) return __glGetFragDataIndex(program,name);else throw new NotImplementedException("glGetFragDataIndex");}
public static IntPtr glCreateSyncFromCLeventARB ( IntPtr context,IntPtr _event,uint flags ){if (__glCreateSyncFromCLeventARB!=null) return __glCreateSyncFromCLeventARB(context,_event,flags);else throw new NotImplementedException("glCreateSyncFromCLeventARB");}
public static void glClampColorARB ( uint target,uint clamp ){if (__glClampColorARB!=null) __glClampColorARB(target,clamp);else throw new NotImplementedException("glClampColorARB");}
public static void glCopyBufferSubData ( uint readtarget,uint writetarget,IntPtr readoffset,IntPtr writeoffset,IntPtr size ){if (__glCopyBufferSubData!=null) __glCopyBufferSubData(readtarget,writetarget,readoffset,writeoffset,size);else throw new NotImplementedException("glCopyBufferSubData");}
public static void glDebugMessageCallbackARB ( GLDEBUGPROCARB callback,IntPtr userParam ){if (__glDebugMessageCallbackARB!=null) __glDebugMessageCallbackARB(callback,userParam);else throw new NotImplementedException("glDebugMessageCallbackARB");}
public static void glDebugMessageControlARB ( uint source,uint type,uint severity,int count,uint[]  ids,bool enabled ){if (__glDebugMessageControlARB!=null) __glDebugMessageControlARB(source,type,severity,count,ids,enabled);else throw new NotImplementedException("glDebugMessageControlARB");}
public static void glDebugMessageInsertARB ( uint source,uint type,uint id,uint severity,int length,string  buf ){if (__glDebugMessageInsertARB!=null) __glDebugMessageInsertARB(source,type,id,severity,length,buf);else throw new NotImplementedException("glDebugMessageInsertARB");}
public static uint glGetDebugMessageLogARB ( uint count,int bufsize,IntPtr sources,IntPtr types,IntPtr ids,IntPtr severities,IntPtr lengths,IntPtr messageLog ){if (__glGetDebugMessageLogARB!=null) return __glGetDebugMessageLogARB(count,bufsize,sources,types,ids,severities,lengths,messageLog);else throw new NotImplementedException("glGetDebugMessageLogARB");}
public static void glDrawBuffersARB ( int n,uint[]  bufs ){if (__glDrawBuffersARB!=null) __glDrawBuffersARB(n,bufs);else throw new NotImplementedException("glDrawBuffersARB");}
public static void glBlendEquationSeparateiARB ( uint buf,uint modeRGB,uint modeAlpha ){if (__glBlendEquationSeparateiARB!=null) __glBlendEquationSeparateiARB(buf,modeRGB,modeAlpha);else throw new NotImplementedException("glBlendEquationSeparateiARB");}
public static void glBlendEquationiARB ( uint buf,uint mode ){if (__glBlendEquationiARB!=null) __glBlendEquationiARB(buf,mode);else throw new NotImplementedException("glBlendEquationiARB");}
public static void glBlendFuncSeparateiARB ( uint buf,uint srcRGB,uint dstRGB,uint srcAlpha,uint dstAlpha ){if (__glBlendFuncSeparateiARB!=null) __glBlendFuncSeparateiARB(buf,srcRGB,dstRGB,srcAlpha,dstAlpha);else throw new NotImplementedException("glBlendFuncSeparateiARB");}
public static void glBlendFunciARB ( uint buf,uint src,uint dst ){if (__glBlendFunciARB!=null) __glBlendFunciARB(buf,src,dst);else throw new NotImplementedException("glBlendFunciARB");}
public static void glDrawElementsBaseVertex ( uint mode,int count,uint type,IntPtr indices,int basevertex ){if (__glDrawElementsBaseVertex!=null) __glDrawElementsBaseVertex(mode,count,type,indices,basevertex);else throw new NotImplementedException("glDrawElementsBaseVertex");}
public static void glDrawElementsInstancedBaseVertex ( uint mode,int count,uint type,IntPtr  indices,int primcount,int basevertex ){if (__glDrawElementsInstancedBaseVertex!=null) __glDrawElementsInstancedBaseVertex(mode,count,type,indices,primcount,basevertex);else throw new NotImplementedException("glDrawElementsInstancedBaseVertex");}
public static void glDrawRangeElementsBaseVertex ( uint mode,uint start,uint end,int count,uint type,IntPtr indices,int basevertex ){if (__glDrawRangeElementsBaseVertex!=null) __glDrawRangeElementsBaseVertex(mode,start,end,count,type,indices,basevertex);else throw new NotImplementedException("glDrawRangeElementsBaseVertex");}
public static void glMultiDrawElementsBaseVertex ( uint mode,IntPtr count,uint type,IntPtr indices,int primcount,IntPtr basevertex ){if (__glMultiDrawElementsBaseVertex!=null) __glMultiDrawElementsBaseVertex(mode,count,type,indices,primcount,basevertex);else throw new NotImplementedException("glMultiDrawElementsBaseVertex");}
public static void glDrawArraysIndirect ( uint mode,IntPtr  indirect ){if (__glDrawArraysIndirect!=null) __glDrawArraysIndirect(mode,indirect);else throw new NotImplementedException("glDrawArraysIndirect");}
public static void glDrawElementsIndirect ( uint mode,uint type,IntPtr  indirect ){if (__glDrawElementsIndirect!=null) __glDrawElementsIndirect(mode,type,indirect);else throw new NotImplementedException("glDrawElementsIndirect");}
public static void glBindFramebuffer ( uint target,uint framebuffer ){if (__glBindFramebuffer!=null) __glBindFramebuffer(target,framebuffer);else throw new NotImplementedException("glBindFramebuffer");}
public static void glBindRenderbuffer ( uint target,uint renderbuffer ){if (__glBindRenderbuffer!=null) __glBindRenderbuffer(target,renderbuffer);else throw new NotImplementedException("glBindRenderbuffer");}
public static void glBlitFramebuffer ( int srcX0,int srcY0,int srcX1,int srcY1,int dstX0,int dstY0,int dstX1,int dstY1,uint mask,uint filter ){if (__glBlitFramebuffer!=null) __glBlitFramebuffer(srcX0,srcY0,srcX1,srcY1,dstX0,dstY0,dstX1,dstY1,mask,filter);else throw new NotImplementedException("glBlitFramebuffer");}
public static uint glCheckFramebufferStatus ( uint target ){if (__glCheckFramebufferStatus!=null) return __glCheckFramebufferStatus(target);else throw new NotImplementedException("glCheckFramebufferStatus");}
public static void glDeleteFramebuffers ( int n,uint[]  framebuffers ){if (__glDeleteFramebuffers!=null) __glDeleteFramebuffers(n,framebuffers);else throw new NotImplementedException("glDeleteFramebuffers");}
public static void glDeleteRenderbuffers ( int n,uint[]  renderbuffers ){if (__glDeleteRenderbuffers!=null) __glDeleteRenderbuffers(n,renderbuffers);else throw new NotImplementedException("glDeleteRenderbuffers");}
public static void glFramebufferRenderbuffer ( uint target,uint attachment,uint renderbuffertarget,uint renderbuffer ){if (__glFramebufferRenderbuffer!=null) __glFramebufferRenderbuffer(target,attachment,renderbuffertarget,renderbuffer);else throw new NotImplementedException("glFramebufferRenderbuffer");}
public static void glFramebufferTexture1D ( uint target,uint attachment,uint textarget,uint texture,int level ){if (__glFramebufferTexture1D!=null) __glFramebufferTexture1D(target,attachment,textarget,texture,level);else throw new NotImplementedException("glFramebufferTexture1D");}
public static void glFramebufferTexture2D ( uint target,uint attachment,uint textarget,uint texture,int level ){if (__glFramebufferTexture2D!=null) __glFramebufferTexture2D(target,attachment,textarget,texture,level);else throw new NotImplementedException("glFramebufferTexture2D");}
public static void glFramebufferTexture3D ( uint target,uint attachment,uint textarget,uint texture,int level,int layer ){if (__glFramebufferTexture3D!=null) __glFramebufferTexture3D(target,attachment,textarget,texture,level,layer);else throw new NotImplementedException("glFramebufferTexture3D");}
public static void glFramebufferTextureLayer ( uint target,uint attachment,uint texture,int level,int layer ){if (__glFramebufferTextureLayer!=null) __glFramebufferTextureLayer(target,attachment,texture,level,layer);else throw new NotImplementedException("glFramebufferTextureLayer");}
public static void glGenFramebuffers ( int n,IntPtr framebuffers ){if (__glGenFramebuffers!=null) __glGenFramebuffers(n,framebuffers);else throw new NotImplementedException("glGenFramebuffers");}
public static void glGenRenderbuffers ( int n,IntPtr renderbuffers ){if (__glGenRenderbuffers!=null) __glGenRenderbuffers(n,renderbuffers);else throw new NotImplementedException("glGenRenderbuffers");}
public static void glGenerateMipmap ( uint target ){if (__glGenerateMipmap!=null) __glGenerateMipmap(target);else throw new NotImplementedException("glGenerateMipmap");}
public static void glGetFramebufferAttachmentParameteriv ( uint target,uint attachment,uint pname,IntPtr _params ){if (__glGetFramebufferAttachmentParameteriv!=null) __glGetFramebufferAttachmentParameteriv(target,attachment,pname,_params);else throw new NotImplementedException("glGetFramebufferAttachmentParameteriv");}
public static void glGetRenderbufferParameteriv ( uint target,uint pname,IntPtr _params ){if (__glGetRenderbufferParameteriv!=null) __glGetRenderbufferParameteriv(target,pname,_params);else throw new NotImplementedException("glGetRenderbufferParameteriv");}
public static bool glIsFramebuffer ( uint framebuffer ){if (__glIsFramebuffer!=null) return __glIsFramebuffer(framebuffer);else throw new NotImplementedException("glIsFramebuffer");}
public static bool glIsRenderbuffer ( uint renderbuffer ){if (__glIsRenderbuffer!=null) return __glIsRenderbuffer(renderbuffer);else throw new NotImplementedException("glIsRenderbuffer");}
public static void glRenderbufferStorage ( uint target,uint internalformat,int width,int height ){if (__glRenderbufferStorage!=null) __glRenderbufferStorage(target,internalformat,width,height);else throw new NotImplementedException("glRenderbufferStorage");}
public static void glRenderbufferStorageMultisample ( uint target,int samples,uint internalformat,int width,int height ){if (__glRenderbufferStorageMultisample!=null) __glRenderbufferStorageMultisample(target,samples,internalformat,width,height);else throw new NotImplementedException("glRenderbufferStorageMultisample");}
public static void glFramebufferTextureARB ( uint target,uint attachment,uint texture,int level ){if (__glFramebufferTextureARB!=null) __glFramebufferTextureARB(target,attachment,texture,level);else throw new NotImplementedException("glFramebufferTextureARB");}
public static void glFramebufferTextureFaceARB ( uint target,uint attachment,uint texture,int level,uint face ){if (__glFramebufferTextureFaceARB!=null) __glFramebufferTextureFaceARB(target,attachment,texture,level,face);else throw new NotImplementedException("glFramebufferTextureFaceARB");}
public static void glFramebufferTextureLayerARB ( uint target,uint attachment,uint texture,int level,int layer ){if (__glFramebufferTextureLayerARB!=null) __glFramebufferTextureLayerARB(target,attachment,texture,level,layer);else throw new NotImplementedException("glFramebufferTextureLayerARB");}
public static void glProgramParameteriARB ( uint program,uint pname,int value ){if (__glProgramParameteriARB!=null) __glProgramParameteriARB(program,pname,value);else throw new NotImplementedException("glProgramParameteriARB");}
public static void glGetProgramBinary ( uint program,int bufSize,IntPtr length,IntPtr binaryFormat,IntPtr binary ){if (__glGetProgramBinary!=null) __glGetProgramBinary(program,bufSize,length,binaryFormat,binary);else throw new NotImplementedException("glGetProgramBinary");}
public static void glProgramBinary ( uint program,uint binaryFormat,IntPtr  binary,int length ){if (__glProgramBinary!=null) __glProgramBinary(program,binaryFormat,binary,length);else throw new NotImplementedException("glProgramBinary");}
public static void glProgramParameteri ( uint program,uint pname,int value ){if (__glProgramParameteri!=null) __glProgramParameteri(program,pname,value);else throw new NotImplementedException("glProgramParameteri");}
public static void glGetUniformdv ( uint program,int location,IntPtr _params ){if (__glGetUniformdv!=null) __glGetUniformdv(program,location,_params);else throw new NotImplementedException("glGetUniformdv");}
public static void glProgramUniform1dEXT ( uint program,int location,double x ){if (__glProgramUniform1dEXT!=null) __glProgramUniform1dEXT(program,location,x);else throw new NotImplementedException("glProgramUniform1dEXT");}
public static void glProgramUniform1dvEXT ( uint program,int location,int count,double[]  value ){if (__glProgramUniform1dvEXT!=null) __glProgramUniform1dvEXT(program,location,count,value);else throw new NotImplementedException("glProgramUniform1dvEXT");}
public static void glProgramUniform2dEXT ( uint program,int location,double x,double y ){if (__glProgramUniform2dEXT!=null) __glProgramUniform2dEXT(program,location,x,y);else throw new NotImplementedException("glProgramUniform2dEXT");}
public static void glProgramUniform2dvEXT ( uint program,int location,int count,double[]  value ){if (__glProgramUniform2dvEXT!=null) __glProgramUniform2dvEXT(program,location,count,value);else throw new NotImplementedException("glProgramUniform2dvEXT");}
public static void glProgramUniform3dEXT ( uint program,int location,double x,double y,double z ){if (__glProgramUniform3dEXT!=null) __glProgramUniform3dEXT(program,location,x,y,z);else throw new NotImplementedException("glProgramUniform3dEXT");}
public static void glProgramUniform3dvEXT ( uint program,int location,int count,double[]  value ){if (__glProgramUniform3dvEXT!=null) __glProgramUniform3dvEXT(program,location,count,value);else throw new NotImplementedException("glProgramUniform3dvEXT");}
public static void glProgramUniform4dEXT ( uint program,int location,double x,double y,double z,double w ){if (__glProgramUniform4dEXT!=null) __glProgramUniform4dEXT(program,location,x,y,z,w);else throw new NotImplementedException("glProgramUniform4dEXT");}
public static void glProgramUniform4dvEXT ( uint program,int location,int count,double[]  value ){if (__glProgramUniform4dvEXT!=null) __glProgramUniform4dvEXT(program,location,count,value);else throw new NotImplementedException("glProgramUniform4dvEXT");}
public static void glProgramUniformMatrix2dvEXT ( uint program,int location,int count,bool transpose,double[]  value ){if (__glProgramUniformMatrix2dvEXT!=null) __glProgramUniformMatrix2dvEXT(program,location,count,transpose,value);else throw new NotImplementedException("glProgramUniformMatrix2dvEXT");}
public static void glProgramUniformMatrix2x3dvEXT ( uint program,int location,int count,bool transpose,double[]  value ){if (__glProgramUniformMatrix2x3dvEXT!=null) __glProgramUniformMatrix2x3dvEXT(program,location,count,transpose,value);else throw new NotImplementedException("glProgramUniformMatrix2x3dvEXT");}
public static void glProgramUniformMatrix2x4dvEXT ( uint program,int location,int count,bool transpose,double[]  value ){if (__glProgramUniformMatrix2x4dvEXT!=null) __glProgramUniformMatrix2x4dvEXT(program,location,count,transpose,value);else throw new NotImplementedException("glProgramUniformMatrix2x4dvEXT");}
public static void glProgramUniformMatrix3dvEXT ( uint program,int location,int count,bool transpose,double[]  value ){if (__glProgramUniformMatrix3dvEXT!=null) __glProgramUniformMatrix3dvEXT(program,location,count,transpose,value);else throw new NotImplementedException("glProgramUniformMatrix3dvEXT");}
public static void glProgramUniformMatrix3x2dvEXT ( uint program,int location,int count,bool transpose,double[]  value ){if (__glProgramUniformMatrix3x2dvEXT!=null) __glProgramUniformMatrix3x2dvEXT(program,location,count,transpose,value);else throw new NotImplementedException("glProgramUniformMatrix3x2dvEXT");}
public static void glProgramUniformMatrix3x4dvEXT ( uint program,int location,int count,bool transpose,double[]  value ){if (__glProgramUniformMatrix3x4dvEXT!=null) __glProgramUniformMatrix3x4dvEXT(program,location,count,transpose,value);else throw new NotImplementedException("glProgramUniformMatrix3x4dvEXT");}
public static void glProgramUniformMatrix4dvEXT ( uint program,int location,int count,bool transpose,double[]  value ){if (__glProgramUniformMatrix4dvEXT!=null) __glProgramUniformMatrix4dvEXT(program,location,count,transpose,value);else throw new NotImplementedException("glProgramUniformMatrix4dvEXT");}
public static void glProgramUniformMatrix4x2dvEXT ( uint program,int location,int count,bool transpose,double[]  value ){if (__glProgramUniformMatrix4x2dvEXT!=null) __glProgramUniformMatrix4x2dvEXT(program,location,count,transpose,value);else throw new NotImplementedException("glProgramUniformMatrix4x2dvEXT");}
public static void glProgramUniformMatrix4x3dvEXT ( uint program,int location,int count,bool transpose,double[]  value ){if (__glProgramUniformMatrix4x3dvEXT!=null) __glProgramUniformMatrix4x3dvEXT(program,location,count,transpose,value);else throw new NotImplementedException("glProgramUniformMatrix4x3dvEXT");}
public static void glUniform1d ( int location,double x ){if (__glUniform1d!=null) __glUniform1d(location,x);else throw new NotImplementedException("glUniform1d");}
public static void glUniform1dv ( int location,int count,double[]  value ){if (__glUniform1dv!=null) __glUniform1dv(location,count,value);else throw new NotImplementedException("glUniform1dv");}
public static void glUniform2d ( int location,double x,double y ){if (__glUniform2d!=null) __glUniform2d(location,x,y);else throw new NotImplementedException("glUniform2d");}
public static void glUniform2dv ( int location,int count,double[]  value ){if (__glUniform2dv!=null) __glUniform2dv(location,count,value);else throw new NotImplementedException("glUniform2dv");}
public static void glUniform3d ( int location,double x,double y,double z ){if (__glUniform3d!=null) __glUniform3d(location,x,y,z);else throw new NotImplementedException("glUniform3d");}
public static void glUniform3dv ( int location,int count,double[]  value ){if (__glUniform3dv!=null) __glUniform3dv(location,count,value);else throw new NotImplementedException("glUniform3dv");}
public static void glUniform4d ( int location,double x,double y,double z,double w ){if (__glUniform4d!=null) __glUniform4d(location,x,y,z,w);else throw new NotImplementedException("glUniform4d");}
public static void glUniform4dv ( int location,int count,double[]  value ){if (__glUniform4dv!=null) __glUniform4dv(location,count,value);else throw new NotImplementedException("glUniform4dv");}
public static void glUniformMatrix2dv ( int location,int count,bool transpose,double[]  value ){if (__glUniformMatrix2dv!=null) __glUniformMatrix2dv(location,count,transpose,value);else throw new NotImplementedException("glUniformMatrix2dv");}
public static void glUniformMatrix2x3dv ( int location,int count,bool transpose,double[]  value ){if (__glUniformMatrix2x3dv!=null) __glUniformMatrix2x3dv(location,count,transpose,value);else throw new NotImplementedException("glUniformMatrix2x3dv");}
public static void glUniformMatrix2x4dv ( int location,int count,bool transpose,double[]  value ){if (__glUniformMatrix2x4dv!=null) __glUniformMatrix2x4dv(location,count,transpose,value);else throw new NotImplementedException("glUniformMatrix2x4dv");}
public static void glUniformMatrix3dv ( int location,int count,bool transpose,double[]  value ){if (__glUniformMatrix3dv!=null) __glUniformMatrix3dv(location,count,transpose,value);else throw new NotImplementedException("glUniformMatrix3dv");}
public static void glUniformMatrix3x2dv ( int location,int count,bool transpose,double[]  value ){if (__glUniformMatrix3x2dv!=null) __glUniformMatrix3x2dv(location,count,transpose,value);else throw new NotImplementedException("glUniformMatrix3x2dv");}
public static void glUniformMatrix3x4dv ( int location,int count,bool transpose,double[]  value ){if (__glUniformMatrix3x4dv!=null) __glUniformMatrix3x4dv(location,count,transpose,value);else throw new NotImplementedException("glUniformMatrix3x4dv");}
public static void glUniformMatrix4dv ( int location,int count,bool transpose,double[]  value ){if (__glUniformMatrix4dv!=null) __glUniformMatrix4dv(location,count,transpose,value);else throw new NotImplementedException("glUniformMatrix4dv");}
public static void glUniformMatrix4x2dv ( int location,int count,bool transpose,double[]  value ){if (__glUniformMatrix4x2dv!=null) __glUniformMatrix4x2dv(location,count,transpose,value);else throw new NotImplementedException("glUniformMatrix4x2dv");}
public static void glUniformMatrix4x3dv ( int location,int count,bool transpose,double[]  value ){if (__glUniformMatrix4x3dv!=null) __glUniformMatrix4x3dv(location,count,transpose,value);else throw new NotImplementedException("glUniformMatrix4x3dv");}
public static void glColorSubTable ( uint target,int start,int count,uint format,uint type,IntPtr data ){if (__glColorSubTable!=null) __glColorSubTable(target,start,count,format,type,data);else throw new NotImplementedException("glColorSubTable");}
public static void glColorTable ( uint target,uint internalformat,int width,uint format,uint type,IntPtr table ){if (__glColorTable!=null) __glColorTable(target,internalformat,width,format,type,table);else throw new NotImplementedException("glColorTable");}
public static void glColorTableParameterfv ( uint target,uint pname,float[] _params ){if (__glColorTableParameterfv!=null) __glColorTableParameterfv(target,pname,_params);else throw new NotImplementedException("glColorTableParameterfv");}
public static void glColorTableParameteriv ( uint target,uint pname,int[] _params ){if (__glColorTableParameteriv!=null) __glColorTableParameteriv(target,pname,_params);else throw new NotImplementedException("glColorTableParameteriv");}
public static void glConvolutionFilter1D ( uint target,uint internalformat,int width,uint format,uint type,IntPtr image ){if (__glConvolutionFilter1D!=null) __glConvolutionFilter1D(target,internalformat,width,format,type,image);else throw new NotImplementedException("glConvolutionFilter1D");}
public static void glConvolutionFilter2D ( uint target,uint internalformat,int width,int height,uint format,uint type,IntPtr image ){if (__glConvolutionFilter2D!=null) __glConvolutionFilter2D(target,internalformat,width,height,format,type,image);else throw new NotImplementedException("glConvolutionFilter2D");}
public static void glConvolutionParameterf ( uint target,uint pname,float _params ){if (__glConvolutionParameterf!=null) __glConvolutionParameterf(target,pname,_params);else throw new NotImplementedException("glConvolutionParameterf");}
public static void glConvolutionParameterfv ( uint target,uint pname,float[] _params ){if (__glConvolutionParameterfv!=null) __glConvolutionParameterfv(target,pname,_params);else throw new NotImplementedException("glConvolutionParameterfv");}
public static void glConvolutionParameteri ( uint target,uint pname,int _params ){if (__glConvolutionParameteri!=null) __glConvolutionParameteri(target,pname,_params);else throw new NotImplementedException("glConvolutionParameteri");}
public static void glConvolutionParameteriv ( uint target,uint pname,int[] _params ){if (__glConvolutionParameteriv!=null) __glConvolutionParameteriv(target,pname,_params);else throw new NotImplementedException("glConvolutionParameteriv");}
public static void glCopyColorSubTable ( uint target,int start,int x,int y,int width ){if (__glCopyColorSubTable!=null) __glCopyColorSubTable(target,start,x,y,width);else throw new NotImplementedException("glCopyColorSubTable");}
public static void glCopyColorTable ( uint target,uint internalformat,int x,int y,int width ){if (__glCopyColorTable!=null) __glCopyColorTable(target,internalformat,x,y,width);else throw new NotImplementedException("glCopyColorTable");}
public static void glCopyConvolutionFilter1D ( uint target,uint internalformat,int x,int y,int width ){if (__glCopyConvolutionFilter1D!=null) __glCopyConvolutionFilter1D(target,internalformat,x,y,width);else throw new NotImplementedException("glCopyConvolutionFilter1D");}
public static void glCopyConvolutionFilter2D ( uint target,uint internalformat,int x,int y,int width,int height ){if (__glCopyConvolutionFilter2D!=null) __glCopyConvolutionFilter2D(target,internalformat,x,y,width,height);else throw new NotImplementedException("glCopyConvolutionFilter2D");}
public static void glGetColorTable ( uint target,uint format,uint type,IntPtr table ){if (__glGetColorTable!=null) __glGetColorTable(target,format,type,table);else throw new NotImplementedException("glGetColorTable");}
public static void glGetColorTableParameterfv ( uint target,uint pname,IntPtr _params ){if (__glGetColorTableParameterfv!=null) __glGetColorTableParameterfv(target,pname,_params);else throw new NotImplementedException("glGetColorTableParameterfv");}
public static void glGetColorTableParameteriv ( uint target,uint pname,IntPtr _params ){if (__glGetColorTableParameteriv!=null) __glGetColorTableParameteriv(target,pname,_params);else throw new NotImplementedException("glGetColorTableParameteriv");}
public static void glGetConvolutionFilter ( uint target,uint format,uint type,IntPtr image ){if (__glGetConvolutionFilter!=null) __glGetConvolutionFilter(target,format,type,image);else throw new NotImplementedException("glGetConvolutionFilter");}
public static void glGetConvolutionParameterfv ( uint target,uint pname,IntPtr _params ){if (__glGetConvolutionParameterfv!=null) __glGetConvolutionParameterfv(target,pname,_params);else throw new NotImplementedException("glGetConvolutionParameterfv");}
public static void glGetConvolutionParameteriv ( uint target,uint pname,IntPtr _params ){if (__glGetConvolutionParameteriv!=null) __glGetConvolutionParameteriv(target,pname,_params);else throw new NotImplementedException("glGetConvolutionParameteriv");}
public static void glGetHistogram ( uint target,bool reset,uint format,uint type,IntPtr values ){if (__glGetHistogram!=null) __glGetHistogram(target,reset,format,type,values);else throw new NotImplementedException("glGetHistogram");}
public static void glGetHistogramParameterfv ( uint target,uint pname,IntPtr _params ){if (__glGetHistogramParameterfv!=null) __glGetHistogramParameterfv(target,pname,_params);else throw new NotImplementedException("glGetHistogramParameterfv");}
public static void glGetHistogramParameteriv ( uint target,uint pname,IntPtr _params ){if (__glGetHistogramParameteriv!=null) __glGetHistogramParameteriv(target,pname,_params);else throw new NotImplementedException("glGetHistogramParameteriv");}
public static void glGetMinmax ( uint target,bool reset,uint format,uint types,IntPtr values ){if (__glGetMinmax!=null) __glGetMinmax(target,reset,format,types,values);else throw new NotImplementedException("glGetMinmax");}
public static void glGetMinmaxParameterfv ( uint target,uint pname,IntPtr _params ){if (__glGetMinmaxParameterfv!=null) __glGetMinmaxParameterfv(target,pname,_params);else throw new NotImplementedException("glGetMinmaxParameterfv");}
public static void glGetMinmaxParameteriv ( uint target,uint pname,IntPtr _params ){if (__glGetMinmaxParameteriv!=null) __glGetMinmaxParameteriv(target,pname,_params);else throw new NotImplementedException("glGetMinmaxParameteriv");}
public static void glGetSeparableFilter ( uint target,uint format,uint type,IntPtr row,IntPtr column,IntPtr span ){if (__glGetSeparableFilter!=null) __glGetSeparableFilter(target,format,type,row,column,span);else throw new NotImplementedException("glGetSeparableFilter");}
public static void glHistogram ( uint target,int width,uint internalformat,bool sink ){if (__glHistogram!=null) __glHistogram(target,width,internalformat,sink);else throw new NotImplementedException("glHistogram");}
public static void glMinmax ( uint target,uint internalformat,bool sink ){if (__glMinmax!=null) __glMinmax(target,internalformat,sink);else throw new NotImplementedException("glMinmax");}
public static void glResetHistogram ( uint target ){if (__glResetHistogram!=null) __glResetHistogram(target);else throw new NotImplementedException("glResetHistogram");}
public static void glResetMinmax ( uint target ){if (__glResetMinmax!=null) __glResetMinmax(target);else throw new NotImplementedException("glResetMinmax");}
public static void glSeparableFilter2D ( uint target,uint internalformat,int width,int height,uint format,uint type,IntPtr row,IntPtr column ){if (__glSeparableFilter2D!=null) __glSeparableFilter2D(target,internalformat,width,height,format,type,row,column);else throw new NotImplementedException("glSeparableFilter2D");}
public static void glDrawArraysInstancedARB ( uint mode,int first,int count,int primcount ){if (__glDrawArraysInstancedARB!=null) __glDrawArraysInstancedARB(mode,first,count,primcount);else throw new NotImplementedException("glDrawArraysInstancedARB");}
public static void glDrawElementsInstancedARB ( uint mode,int count,uint type,IntPtr  indices,int primcount ){if (__glDrawElementsInstancedARB!=null) __glDrawElementsInstancedARB(mode,count,type,indices,primcount);else throw new NotImplementedException("glDrawElementsInstancedARB");}
public static void glVertexAttribDivisorARB ( uint index,uint divisor ){if (__glVertexAttribDivisorARB!=null) __glVertexAttribDivisorARB(index,divisor);else throw new NotImplementedException("glVertexAttribDivisorARB");}
public static void glFlushMappedBufferRange ( uint target,IntPtr offset,IntPtr length ){if (__glFlushMappedBufferRange!=null) __glFlushMappedBufferRange(target,offset,length);else throw new NotImplementedException("glFlushMappedBufferRange");}
public static IntPtr glMapBufferRange ( uint target,IntPtr offset,IntPtr length,uint access ){if (__glMapBufferRange!=null) return __glMapBufferRange(target,offset,length,access);else throw new NotImplementedException("glMapBufferRange");}
public static void glCurrentPaletteMatrixARB ( int index ){if (__glCurrentPaletteMatrixARB!=null) __glCurrentPaletteMatrixARB(index);else throw new NotImplementedException("glCurrentPaletteMatrixARB");}
public static void glMatrixIndexPointerARB ( int size,uint type,int stride,IntPtr pointer ){if (__glMatrixIndexPointerARB!=null) __glMatrixIndexPointerARB(size,type,stride,pointer);else throw new NotImplementedException("glMatrixIndexPointerARB");}
public static void glMatrixIndexubvARB ( int size,IntPtr indices ){if (__glMatrixIndexubvARB!=null) __glMatrixIndexubvARB(size,indices);else throw new NotImplementedException("glMatrixIndexubvARB");}
public static void glMatrixIndexuivARB ( int size,IntPtr indices ){if (__glMatrixIndexuivARB!=null) __glMatrixIndexuivARB(size,indices);else throw new NotImplementedException("glMatrixIndexuivARB");}
public static void glMatrixIndexusvARB ( int size,IntPtr indices ){if (__glMatrixIndexusvARB!=null) __glMatrixIndexusvARB(size,indices);else throw new NotImplementedException("glMatrixIndexusvARB");}
public static void glSampleCoverageARB ( float value,bool invert ){if (__glSampleCoverageARB!=null) __glSampleCoverageARB(value,invert);else throw new NotImplementedException("glSampleCoverageARB");}
public static void glActiveTextureARB ( uint texture ){if (__glActiveTextureARB!=null) __glActiveTextureARB(texture);else throw new NotImplementedException("glActiveTextureARB");}
public static void glClientActiveTextureARB ( uint texture ){if (__glClientActiveTextureARB!=null) __glClientActiveTextureARB(texture);else throw new NotImplementedException("glClientActiveTextureARB");}
public static void glMultiTexCoord1dARB ( uint target,double s ){if (__glMultiTexCoord1dARB!=null) __glMultiTexCoord1dARB(target,s);else throw new NotImplementedException("glMultiTexCoord1dARB");}
public static void glMultiTexCoord1dvARB ( uint target,double[] v ){if (__glMultiTexCoord1dvARB!=null) __glMultiTexCoord1dvARB(target,v);else throw new NotImplementedException("glMultiTexCoord1dvARB");}
public static void glMultiTexCoord1fARB ( uint target,float s ){if (__glMultiTexCoord1fARB!=null) __glMultiTexCoord1fARB(target,s);else throw new NotImplementedException("glMultiTexCoord1fARB");}
public static void glMultiTexCoord1fvARB ( uint target,float[] v ){if (__glMultiTexCoord1fvARB!=null) __glMultiTexCoord1fvARB(target,v);else throw new NotImplementedException("glMultiTexCoord1fvARB");}
public static void glMultiTexCoord1iARB ( uint target,int s ){if (__glMultiTexCoord1iARB!=null) __glMultiTexCoord1iARB(target,s);else throw new NotImplementedException("glMultiTexCoord1iARB");}
public static void glMultiTexCoord1ivARB ( uint target,int[] v ){if (__glMultiTexCoord1ivARB!=null) __glMultiTexCoord1ivARB(target,v);else throw new NotImplementedException("glMultiTexCoord1ivARB");}
public static void glMultiTexCoord1sARB ( uint target,short s ){if (__glMultiTexCoord1sARB!=null) __glMultiTexCoord1sARB(target,s);else throw new NotImplementedException("glMultiTexCoord1sARB");}
public static void glMultiTexCoord1svARB ( uint target,short[] v ){if (__glMultiTexCoord1svARB!=null) __glMultiTexCoord1svARB(target,v);else throw new NotImplementedException("glMultiTexCoord1svARB");}
public static void glMultiTexCoord2dARB ( uint target,double s,double t ){if (__glMultiTexCoord2dARB!=null) __glMultiTexCoord2dARB(target,s,t);else throw new NotImplementedException("glMultiTexCoord2dARB");}
public static void glMultiTexCoord2dvARB ( uint target,double[] v ){if (__glMultiTexCoord2dvARB!=null) __glMultiTexCoord2dvARB(target,v);else throw new NotImplementedException("glMultiTexCoord2dvARB");}
public static void glMultiTexCoord2fARB ( uint target,float s,float t ){if (__glMultiTexCoord2fARB!=null) __glMultiTexCoord2fARB(target,s,t);else throw new NotImplementedException("glMultiTexCoord2fARB");}
public static void glMultiTexCoord2fvARB ( uint target,float[] v ){if (__glMultiTexCoord2fvARB!=null) __glMultiTexCoord2fvARB(target,v);else throw new NotImplementedException("glMultiTexCoord2fvARB");}
public static void glMultiTexCoord2iARB ( uint target,int s,int t ){if (__glMultiTexCoord2iARB!=null) __glMultiTexCoord2iARB(target,s,t);else throw new NotImplementedException("glMultiTexCoord2iARB");}
public static void glMultiTexCoord2ivARB ( uint target,int[] v ){if (__glMultiTexCoord2ivARB!=null) __glMultiTexCoord2ivARB(target,v);else throw new NotImplementedException("glMultiTexCoord2ivARB");}
public static void glMultiTexCoord2sARB ( uint target,short s,short t ){if (__glMultiTexCoord2sARB!=null) __glMultiTexCoord2sARB(target,s,t);else throw new NotImplementedException("glMultiTexCoord2sARB");}
public static void glMultiTexCoord2svARB ( uint target,short[] v ){if (__glMultiTexCoord2svARB!=null) __glMultiTexCoord2svARB(target,v);else throw new NotImplementedException("glMultiTexCoord2svARB");}
public static void glMultiTexCoord3dARB ( uint target,double s,double t,double r ){if (__glMultiTexCoord3dARB!=null) __glMultiTexCoord3dARB(target,s,t,r);else throw new NotImplementedException("glMultiTexCoord3dARB");}
public static void glMultiTexCoord3dvARB ( uint target,double[] v ){if (__glMultiTexCoord3dvARB!=null) __glMultiTexCoord3dvARB(target,v);else throw new NotImplementedException("glMultiTexCoord3dvARB");}
public static void glMultiTexCoord3fARB ( uint target,float s,float t,float r ){if (__glMultiTexCoord3fARB!=null) __glMultiTexCoord3fARB(target,s,t,r);else throw new NotImplementedException("glMultiTexCoord3fARB");}
public static void glMultiTexCoord3fvARB ( uint target,float[] v ){if (__glMultiTexCoord3fvARB!=null) __glMultiTexCoord3fvARB(target,v);else throw new NotImplementedException("glMultiTexCoord3fvARB");}
public static void glMultiTexCoord3iARB ( uint target,int s,int t,int r ){if (__glMultiTexCoord3iARB!=null) __glMultiTexCoord3iARB(target,s,t,r);else throw new NotImplementedException("glMultiTexCoord3iARB");}
public static void glMultiTexCoord3ivARB ( uint target,int[] v ){if (__glMultiTexCoord3ivARB!=null) __glMultiTexCoord3ivARB(target,v);else throw new NotImplementedException("glMultiTexCoord3ivARB");}
public static void glMultiTexCoord3sARB ( uint target,short s,short t,short r ){if (__glMultiTexCoord3sARB!=null) __glMultiTexCoord3sARB(target,s,t,r);else throw new NotImplementedException("glMultiTexCoord3sARB");}
public static void glMultiTexCoord3svARB ( uint target,short[] v ){if (__glMultiTexCoord3svARB!=null) __glMultiTexCoord3svARB(target,v);else throw new NotImplementedException("glMultiTexCoord3svARB");}
public static void glMultiTexCoord4dARB ( uint target,double s,double t,double r,double q ){if (__glMultiTexCoord4dARB!=null) __glMultiTexCoord4dARB(target,s,t,r,q);else throw new NotImplementedException("glMultiTexCoord4dARB");}
public static void glMultiTexCoord4dvARB ( uint target,double[] v ){if (__glMultiTexCoord4dvARB!=null) __glMultiTexCoord4dvARB(target,v);else throw new NotImplementedException("glMultiTexCoord4dvARB");}
public static void glMultiTexCoord4fARB ( uint target,float s,float t,float r,float q ){if (__glMultiTexCoord4fARB!=null) __glMultiTexCoord4fARB(target,s,t,r,q);else throw new NotImplementedException("glMultiTexCoord4fARB");}
public static void glMultiTexCoord4fvARB ( uint target,float[] v ){if (__glMultiTexCoord4fvARB!=null) __glMultiTexCoord4fvARB(target,v);else throw new NotImplementedException("glMultiTexCoord4fvARB");}
public static void glMultiTexCoord4iARB ( uint target,int s,int t,int r,int q ){if (__glMultiTexCoord4iARB!=null) __glMultiTexCoord4iARB(target,s,t,r,q);else throw new NotImplementedException("glMultiTexCoord4iARB");}
public static void glMultiTexCoord4ivARB ( uint target,int[] v ){if (__glMultiTexCoord4ivARB!=null) __glMultiTexCoord4ivARB(target,v);else throw new NotImplementedException("glMultiTexCoord4ivARB");}
public static void glMultiTexCoord4sARB ( uint target,short s,short t,short r,short q ){if (__glMultiTexCoord4sARB!=null) __glMultiTexCoord4sARB(target,s,t,r,q);else throw new NotImplementedException("glMultiTexCoord4sARB");}
public static void glMultiTexCoord4svARB ( uint target,short[] v ){if (__glMultiTexCoord4svARB!=null) __glMultiTexCoord4svARB(target,v);else throw new NotImplementedException("glMultiTexCoord4svARB");}
public static void glBeginQueryARB ( uint target,uint id ){if (__glBeginQueryARB!=null) __glBeginQueryARB(target,id);else throw new NotImplementedException("glBeginQueryARB");}
public static void glDeleteQueriesARB ( int n,uint[]  ids ){if (__glDeleteQueriesARB!=null) __glDeleteQueriesARB(n,ids);else throw new NotImplementedException("glDeleteQueriesARB");}
public static void glEndQueryARB ( uint target ){if (__glEndQueryARB!=null) __glEndQueryARB(target);else throw new NotImplementedException("glEndQueryARB");}
public static void glGenQueriesARB ( int n,IntPtr ids ){if (__glGenQueriesARB!=null) __glGenQueriesARB(n,ids);else throw new NotImplementedException("glGenQueriesARB");}
public static void glGetQueryObjectivARB ( uint id,uint pname,IntPtr _params ){if (__glGetQueryObjectivARB!=null) __glGetQueryObjectivARB(id,pname,_params);else throw new NotImplementedException("glGetQueryObjectivARB");}
public static void glGetQueryObjectuivARB ( uint id,uint pname,IntPtr _params ){if (__glGetQueryObjectuivARB!=null) __glGetQueryObjectuivARB(id,pname,_params);else throw new NotImplementedException("glGetQueryObjectuivARB");}
public static void glGetQueryivARB ( uint target,uint pname,IntPtr _params ){if (__glGetQueryivARB!=null) __glGetQueryivARB(target,pname,_params);else throw new NotImplementedException("glGetQueryivARB");}
public static bool glIsQueryARB ( uint id ){if (__glIsQueryARB!=null) return __glIsQueryARB(id);else throw new NotImplementedException("glIsQueryARB");}
public static void glPointParameterfARB ( uint pname,float param ){if (__glPointParameterfARB!=null) __glPointParameterfARB(pname,param);else throw new NotImplementedException("glPointParameterfARB");}
public static void glPointParameterfvARB ( uint pname,float[]  _params ){if (__glPointParameterfvARB!=null) __glPointParameterfvARB(pname,_params);else throw new NotImplementedException("glPointParameterfvARB");}
public static void glProvokingVertex ( uint mode ){if (__glProvokingVertex!=null) __glProvokingVertex(mode);else throw new NotImplementedException("glProvokingVertex");}
public static void glGetnColorTableARB ( uint target,uint format,uint type,int bufSize,IntPtr table ){if (__glGetnColorTableARB!=null) __glGetnColorTableARB(target,format,type,bufSize,table);else throw new NotImplementedException("glGetnColorTableARB");}
public static void glGetnCompressedTexImageARB ( uint target,int lod,int bufSize,IntPtr img ){if (__glGetnCompressedTexImageARB!=null) __glGetnCompressedTexImageARB(target,lod,bufSize,img);else throw new NotImplementedException("glGetnCompressedTexImageARB");}
public static void glGetnConvolutionFilterARB ( uint target,uint format,uint type,int bufSize,IntPtr image ){if (__glGetnConvolutionFilterARB!=null) __glGetnConvolutionFilterARB(target,format,type,bufSize,image);else throw new NotImplementedException("glGetnConvolutionFilterARB");}
public static void glGetnHistogramARB ( uint target,bool reset,uint format,uint type,int bufSize,IntPtr values ){if (__glGetnHistogramARB!=null) __glGetnHistogramARB(target,reset,format,type,bufSize,values);else throw new NotImplementedException("glGetnHistogramARB");}
public static void glGetnMapdvARB ( uint target,uint query,int bufSize,IntPtr v ){if (__glGetnMapdvARB!=null) __glGetnMapdvARB(target,query,bufSize,v);else throw new NotImplementedException("glGetnMapdvARB");}
public static void glGetnMapfvARB ( uint target,uint query,int bufSize,IntPtr v ){if (__glGetnMapfvARB!=null) __glGetnMapfvARB(target,query,bufSize,v);else throw new NotImplementedException("glGetnMapfvARB");}
public static void glGetnMapivARB ( uint target,uint query,int bufSize,IntPtr v ){if (__glGetnMapivARB!=null) __glGetnMapivARB(target,query,bufSize,v);else throw new NotImplementedException("glGetnMapivARB");}
public static void glGetnMinmaxARB ( uint target,bool reset,uint format,uint type,int bufSize,IntPtr values ){if (__glGetnMinmaxARB!=null) __glGetnMinmaxARB(target,reset,format,type,bufSize,values);else throw new NotImplementedException("glGetnMinmaxARB");}
public static void glGetnPixelMapfvARB ( uint map,int bufSize,IntPtr values ){if (__glGetnPixelMapfvARB!=null) __glGetnPixelMapfvARB(map,bufSize,values);else throw new NotImplementedException("glGetnPixelMapfvARB");}
public static void glGetnPixelMapuivARB ( uint map,int bufSize,IntPtr values ){if (__glGetnPixelMapuivARB!=null) __glGetnPixelMapuivARB(map,bufSize,values);else throw new NotImplementedException("glGetnPixelMapuivARB");}
public static void glGetnPixelMapusvARB ( uint map,int bufSize,IntPtr values ){if (__glGetnPixelMapusvARB!=null) __glGetnPixelMapusvARB(map,bufSize,values);else throw new NotImplementedException("glGetnPixelMapusvARB");}
public static void glGetnPolygonStippleARB ( int bufSize,IntPtr pattern ){if (__glGetnPolygonStippleARB!=null) __glGetnPolygonStippleARB(bufSize,pattern);else throw new NotImplementedException("glGetnPolygonStippleARB");}
public static void glGetnSeparableFilterARB ( uint target,uint format,uint type,int rowBufSize,IntPtr row,int columnBufSize,IntPtr column,IntPtr span ){if (__glGetnSeparableFilterARB!=null) __glGetnSeparableFilterARB(target,format,type,rowBufSize,row,columnBufSize,column,span);else throw new NotImplementedException("glGetnSeparableFilterARB");}
public static void glGetnTexImageARB ( uint target,int level,uint format,uint type,int bufSize,IntPtr img ){if (__glGetnTexImageARB!=null) __glGetnTexImageARB(target,level,format,type,bufSize,img);else throw new NotImplementedException("glGetnTexImageARB");}
public static void glGetnUniformdvARB ( uint program,int location,int bufSize,IntPtr _params ){if (__glGetnUniformdvARB!=null) __glGetnUniformdvARB(program,location,bufSize,_params);else throw new NotImplementedException("glGetnUniformdvARB");}
public static void glGetnUniformfvARB ( uint program,int location,int bufSize,IntPtr _params ){if (__glGetnUniformfvARB!=null) __glGetnUniformfvARB(program,location,bufSize,_params);else throw new NotImplementedException("glGetnUniformfvARB");}
public static void glGetnUniformivARB ( uint program,int location,int bufSize,IntPtr _params ){if (__glGetnUniformivARB!=null) __glGetnUniformivARB(program,location,bufSize,_params);else throw new NotImplementedException("glGetnUniformivARB");}
public static void glGetnUniformuivARB ( uint program,int location,int bufSize,IntPtr _params ){if (__glGetnUniformuivARB!=null) __glGetnUniformuivARB(program,location,bufSize,_params);else throw new NotImplementedException("glGetnUniformuivARB");}
public static void glReadnPixelsARB ( int x,int y,int width,int height,uint format,uint type,int bufSize,IntPtr data ){if (__glReadnPixelsARB!=null) __glReadnPixelsARB(x,y,width,height,format,type,bufSize,data);else throw new NotImplementedException("glReadnPixelsARB");}
public static void glMinSampleShadingARB ( float value ){if (__glMinSampleShadingARB!=null) __glMinSampleShadingARB(value);else throw new NotImplementedException("glMinSampleShadingARB");}
public static void glBindSampler ( uint unit,uint sampler ){if (__glBindSampler!=null) __glBindSampler(unit,sampler);else throw new NotImplementedException("glBindSampler");}
public static void glDeleteSamplers ( int count,uint[]  samplers ){if (__glDeleteSamplers!=null) __glDeleteSamplers(count,samplers);else throw new NotImplementedException("glDeleteSamplers");}
public static void glGenSamplers ( int count,IntPtr samplers ){if (__glGenSamplers!=null) __glGenSamplers(count,samplers);else throw new NotImplementedException("glGenSamplers");}
public static void glGetSamplerParameterIiv ( uint sampler,uint pname,IntPtr _params ){if (__glGetSamplerParameterIiv!=null) __glGetSamplerParameterIiv(sampler,pname,_params);else throw new NotImplementedException("glGetSamplerParameterIiv");}
public static void glGetSamplerParameterIuiv ( uint sampler,uint pname,IntPtr _params ){if (__glGetSamplerParameterIuiv!=null) __glGetSamplerParameterIuiv(sampler,pname,_params);else throw new NotImplementedException("glGetSamplerParameterIuiv");}
public static void glGetSamplerParameterfv ( uint sampler,uint pname,IntPtr _params ){if (__glGetSamplerParameterfv!=null) __glGetSamplerParameterfv(sampler,pname,_params);else throw new NotImplementedException("glGetSamplerParameterfv");}
public static void glGetSamplerParameteriv ( uint sampler,uint pname,IntPtr _params ){if (__glGetSamplerParameteriv!=null) __glGetSamplerParameteriv(sampler,pname,_params);else throw new NotImplementedException("glGetSamplerParameteriv");}
public static bool glIsSampler ( uint sampler ){if (__glIsSampler!=null) return __glIsSampler(sampler);else throw new NotImplementedException("glIsSampler");}
public static void glSamplerParameterIiv ( uint sampler,uint pname,int[]  _params ){if (__glSamplerParameterIiv!=null) __glSamplerParameterIiv(sampler,pname,_params);else throw new NotImplementedException("glSamplerParameterIiv");}
public static void glSamplerParameterIuiv ( uint sampler,uint pname,uint[]  _params ){if (__glSamplerParameterIuiv!=null) __glSamplerParameterIuiv(sampler,pname,_params);else throw new NotImplementedException("glSamplerParameterIuiv");}
public static void glSamplerParameterf ( uint sampler,uint pname,float param ){if (__glSamplerParameterf!=null) __glSamplerParameterf(sampler,pname,param);else throw new NotImplementedException("glSamplerParameterf");}
public static void glSamplerParameterfv ( uint sampler,uint pname,float[]  _params ){if (__glSamplerParameterfv!=null) __glSamplerParameterfv(sampler,pname,_params);else throw new NotImplementedException("glSamplerParameterfv");}
public static void glSamplerParameteri ( uint sampler,uint pname,int param ){if (__glSamplerParameteri!=null) __glSamplerParameteri(sampler,pname,param);else throw new NotImplementedException("glSamplerParameteri");}
public static void glSamplerParameteriv ( uint sampler,uint pname,int[]  _params ){if (__glSamplerParameteriv!=null) __glSamplerParameteriv(sampler,pname,_params);else throw new NotImplementedException("glSamplerParameteriv");}
public static void glActiveShaderProgram ( uint pipeline,uint program ){if (__glActiveShaderProgram!=null) __glActiveShaderProgram(pipeline,program);else throw new NotImplementedException("glActiveShaderProgram");}
public static void glBindProgramPipeline ( uint pipeline ){if (__glBindProgramPipeline!=null) __glBindProgramPipeline(pipeline);else throw new NotImplementedException("glBindProgramPipeline");}
public static uint glCreateShaderProgramv ( uint type,int count,IntPtr strings ){if (__glCreateShaderProgramv!=null) return __glCreateShaderProgramv(type,count,strings);else throw new NotImplementedException("glCreateShaderProgramv");}
public static void glDeleteProgramPipelines ( int n,uint[]  pipelines ){if (__glDeleteProgramPipelines!=null) __glDeleteProgramPipelines(n,pipelines);else throw new NotImplementedException("glDeleteProgramPipelines");}
public static void glGenProgramPipelines ( int n,IntPtr pipelines ){if (__glGenProgramPipelines!=null) __glGenProgramPipelines(n,pipelines);else throw new NotImplementedException("glGenProgramPipelines");}
public static void glGetProgramPipelineInfoLog ( uint pipeline,int bufSize,IntPtr length,IntPtr infoLog ){if (__glGetProgramPipelineInfoLog!=null) __glGetProgramPipelineInfoLog(pipeline,bufSize,length,infoLog);else throw new NotImplementedException("glGetProgramPipelineInfoLog");}
public static void glGetProgramPipelineiv ( uint pipeline,uint pname,IntPtr _params ){if (__glGetProgramPipelineiv!=null) __glGetProgramPipelineiv(pipeline,pname,_params);else throw new NotImplementedException("glGetProgramPipelineiv");}
public static bool glIsProgramPipeline ( uint pipeline ){if (__glIsProgramPipeline!=null) return __glIsProgramPipeline(pipeline);else throw new NotImplementedException("glIsProgramPipeline");}
public static void glProgramUniform1d ( uint program,int location,double x ){if (__glProgramUniform1d!=null) __glProgramUniform1d(program,location,x);else throw new NotImplementedException("glProgramUniform1d");}
public static void glProgramUniform1dv ( uint program,int location,int count,double[]  value ){if (__glProgramUniform1dv!=null) __glProgramUniform1dv(program,location,count,value);else throw new NotImplementedException("glProgramUniform1dv");}
public static void glProgramUniform1f ( uint program,int location,float x ){if (__glProgramUniform1f!=null) __glProgramUniform1f(program,location,x);else throw new NotImplementedException("glProgramUniform1f");}
public static void glProgramUniform1fv ( uint program,int location,int count,float[]  value ){if (__glProgramUniform1fv!=null) __glProgramUniform1fv(program,location,count,value);else throw new NotImplementedException("glProgramUniform1fv");}
public static void glProgramUniform1i ( uint program,int location,int x ){if (__glProgramUniform1i!=null) __glProgramUniform1i(program,location,x);else throw new NotImplementedException("glProgramUniform1i");}
public static void glProgramUniform1iv ( uint program,int location,int count,int[]  value ){if (__glProgramUniform1iv!=null) __glProgramUniform1iv(program,location,count,value);else throw new NotImplementedException("glProgramUniform1iv");}
public static void glProgramUniform1ui ( uint program,int location,uint x ){if (__glProgramUniform1ui!=null) __glProgramUniform1ui(program,location,x);else throw new NotImplementedException("glProgramUniform1ui");}
public static void glProgramUniform1uiv ( uint program,int location,int count,uint[]  value ){if (__glProgramUniform1uiv!=null) __glProgramUniform1uiv(program,location,count,value);else throw new NotImplementedException("glProgramUniform1uiv");}
public static void glProgramUniform2d ( uint program,int location,double x,double y ){if (__glProgramUniform2d!=null) __glProgramUniform2d(program,location,x,y);else throw new NotImplementedException("glProgramUniform2d");}
public static void glProgramUniform2dv ( uint program,int location,int count,double[]  value ){if (__glProgramUniform2dv!=null) __glProgramUniform2dv(program,location,count,value);else throw new NotImplementedException("glProgramUniform2dv");}
public static void glProgramUniform2f ( uint program,int location,float x,float y ){if (__glProgramUniform2f!=null) __glProgramUniform2f(program,location,x,y);else throw new NotImplementedException("glProgramUniform2f");}
public static void glProgramUniform2fv ( uint program,int location,int count,float[]  value ){if (__glProgramUniform2fv!=null) __glProgramUniform2fv(program,location,count,value);else throw new NotImplementedException("glProgramUniform2fv");}
public static void glProgramUniform2i ( uint program,int location,int x,int y ){if (__glProgramUniform2i!=null) __glProgramUniform2i(program,location,x,y);else throw new NotImplementedException("glProgramUniform2i");}
public static void glProgramUniform2iv ( uint program,int location,int count,int[]  value ){if (__glProgramUniform2iv!=null) __glProgramUniform2iv(program,location,count,value);else throw new NotImplementedException("glProgramUniform2iv");}
public static void glProgramUniform2ui ( uint program,int location,uint x,uint y ){if (__glProgramUniform2ui!=null) __glProgramUniform2ui(program,location,x,y);else throw new NotImplementedException("glProgramUniform2ui");}
public static void glProgramUniform2uiv ( uint program,int location,int count,uint[]  value ){if (__glProgramUniform2uiv!=null) __glProgramUniform2uiv(program,location,count,value);else throw new NotImplementedException("glProgramUniform2uiv");}
public static void glProgramUniform3d ( uint program,int location,double x,double y,double z ){if (__glProgramUniform3d!=null) __glProgramUniform3d(program,location,x,y,z);else throw new NotImplementedException("glProgramUniform3d");}
public static void glProgramUniform3dv ( uint program,int location,int count,double[]  value ){if (__glProgramUniform3dv!=null) __glProgramUniform3dv(program,location,count,value);else throw new NotImplementedException("glProgramUniform3dv");}
public static void glProgramUniform3f ( uint program,int location,float x,float y,float z ){if (__glProgramUniform3f!=null) __glProgramUniform3f(program,location,x,y,z);else throw new NotImplementedException("glProgramUniform3f");}
public static void glProgramUniform3fv ( uint program,int location,int count,float[]  value ){if (__glProgramUniform3fv!=null) __glProgramUniform3fv(program,location,count,value);else throw new NotImplementedException("glProgramUniform3fv");}
public static void glProgramUniform3i ( uint program,int location,int x,int y,int z ){if (__glProgramUniform3i!=null) __glProgramUniform3i(program,location,x,y,z);else throw new NotImplementedException("glProgramUniform3i");}
public static void glProgramUniform3iv ( uint program,int location,int count,int[]  value ){if (__glProgramUniform3iv!=null) __glProgramUniform3iv(program,location,count,value);else throw new NotImplementedException("glProgramUniform3iv");}
public static void glProgramUniform3ui ( uint program,int location,uint x,uint y,uint z ){if (__glProgramUniform3ui!=null) __glProgramUniform3ui(program,location,x,y,z);else throw new NotImplementedException("glProgramUniform3ui");}
public static void glProgramUniform3uiv ( uint program,int location,int count,uint[]  value ){if (__glProgramUniform3uiv!=null) __glProgramUniform3uiv(program,location,count,value);else throw new NotImplementedException("glProgramUniform3uiv");}
public static void glProgramUniform4d ( uint program,int location,double x,double y,double z,double w ){if (__glProgramUniform4d!=null) __glProgramUniform4d(program,location,x,y,z,w);else throw new NotImplementedException("glProgramUniform4d");}
public static void glProgramUniform4dv ( uint program,int location,int count,double[]  value ){if (__glProgramUniform4dv!=null) __glProgramUniform4dv(program,location,count,value);else throw new NotImplementedException("glProgramUniform4dv");}
public static void glProgramUniform4f ( uint program,int location,float x,float y,float z,float w ){if (__glProgramUniform4f!=null) __glProgramUniform4f(program,location,x,y,z,w);else throw new NotImplementedException("glProgramUniform4f");}
public static void glProgramUniform4fv ( uint program,int location,int count,float[]  value ){if (__glProgramUniform4fv!=null) __glProgramUniform4fv(program,location,count,value);else throw new NotImplementedException("glProgramUniform4fv");}
public static void glProgramUniform4i ( uint program,int location,int x,int y,int z,int w ){if (__glProgramUniform4i!=null) __glProgramUniform4i(program,location,x,y,z,w);else throw new NotImplementedException("glProgramUniform4i");}
public static void glProgramUniform4iv ( uint program,int location,int count,int[]  value ){if (__glProgramUniform4iv!=null) __glProgramUniform4iv(program,location,count,value);else throw new NotImplementedException("glProgramUniform4iv");}
public static void glProgramUniform4ui ( uint program,int location,uint x,uint y,uint z,uint w ){if (__glProgramUniform4ui!=null) __glProgramUniform4ui(program,location,x,y,z,w);else throw new NotImplementedException("glProgramUniform4ui");}
public static void glProgramUniform4uiv ( uint program,int location,int count,uint[]  value ){if (__glProgramUniform4uiv!=null) __glProgramUniform4uiv(program,location,count,value);else throw new NotImplementedException("glProgramUniform4uiv");}
public static void glProgramUniformMatrix2dv ( uint program,int location,int count,bool transpose,double[]  value ){if (__glProgramUniformMatrix2dv!=null) __glProgramUniformMatrix2dv(program,location,count,transpose,value);else throw new NotImplementedException("glProgramUniformMatrix2dv");}
public static void glProgramUniformMatrix2fv ( uint program,int location,int count,bool transpose,float[]  value ){if (__glProgramUniformMatrix2fv!=null) __glProgramUniformMatrix2fv(program,location,count,transpose,value);else throw new NotImplementedException("glProgramUniformMatrix2fv");}
public static void glProgramUniformMatrix2x3dv ( uint program,int location,int count,bool transpose,double[]  value ){if (__glProgramUniformMatrix2x3dv!=null) __glProgramUniformMatrix2x3dv(program,location,count,transpose,value);else throw new NotImplementedException("glProgramUniformMatrix2x3dv");}
public static void glProgramUniformMatrix2x3fv ( uint program,int location,int count,bool transpose,float[]  value ){if (__glProgramUniformMatrix2x3fv!=null) __glProgramUniformMatrix2x3fv(program,location,count,transpose,value);else throw new NotImplementedException("glProgramUniformMatrix2x3fv");}
public static void glProgramUniformMatrix2x4dv ( uint program,int location,int count,bool transpose,double[]  value ){if (__glProgramUniformMatrix2x4dv!=null) __glProgramUniformMatrix2x4dv(program,location,count,transpose,value);else throw new NotImplementedException("glProgramUniformMatrix2x4dv");}
public static void glProgramUniformMatrix2x4fv ( uint program,int location,int count,bool transpose,float[]  value ){if (__glProgramUniformMatrix2x4fv!=null) __glProgramUniformMatrix2x4fv(program,location,count,transpose,value);else throw new NotImplementedException("glProgramUniformMatrix2x4fv");}
public static void glProgramUniformMatrix3dv ( uint program,int location,int count,bool transpose,double[]  value ){if (__glProgramUniformMatrix3dv!=null) __glProgramUniformMatrix3dv(program,location,count,transpose,value);else throw new NotImplementedException("glProgramUniformMatrix3dv");}
public static void glProgramUniformMatrix3fv ( uint program,int location,int count,bool transpose,float[]  value ){if (__glProgramUniformMatrix3fv!=null) __glProgramUniformMatrix3fv(program,location,count,transpose,value);else throw new NotImplementedException("glProgramUniformMatrix3fv");}
public static void glProgramUniformMatrix3x2dv ( uint program,int location,int count,bool transpose,double[]  value ){if (__glProgramUniformMatrix3x2dv!=null) __glProgramUniformMatrix3x2dv(program,location,count,transpose,value);else throw new NotImplementedException("glProgramUniformMatrix3x2dv");}
public static void glProgramUniformMatrix3x2fv ( uint program,int location,int count,bool transpose,float[]  value ){if (__glProgramUniformMatrix3x2fv!=null) __glProgramUniformMatrix3x2fv(program,location,count,transpose,value);else throw new NotImplementedException("glProgramUniformMatrix3x2fv");}
public static void glProgramUniformMatrix3x4dv ( uint program,int location,int count,bool transpose,double[]  value ){if (__glProgramUniformMatrix3x4dv!=null) __glProgramUniformMatrix3x4dv(program,location,count,transpose,value);else throw new NotImplementedException("glProgramUniformMatrix3x4dv");}
public static void glProgramUniformMatrix3x4fv ( uint program,int location,int count,bool transpose,float[]  value ){if (__glProgramUniformMatrix3x4fv!=null) __glProgramUniformMatrix3x4fv(program,location,count,transpose,value);else throw new NotImplementedException("glProgramUniformMatrix3x4fv");}
public static void glProgramUniformMatrix4dv ( uint program,int location,int count,bool transpose,double[]  value ){if (__glProgramUniformMatrix4dv!=null) __glProgramUniformMatrix4dv(program,location,count,transpose,value);else throw new NotImplementedException("glProgramUniformMatrix4dv");}
public static void glProgramUniformMatrix4fv ( uint program,int location,int count,bool transpose,float[]  value ){if (__glProgramUniformMatrix4fv!=null) __glProgramUniformMatrix4fv(program,location,count,transpose,value);else throw new NotImplementedException("glProgramUniformMatrix4fv");}
public static void glProgramUniformMatrix4x2dv ( uint program,int location,int count,bool transpose,double[]  value ){if (__glProgramUniformMatrix4x2dv!=null) __glProgramUniformMatrix4x2dv(program,location,count,transpose,value);else throw new NotImplementedException("glProgramUniformMatrix4x2dv");}
public static void glProgramUniformMatrix4x2fv ( uint program,int location,int count,bool transpose,float[]  value ){if (__glProgramUniformMatrix4x2fv!=null) __glProgramUniformMatrix4x2fv(program,location,count,transpose,value);else throw new NotImplementedException("glProgramUniformMatrix4x2fv");}
public static void glProgramUniformMatrix4x3dv ( uint program,int location,int count,bool transpose,double[]  value ){if (__glProgramUniformMatrix4x3dv!=null) __glProgramUniformMatrix4x3dv(program,location,count,transpose,value);else throw new NotImplementedException("glProgramUniformMatrix4x3dv");}
public static void glProgramUniformMatrix4x3fv ( uint program,int location,int count,bool transpose,float[]  value ){if (__glProgramUniformMatrix4x3fv!=null) __glProgramUniformMatrix4x3fv(program,location,count,transpose,value);else throw new NotImplementedException("glProgramUniformMatrix4x3fv");}
public static void glUseProgramStages ( uint pipeline,uint stages,uint program ){if (__glUseProgramStages!=null) __glUseProgramStages(pipeline,stages,program);else throw new NotImplementedException("glUseProgramStages");}
public static void glValidateProgramPipeline ( uint pipeline ){if (__glValidateProgramPipeline!=null) __glValidateProgramPipeline(pipeline);else throw new NotImplementedException("glValidateProgramPipeline");}
public static void glAttachObjectARB ( IntPtr containerObj,IntPtr obj ){if (__glAttachObjectARB!=null) __glAttachObjectARB(containerObj,obj);else throw new NotImplementedException("glAttachObjectARB");}
public static void glCompileShaderARB ( IntPtr shaderObj ){if (__glCompileShaderARB!=null) __glCompileShaderARB(shaderObj);else throw new NotImplementedException("glCompileShaderARB");}
public static IntPtr glCreateProgramObjectARB (  ){if (__glCreateProgramObjectARB!=null) return __glCreateProgramObjectARB();else throw new NotImplementedException("glCreateProgramObjectARB");}
public static IntPtr glCreateShaderObjectARB ( uint shaderType ){if (__glCreateShaderObjectARB!=null) return __glCreateShaderObjectARB(shaderType);else throw new NotImplementedException("glCreateShaderObjectARB");}
public static void glDeleteObjectARB ( IntPtr obj ){if (__glDeleteObjectARB!=null) __glDeleteObjectARB(obj);else throw new NotImplementedException("glDeleteObjectARB");}
public static void glDetachObjectARB ( IntPtr containerObj,IntPtr attachedObj ){if (__glDetachObjectARB!=null) __glDetachObjectARB(containerObj,attachedObj);else throw new NotImplementedException("glDetachObjectARB");}
public static void glGetActiveUniformARB ( IntPtr programObj,uint index,int maxLength,IntPtr length,IntPtr size,IntPtr type,IntPtr name ){if (__glGetActiveUniformARB!=null) __glGetActiveUniformARB(programObj,index,maxLength,length,size,type,name);else throw new NotImplementedException("glGetActiveUniformARB");}
public static void glGetAttachedObjectsARB ( IntPtr containerObj,int maxCount,IntPtr count,IntPtr obj ){if (__glGetAttachedObjectsARB!=null) __glGetAttachedObjectsARB(containerObj,maxCount,count,obj);else throw new NotImplementedException("glGetAttachedObjectsARB");}
public static IntPtr glGetHandleARB ( uint pname ){if (__glGetHandleARB!=null) return __glGetHandleARB(pname);else throw new NotImplementedException("glGetHandleARB");}
public static void glGetInfoLogARB ( IntPtr obj,int maxLength,IntPtr length,IntPtr infoLog ){if (__glGetInfoLogARB!=null) __glGetInfoLogARB(obj,maxLength,length,infoLog);else throw new NotImplementedException("glGetInfoLogARB");}
public static void glGetObjectParameterfvARB ( IntPtr obj,uint pname,IntPtr _params ){if (__glGetObjectParameterfvARB!=null) __glGetObjectParameterfvARB(obj,pname,_params);else throw new NotImplementedException("glGetObjectParameterfvARB");}
public static void glGetObjectParameterivARB ( IntPtr obj,uint pname,IntPtr _params ){if (__glGetObjectParameterivARB!=null) __glGetObjectParameterivARB(obj,pname,_params);else throw new NotImplementedException("glGetObjectParameterivARB");}
public static void glGetShaderSourceARB ( IntPtr obj,int maxLength,IntPtr length,IntPtr source ){if (__glGetShaderSourceARB!=null) __glGetShaderSourceARB(obj,maxLength,length,source);else throw new NotImplementedException("glGetShaderSourceARB");}
public static int glGetUniformLocationARB ( IntPtr programObj,string  name ){if (__glGetUniformLocationARB!=null) return __glGetUniformLocationARB(programObj,name);else throw new NotImplementedException("glGetUniformLocationARB");}
public static void glGetUniformfvARB ( IntPtr programObj,int location,IntPtr _params ){if (__glGetUniformfvARB!=null) __glGetUniformfvARB(programObj,location,_params);else throw new NotImplementedException("glGetUniformfvARB");}
public static void glGetUniformivARB ( IntPtr programObj,int location,IntPtr _params ){if (__glGetUniformivARB!=null) __glGetUniformivARB(programObj,location,_params);else throw new NotImplementedException("glGetUniformivARB");}
public static void glLinkProgramARB ( IntPtr programObj ){if (__glLinkProgramARB!=null) __glLinkProgramARB(programObj);else throw new NotImplementedException("glLinkProgramARB");}
public static void glShaderSourceARB ( IntPtr shaderObj,int count,IntPtr _string,int[] length ){if (__glShaderSourceARB!=null) __glShaderSourceARB(shaderObj,count,_string,length);else throw new NotImplementedException("glShaderSourceARB");}
public static void glUniform1fARB ( int location,float v0 ){if (__glUniform1fARB!=null) __glUniform1fARB(location,v0);else throw new NotImplementedException("glUniform1fARB");}
public static void glUniform1fvARB ( int location,int count,float[]  value ){if (__glUniform1fvARB!=null) __glUniform1fvARB(location,count,value);else throw new NotImplementedException("glUniform1fvARB");}
public static void glUniform1iARB ( int location,int v0 ){if (__glUniform1iARB!=null) __glUniform1iARB(location,v0);else throw new NotImplementedException("glUniform1iARB");}
public static void glUniform1ivARB ( int location,int count,int[]  value ){if (__glUniform1ivARB!=null) __glUniform1ivARB(location,count,value);else throw new NotImplementedException("glUniform1ivARB");}
public static void glUniform2fARB ( int location,float v0,float v1 ){if (__glUniform2fARB!=null) __glUniform2fARB(location,v0,v1);else throw new NotImplementedException("glUniform2fARB");}
public static void glUniform2fvARB ( int location,int count,float[]  value ){if (__glUniform2fvARB!=null) __glUniform2fvARB(location,count,value);else throw new NotImplementedException("glUniform2fvARB");}
public static void glUniform2iARB ( int location,int v0,int v1 ){if (__glUniform2iARB!=null) __glUniform2iARB(location,v0,v1);else throw new NotImplementedException("glUniform2iARB");}
public static void glUniform2ivARB ( int location,int count,int[]  value ){if (__glUniform2ivARB!=null) __glUniform2ivARB(location,count,value);else throw new NotImplementedException("glUniform2ivARB");}
public static void glUniform3fARB ( int location,float v0,float v1,float v2 ){if (__glUniform3fARB!=null) __glUniform3fARB(location,v0,v1,v2);else throw new NotImplementedException("glUniform3fARB");}
public static void glUniform3fvARB ( int location,int count,float[]  value ){if (__glUniform3fvARB!=null) __glUniform3fvARB(location,count,value);else throw new NotImplementedException("glUniform3fvARB");}
public static void glUniform3iARB ( int location,int v0,int v1,int v2 ){if (__glUniform3iARB!=null) __glUniform3iARB(location,v0,v1,v2);else throw new NotImplementedException("glUniform3iARB");}
public static void glUniform3ivARB ( int location,int count,int[]  value ){if (__glUniform3ivARB!=null) __glUniform3ivARB(location,count,value);else throw new NotImplementedException("glUniform3ivARB");}
public static void glUniform4fARB ( int location,float v0,float v1,float v2,float v3 ){if (__glUniform4fARB!=null) __glUniform4fARB(location,v0,v1,v2,v3);else throw new NotImplementedException("glUniform4fARB");}
public static void glUniform4fvARB ( int location,int count,float[]  value ){if (__glUniform4fvARB!=null) __glUniform4fvARB(location,count,value);else throw new NotImplementedException("glUniform4fvARB");}
public static void glUniform4iARB ( int location,int v0,int v1,int v2,int v3 ){if (__glUniform4iARB!=null) __glUniform4iARB(location,v0,v1,v2,v3);else throw new NotImplementedException("glUniform4iARB");}
public static void glUniform4ivARB ( int location,int count,int[]  value ){if (__glUniform4ivARB!=null) __glUniform4ivARB(location,count,value);else throw new NotImplementedException("glUniform4ivARB");}
public static void glUniformMatrix2fvARB ( int location,int count,bool transpose,float[]  value ){if (__glUniformMatrix2fvARB!=null) __glUniformMatrix2fvARB(location,count,transpose,value);else throw new NotImplementedException("glUniformMatrix2fvARB");}
public static void glUniformMatrix3fvARB ( int location,int count,bool transpose,float[]  value ){if (__glUniformMatrix3fvARB!=null) __glUniformMatrix3fvARB(location,count,transpose,value);else throw new NotImplementedException("glUniformMatrix3fvARB");}
public static void glUniformMatrix4fvARB ( int location,int count,bool transpose,float[]  value ){if (__glUniformMatrix4fvARB!=null) __glUniformMatrix4fvARB(location,count,transpose,value);else throw new NotImplementedException("glUniformMatrix4fvARB");}
public static void glUseProgramObjectARB ( IntPtr programObj ){if (__glUseProgramObjectARB!=null) __glUseProgramObjectARB(programObj);else throw new NotImplementedException("glUseProgramObjectARB");}
public static void glValidateProgramARB ( IntPtr programObj ){if (__glValidateProgramARB!=null) __glValidateProgramARB(programObj);else throw new NotImplementedException("glValidateProgramARB");}
public static void glGetActiveSubroutineName ( uint program,uint shadertype,uint index,int bufsize,IntPtr length,IntPtr name ){if (__glGetActiveSubroutineName!=null) __glGetActiveSubroutineName(program,shadertype,index,bufsize,length,name);else throw new NotImplementedException("glGetActiveSubroutineName");}
public static void glGetActiveSubroutineUniformName ( uint program,uint shadertype,uint index,int bufsize,IntPtr length,IntPtr name ){if (__glGetActiveSubroutineUniformName!=null) __glGetActiveSubroutineUniformName(program,shadertype,index,bufsize,length,name);else throw new NotImplementedException("glGetActiveSubroutineUniformName");}
public static void glGetActiveSubroutineUniformiv ( uint program,uint shadertype,uint index,uint pname,IntPtr values ){if (__glGetActiveSubroutineUniformiv!=null) __glGetActiveSubroutineUniformiv(program,shadertype,index,pname,values);else throw new NotImplementedException("glGetActiveSubroutineUniformiv");}
public static void glGetProgramStageiv ( uint program,uint shadertype,uint pname,IntPtr values ){if (__glGetProgramStageiv!=null) __glGetProgramStageiv(program,shadertype,pname,values);else throw new NotImplementedException("glGetProgramStageiv");}
public static uint glGetSubroutineIndex ( uint program,uint shadertype,string  name ){if (__glGetSubroutineIndex!=null) return __glGetSubroutineIndex(program,shadertype,name);else throw new NotImplementedException("glGetSubroutineIndex");}
public static int glGetSubroutineUniformLocation ( uint program,uint shadertype,string  name ){if (__glGetSubroutineUniformLocation!=null) return __glGetSubroutineUniformLocation(program,shadertype,name);else throw new NotImplementedException("glGetSubroutineUniformLocation");}
public static void glGetUniformSubroutineuiv ( uint shadertype,int location,IntPtr _params ){if (__glGetUniformSubroutineuiv!=null) __glGetUniformSubroutineuiv(shadertype,location,_params);else throw new NotImplementedException("glGetUniformSubroutineuiv");}
public static void glUniformSubroutinesuiv ( uint shadertype,int count,uint[]  indices ){if (__glUniformSubroutinesuiv!=null) __glUniformSubroutinesuiv(shadertype,count,indices);else throw new NotImplementedException("glUniformSubroutinesuiv");}
public static void glCompileShaderIncludeARB ( uint shader,int count,IntPtr path,int[] length ){if (__glCompileShaderIncludeARB!=null) __glCompileShaderIncludeARB(shader,count,path,length);else throw new NotImplementedException("glCompileShaderIncludeARB");}
public static void glDeleteNamedStringARB ( int namelen,string  name ){if (__glDeleteNamedStringARB!=null) __glDeleteNamedStringARB(namelen,name);else throw new NotImplementedException("glDeleteNamedStringARB");}
public static void glGetNamedStringARB ( int namelen,string  name,int bufSize,IntPtr stringlen,IntPtr _string ){if (__glGetNamedStringARB!=null) __glGetNamedStringARB(namelen,name,bufSize,stringlen,_string);else throw new NotImplementedException("glGetNamedStringARB");}
public static void glGetNamedStringivARB ( int namelen,string  name,uint pname,IntPtr _params ){if (__glGetNamedStringivARB!=null) __glGetNamedStringivARB(namelen,name,pname,_params);else throw new NotImplementedException("glGetNamedStringivARB");}
public static bool glIsNamedStringARB ( int namelen,string  name ){if (__glIsNamedStringARB!=null) return __glIsNamedStringARB(namelen,name);else throw new NotImplementedException("glIsNamedStringARB");}
public static void glNamedStringARB ( uint type,int namelen,string  name,int stringlen,string _string ){if (__glNamedStringARB!=null) __glNamedStringARB(type,namelen,name,stringlen,_string);else throw new NotImplementedException("glNamedStringARB");}
public static uint glClientWaitSync ( IntPtr GLsync,uint flags,long timeout ){if (__glClientWaitSync!=null) return __glClientWaitSync(GLsync,flags,timeout);else throw new NotImplementedException("glClientWaitSync");}
public static void glDeleteSync ( IntPtr GLsync ){if (__glDeleteSync!=null) __glDeleteSync(GLsync);else throw new NotImplementedException("glDeleteSync");}
public static IntPtr glFenceSync ( uint condition,uint flags ){if (__glFenceSync!=null) return __glFenceSync(condition,flags);else throw new NotImplementedException("glFenceSync");}
public static void glGetInteger64v ( uint pname,IntPtr _params ){if (__glGetInteger64v!=null) __glGetInteger64v(pname,_params);else throw new NotImplementedException("glGetInteger64v");}
public static void glGetSynciv ( IntPtr GLsync,uint pname,int bufSize,IntPtr length,IntPtr values ){if (__glGetSynciv!=null) __glGetSynciv(GLsync,pname,bufSize,length,values);else throw new NotImplementedException("glGetSynciv");}
public static bool glIsSync ( IntPtr GLsync ){if (__glIsSync!=null) return __glIsSync(GLsync);else throw new NotImplementedException("glIsSync");}
public static void glWaitSync ( IntPtr GLsync,uint flags,long timeout ){if (__glWaitSync!=null) __glWaitSync(GLsync,flags,timeout);else throw new NotImplementedException("glWaitSync");}
public static void glPatchParameterfv ( uint pname,float[]  values ){if (__glPatchParameterfv!=null) __glPatchParameterfv(pname,values);else throw new NotImplementedException("glPatchParameterfv");}
public static void glPatchParameteri ( uint pname,int value ){if (__glPatchParameteri!=null) __glPatchParameteri(pname,value);else throw new NotImplementedException("glPatchParameteri");}
public static void glTexBufferARB ( uint target,uint internalformat,uint buffer ){if (__glTexBufferARB!=null) __glTexBufferARB(target,internalformat,buffer);else throw new NotImplementedException("glTexBufferARB");}
public static void glCompressedTexImage1DARB ( uint target,int level,uint internalformat,int width,int border,int imageSize,IntPtr  data ){if (__glCompressedTexImage1DARB!=null) __glCompressedTexImage1DARB(target,level,internalformat,width,border,imageSize,data);else throw new NotImplementedException("glCompressedTexImage1DARB");}
public static void glCompressedTexImage2DARB ( uint target,int level,uint internalformat,int width,int height,int border,int imageSize,IntPtr  data ){if (__glCompressedTexImage2DARB!=null) __glCompressedTexImage2DARB(target,level,internalformat,width,height,border,imageSize,data);else throw new NotImplementedException("glCompressedTexImage2DARB");}
public static void glCompressedTexImage3DARB ( uint target,int level,uint internalformat,int width,int height,int depth,int border,int imageSize,IntPtr  data ){if (__glCompressedTexImage3DARB!=null) __glCompressedTexImage3DARB(target,level,internalformat,width,height,depth,border,imageSize,data);else throw new NotImplementedException("glCompressedTexImage3DARB");}
public static void glCompressedTexSubImage1DARB ( uint target,int level,int xoffset,int width,uint format,int imageSize,IntPtr  data ){if (__glCompressedTexSubImage1DARB!=null) __glCompressedTexSubImage1DARB(target,level,xoffset,width,format,imageSize,data);else throw new NotImplementedException("glCompressedTexSubImage1DARB");}
public static void glCompressedTexSubImage2DARB ( uint target,int level,int xoffset,int yoffset,int width,int height,uint format,int imageSize,IntPtr  data ){if (__glCompressedTexSubImage2DARB!=null) __glCompressedTexSubImage2DARB(target,level,xoffset,yoffset,width,height,format,imageSize,data);else throw new NotImplementedException("glCompressedTexSubImage2DARB");}
public static void glCompressedTexSubImage3DARB ( uint target,int level,int xoffset,int yoffset,int zoffset,int width,int height,int depth,uint format,int imageSize,IntPtr  data ){if (__glCompressedTexSubImage3DARB!=null) __glCompressedTexSubImage3DARB(target,level,xoffset,yoffset,zoffset,width,height,depth,format,imageSize,data);else throw new NotImplementedException("glCompressedTexSubImage3DARB");}
public static void glGetCompressedTexImageARB ( uint target,int lod,IntPtr img ){if (__glGetCompressedTexImageARB!=null) __glGetCompressedTexImageARB(target,lod,img);else throw new NotImplementedException("glGetCompressedTexImageARB");}
public static void glGetMultisamplefv ( uint pname,uint index,IntPtr val ){if (__glGetMultisamplefv!=null) __glGetMultisamplefv(pname,index,val);else throw new NotImplementedException("glGetMultisamplefv");}
public static void glSampleMaski ( uint index,uint mask ){if (__glSampleMaski!=null) __glSampleMaski(index,mask);else throw new NotImplementedException("glSampleMaski");}
public static void glTexImage2DMultisample ( uint target,int samples,int internalformat,int width,int height,bool fixedsamplelocations ){if (__glTexImage2DMultisample!=null) __glTexImage2DMultisample(target,samples,internalformat,width,height,fixedsamplelocations);else throw new NotImplementedException("glTexImage2DMultisample");}
public static void glTexImage3DMultisample ( uint target,int samples,int internalformat,int width,int height,int depth,bool fixedsamplelocations ){if (__glTexImage3DMultisample!=null) __glTexImage3DMultisample(target,samples,internalformat,width,height,depth,fixedsamplelocations);else throw new NotImplementedException("glTexImage3DMultisample");}
public static void glGetQueryObjecti64v ( uint id,uint pname,IntPtr _params ){if (__glGetQueryObjecti64v!=null) __glGetQueryObjecti64v(id,pname,_params);else throw new NotImplementedException("glGetQueryObjecti64v");}
public static void glGetQueryObjectui64v ( uint id,uint pname,IntPtr _params ){if (__glGetQueryObjectui64v!=null) __glGetQueryObjectui64v(id,pname,_params);else throw new NotImplementedException("glGetQueryObjectui64v");}
public static void glQueryCounter ( uint id,uint target ){if (__glQueryCounter!=null) __glQueryCounter(id,target);else throw new NotImplementedException("glQueryCounter");}
public static void glBindTransformFeedback ( uint target,uint id ){if (__glBindTransformFeedback!=null) __glBindTransformFeedback(target,id);else throw new NotImplementedException("glBindTransformFeedback");}
public static void glDeleteTransformFeedbacks ( int n,uint[]  ids ){if (__glDeleteTransformFeedbacks!=null) __glDeleteTransformFeedbacks(n,ids);else throw new NotImplementedException("glDeleteTransformFeedbacks");}
public static void glDrawTransformFeedback ( uint mode,uint id ){if (__glDrawTransformFeedback!=null) __glDrawTransformFeedback(mode,id);else throw new NotImplementedException("glDrawTransformFeedback");}
public static void glGenTransformFeedbacks ( int n,IntPtr ids ){if (__glGenTransformFeedbacks!=null) __glGenTransformFeedbacks(n,ids);else throw new NotImplementedException("glGenTransformFeedbacks");}
public static bool glIsTransformFeedback ( uint id ){if (__glIsTransformFeedback!=null) return __glIsTransformFeedback(id);else throw new NotImplementedException("glIsTransformFeedback");}
public static void glPauseTransformFeedback (  ){if (__glPauseTransformFeedback!=null) __glPauseTransformFeedback();else throw new NotImplementedException("glPauseTransformFeedback");}
public static void glResumeTransformFeedback (  ){if (__glResumeTransformFeedback!=null) __glResumeTransformFeedback();else throw new NotImplementedException("glResumeTransformFeedback");}
public static void glBeginQueryIndexed ( uint target,uint index,uint id ){if (__glBeginQueryIndexed!=null) __glBeginQueryIndexed(target,index,id);else throw new NotImplementedException("glBeginQueryIndexed");}
public static void glDrawTransformFeedbackStream ( uint mode,uint id,uint stream ){if (__glDrawTransformFeedbackStream!=null) __glDrawTransformFeedbackStream(mode,id,stream);else throw new NotImplementedException("glDrawTransformFeedbackStream");}
public static void glEndQueryIndexed ( uint target,uint index ){if (__glEndQueryIndexed!=null) __glEndQueryIndexed(target,index);else throw new NotImplementedException("glEndQueryIndexed");}
public static void glGetQueryIndexediv ( uint target,uint index,uint pname,IntPtr _params ){if (__glGetQueryIndexediv!=null) __glGetQueryIndexediv(target,index,pname,_params);else throw new NotImplementedException("glGetQueryIndexediv");}
public static void glLoadTransposeMatrixdARB ( double m ){if (__glLoadTransposeMatrixdARB!=null) __glLoadTransposeMatrixdARB(m);else throw new NotImplementedException("glLoadTransposeMatrixdARB");}
public static void glLoadTransposeMatrixfARB ( float m ){if (__glLoadTransposeMatrixfARB!=null) __glLoadTransposeMatrixfARB(m);else throw new NotImplementedException("glLoadTransposeMatrixfARB");}
public static void glMultTransposeMatrixdARB ( double m ){if (__glMultTransposeMatrixdARB!=null) __glMultTransposeMatrixdARB(m);else throw new NotImplementedException("glMultTransposeMatrixdARB");}
public static void glMultTransposeMatrixfARB ( float m ){if (__glMultTransposeMatrixfARB!=null) __glMultTransposeMatrixfARB(m);else throw new NotImplementedException("glMultTransposeMatrixfARB");}
public static void glBindBufferBase ( uint target,uint index,uint buffer ){if (__glBindBufferBase!=null) __glBindBufferBase(target,index,buffer);else throw new NotImplementedException("glBindBufferBase");}
public static void glBindBufferRange ( uint target,uint index,uint buffer,IntPtr offset,IntPtr size ){if (__glBindBufferRange!=null) __glBindBufferRange(target,index,buffer,offset,size);else throw new NotImplementedException("glBindBufferRange");}
public static void glGetActiveUniformBlockName ( uint program,uint uniformBlockIndex,int bufSize,IntPtr length,IntPtr uniformBlockName ){if (__glGetActiveUniformBlockName!=null) __glGetActiveUniformBlockName(program,uniformBlockIndex,bufSize,length,uniformBlockName);else throw new NotImplementedException("glGetActiveUniformBlockName");}
public static void glGetActiveUniformBlockiv ( uint program,uint uniformBlockIndex,uint pname,IntPtr _params ){if (__glGetActiveUniformBlockiv!=null) __glGetActiveUniformBlockiv(program,uniformBlockIndex,pname,_params);else throw new NotImplementedException("glGetActiveUniformBlockiv");}
public static void glGetActiveUniformName ( uint program,uint uniformIndex,int bufSize,IntPtr length,IntPtr uniformName ){if (__glGetActiveUniformName!=null) __glGetActiveUniformName(program,uniformIndex,bufSize,length,uniformName);else throw new NotImplementedException("glGetActiveUniformName");}
public static void glGetActiveUniformsiv ( uint program,int uniformCount,uint[]  uniformIndices,uint pname,IntPtr _params ){if (__glGetActiveUniformsiv!=null) __glGetActiveUniformsiv(program,uniformCount,uniformIndices,pname,_params);else throw new NotImplementedException("glGetActiveUniformsiv");}
public static void glGetIntegeri_v ( uint target,uint index,IntPtr data ){if (__glGetIntegeri_v!=null) __glGetIntegeri_v(target,index,data);else throw new NotImplementedException("glGetIntegeri_v");}
public static uint glGetUniformBlockIndex ( uint program,string  uniformBlockName ){if (__glGetUniformBlockIndex!=null) return __glGetUniformBlockIndex(program,uniformBlockName);else throw new NotImplementedException("glGetUniformBlockIndex");}
public static void glGetUniformIndices ( uint program,int uniformCount,IntPtr uniformNames,IntPtr uniformIndices ){if (__glGetUniformIndices!=null) __glGetUniformIndices(program,uniformCount,uniformNames,uniformIndices);else throw new NotImplementedException("glGetUniformIndices");}
public static void glUniformBlockBinding ( uint program,uint uniformBlockIndex,uint uniformBlockBinding ){if (__glUniformBlockBinding!=null) __glUniformBlockBinding(program,uniformBlockIndex,uniformBlockBinding);else throw new NotImplementedException("glUniformBlockBinding");}
public static void glBindVertexArray ( uint array ){if (__glBindVertexArray!=null) __glBindVertexArray(array);else throw new NotImplementedException("glBindVertexArray");}
public static void glDeleteVertexArrays ( int n,uint[]  arrays ){if (__glDeleteVertexArrays!=null) __glDeleteVertexArrays(n,arrays);else throw new NotImplementedException("glDeleteVertexArrays");}
public static void glGenVertexArrays ( int n,IntPtr arrays ){if (__glGenVertexArrays!=null) __glGenVertexArrays(n,arrays);else throw new NotImplementedException("glGenVertexArrays");}
public static bool glIsVertexArray ( uint array ){if (__glIsVertexArray!=null) return __glIsVertexArray(array);else throw new NotImplementedException("glIsVertexArray");}
public static void glGetVertexAttribLdv ( uint index,uint pname,IntPtr _params ){if (__glGetVertexAttribLdv!=null) __glGetVertexAttribLdv(index,pname,_params);else throw new NotImplementedException("glGetVertexAttribLdv");}
public static void glVertexAttribL1d ( uint index,double x ){if (__glVertexAttribL1d!=null) __glVertexAttribL1d(index,x);else throw new NotImplementedException("glVertexAttribL1d");}
public static void glVertexAttribL1dv ( uint index,double[]  v ){if (__glVertexAttribL1dv!=null) __glVertexAttribL1dv(index,v);else throw new NotImplementedException("glVertexAttribL1dv");}
public static void glVertexAttribL2d ( uint index,double x,double y ){if (__glVertexAttribL2d!=null) __glVertexAttribL2d(index,x,y);else throw new NotImplementedException("glVertexAttribL2d");}
public static void glVertexAttribL2dv ( uint index,double[]  v ){if (__glVertexAttribL2dv!=null) __glVertexAttribL2dv(index,v);else throw new NotImplementedException("glVertexAttribL2dv");}
public static void glVertexAttribL3d ( uint index,double x,double y,double z ){if (__glVertexAttribL3d!=null) __glVertexAttribL3d(index,x,y,z);else throw new NotImplementedException("glVertexAttribL3d");}
public static void glVertexAttribL3dv ( uint index,double[]  v ){if (__glVertexAttribL3dv!=null) __glVertexAttribL3dv(index,v);else throw new NotImplementedException("glVertexAttribL3dv");}
public static void glVertexAttribL4d ( uint index,double x,double y,double z,double w ){if (__glVertexAttribL4d!=null) __glVertexAttribL4d(index,x,y,z,w);else throw new NotImplementedException("glVertexAttribL4d");}
public static void glVertexAttribL4dv ( uint index,double[]  v ){if (__glVertexAttribL4dv!=null) __glVertexAttribL4dv(index,v);else throw new NotImplementedException("glVertexAttribL4dv");}
public static void glVertexAttribLPointer ( uint index,int size,uint type,int stride,IntPtr  pointer ){if (__glVertexAttribLPointer!=null) __glVertexAttribLPointer(index,size,type,stride,pointer);else throw new NotImplementedException("glVertexAttribLPointer");}
public static void glVertexBlendARB ( int count ){if (__glVertexBlendARB!=null) __glVertexBlendARB(count);else throw new NotImplementedException("glVertexBlendARB");}
public static void glWeightPointerARB ( int size,uint type,int stride,IntPtr pointer ){if (__glWeightPointerARB!=null) __glWeightPointerARB(size,type,stride,pointer);else throw new NotImplementedException("glWeightPointerARB");}
public static void glWeightbvARB ( int size,IntPtr weights ){if (__glWeightbvARB!=null) __glWeightbvARB(size,weights);else throw new NotImplementedException("glWeightbvARB");}
public static void glWeightdvARB ( int size,IntPtr weights ){if (__glWeightdvARB!=null) __glWeightdvARB(size,weights);else throw new NotImplementedException("glWeightdvARB");}
public static void glWeightfvARB ( int size,IntPtr weights ){if (__glWeightfvARB!=null) __glWeightfvARB(size,weights);else throw new NotImplementedException("glWeightfvARB");}
public static void glWeightivARB ( int size,IntPtr weights ){if (__glWeightivARB!=null) __glWeightivARB(size,weights);else throw new NotImplementedException("glWeightivARB");}
public static void glWeightsvARB ( int size,IntPtr weights ){if (__glWeightsvARB!=null) __glWeightsvARB(size,weights);else throw new NotImplementedException("glWeightsvARB");}
public static void glWeightubvARB ( int size,IntPtr weights ){if (__glWeightubvARB!=null) __glWeightubvARB(size,weights);else throw new NotImplementedException("glWeightubvARB");}
public static void glWeightuivARB ( int size,IntPtr weights ){if (__glWeightuivARB!=null) __glWeightuivARB(size,weights);else throw new NotImplementedException("glWeightuivARB");}
public static void glWeightusvARB ( int size,IntPtr weights ){if (__glWeightusvARB!=null) __glWeightusvARB(size,weights);else throw new NotImplementedException("glWeightusvARB");}
public static void glBindBufferARB ( uint target,uint buffer ){if (__glBindBufferARB!=null) __glBindBufferARB(target,buffer);else throw new NotImplementedException("glBindBufferARB");}
public static void glBufferDataARB ( uint target,IntPtr size,IntPtr  data,uint usage ){if (__glBufferDataARB!=null) __glBufferDataARB(target,size,data,usage);else throw new NotImplementedException("glBufferDataARB");}
public static void glBufferSubDataARB ( uint target,IntPtr offset,IntPtr size,IntPtr  data ){if (__glBufferSubDataARB!=null) __glBufferSubDataARB(target,offset,size,data);else throw new NotImplementedException("glBufferSubDataARB");}
public static void glDeleteBuffersARB ( int n,uint[]  buffers ){if (__glDeleteBuffersARB!=null) __glDeleteBuffersARB(n,buffers);else throw new NotImplementedException("glDeleteBuffersARB");}
public static void glGenBuffersARB ( int n,IntPtr buffers ){if (__glGenBuffersARB!=null) __glGenBuffersARB(n,buffers);else throw new NotImplementedException("glGenBuffersARB");}
public static void glGetBufferParameterivARB ( uint target,uint pname,IntPtr _params ){if (__glGetBufferParameterivARB!=null) __glGetBufferParameterivARB(target,pname,_params);else throw new NotImplementedException("glGetBufferParameterivARB");}
public static void glGetBufferPointervARB ( uint target,uint pname,IntPtr _params ){if (__glGetBufferPointervARB!=null) __glGetBufferPointervARB(target,pname,_params);else throw new NotImplementedException("glGetBufferPointervARB");}
public static void glGetBufferSubDataARB ( uint target,IntPtr offset,IntPtr size,IntPtr data ){if (__glGetBufferSubDataARB!=null) __glGetBufferSubDataARB(target,offset,size,data);else throw new NotImplementedException("glGetBufferSubDataARB");}
public static bool glIsBufferARB ( uint buffer ){if (__glIsBufferARB!=null) return __glIsBufferARB(buffer);else throw new NotImplementedException("glIsBufferARB");}
public static IntPtr glMapBufferARB ( uint target,uint access ){if (__glMapBufferARB!=null) return __glMapBufferARB(target,access);else throw new NotImplementedException("glMapBufferARB");}
public static bool glUnmapBufferARB ( uint target ){if (__glUnmapBufferARB!=null) return __glUnmapBufferARB(target);else throw new NotImplementedException("glUnmapBufferARB");}
public static void glBindProgramARB ( uint target,uint program ){if (__glBindProgramARB!=null) __glBindProgramARB(target,program);else throw new NotImplementedException("glBindProgramARB");}
public static void glDeleteProgramsARB ( int n,uint[]  programs ){if (__glDeleteProgramsARB!=null) __glDeleteProgramsARB(n,programs);else throw new NotImplementedException("glDeleteProgramsARB");}
public static void glDisableVertexAttribArrayARB ( uint index ){if (__glDisableVertexAttribArrayARB!=null) __glDisableVertexAttribArrayARB(index);else throw new NotImplementedException("glDisableVertexAttribArrayARB");}
public static void glEnableVertexAttribArrayARB ( uint index ){if (__glEnableVertexAttribArrayARB!=null) __glEnableVertexAttribArrayARB(index);else throw new NotImplementedException("glEnableVertexAttribArrayARB");}
public static void glGenProgramsARB ( int n,IntPtr programs ){if (__glGenProgramsARB!=null) __glGenProgramsARB(n,programs);else throw new NotImplementedException("glGenProgramsARB");}
public static void glGetProgramEnvParameterdvARB ( uint target,uint index,IntPtr _params ){if (__glGetProgramEnvParameterdvARB!=null) __glGetProgramEnvParameterdvARB(target,index,_params);else throw new NotImplementedException("glGetProgramEnvParameterdvARB");}
public static void glGetProgramEnvParameterfvARB ( uint target,uint index,IntPtr _params ){if (__glGetProgramEnvParameterfvARB!=null) __glGetProgramEnvParameterfvARB(target,index,_params);else throw new NotImplementedException("glGetProgramEnvParameterfvARB");}
public static void glGetProgramLocalParameterdvARB ( uint target,uint index,IntPtr _params ){if (__glGetProgramLocalParameterdvARB!=null) __glGetProgramLocalParameterdvARB(target,index,_params);else throw new NotImplementedException("glGetProgramLocalParameterdvARB");}
public static void glGetProgramLocalParameterfvARB ( uint target,uint index,IntPtr _params ){if (__glGetProgramLocalParameterfvARB!=null) __glGetProgramLocalParameterfvARB(target,index,_params);else throw new NotImplementedException("glGetProgramLocalParameterfvARB");}
public static void glGetProgramStringARB ( uint target,uint pname,IntPtr _string ){if (__glGetProgramStringARB!=null) __glGetProgramStringARB(target,pname,_string);else throw new NotImplementedException("glGetProgramStringARB");}
public static void glGetProgramivARB ( uint target,uint pname,IntPtr _params ){if (__glGetProgramivARB!=null) __glGetProgramivARB(target,pname,_params);else throw new NotImplementedException("glGetProgramivARB");}
public static void glGetVertexAttribPointervARB ( uint index,uint pname,IntPtr pointer ){if (__glGetVertexAttribPointervARB!=null) __glGetVertexAttribPointervARB(index,pname,pointer);else throw new NotImplementedException("glGetVertexAttribPointervARB");}
public static void glGetVertexAttribdvARB ( uint index,uint pname,IntPtr _params ){if (__glGetVertexAttribdvARB!=null) __glGetVertexAttribdvARB(index,pname,_params);else throw new NotImplementedException("glGetVertexAttribdvARB");}
public static void glGetVertexAttribfvARB ( uint index,uint pname,IntPtr _params ){if (__glGetVertexAttribfvARB!=null) __glGetVertexAttribfvARB(index,pname,_params);else throw new NotImplementedException("glGetVertexAttribfvARB");}
public static void glGetVertexAttribivARB ( uint index,uint pname,IntPtr _params ){if (__glGetVertexAttribivARB!=null) __glGetVertexAttribivARB(index,pname,_params);else throw new NotImplementedException("glGetVertexAttribivARB");}
public static bool glIsProgramARB ( uint program ){if (__glIsProgramARB!=null) return __glIsProgramARB(program);else throw new NotImplementedException("glIsProgramARB");}
public static void glProgramEnvParameter4dARB ( uint target,uint index,double x,double y,double z,double w ){if (__glProgramEnvParameter4dARB!=null) __glProgramEnvParameter4dARB(target,index,x,y,z,w);else throw new NotImplementedException("glProgramEnvParameter4dARB");}
public static void glProgramEnvParameter4dvARB ( uint target,uint index,double[]  _params ){if (__glProgramEnvParameter4dvARB!=null) __glProgramEnvParameter4dvARB(target,index,_params);else throw new NotImplementedException("glProgramEnvParameter4dvARB");}
public static void glProgramEnvParameter4fARB ( uint target,uint index,float x,float y,float z,float w ){if (__glProgramEnvParameter4fARB!=null) __glProgramEnvParameter4fARB(target,index,x,y,z,w);else throw new NotImplementedException("glProgramEnvParameter4fARB");}
public static void glProgramEnvParameter4fvARB ( uint target,uint index,float[]  _params ){if (__glProgramEnvParameter4fvARB!=null) __glProgramEnvParameter4fvARB(target,index,_params);else throw new NotImplementedException("glProgramEnvParameter4fvARB");}
public static void glProgramLocalParameter4dARB ( uint target,uint index,double x,double y,double z,double w ){if (__glProgramLocalParameter4dARB!=null) __glProgramLocalParameter4dARB(target,index,x,y,z,w);else throw new NotImplementedException("glProgramLocalParameter4dARB");}
public static void glProgramLocalParameter4dvARB ( uint target,uint index,double[]  _params ){if (__glProgramLocalParameter4dvARB!=null) __glProgramLocalParameter4dvARB(target,index,_params);else throw new NotImplementedException("glProgramLocalParameter4dvARB");}
public static void glProgramLocalParameter4fARB ( uint target,uint index,float x,float y,float z,float w ){if (__glProgramLocalParameter4fARB!=null) __glProgramLocalParameter4fARB(target,index,x,y,z,w);else throw new NotImplementedException("glProgramLocalParameter4fARB");}
public static void glProgramLocalParameter4fvARB ( uint target,uint index,float[]  _params ){if (__glProgramLocalParameter4fvARB!=null) __glProgramLocalParameter4fvARB(target,index,_params);else throw new NotImplementedException("glProgramLocalParameter4fvARB");}
public static void glProgramStringARB ( uint target,uint format,int len,IntPtr  _string ){if (__glProgramStringARB!=null) __glProgramStringARB(target,format,len,_string);else throw new NotImplementedException("glProgramStringARB");}
public static void glVertexAttrib1dARB ( uint index,double x ){if (__glVertexAttrib1dARB!=null) __glVertexAttrib1dARB(index,x);else throw new NotImplementedException("glVertexAttrib1dARB");}
public static void glVertexAttrib1dvARB ( uint index,double[]  v ){if (__glVertexAttrib1dvARB!=null) __glVertexAttrib1dvARB(index,v);else throw new NotImplementedException("glVertexAttrib1dvARB");}
public static void glVertexAttrib1fARB ( uint index,float x ){if (__glVertexAttrib1fARB!=null) __glVertexAttrib1fARB(index,x);else throw new NotImplementedException("glVertexAttrib1fARB");}
public static void glVertexAttrib1fvARB ( uint index,float[]  v ){if (__glVertexAttrib1fvARB!=null) __glVertexAttrib1fvARB(index,v);else throw new NotImplementedException("glVertexAttrib1fvARB");}
public static void glVertexAttrib1sARB ( uint index,short x ){if (__glVertexAttrib1sARB!=null) __glVertexAttrib1sARB(index,x);else throw new NotImplementedException("glVertexAttrib1sARB");}
public static void glVertexAttrib1svARB ( uint index,short[]  v ){if (__glVertexAttrib1svARB!=null) __glVertexAttrib1svARB(index,v);else throw new NotImplementedException("glVertexAttrib1svARB");}
public static void glVertexAttrib2dARB ( uint index,double x,double y ){if (__glVertexAttrib2dARB!=null) __glVertexAttrib2dARB(index,x,y);else throw new NotImplementedException("glVertexAttrib2dARB");}
public static void glVertexAttrib2dvARB ( uint index,double[]  v ){if (__glVertexAttrib2dvARB!=null) __glVertexAttrib2dvARB(index,v);else throw new NotImplementedException("glVertexAttrib2dvARB");}
public static void glVertexAttrib2fARB ( uint index,float x,float y ){if (__glVertexAttrib2fARB!=null) __glVertexAttrib2fARB(index,x,y);else throw new NotImplementedException("glVertexAttrib2fARB");}
public static void glVertexAttrib2fvARB ( uint index,float[]  v ){if (__glVertexAttrib2fvARB!=null) __glVertexAttrib2fvARB(index,v);else throw new NotImplementedException("glVertexAttrib2fvARB");}
public static void glVertexAttrib2sARB ( uint index,short x,short y ){if (__glVertexAttrib2sARB!=null) __glVertexAttrib2sARB(index,x,y);else throw new NotImplementedException("glVertexAttrib2sARB");}
public static void glVertexAttrib2svARB ( uint index,short[]  v ){if (__glVertexAttrib2svARB!=null) __glVertexAttrib2svARB(index,v);else throw new NotImplementedException("glVertexAttrib2svARB");}
public static void glVertexAttrib3dARB ( uint index,double x,double y,double z ){if (__glVertexAttrib3dARB!=null) __glVertexAttrib3dARB(index,x,y,z);else throw new NotImplementedException("glVertexAttrib3dARB");}
public static void glVertexAttrib3dvARB ( uint index,double[]  v ){if (__glVertexAttrib3dvARB!=null) __glVertexAttrib3dvARB(index,v);else throw new NotImplementedException("glVertexAttrib3dvARB");}
public static void glVertexAttrib3fARB ( uint index,float x,float y,float z ){if (__glVertexAttrib3fARB!=null) __glVertexAttrib3fARB(index,x,y,z);else throw new NotImplementedException("glVertexAttrib3fARB");}
public static void glVertexAttrib3fvARB ( uint index,float[]  v ){if (__glVertexAttrib3fvARB!=null) __glVertexAttrib3fvARB(index,v);else throw new NotImplementedException("glVertexAttrib3fvARB");}
public static void glVertexAttrib3sARB ( uint index,short x,short y,short z ){if (__glVertexAttrib3sARB!=null) __glVertexAttrib3sARB(index,x,y,z);else throw new NotImplementedException("glVertexAttrib3sARB");}
public static void glVertexAttrib3svARB ( uint index,short[]  v ){if (__glVertexAttrib3svARB!=null) __glVertexAttrib3svARB(index,v);else throw new NotImplementedException("glVertexAttrib3svARB");}
public static void glVertexAttrib4NbvARB ( uint index,byte[]  v ){if (__glVertexAttrib4NbvARB!=null) __glVertexAttrib4NbvARB(index,v);else throw new NotImplementedException("glVertexAttrib4NbvARB");}
public static void glVertexAttrib4NivARB ( uint index,int[]  v ){if (__glVertexAttrib4NivARB!=null) __glVertexAttrib4NivARB(index,v);else throw new NotImplementedException("glVertexAttrib4NivARB");}
public static void glVertexAttrib4NsvARB ( uint index,short[]  v ){if (__glVertexAttrib4NsvARB!=null) __glVertexAttrib4NsvARB(index,v);else throw new NotImplementedException("glVertexAttrib4NsvARB");}
public static void glVertexAttrib4NubARB ( uint index,byte x,byte y,byte z,byte w ){if (__glVertexAttrib4NubARB!=null) __glVertexAttrib4NubARB(index,x,y,z,w);else throw new NotImplementedException("glVertexAttrib4NubARB");}
public static void glVertexAttrib4NubvARB ( uint index,byte[]  v ){if (__glVertexAttrib4NubvARB!=null) __glVertexAttrib4NubvARB(index,v);else throw new NotImplementedException("glVertexAttrib4NubvARB");}
public static void glVertexAttrib4NuivARB ( uint index,uint[]  v ){if (__glVertexAttrib4NuivARB!=null) __glVertexAttrib4NuivARB(index,v);else throw new NotImplementedException("glVertexAttrib4NuivARB");}
public static void glVertexAttrib4NusvARB ( uint index,ushort[]  v ){if (__glVertexAttrib4NusvARB!=null) __glVertexAttrib4NusvARB(index,v);else throw new NotImplementedException("glVertexAttrib4NusvARB");}
public static void glVertexAttrib4bvARB ( uint index,byte[]  v ){if (__glVertexAttrib4bvARB!=null) __glVertexAttrib4bvARB(index,v);else throw new NotImplementedException("glVertexAttrib4bvARB");}
public static void glVertexAttrib4dARB ( uint index,double x,double y,double z,double w ){if (__glVertexAttrib4dARB!=null) __glVertexAttrib4dARB(index,x,y,z,w);else throw new NotImplementedException("glVertexAttrib4dARB");}
public static void glVertexAttrib4dvARB ( uint index,double[]  v ){if (__glVertexAttrib4dvARB!=null) __glVertexAttrib4dvARB(index,v);else throw new NotImplementedException("glVertexAttrib4dvARB");}
public static void glVertexAttrib4fARB ( uint index,float x,float y,float z,float w ){if (__glVertexAttrib4fARB!=null) __glVertexAttrib4fARB(index,x,y,z,w);else throw new NotImplementedException("glVertexAttrib4fARB");}
public static void glVertexAttrib4fvARB ( uint index,float[]  v ){if (__glVertexAttrib4fvARB!=null) __glVertexAttrib4fvARB(index,v);else throw new NotImplementedException("glVertexAttrib4fvARB");}
public static void glVertexAttrib4ivARB ( uint index,int[]  v ){if (__glVertexAttrib4ivARB!=null) __glVertexAttrib4ivARB(index,v);else throw new NotImplementedException("glVertexAttrib4ivARB");}
public static void glVertexAttrib4sARB ( uint index,short x,short y,short z,short w ){if (__glVertexAttrib4sARB!=null) __glVertexAttrib4sARB(index,x,y,z,w);else throw new NotImplementedException("glVertexAttrib4sARB");}
public static void glVertexAttrib4svARB ( uint index,short[]  v ){if (__glVertexAttrib4svARB!=null) __glVertexAttrib4svARB(index,v);else throw new NotImplementedException("glVertexAttrib4svARB");}
public static void glVertexAttrib4ubvARB ( uint index,byte[]  v ){if (__glVertexAttrib4ubvARB!=null) __glVertexAttrib4ubvARB(index,v);else throw new NotImplementedException("glVertexAttrib4ubvARB");}
public static void glVertexAttrib4uivARB ( uint index,uint[]  v ){if (__glVertexAttrib4uivARB!=null) __glVertexAttrib4uivARB(index,v);else throw new NotImplementedException("glVertexAttrib4uivARB");}
public static void glVertexAttrib4usvARB ( uint index,ushort[]  v ){if (__glVertexAttrib4usvARB!=null) __glVertexAttrib4usvARB(index,v);else throw new NotImplementedException("glVertexAttrib4usvARB");}
public static void glVertexAttribPointerARB ( uint index,int size,uint type,bool normalized,int stride,IntPtr  pointer ){if (__glVertexAttribPointerARB!=null) __glVertexAttribPointerARB(index,size,type,normalized,stride,pointer);else throw new NotImplementedException("glVertexAttribPointerARB");}
public static void glBindAttribLocationARB ( IntPtr programObj,uint index,string  name ){if (__glBindAttribLocationARB!=null) __glBindAttribLocationARB(programObj,index,name);else throw new NotImplementedException("glBindAttribLocationARB");}
public static void glGetActiveAttribARB ( IntPtr programObj,uint index,int maxLength,IntPtr length,IntPtr size,IntPtr type,IntPtr name ){if (__glGetActiveAttribARB!=null) __glGetActiveAttribARB(programObj,index,maxLength,length,size,type,name);else throw new NotImplementedException("glGetActiveAttribARB");}
public static int glGetAttribLocationARB ( IntPtr programObj,string  name ){if (__glGetAttribLocationARB!=null) return __glGetAttribLocationARB(programObj,name);else throw new NotImplementedException("glGetAttribLocationARB");}
public static void glColorP3ui ( uint type,uint color ){if (__glColorP3ui!=null) __glColorP3ui(type,color);else throw new NotImplementedException("glColorP3ui");}
public static void glColorP3uiv ( uint type,uint[]  color ){if (__glColorP3uiv!=null) __glColorP3uiv(type,color);else throw new NotImplementedException("glColorP3uiv");}
public static void glColorP4ui ( uint type,uint color ){if (__glColorP4ui!=null) __glColorP4ui(type,color);else throw new NotImplementedException("glColorP4ui");}
public static void glColorP4uiv ( uint type,uint[]  color ){if (__glColorP4uiv!=null) __glColorP4uiv(type,color);else throw new NotImplementedException("glColorP4uiv");}
public static void glMultiTexCoordP1ui ( uint texture,uint type,uint coords ){if (__glMultiTexCoordP1ui!=null) __glMultiTexCoordP1ui(texture,type,coords);else throw new NotImplementedException("glMultiTexCoordP1ui");}
public static void glMultiTexCoordP1uiv ( uint texture,uint type,uint[]  coords ){if (__glMultiTexCoordP1uiv!=null) __glMultiTexCoordP1uiv(texture,type,coords);else throw new NotImplementedException("glMultiTexCoordP1uiv");}
public static void glMultiTexCoordP2ui ( uint texture,uint type,uint coords ){if (__glMultiTexCoordP2ui!=null) __glMultiTexCoordP2ui(texture,type,coords);else throw new NotImplementedException("glMultiTexCoordP2ui");}
public static void glMultiTexCoordP2uiv ( uint texture,uint type,uint[]  coords ){if (__glMultiTexCoordP2uiv!=null) __glMultiTexCoordP2uiv(texture,type,coords);else throw new NotImplementedException("glMultiTexCoordP2uiv");}
public static void glMultiTexCoordP3ui ( uint texture,uint type,uint coords ){if (__glMultiTexCoordP3ui!=null) __glMultiTexCoordP3ui(texture,type,coords);else throw new NotImplementedException("glMultiTexCoordP3ui");}
public static void glMultiTexCoordP3uiv ( uint texture,uint type,uint[]  coords ){if (__glMultiTexCoordP3uiv!=null) __glMultiTexCoordP3uiv(texture,type,coords);else throw new NotImplementedException("glMultiTexCoordP3uiv");}
public static void glMultiTexCoordP4ui ( uint texture,uint type,uint coords ){if (__glMultiTexCoordP4ui!=null) __glMultiTexCoordP4ui(texture,type,coords);else throw new NotImplementedException("glMultiTexCoordP4ui");}
public static void glMultiTexCoordP4uiv ( uint texture,uint type,uint[]  coords ){if (__glMultiTexCoordP4uiv!=null) __glMultiTexCoordP4uiv(texture,type,coords);else throw new NotImplementedException("glMultiTexCoordP4uiv");}
public static void glNormalP3ui ( uint type,uint coords ){if (__glNormalP3ui!=null) __glNormalP3ui(type,coords);else throw new NotImplementedException("glNormalP3ui");}
public static void glNormalP3uiv ( uint type,uint[]  coords ){if (__glNormalP3uiv!=null) __glNormalP3uiv(type,coords);else throw new NotImplementedException("glNormalP3uiv");}
public static void glSecondaryColorP3ui ( uint type,uint color ){if (__glSecondaryColorP3ui!=null) __glSecondaryColorP3ui(type,color);else throw new NotImplementedException("glSecondaryColorP3ui");}
public static void glSecondaryColorP3uiv ( uint type,uint[]  color ){if (__glSecondaryColorP3uiv!=null) __glSecondaryColorP3uiv(type,color);else throw new NotImplementedException("glSecondaryColorP3uiv");}
public static void glTexCoordP1ui ( uint type,uint coords ){if (__glTexCoordP1ui!=null) __glTexCoordP1ui(type,coords);else throw new NotImplementedException("glTexCoordP1ui");}
public static void glTexCoordP1uiv ( uint type,uint[]  coords ){if (__glTexCoordP1uiv!=null) __glTexCoordP1uiv(type,coords);else throw new NotImplementedException("glTexCoordP1uiv");}
public static void glTexCoordP2ui ( uint type,uint coords ){if (__glTexCoordP2ui!=null) __glTexCoordP2ui(type,coords);else throw new NotImplementedException("glTexCoordP2ui");}
public static void glTexCoordP2uiv ( uint type,uint[]  coords ){if (__glTexCoordP2uiv!=null) __glTexCoordP2uiv(type,coords);else throw new NotImplementedException("glTexCoordP2uiv");}
public static void glTexCoordP3ui ( uint type,uint coords ){if (__glTexCoordP3ui!=null) __glTexCoordP3ui(type,coords);else throw new NotImplementedException("glTexCoordP3ui");}
public static void glTexCoordP3uiv ( uint type,uint[]  coords ){if (__glTexCoordP3uiv!=null) __glTexCoordP3uiv(type,coords);else throw new NotImplementedException("glTexCoordP3uiv");}
public static void glTexCoordP4ui ( uint type,uint coords ){if (__glTexCoordP4ui!=null) __glTexCoordP4ui(type,coords);else throw new NotImplementedException("glTexCoordP4ui");}
public static void glTexCoordP4uiv ( uint type,uint[]  coords ){if (__glTexCoordP4uiv!=null) __glTexCoordP4uiv(type,coords);else throw new NotImplementedException("glTexCoordP4uiv");}
public static void glVertexAttribP1ui ( uint index,uint type,bool normalized,uint value ){if (__glVertexAttribP1ui!=null) __glVertexAttribP1ui(index,type,normalized,value);else throw new NotImplementedException("glVertexAttribP1ui");}
public static void glVertexAttribP1uiv ( uint index,uint type,bool normalized,uint[]  value ){if (__glVertexAttribP1uiv!=null) __glVertexAttribP1uiv(index,type,normalized,value);else throw new NotImplementedException("glVertexAttribP1uiv");}
public static void glVertexAttribP2ui ( uint index,uint type,bool normalized,uint value ){if (__glVertexAttribP2ui!=null) __glVertexAttribP2ui(index,type,normalized,value);else throw new NotImplementedException("glVertexAttribP2ui");}
public static void glVertexAttribP2uiv ( uint index,uint type,bool normalized,uint[]  value ){if (__glVertexAttribP2uiv!=null) __glVertexAttribP2uiv(index,type,normalized,value);else throw new NotImplementedException("glVertexAttribP2uiv");}
public static void glVertexAttribP3ui ( uint index,uint type,bool normalized,uint value ){if (__glVertexAttribP3ui!=null) __glVertexAttribP3ui(index,type,normalized,value);else throw new NotImplementedException("glVertexAttribP3ui");}
public static void glVertexAttribP3uiv ( uint index,uint type,bool normalized,uint[]  value ){if (__glVertexAttribP3uiv!=null) __glVertexAttribP3uiv(index,type,normalized,value);else throw new NotImplementedException("glVertexAttribP3uiv");}
public static void glVertexAttribP4ui ( uint index,uint type,bool normalized,uint value ){if (__glVertexAttribP4ui!=null) __glVertexAttribP4ui(index,type,normalized,value);else throw new NotImplementedException("glVertexAttribP4ui");}
public static void glVertexAttribP4uiv ( uint index,uint type,bool normalized,uint[]  value ){if (__glVertexAttribP4uiv!=null) __glVertexAttribP4uiv(index,type,normalized,value);else throw new NotImplementedException("glVertexAttribP4uiv");}
public static void glVertexP2ui ( uint type,uint value ){if (__glVertexP2ui!=null) __glVertexP2ui(type,value);else throw new NotImplementedException("glVertexP2ui");}
public static void glVertexP2uiv ( uint type,uint[]  value ){if (__glVertexP2uiv!=null) __glVertexP2uiv(type,value);else throw new NotImplementedException("glVertexP2uiv");}
public static void glVertexP3ui ( uint type,uint value ){if (__glVertexP3ui!=null) __glVertexP3ui(type,value);else throw new NotImplementedException("glVertexP3ui");}
public static void glVertexP3uiv ( uint type,uint[]  value ){if (__glVertexP3uiv!=null) __glVertexP3uiv(type,value);else throw new NotImplementedException("glVertexP3uiv");}
public static void glVertexP4ui ( uint type,uint value ){if (__glVertexP4ui!=null) __glVertexP4ui(type,value);else throw new NotImplementedException("glVertexP4ui");}
public static void glVertexP4uiv ( uint type,uint[]  value ){if (__glVertexP4uiv!=null) __glVertexP4uiv(type,value);else throw new NotImplementedException("glVertexP4uiv");}
public static void glDepthRangeArrayv ( uint first,int count,double[]  v ){if (__glDepthRangeArrayv!=null) __glDepthRangeArrayv(first,count,v);else throw new NotImplementedException("glDepthRangeArrayv");}
public static void glDepthRangeIndexed ( uint index,double n,double f ){if (__glDepthRangeIndexed!=null) __glDepthRangeIndexed(index,n,f);else throw new NotImplementedException("glDepthRangeIndexed");}
public static void glGetDoublei_v ( uint target,uint index,IntPtr data ){if (__glGetDoublei_v!=null) __glGetDoublei_v(target,index,data);else throw new NotImplementedException("glGetDoublei_v");}
public static void glGetFloati_v ( uint target,uint index,IntPtr data ){if (__glGetFloati_v!=null) __glGetFloati_v(target,index,data);else throw new NotImplementedException("glGetFloati_v");}
public static void glScissorArrayv ( uint first,int count,int[]  v ){if (__glScissorArrayv!=null) __glScissorArrayv(first,count,v);else throw new NotImplementedException("glScissorArrayv");}
public static void glScissorIndexed ( uint index,int left,int bottom,int width,int height ){if (__glScissorIndexed!=null) __glScissorIndexed(index,left,bottom,width,height);else throw new NotImplementedException("glScissorIndexed");}
public static void glScissorIndexedv ( uint index,int[]  v ){if (__glScissorIndexedv!=null) __glScissorIndexedv(index,v);else throw new NotImplementedException("glScissorIndexedv");}
public static void glViewportArrayv ( uint first,int count,float[]  v ){if (__glViewportArrayv!=null) __glViewportArrayv(first,count,v);else throw new NotImplementedException("glViewportArrayv");}
public static void glViewportIndexedf ( uint index,float x,float y,float w,float h ){if (__glViewportIndexedf!=null) __glViewportIndexedf(index,x,y,w,h);else throw new NotImplementedException("glViewportIndexedf");}
public static void glViewportIndexedfv ( uint index,float[]  v ){if (__glViewportIndexedfv!=null) __glViewportIndexedfv(index,v);else throw new NotImplementedException("glViewportIndexedfv");}
public static void glWindowPos2dARB ( double x,double y ){if (__glWindowPos2dARB!=null) __glWindowPos2dARB(x,y);else throw new NotImplementedException("glWindowPos2dARB");}
public static void glWindowPos2dvARB ( double[]  p ){if (__glWindowPos2dvARB!=null) __glWindowPos2dvARB(p);else throw new NotImplementedException("glWindowPos2dvARB");}
public static void glWindowPos2fARB ( float x,float y ){if (__glWindowPos2fARB!=null) __glWindowPos2fARB(x,y);else throw new NotImplementedException("glWindowPos2fARB");}
public static void glWindowPos2fvARB ( float[]  p ){if (__glWindowPos2fvARB!=null) __glWindowPos2fvARB(p);else throw new NotImplementedException("glWindowPos2fvARB");}
public static void glWindowPos2iARB ( int x,int y ){if (__glWindowPos2iARB!=null) __glWindowPos2iARB(x,y);else throw new NotImplementedException("glWindowPos2iARB");}
public static void glWindowPos2ivARB ( int[]  p ){if (__glWindowPos2ivARB!=null) __glWindowPos2ivARB(p);else throw new NotImplementedException("glWindowPos2ivARB");}
public static void glWindowPos2sARB ( short x,short y ){if (__glWindowPos2sARB!=null) __glWindowPos2sARB(x,y);else throw new NotImplementedException("glWindowPos2sARB");}
public static void glWindowPos2svARB ( short[]  p ){if (__glWindowPos2svARB!=null) __glWindowPos2svARB(p);else throw new NotImplementedException("glWindowPos2svARB");}
public static void glWindowPos3dARB ( double x,double y,double z ){if (__glWindowPos3dARB!=null) __glWindowPos3dARB(x,y,z);else throw new NotImplementedException("glWindowPos3dARB");}
public static void glWindowPos3dvARB ( double[]  p ){if (__glWindowPos3dvARB!=null) __glWindowPos3dvARB(p);else throw new NotImplementedException("glWindowPos3dvARB");}
public static void glWindowPos3fARB ( float x,float y,float z ){if (__glWindowPos3fARB!=null) __glWindowPos3fARB(x,y,z);else throw new NotImplementedException("glWindowPos3fARB");}
public static void glWindowPos3fvARB ( float[]  p ){if (__glWindowPos3fvARB!=null) __glWindowPos3fvARB(p);else throw new NotImplementedException("glWindowPos3fvARB");}
public static void glWindowPos3iARB ( int x,int y,int z ){if (__glWindowPos3iARB!=null) __glWindowPos3iARB(x,y,z);else throw new NotImplementedException("glWindowPos3iARB");}
public static void glWindowPos3ivARB ( int[]  p ){if (__glWindowPos3ivARB!=null) __glWindowPos3ivARB(p);else throw new NotImplementedException("glWindowPos3ivARB");}
public static void glWindowPos3sARB ( short x,short y,short z ){if (__glWindowPos3sARB!=null) __glWindowPos3sARB(x,y,z);else throw new NotImplementedException("glWindowPos3sARB");}
public static void glWindowPos3svARB ( short[]  p ){if (__glWindowPos3svARB!=null) __glWindowPos3svARB(p);else throw new NotImplementedException("glWindowPos3svARB");}
public static void glDrawBuffersATI ( int n,uint[]  bufs ){if (__glDrawBuffersATI!=null) __glDrawBuffersATI(n,bufs);else throw new NotImplementedException("glDrawBuffersATI");}
public static void glDrawElementArrayATI ( uint mode,int count ){if (__glDrawElementArrayATI!=null) __glDrawElementArrayATI(mode,count);else throw new NotImplementedException("glDrawElementArrayATI");}
public static void glDrawRangeElementArrayATI ( uint mode,uint start,uint end,int count ){if (__glDrawRangeElementArrayATI!=null) __glDrawRangeElementArrayATI(mode,start,end,count);else throw new NotImplementedException("glDrawRangeElementArrayATI");}
public static void glElementPointerATI ( uint type,IntPtr  pointer ){if (__glElementPointerATI!=null) __glElementPointerATI(type,pointer);else throw new NotImplementedException("glElementPointerATI");}
public static void glGetTexBumpParameterfvATI ( uint pname,IntPtr param ){if (__glGetTexBumpParameterfvATI!=null) __glGetTexBumpParameterfvATI(pname,param);else throw new NotImplementedException("glGetTexBumpParameterfvATI");}
public static void glGetTexBumpParameterivATI ( uint pname,IntPtr param ){if (__glGetTexBumpParameterivATI!=null) __glGetTexBumpParameterivATI(pname,param);else throw new NotImplementedException("glGetTexBumpParameterivATI");}
public static void glTexBumpParameterfvATI ( uint pname,IntPtr param ){if (__glTexBumpParameterfvATI!=null) __glTexBumpParameterfvATI(pname,param);else throw new NotImplementedException("glTexBumpParameterfvATI");}
public static void glTexBumpParameterivATI ( uint pname,IntPtr param ){if (__glTexBumpParameterivATI!=null) __glTexBumpParameterivATI(pname,param);else throw new NotImplementedException("glTexBumpParameterivATI");}
public static void glAlphaFragmentOp1ATI ( uint op,uint dst,uint dstMod,uint arg1,uint arg1Rep,uint arg1Mod ){if (__glAlphaFragmentOp1ATI!=null) __glAlphaFragmentOp1ATI(op,dst,dstMod,arg1,arg1Rep,arg1Mod);else throw new NotImplementedException("glAlphaFragmentOp1ATI");}
public static void glAlphaFragmentOp2ATI ( uint op,uint dst,uint dstMod,uint arg1,uint arg1Rep,uint arg1Mod,uint arg2,uint arg2Rep,uint arg2Mod ){if (__glAlphaFragmentOp2ATI!=null) __glAlphaFragmentOp2ATI(op,dst,dstMod,arg1,arg1Rep,arg1Mod,arg2,arg2Rep,arg2Mod);else throw new NotImplementedException("glAlphaFragmentOp2ATI");}
public static void glAlphaFragmentOp3ATI ( uint op,uint dst,uint dstMod,uint arg1,uint arg1Rep,uint arg1Mod,uint arg2,uint arg2Rep,uint arg2Mod,uint arg3,uint arg3Rep,uint arg3Mod ){if (__glAlphaFragmentOp3ATI!=null) __glAlphaFragmentOp3ATI(op,dst,dstMod,arg1,arg1Rep,arg1Mod,arg2,arg2Rep,arg2Mod,arg3,arg3Rep,arg3Mod);else throw new NotImplementedException("glAlphaFragmentOp3ATI");}
public static void glBeginFragmentShaderATI (  ){if (__glBeginFragmentShaderATI!=null) __glBeginFragmentShaderATI();else throw new NotImplementedException("glBeginFragmentShaderATI");}
public static void glBindFragmentShaderATI ( uint id ){if (__glBindFragmentShaderATI!=null) __glBindFragmentShaderATI(id);else throw new NotImplementedException("glBindFragmentShaderATI");}
public static void glColorFragmentOp1ATI ( uint op,uint dst,uint dstMask,uint dstMod,uint arg1,uint arg1Rep,uint arg1Mod ){if (__glColorFragmentOp1ATI!=null) __glColorFragmentOp1ATI(op,dst,dstMask,dstMod,arg1,arg1Rep,arg1Mod);else throw new NotImplementedException("glColorFragmentOp1ATI");}
public static void glColorFragmentOp2ATI ( uint op,uint dst,uint dstMask,uint dstMod,uint arg1,uint arg1Rep,uint arg1Mod,uint arg2,uint arg2Rep,uint arg2Mod ){if (__glColorFragmentOp2ATI!=null) __glColorFragmentOp2ATI(op,dst,dstMask,dstMod,arg1,arg1Rep,arg1Mod,arg2,arg2Rep,arg2Mod);else throw new NotImplementedException("glColorFragmentOp2ATI");}
public static void glColorFragmentOp3ATI ( uint op,uint dst,uint dstMask,uint dstMod,uint arg1,uint arg1Rep,uint arg1Mod,uint arg2,uint arg2Rep,uint arg2Mod,uint arg3,uint arg3Rep,uint arg3Mod ){if (__glColorFragmentOp3ATI!=null) __glColorFragmentOp3ATI(op,dst,dstMask,dstMod,arg1,arg1Rep,arg1Mod,arg2,arg2Rep,arg2Mod,arg3,arg3Rep,arg3Mod);else throw new NotImplementedException("glColorFragmentOp3ATI");}
public static void glDeleteFragmentShaderATI ( uint id ){if (__glDeleteFragmentShaderATI!=null) __glDeleteFragmentShaderATI(id);else throw new NotImplementedException("glDeleteFragmentShaderATI");}
public static void glEndFragmentShaderATI (  ){if (__glEndFragmentShaderATI!=null) __glEndFragmentShaderATI();else throw new NotImplementedException("glEndFragmentShaderATI");}
public static uint glGenFragmentShadersATI ( uint range ){if (__glGenFragmentShadersATI!=null) return __glGenFragmentShadersATI(range);else throw new NotImplementedException("glGenFragmentShadersATI");}
public static void glPassTexCoordATI ( uint dst,uint coord,uint swizzle ){if (__glPassTexCoordATI!=null) __glPassTexCoordATI(dst,coord,swizzle);else throw new NotImplementedException("glPassTexCoordATI");}
public static void glSampleMapATI ( uint dst,uint interp,uint swizzle ){if (__glSampleMapATI!=null) __glSampleMapATI(dst,interp,swizzle);else throw new NotImplementedException("glSampleMapATI");}
public static void glSetFragmentShaderConstantATI ( uint dst,float[]  value ){if (__glSetFragmentShaderConstantATI!=null) __glSetFragmentShaderConstantATI(dst,value);else throw new NotImplementedException("glSetFragmentShaderConstantATI");}
public static IntPtr glMapObjectBufferATI ( uint buffer ){if (__glMapObjectBufferATI!=null) return __glMapObjectBufferATI(buffer);else throw new NotImplementedException("glMapObjectBufferATI");}
public static void glUnmapObjectBufferATI ( uint buffer ){if (__glUnmapObjectBufferATI!=null) __glUnmapObjectBufferATI(buffer);else throw new NotImplementedException("glUnmapObjectBufferATI");}
public static void glPNTrianglesfATI ( uint pname,float param ){if (__glPNTrianglesfATI!=null) __glPNTrianglesfATI(pname,param);else throw new NotImplementedException("glPNTrianglesfATI");}
public static void glPNTrianglesiATI ( uint pname,int param ){if (__glPNTrianglesiATI!=null) __glPNTrianglesiATI(pname,param);else throw new NotImplementedException("glPNTrianglesiATI");}
public static void glStencilFuncSeparateATI ( uint frontfunc,uint backfunc,int _ref,uint mask ){if (__glStencilFuncSeparateATI!=null) __glStencilFuncSeparateATI(frontfunc,backfunc,_ref,mask);else throw new NotImplementedException("glStencilFuncSeparateATI");}
public static void glStencilOpSeparateATI ( uint face,uint sfail,uint dpfail,uint dppass ){if (__glStencilOpSeparateATI!=null) __glStencilOpSeparateATI(face,sfail,dpfail,dppass);else throw new NotImplementedException("glStencilOpSeparateATI");}
public static void glArrayObjectATI ( uint array,int size,uint type,int stride,uint buffer,uint offset ){if (__glArrayObjectATI!=null) __glArrayObjectATI(array,size,type,stride,buffer,offset);else throw new NotImplementedException("glArrayObjectATI");}
public static void glFreeObjectBufferATI ( uint buffer ){if (__glFreeObjectBufferATI!=null) __glFreeObjectBufferATI(buffer);else throw new NotImplementedException("glFreeObjectBufferATI");}
public static void glGetArrayObjectfvATI ( uint array,uint pname,IntPtr _params ){if (__glGetArrayObjectfvATI!=null) __glGetArrayObjectfvATI(array,pname,_params);else throw new NotImplementedException("glGetArrayObjectfvATI");}
public static void glGetArrayObjectivATI ( uint array,uint pname,IntPtr _params ){if (__glGetArrayObjectivATI!=null) __glGetArrayObjectivATI(array,pname,_params);else throw new NotImplementedException("glGetArrayObjectivATI");}
public static void glGetObjectBufferfvATI ( uint buffer,uint pname,IntPtr _params ){if (__glGetObjectBufferfvATI!=null) __glGetObjectBufferfvATI(buffer,pname,_params);else throw new NotImplementedException("glGetObjectBufferfvATI");}
public static void glGetObjectBufferivATI ( uint buffer,uint pname,IntPtr _params ){if (__glGetObjectBufferivATI!=null) __glGetObjectBufferivATI(buffer,pname,_params);else throw new NotImplementedException("glGetObjectBufferivATI");}
public static void glGetVariantArrayObjectfvATI ( uint id,uint pname,IntPtr _params ){if (__glGetVariantArrayObjectfvATI!=null) __glGetVariantArrayObjectfvATI(id,pname,_params);else throw new NotImplementedException("glGetVariantArrayObjectfvATI");}
public static void glGetVariantArrayObjectivATI ( uint id,uint pname,IntPtr _params ){if (__glGetVariantArrayObjectivATI!=null) __glGetVariantArrayObjectivATI(id,pname,_params);else throw new NotImplementedException("glGetVariantArrayObjectivATI");}
public static bool glIsObjectBufferATI ( uint buffer ){if (__glIsObjectBufferATI!=null) return __glIsObjectBufferATI(buffer);else throw new NotImplementedException("glIsObjectBufferATI");}
public static uint glNewObjectBufferATI ( int size,IntPtr  pointer,uint usage ){if (__glNewObjectBufferATI!=null) return __glNewObjectBufferATI(size,pointer,usage);else throw new NotImplementedException("glNewObjectBufferATI");}
public static void glUpdateObjectBufferATI ( uint buffer,uint offset,int size,IntPtr  pointer,uint preserve ){if (__glUpdateObjectBufferATI!=null) __glUpdateObjectBufferATI(buffer,offset,size,pointer,preserve);else throw new NotImplementedException("glUpdateObjectBufferATI");}
public static void glVariantArrayObjectATI ( uint id,uint type,int stride,uint buffer,uint offset ){if (__glVariantArrayObjectATI!=null) __glVariantArrayObjectATI(id,type,stride,buffer,offset);else throw new NotImplementedException("glVariantArrayObjectATI");}
public static void glGetVertexAttribArrayObjectfvATI ( uint index,uint pname,IntPtr _params ){if (__glGetVertexAttribArrayObjectfvATI!=null) __glGetVertexAttribArrayObjectfvATI(index,pname,_params);else throw new NotImplementedException("glGetVertexAttribArrayObjectfvATI");}
public static void glGetVertexAttribArrayObjectivATI ( uint index,uint pname,IntPtr _params ){if (__glGetVertexAttribArrayObjectivATI!=null) __glGetVertexAttribArrayObjectivATI(index,pname,_params);else throw new NotImplementedException("glGetVertexAttribArrayObjectivATI");}
public static void glVertexAttribArrayObjectATI ( uint index,int size,uint type,bool normalized,int stride,uint buffer,uint offset ){if (__glVertexAttribArrayObjectATI!=null) __glVertexAttribArrayObjectATI(index,size,type,normalized,stride,buffer,offset);else throw new NotImplementedException("glVertexAttribArrayObjectATI");}
public static void glClientActiveVertexStreamATI ( uint stream ){if (__glClientActiveVertexStreamATI!=null) __glClientActiveVertexStreamATI(stream);else throw new NotImplementedException("glClientActiveVertexStreamATI");}
public static void glNormalStream3bATI ( uint stream,sbyte x,sbyte y,sbyte z ){if (__glNormalStream3bATI!=null) __glNormalStream3bATI(stream,x,y,z);else throw new NotImplementedException("glNormalStream3bATI");}
public static void glNormalStream3bvATI ( uint stream,byte[] v ){if (__glNormalStream3bvATI!=null) __glNormalStream3bvATI(stream,v);else throw new NotImplementedException("glNormalStream3bvATI");}
public static void glNormalStream3dATI ( uint stream,double x,double y,double z ){if (__glNormalStream3dATI!=null) __glNormalStream3dATI(stream,x,y,z);else throw new NotImplementedException("glNormalStream3dATI");}
public static void glNormalStream3dvATI ( uint stream,double[] v ){if (__glNormalStream3dvATI!=null) __glNormalStream3dvATI(stream,v);else throw new NotImplementedException("glNormalStream3dvATI");}
public static void glNormalStream3fATI ( uint stream,float x,float y,float z ){if (__glNormalStream3fATI!=null) __glNormalStream3fATI(stream,x,y,z);else throw new NotImplementedException("glNormalStream3fATI");}
public static void glNormalStream3fvATI ( uint stream,float[] v ){if (__glNormalStream3fvATI!=null) __glNormalStream3fvATI(stream,v);else throw new NotImplementedException("glNormalStream3fvATI");}
public static void glNormalStream3iATI ( uint stream,int x,int y,int z ){if (__glNormalStream3iATI!=null) __glNormalStream3iATI(stream,x,y,z);else throw new NotImplementedException("glNormalStream3iATI");}
public static void glNormalStream3ivATI ( uint stream,int[] v ){if (__glNormalStream3ivATI!=null) __glNormalStream3ivATI(stream,v);else throw new NotImplementedException("glNormalStream3ivATI");}
public static void glNormalStream3sATI ( uint stream,short x,short y,short z ){if (__glNormalStream3sATI!=null) __glNormalStream3sATI(stream,x,y,z);else throw new NotImplementedException("glNormalStream3sATI");}
public static void glNormalStream3svATI ( uint stream,short[] v ){if (__glNormalStream3svATI!=null) __glNormalStream3svATI(stream,v);else throw new NotImplementedException("glNormalStream3svATI");}
public static void glVertexBlendEnvfATI ( uint pname,float param ){if (__glVertexBlendEnvfATI!=null) __glVertexBlendEnvfATI(pname,param);else throw new NotImplementedException("glVertexBlendEnvfATI");}
public static void glVertexBlendEnviATI ( uint pname,int param ){if (__glVertexBlendEnviATI!=null) __glVertexBlendEnviATI(pname,param);else throw new NotImplementedException("glVertexBlendEnviATI");}
public static void glVertexStream2dATI ( uint stream,double x,double y ){if (__glVertexStream2dATI!=null) __glVertexStream2dATI(stream,x,y);else throw new NotImplementedException("glVertexStream2dATI");}
public static void glVertexStream2dvATI ( uint stream,double[] v ){if (__glVertexStream2dvATI!=null) __glVertexStream2dvATI(stream,v);else throw new NotImplementedException("glVertexStream2dvATI");}
public static void glVertexStream2fATI ( uint stream,float x,float y ){if (__glVertexStream2fATI!=null) __glVertexStream2fATI(stream,x,y);else throw new NotImplementedException("glVertexStream2fATI");}
public static void glVertexStream2fvATI ( uint stream,float[] v ){if (__glVertexStream2fvATI!=null) __glVertexStream2fvATI(stream,v);else throw new NotImplementedException("glVertexStream2fvATI");}
public static void glVertexStream2iATI ( uint stream,int x,int y ){if (__glVertexStream2iATI!=null) __glVertexStream2iATI(stream,x,y);else throw new NotImplementedException("glVertexStream2iATI");}
public static void glVertexStream2ivATI ( uint stream,int[] v ){if (__glVertexStream2ivATI!=null) __glVertexStream2ivATI(stream,v);else throw new NotImplementedException("glVertexStream2ivATI");}
public static void glVertexStream2sATI ( uint stream,short x,short y ){if (__glVertexStream2sATI!=null) __glVertexStream2sATI(stream,x,y);else throw new NotImplementedException("glVertexStream2sATI");}
public static void glVertexStream2svATI ( uint stream,short[] v ){if (__glVertexStream2svATI!=null) __glVertexStream2svATI(stream,v);else throw new NotImplementedException("glVertexStream2svATI");}
public static void glVertexStream3dATI ( uint stream,double x,double y,double z ){if (__glVertexStream3dATI!=null) __glVertexStream3dATI(stream,x,y,z);else throw new NotImplementedException("glVertexStream3dATI");}
public static void glVertexStream3dvATI ( uint stream,double[] v ){if (__glVertexStream3dvATI!=null) __glVertexStream3dvATI(stream,v);else throw new NotImplementedException("glVertexStream3dvATI");}
public static void glVertexStream3fATI ( uint stream,float x,float y,float z ){if (__glVertexStream3fATI!=null) __glVertexStream3fATI(stream,x,y,z);else throw new NotImplementedException("glVertexStream3fATI");}
public static void glVertexStream3fvATI ( uint stream,float[] v ){if (__glVertexStream3fvATI!=null) __glVertexStream3fvATI(stream,v);else throw new NotImplementedException("glVertexStream3fvATI");}
public static void glVertexStream3iATI ( uint stream,int x,int y,int z ){if (__glVertexStream3iATI!=null) __glVertexStream3iATI(stream,x,y,z);else throw new NotImplementedException("glVertexStream3iATI");}
public static void glVertexStream3ivATI ( uint stream,int[] v ){if (__glVertexStream3ivATI!=null) __glVertexStream3ivATI(stream,v);else throw new NotImplementedException("glVertexStream3ivATI");}
public static void glVertexStream3sATI ( uint stream,short x,short y,short z ){if (__glVertexStream3sATI!=null) __glVertexStream3sATI(stream,x,y,z);else throw new NotImplementedException("glVertexStream3sATI");}
public static void glVertexStream3svATI ( uint stream,short[] v ){if (__glVertexStream3svATI!=null) __glVertexStream3svATI(stream,v);else throw new NotImplementedException("glVertexStream3svATI");}
public static void glVertexStream4dATI ( uint stream,double x,double y,double z,double w ){if (__glVertexStream4dATI!=null) __glVertexStream4dATI(stream,x,y,z,w);else throw new NotImplementedException("glVertexStream4dATI");}
public static void glVertexStream4dvATI ( uint stream,double[] v ){if (__glVertexStream4dvATI!=null) __glVertexStream4dvATI(stream,v);else throw new NotImplementedException("glVertexStream4dvATI");}
public static void glVertexStream4fATI ( uint stream,float x,float y,float z,float w ){if (__glVertexStream4fATI!=null) __glVertexStream4fATI(stream,x,y,z,w);else throw new NotImplementedException("glVertexStream4fATI");}
public static void glVertexStream4fvATI ( uint stream,float[] v ){if (__glVertexStream4fvATI!=null) __glVertexStream4fvATI(stream,v);else throw new NotImplementedException("glVertexStream4fvATI");}
public static void glVertexStream4iATI ( uint stream,int x,int y,int z,int w ){if (__glVertexStream4iATI!=null) __glVertexStream4iATI(stream,x,y,z,w);else throw new NotImplementedException("glVertexStream4iATI");}
public static void glVertexStream4ivATI ( uint stream,int[] v ){if (__glVertexStream4ivATI!=null) __glVertexStream4ivATI(stream,v);else throw new NotImplementedException("glVertexStream4ivATI");}
public static void glVertexStream4sATI ( uint stream,short x,short y,short z,short w ){if (__glVertexStream4sATI!=null) __glVertexStream4sATI(stream,x,y,z,w);else throw new NotImplementedException("glVertexStream4sATI");}
public static void glVertexStream4svATI ( uint stream,short[] v ){if (__glVertexStream4svATI!=null) __glVertexStream4svATI(stream,v);else throw new NotImplementedException("glVertexStream4svATI");}
public static int glGetUniformBufferSizeEXT ( uint program,int location ){if (__glGetUniformBufferSizeEXT!=null) return __glGetUniformBufferSizeEXT(program,location);else throw new NotImplementedException("glGetUniformBufferSizeEXT");}
public static IntPtr glGetUniformOffsetEXT ( uint program,int location ){if (__glGetUniformOffsetEXT!=null) return __glGetUniformOffsetEXT(program,location);else throw new NotImplementedException("glGetUniformOffsetEXT");}
public static void glUniformBufferEXT ( uint program,int location,uint buffer ){if (__glUniformBufferEXT!=null) __glUniformBufferEXT(program,location,buffer);else throw new NotImplementedException("glUniformBufferEXT");}
public static void glBlendColorEXT ( float red,float green,float blue,float alpha ){if (__glBlendColorEXT!=null) __glBlendColorEXT(red,green,blue,alpha);else throw new NotImplementedException("glBlendColorEXT");}
public static void glBlendEquationSeparateEXT ( uint modeRGB,uint modeAlpha ){if (__glBlendEquationSeparateEXT!=null) __glBlendEquationSeparateEXT(modeRGB,modeAlpha);else throw new NotImplementedException("glBlendEquationSeparateEXT");}
public static void glBlendFuncSeparateEXT ( uint sfactorRGB,uint dfactorRGB,uint sfactorAlpha,uint dfactorAlpha ){if (__glBlendFuncSeparateEXT!=null) __glBlendFuncSeparateEXT(sfactorRGB,dfactorRGB,sfactorAlpha,dfactorAlpha);else throw new NotImplementedException("glBlendFuncSeparateEXT");}
public static void glBlendEquationEXT ( uint mode ){if (__glBlendEquationEXT!=null) __glBlendEquationEXT(mode);else throw new NotImplementedException("glBlendEquationEXT");}
public static void glColorSubTableEXT ( uint target,int start,int count,uint format,uint type,IntPtr  data ){if (__glColorSubTableEXT!=null) __glColorSubTableEXT(target,start,count,format,type,data);else throw new NotImplementedException("glColorSubTableEXT");}
public static void glCopyColorSubTableEXT ( uint target,int start,int x,int y,int width ){if (__glCopyColorSubTableEXT!=null) __glCopyColorSubTableEXT(target,start,x,y,width);else throw new NotImplementedException("glCopyColorSubTableEXT");}
public static void glLockArraysEXT ( int first,int count ){if (__glLockArraysEXT!=null) __glLockArraysEXT(first,count);else throw new NotImplementedException("glLockArraysEXT");}
public static void glUnlockArraysEXT (  ){if (__glUnlockArraysEXT!=null) __glUnlockArraysEXT();else throw new NotImplementedException("glUnlockArraysEXT");}
public static void glConvolutionFilter1DEXT ( uint target,uint internalformat,int width,uint format,uint type,IntPtr  image ){if (__glConvolutionFilter1DEXT!=null) __glConvolutionFilter1DEXT(target,internalformat,width,format,type,image);else throw new NotImplementedException("glConvolutionFilter1DEXT");}
public static void glConvolutionFilter2DEXT ( uint target,uint internalformat,int width,int height,uint format,uint type,IntPtr  image ){if (__glConvolutionFilter2DEXT!=null) __glConvolutionFilter2DEXT(target,internalformat,width,height,format,type,image);else throw new NotImplementedException("glConvolutionFilter2DEXT");}
public static void glConvolutionParameterfEXT ( uint target,uint pname,float param ){if (__glConvolutionParameterfEXT!=null) __glConvolutionParameterfEXT(target,pname,param);else throw new NotImplementedException("glConvolutionParameterfEXT");}
public static void glConvolutionParameterfvEXT ( uint target,uint pname,float[]  _params ){if (__glConvolutionParameterfvEXT!=null) __glConvolutionParameterfvEXT(target,pname,_params);else throw new NotImplementedException("glConvolutionParameterfvEXT");}
public static void glConvolutionParameteriEXT ( uint target,uint pname,int param ){if (__glConvolutionParameteriEXT!=null) __glConvolutionParameteriEXT(target,pname,param);else throw new NotImplementedException("glConvolutionParameteriEXT");}
public static void glConvolutionParameterivEXT ( uint target,uint pname,int[]  _params ){if (__glConvolutionParameterivEXT!=null) __glConvolutionParameterivEXT(target,pname,_params);else throw new NotImplementedException("glConvolutionParameterivEXT");}
public static void glCopyConvolutionFilter1DEXT ( uint target,uint internalformat,int x,int y,int width ){if (__glCopyConvolutionFilter1DEXT!=null) __glCopyConvolutionFilter1DEXT(target,internalformat,x,y,width);else throw new NotImplementedException("glCopyConvolutionFilter1DEXT");}
public static void glCopyConvolutionFilter2DEXT ( uint target,uint internalformat,int x,int y,int width,int height ){if (__glCopyConvolutionFilter2DEXT!=null) __glCopyConvolutionFilter2DEXT(target,internalformat,x,y,width,height);else throw new NotImplementedException("glCopyConvolutionFilter2DEXT");}
public static void glGetConvolutionFilterEXT ( uint target,uint format,uint type,IntPtr image ){if (__glGetConvolutionFilterEXT!=null) __glGetConvolutionFilterEXT(target,format,type,image);else throw new NotImplementedException("glGetConvolutionFilterEXT");}
public static void glGetConvolutionParameterfvEXT ( uint target,uint pname,IntPtr _params ){if (__glGetConvolutionParameterfvEXT!=null) __glGetConvolutionParameterfvEXT(target,pname,_params);else throw new NotImplementedException("glGetConvolutionParameterfvEXT");}
public static void glGetConvolutionParameterivEXT ( uint target,uint pname,IntPtr _params ){if (__glGetConvolutionParameterivEXT!=null) __glGetConvolutionParameterivEXT(target,pname,_params);else throw new NotImplementedException("glGetConvolutionParameterivEXT");}
public static void glGetSeparableFilterEXT ( uint target,uint format,uint type,IntPtr row,IntPtr column,IntPtr span ){if (__glGetSeparableFilterEXT!=null) __glGetSeparableFilterEXT(target,format,type,row,column,span);else throw new NotImplementedException("glGetSeparableFilterEXT");}
public static void glSeparableFilter2DEXT ( uint target,uint internalformat,int width,int height,uint format,uint type,IntPtr  row,IntPtr  column ){if (__glSeparableFilter2DEXT!=null) __glSeparableFilter2DEXT(target,internalformat,width,height,format,type,row,column);else throw new NotImplementedException("glSeparableFilter2DEXT");}
public static void glBinormalPointerEXT ( uint type,int stride,IntPtr pointer ){if (__glBinormalPointerEXT!=null) __glBinormalPointerEXT(type,stride,pointer);else throw new NotImplementedException("glBinormalPointerEXT");}
public static void glTangentPointerEXT ( uint type,int stride,IntPtr pointer ){if (__glTangentPointerEXT!=null) __glTangentPointerEXT(type,stride,pointer);else throw new NotImplementedException("glTangentPointerEXT");}
public static void glCopyTexImage1DEXT ( uint target,int level,uint internalformat,int x,int y,int width,int border ){if (__glCopyTexImage1DEXT!=null) __glCopyTexImage1DEXT(target,level,internalformat,x,y,width,border);else throw new NotImplementedException("glCopyTexImage1DEXT");}
public static void glCopyTexImage2DEXT ( uint target,int level,uint internalformat,int x,int y,int width,int height,int border ){if (__glCopyTexImage2DEXT!=null) __glCopyTexImage2DEXT(target,level,internalformat,x,y,width,height,border);else throw new NotImplementedException("glCopyTexImage2DEXT");}
public static void glCopyTexSubImage1DEXT ( uint target,int level,int xoffset,int x,int y,int width ){if (__glCopyTexSubImage1DEXT!=null) __glCopyTexSubImage1DEXT(target,level,xoffset,x,y,width);else throw new NotImplementedException("glCopyTexSubImage1DEXT");}
public static void glCopyTexSubImage2DEXT ( uint target,int level,int xoffset,int yoffset,int x,int y,int width,int height ){if (__glCopyTexSubImage2DEXT!=null) __glCopyTexSubImage2DEXT(target,level,xoffset,yoffset,x,y,width,height);else throw new NotImplementedException("glCopyTexSubImage2DEXT");}
public static void glCopyTexSubImage3DEXT ( uint target,int level,int xoffset,int yoffset,int zoffset,int x,int y,int width,int height ){if (__glCopyTexSubImage3DEXT!=null) __glCopyTexSubImage3DEXT(target,level,xoffset,yoffset,zoffset,x,y,width,height);else throw new NotImplementedException("glCopyTexSubImage3DEXT");}
public static void glCullParameterdvEXT ( uint pname,IntPtr _params ){if (__glCullParameterdvEXT!=null) __glCullParameterdvEXT(pname,_params);else throw new NotImplementedException("glCullParameterdvEXT");}
public static void glCullParameterfvEXT ( uint pname,IntPtr _params ){if (__glCullParameterfvEXT!=null) __glCullParameterfvEXT(pname,_params);else throw new NotImplementedException("glCullParameterfvEXT");}
public static void glDepthBoundsEXT ( double zmin,double zmax ){if (__glDepthBoundsEXT!=null) __glDepthBoundsEXT(zmin,zmax);else throw new NotImplementedException("glDepthBoundsEXT");}
public static void glBindMultiTextureEXT ( uint texunit,uint target,uint texture ){if (__glBindMultiTextureEXT!=null) __glBindMultiTextureEXT(texunit,target,texture);else throw new NotImplementedException("glBindMultiTextureEXT");}
public static uint glCheckNamedFramebufferStatusEXT ( uint framebuffer,uint target ){if (__glCheckNamedFramebufferStatusEXT!=null) return __glCheckNamedFramebufferStatusEXT(framebuffer,target);else throw new NotImplementedException("glCheckNamedFramebufferStatusEXT");}
public static void glClientAttribDefaultEXT ( uint mask ){if (__glClientAttribDefaultEXT!=null) __glClientAttribDefaultEXT(mask);else throw new NotImplementedException("glClientAttribDefaultEXT");}
public static void glCompressedMultiTexImage1DEXT ( uint texunit,uint target,int level,uint internalformat,int width,int border,int imageSize,IntPtr  data ){if (__glCompressedMultiTexImage1DEXT!=null) __glCompressedMultiTexImage1DEXT(texunit,target,level,internalformat,width,border,imageSize,data);else throw new NotImplementedException("glCompressedMultiTexImage1DEXT");}
public static void glCompressedMultiTexImage2DEXT ( uint texunit,uint target,int level,uint internalformat,int width,int height,int border,int imageSize,IntPtr  data ){if (__glCompressedMultiTexImage2DEXT!=null) __glCompressedMultiTexImage2DEXT(texunit,target,level,internalformat,width,height,border,imageSize,data);else throw new NotImplementedException("glCompressedMultiTexImage2DEXT");}
public static void glCompressedMultiTexImage3DEXT ( uint texunit,uint target,int level,uint internalformat,int width,int height,int depth,int border,int imageSize,IntPtr  data ){if (__glCompressedMultiTexImage3DEXT!=null) __glCompressedMultiTexImage3DEXT(texunit,target,level,internalformat,width,height,depth,border,imageSize,data);else throw new NotImplementedException("glCompressedMultiTexImage3DEXT");}
public static void glCompressedMultiTexSubImage1DEXT ( uint texunit,uint target,int level,int xoffset,int width,uint format,int imageSize,IntPtr  data ){if (__glCompressedMultiTexSubImage1DEXT!=null) __glCompressedMultiTexSubImage1DEXT(texunit,target,level,xoffset,width,format,imageSize,data);else throw new NotImplementedException("glCompressedMultiTexSubImage1DEXT");}
public static void glCompressedMultiTexSubImage2DEXT ( uint texunit,uint target,int level,int xoffset,int yoffset,int width,int height,uint format,int imageSize,IntPtr  data ){if (__glCompressedMultiTexSubImage2DEXT!=null) __glCompressedMultiTexSubImage2DEXT(texunit,target,level,xoffset,yoffset,width,height,format,imageSize,data);else throw new NotImplementedException("glCompressedMultiTexSubImage2DEXT");}
public static void glCompressedMultiTexSubImage3DEXT ( uint texunit,uint target,int level,int xoffset,int yoffset,int zoffset,int width,int height,int depth,uint format,int imageSize,IntPtr  data ){if (__glCompressedMultiTexSubImage3DEXT!=null) __glCompressedMultiTexSubImage3DEXT(texunit,target,level,xoffset,yoffset,zoffset,width,height,depth,format,imageSize,data);else throw new NotImplementedException("glCompressedMultiTexSubImage3DEXT");}
public static void glCompressedTextureImage1DEXT ( uint texture,uint target,int level,uint internalformat,int width,int border,int imageSize,IntPtr  data ){if (__glCompressedTextureImage1DEXT!=null) __glCompressedTextureImage1DEXT(texture,target,level,internalformat,width,border,imageSize,data);else throw new NotImplementedException("glCompressedTextureImage1DEXT");}
public static void glCompressedTextureImage2DEXT ( uint texture,uint target,int level,uint internalformat,int width,int height,int border,int imageSize,IntPtr  data ){if (__glCompressedTextureImage2DEXT!=null) __glCompressedTextureImage2DEXT(texture,target,level,internalformat,width,height,border,imageSize,data);else throw new NotImplementedException("glCompressedTextureImage2DEXT");}
public static void glCompressedTextureImage3DEXT ( uint texture,uint target,int level,uint internalformat,int width,int height,int depth,int border,int imageSize,IntPtr  data ){if (__glCompressedTextureImage3DEXT!=null) __glCompressedTextureImage3DEXT(texture,target,level,internalformat,width,height,depth,border,imageSize,data);else throw new NotImplementedException("glCompressedTextureImage3DEXT");}
public static void glCompressedTextureSubImage1DEXT ( uint texture,uint target,int level,int xoffset,int width,uint format,int imageSize,IntPtr  data ){if (__glCompressedTextureSubImage1DEXT!=null) __glCompressedTextureSubImage1DEXT(texture,target,level,xoffset,width,format,imageSize,data);else throw new NotImplementedException("glCompressedTextureSubImage1DEXT");}
public static void glCompressedTextureSubImage2DEXT ( uint texture,uint target,int level,int xoffset,int yoffset,int width,int height,uint format,int imageSize,IntPtr  data ){if (__glCompressedTextureSubImage2DEXT!=null) __glCompressedTextureSubImage2DEXT(texture,target,level,xoffset,yoffset,width,height,format,imageSize,data);else throw new NotImplementedException("glCompressedTextureSubImage2DEXT");}
public static void glCompressedTextureSubImage3DEXT ( uint texture,uint target,int level,int xoffset,int yoffset,int zoffset,int width,int height,int depth,uint format,int imageSize,IntPtr  data ){if (__glCompressedTextureSubImage3DEXT!=null) __glCompressedTextureSubImage3DEXT(texture,target,level,xoffset,yoffset,zoffset,width,height,depth,format,imageSize,data);else throw new NotImplementedException("glCompressedTextureSubImage3DEXT");}
public static void glCopyMultiTexImage1DEXT ( uint texunit,uint target,int level,uint internalformat,int x,int y,int width,int border ){if (__glCopyMultiTexImage1DEXT!=null) __glCopyMultiTexImage1DEXT(texunit,target,level,internalformat,x,y,width,border);else throw new NotImplementedException("glCopyMultiTexImage1DEXT");}
public static void glCopyMultiTexImage2DEXT ( uint texunit,uint target,int level,uint internalformat,int x,int y,int width,int height,int border ){if (__glCopyMultiTexImage2DEXT!=null) __glCopyMultiTexImage2DEXT(texunit,target,level,internalformat,x,y,width,height,border);else throw new NotImplementedException("glCopyMultiTexImage2DEXT");}
public static void glCopyMultiTexSubImage1DEXT ( uint texunit,uint target,int level,int xoffset,int x,int y,int width ){if (__glCopyMultiTexSubImage1DEXT!=null) __glCopyMultiTexSubImage1DEXT(texunit,target,level,xoffset,x,y,width);else throw new NotImplementedException("glCopyMultiTexSubImage1DEXT");}
public static void glCopyMultiTexSubImage2DEXT ( uint texunit,uint target,int level,int xoffset,int yoffset,int x,int y,int width,int height ){if (__glCopyMultiTexSubImage2DEXT!=null) __glCopyMultiTexSubImage2DEXT(texunit,target,level,xoffset,yoffset,x,y,width,height);else throw new NotImplementedException("glCopyMultiTexSubImage2DEXT");}
public static void glCopyMultiTexSubImage3DEXT ( uint texunit,uint target,int level,int xoffset,int yoffset,int zoffset,int x,int y,int width,int height ){if (__glCopyMultiTexSubImage3DEXT!=null) __glCopyMultiTexSubImage3DEXT(texunit,target,level,xoffset,yoffset,zoffset,x,y,width,height);else throw new NotImplementedException("glCopyMultiTexSubImage3DEXT");}
public static void glCopyTextureImage1DEXT ( uint texture,uint target,int level,uint internalformat,int x,int y,int width,int border ){if (__glCopyTextureImage1DEXT!=null) __glCopyTextureImage1DEXT(texture,target,level,internalformat,x,y,width,border);else throw new NotImplementedException("glCopyTextureImage1DEXT");}
public static void glCopyTextureImage2DEXT ( uint texture,uint target,int level,uint internalformat,int x,int y,int width,int height,int border ){if (__glCopyTextureImage2DEXT!=null) __glCopyTextureImage2DEXT(texture,target,level,internalformat,x,y,width,height,border);else throw new NotImplementedException("glCopyTextureImage2DEXT");}
public static void glCopyTextureSubImage1DEXT ( uint texture,uint target,int level,int xoffset,int x,int y,int width ){if (__glCopyTextureSubImage1DEXT!=null) __glCopyTextureSubImage1DEXT(texture,target,level,xoffset,x,y,width);else throw new NotImplementedException("glCopyTextureSubImage1DEXT");}
public static void glCopyTextureSubImage2DEXT ( uint texture,uint target,int level,int xoffset,int yoffset,int x,int y,int width,int height ){if (__glCopyTextureSubImage2DEXT!=null) __glCopyTextureSubImage2DEXT(texture,target,level,xoffset,yoffset,x,y,width,height);else throw new NotImplementedException("glCopyTextureSubImage2DEXT");}
public static void glCopyTextureSubImage3DEXT ( uint texture,uint target,int level,int xoffset,int yoffset,int zoffset,int x,int y,int width,int height ){if (__glCopyTextureSubImage3DEXT!=null) __glCopyTextureSubImage3DEXT(texture,target,level,xoffset,yoffset,zoffset,x,y,width,height);else throw new NotImplementedException("glCopyTextureSubImage3DEXT");}
public static void glDisableClientStateIndexedEXT ( uint array,uint index ){if (__glDisableClientStateIndexedEXT!=null) __glDisableClientStateIndexedEXT(array,index);else throw new NotImplementedException("glDisableClientStateIndexedEXT");}
public static void glDisableClientStateiEXT ( uint array,uint index ){if (__glDisableClientStateiEXT!=null) __glDisableClientStateiEXT(array,index);else throw new NotImplementedException("glDisableClientStateiEXT");}
public static void glDisableVertexArrayAttribEXT ( uint vaobj,uint index ){if (__glDisableVertexArrayAttribEXT!=null) __glDisableVertexArrayAttribEXT(vaobj,index);else throw new NotImplementedException("glDisableVertexArrayAttribEXT");}
public static void glDisableVertexArrayEXT ( uint vaobj,uint array ){if (__glDisableVertexArrayEXT!=null) __glDisableVertexArrayEXT(vaobj,array);else throw new NotImplementedException("glDisableVertexArrayEXT");}
public static void glEnableClientStateIndexedEXT ( uint array,uint index ){if (__glEnableClientStateIndexedEXT!=null) __glEnableClientStateIndexedEXT(array,index);else throw new NotImplementedException("glEnableClientStateIndexedEXT");}
public static void glEnableClientStateiEXT ( uint array,uint index ){if (__glEnableClientStateiEXT!=null) __glEnableClientStateiEXT(array,index);else throw new NotImplementedException("glEnableClientStateiEXT");}
public static void glEnableVertexArrayAttribEXT ( uint vaobj,uint index ){if (__glEnableVertexArrayAttribEXT!=null) __glEnableVertexArrayAttribEXT(vaobj,index);else throw new NotImplementedException("glEnableVertexArrayAttribEXT");}
public static void glEnableVertexArrayEXT ( uint vaobj,uint array ){if (__glEnableVertexArrayEXT!=null) __glEnableVertexArrayEXT(vaobj,array);else throw new NotImplementedException("glEnableVertexArrayEXT");}
public static void glFlushMappedNamedBufferRangeEXT ( uint buffer,IntPtr offset,IntPtr length ){if (__glFlushMappedNamedBufferRangeEXT!=null) __glFlushMappedNamedBufferRangeEXT(buffer,offset,length);else throw new NotImplementedException("glFlushMappedNamedBufferRangeEXT");}
public static void glFramebufferDrawBufferEXT ( uint framebuffer,uint mode ){if (__glFramebufferDrawBufferEXT!=null) __glFramebufferDrawBufferEXT(framebuffer,mode);else throw new NotImplementedException("glFramebufferDrawBufferEXT");}
public static void glFramebufferDrawBuffersEXT ( uint framebuffer,int n,uint[]  bufs ){if (__glFramebufferDrawBuffersEXT!=null) __glFramebufferDrawBuffersEXT(framebuffer,n,bufs);else throw new NotImplementedException("glFramebufferDrawBuffersEXT");}
public static void glFramebufferReadBufferEXT ( uint framebuffer,uint mode ){if (__glFramebufferReadBufferEXT!=null) __glFramebufferReadBufferEXT(framebuffer,mode);else throw new NotImplementedException("glFramebufferReadBufferEXT");}
public static void glGenerateMultiTexMipmapEXT ( uint texunit,uint target ){if (__glGenerateMultiTexMipmapEXT!=null) __glGenerateMultiTexMipmapEXT(texunit,target);else throw new NotImplementedException("glGenerateMultiTexMipmapEXT");}
public static void glGenerateTextureMipmapEXT ( uint texture,uint target ){if (__glGenerateTextureMipmapEXT!=null) __glGenerateTextureMipmapEXT(texture,target);else throw new NotImplementedException("glGenerateTextureMipmapEXT");}
public static void glGetCompressedMultiTexImageEXT ( uint texunit,uint target,int level,IntPtr img ){if (__glGetCompressedMultiTexImageEXT!=null) __glGetCompressedMultiTexImageEXT(texunit,target,level,img);else throw new NotImplementedException("glGetCompressedMultiTexImageEXT");}
public static void glGetCompressedTextureImageEXT ( uint texture,uint target,int level,IntPtr img ){if (__glGetCompressedTextureImageEXT!=null) __glGetCompressedTextureImageEXT(texture,target,level,img);else throw new NotImplementedException("glGetCompressedTextureImageEXT");}
public static void glGetDoubleIndexedvEXT ( uint target,uint index,IntPtr _params ){if (__glGetDoubleIndexedvEXT!=null) __glGetDoubleIndexedvEXT(target,index,_params);else throw new NotImplementedException("glGetDoubleIndexedvEXT");}
public static void glGetDoublei_vEXT ( uint pname,uint index,IntPtr _params ){if (__glGetDoublei_vEXT!=null) __glGetDoublei_vEXT(pname,index,_params);else throw new NotImplementedException("glGetDoublei_vEXT");}
public static void glGetFloatIndexedvEXT ( uint target,uint index,IntPtr _params ){if (__glGetFloatIndexedvEXT!=null) __glGetFloatIndexedvEXT(target,index,_params);else throw new NotImplementedException("glGetFloatIndexedvEXT");}
public static void glGetFloati_vEXT ( uint pname,uint index,IntPtr _params ){if (__glGetFloati_vEXT!=null) __glGetFloati_vEXT(pname,index,_params);else throw new NotImplementedException("glGetFloati_vEXT");}
public static void glGetFramebufferParameterivEXT ( uint framebuffer,uint pname,IntPtr param ){if (__glGetFramebufferParameterivEXT!=null) __glGetFramebufferParameterivEXT(framebuffer,pname,param);else throw new NotImplementedException("glGetFramebufferParameterivEXT");}
public static void glGetMultiTexEnvfvEXT ( uint texunit,uint target,uint pname,IntPtr _params ){if (__glGetMultiTexEnvfvEXT!=null) __glGetMultiTexEnvfvEXT(texunit,target,pname,_params);else throw new NotImplementedException("glGetMultiTexEnvfvEXT");}
public static void glGetMultiTexEnvivEXT ( uint texunit,uint target,uint pname,IntPtr _params ){if (__glGetMultiTexEnvivEXT!=null) __glGetMultiTexEnvivEXT(texunit,target,pname,_params);else throw new NotImplementedException("glGetMultiTexEnvivEXT");}
public static void glGetMultiTexGendvEXT ( uint texunit,uint coord,uint pname,IntPtr _params ){if (__glGetMultiTexGendvEXT!=null) __glGetMultiTexGendvEXT(texunit,coord,pname,_params);else throw new NotImplementedException("glGetMultiTexGendvEXT");}
public static void glGetMultiTexGenfvEXT ( uint texunit,uint coord,uint pname,IntPtr _params ){if (__glGetMultiTexGenfvEXT!=null) __glGetMultiTexGenfvEXT(texunit,coord,pname,_params);else throw new NotImplementedException("glGetMultiTexGenfvEXT");}
public static void glGetMultiTexGenivEXT ( uint texunit,uint coord,uint pname,IntPtr _params ){if (__glGetMultiTexGenivEXT!=null) __glGetMultiTexGenivEXT(texunit,coord,pname,_params);else throw new NotImplementedException("glGetMultiTexGenivEXT");}
public static void glGetMultiTexImageEXT ( uint texunit,uint target,int level,uint format,uint type,IntPtr pixels ){if (__glGetMultiTexImageEXT!=null) __glGetMultiTexImageEXT(texunit,target,level,format,type,pixels);else throw new NotImplementedException("glGetMultiTexImageEXT");}
public static void glGetMultiTexLevelParameterfvEXT ( uint texunit,uint target,int level,uint pname,IntPtr _params ){if (__glGetMultiTexLevelParameterfvEXT!=null) __glGetMultiTexLevelParameterfvEXT(texunit,target,level,pname,_params);else throw new NotImplementedException("glGetMultiTexLevelParameterfvEXT");}
public static void glGetMultiTexLevelParameterivEXT ( uint texunit,uint target,int level,uint pname,IntPtr _params ){if (__glGetMultiTexLevelParameterivEXT!=null) __glGetMultiTexLevelParameterivEXT(texunit,target,level,pname,_params);else throw new NotImplementedException("glGetMultiTexLevelParameterivEXT");}
public static void glGetMultiTexParameterIivEXT ( uint texunit,uint target,uint pname,IntPtr _params ){if (__glGetMultiTexParameterIivEXT!=null) __glGetMultiTexParameterIivEXT(texunit,target,pname,_params);else throw new NotImplementedException("glGetMultiTexParameterIivEXT");}
public static void glGetMultiTexParameterIuivEXT ( uint texunit,uint target,uint pname,IntPtr _params ){if (__glGetMultiTexParameterIuivEXT!=null) __glGetMultiTexParameterIuivEXT(texunit,target,pname,_params);else throw new NotImplementedException("glGetMultiTexParameterIuivEXT");}
public static void glGetMultiTexParameterfvEXT ( uint texunit,uint target,uint pname,IntPtr _params ){if (__glGetMultiTexParameterfvEXT!=null) __glGetMultiTexParameterfvEXT(texunit,target,pname,_params);else throw new NotImplementedException("glGetMultiTexParameterfvEXT");}
public static void glGetMultiTexParameterivEXT ( uint texunit,uint target,uint pname,IntPtr _params ){if (__glGetMultiTexParameterivEXT!=null) __glGetMultiTexParameterivEXT(texunit,target,pname,_params);else throw new NotImplementedException("glGetMultiTexParameterivEXT");}
public static void glGetNamedBufferParameterivEXT ( uint buffer,uint pname,IntPtr _params ){if (__glGetNamedBufferParameterivEXT!=null) __glGetNamedBufferParameterivEXT(buffer,pname,_params);else throw new NotImplementedException("glGetNamedBufferParameterivEXT");}
public static void glGetNamedBufferPointervEXT ( uint buffer,uint pname,IntPtr _params ){if (__glGetNamedBufferPointervEXT!=null) __glGetNamedBufferPointervEXT(buffer,pname,_params);else throw new NotImplementedException("glGetNamedBufferPointervEXT");}
public static void glGetNamedBufferSubDataEXT ( uint buffer,IntPtr offset,IntPtr size,IntPtr data ){if (__glGetNamedBufferSubDataEXT!=null) __glGetNamedBufferSubDataEXT(buffer,offset,size,data);else throw new NotImplementedException("glGetNamedBufferSubDataEXT");}
public static void glGetNamedFramebufferAttachmentParameterivEXT ( uint framebuffer,uint attachment,uint pname,IntPtr _params ){if (__glGetNamedFramebufferAttachmentParameterivEXT!=null) __glGetNamedFramebufferAttachmentParameterivEXT(framebuffer,attachment,pname,_params);else throw new NotImplementedException("glGetNamedFramebufferAttachmentParameterivEXT");}
public static void glGetNamedProgramLocalParameterIivEXT ( uint program,uint target,uint index,IntPtr _params ){if (__glGetNamedProgramLocalParameterIivEXT!=null) __glGetNamedProgramLocalParameterIivEXT(program,target,index,_params);else throw new NotImplementedException("glGetNamedProgramLocalParameterIivEXT");}
public static void glGetNamedProgramLocalParameterIuivEXT ( uint program,uint target,uint index,IntPtr _params ){if (__glGetNamedProgramLocalParameterIuivEXT!=null) __glGetNamedProgramLocalParameterIuivEXT(program,target,index,_params);else throw new NotImplementedException("glGetNamedProgramLocalParameterIuivEXT");}
public static void glGetNamedProgramLocalParameterdvEXT ( uint program,uint target,uint index,IntPtr _params ){if (__glGetNamedProgramLocalParameterdvEXT!=null) __glGetNamedProgramLocalParameterdvEXT(program,target,index,_params);else throw new NotImplementedException("glGetNamedProgramLocalParameterdvEXT");}
public static void glGetNamedProgramLocalParameterfvEXT ( uint program,uint target,uint index,IntPtr _params ){if (__glGetNamedProgramLocalParameterfvEXT!=null) __glGetNamedProgramLocalParameterfvEXT(program,target,index,_params);else throw new NotImplementedException("glGetNamedProgramLocalParameterfvEXT");}
public static void glGetNamedProgramStringEXT ( uint program,uint target,uint pname,IntPtr _string ){if (__glGetNamedProgramStringEXT!=null) __glGetNamedProgramStringEXT(program,target,pname,_string);else throw new NotImplementedException("glGetNamedProgramStringEXT");}
public static void glGetNamedProgramivEXT ( uint program,uint target,uint pname,IntPtr _params ){if (__glGetNamedProgramivEXT!=null) __glGetNamedProgramivEXT(program,target,pname,_params);else throw new NotImplementedException("glGetNamedProgramivEXT");}
public static void glGetNamedRenderbufferParameterivEXT ( uint renderbuffer,uint pname,IntPtr _params ){if (__glGetNamedRenderbufferParameterivEXT!=null) __glGetNamedRenderbufferParameterivEXT(renderbuffer,pname,_params);else throw new NotImplementedException("glGetNamedRenderbufferParameterivEXT");}
public static void glGetPointerIndexedvEXT ( uint target,uint index,IntPtr _params ){if (__glGetPointerIndexedvEXT!=null) __glGetPointerIndexedvEXT(target,index,_params);else throw new NotImplementedException("glGetPointerIndexedvEXT");}
public static void glGetPointeri_vEXT ( uint pname,uint index,IntPtr _params ){if (__glGetPointeri_vEXT!=null) __glGetPointeri_vEXT(pname,index,_params);else throw new NotImplementedException("glGetPointeri_vEXT");}
public static void glGetTextureImageEXT ( uint texture,uint target,int level,uint format,uint type,IntPtr pixels ){if (__glGetTextureImageEXT!=null) __glGetTextureImageEXT(texture,target,level,format,type,pixels);else throw new NotImplementedException("glGetTextureImageEXT");}
public static void glGetTextureLevelParameterfvEXT ( uint texture,uint target,int level,uint pname,IntPtr _params ){if (__glGetTextureLevelParameterfvEXT!=null) __glGetTextureLevelParameterfvEXT(texture,target,level,pname,_params);else throw new NotImplementedException("glGetTextureLevelParameterfvEXT");}
public static void glGetTextureLevelParameterivEXT ( uint texture,uint target,int level,uint pname,IntPtr _params ){if (__glGetTextureLevelParameterivEXT!=null) __glGetTextureLevelParameterivEXT(texture,target,level,pname,_params);else throw new NotImplementedException("glGetTextureLevelParameterivEXT");}
public static void glGetTextureParameterIivEXT ( uint texture,uint target,uint pname,IntPtr _params ){if (__glGetTextureParameterIivEXT!=null) __glGetTextureParameterIivEXT(texture,target,pname,_params);else throw new NotImplementedException("glGetTextureParameterIivEXT");}
public static void glGetTextureParameterIuivEXT ( uint texture,uint target,uint pname,IntPtr _params ){if (__glGetTextureParameterIuivEXT!=null) __glGetTextureParameterIuivEXT(texture,target,pname,_params);else throw new NotImplementedException("glGetTextureParameterIuivEXT");}
public static void glGetTextureParameterfvEXT ( uint texture,uint target,uint pname,IntPtr _params ){if (__glGetTextureParameterfvEXT!=null) __glGetTextureParameterfvEXT(texture,target,pname,_params);else throw new NotImplementedException("glGetTextureParameterfvEXT");}
public static void glGetTextureParameterivEXT ( uint texture,uint target,uint pname,IntPtr _params ){if (__glGetTextureParameterivEXT!=null) __glGetTextureParameterivEXT(texture,target,pname,_params);else throw new NotImplementedException("glGetTextureParameterivEXT");}
public static void glGetVertexArrayIntegeri_vEXT ( uint vaobj,uint index,uint pname,IntPtr param ){if (__glGetVertexArrayIntegeri_vEXT!=null) __glGetVertexArrayIntegeri_vEXT(vaobj,index,pname,param);else throw new NotImplementedException("glGetVertexArrayIntegeri_vEXT");}
public static void glGetVertexArrayIntegervEXT ( uint vaobj,uint pname,IntPtr param ){if (__glGetVertexArrayIntegervEXT!=null) __glGetVertexArrayIntegervEXT(vaobj,pname,param);else throw new NotImplementedException("glGetVertexArrayIntegervEXT");}
public static void glGetVertexArrayPointeri_vEXT ( uint vaobj,uint index,uint pname,IntPtr param ){if (__glGetVertexArrayPointeri_vEXT!=null) __glGetVertexArrayPointeri_vEXT(vaobj,index,pname,param);else throw new NotImplementedException("glGetVertexArrayPointeri_vEXT");}
public static void glGetVertexArrayPointervEXT ( uint vaobj,uint pname,IntPtr param ){if (__glGetVertexArrayPointervEXT!=null) __glGetVertexArrayPointervEXT(vaobj,pname,param);else throw new NotImplementedException("glGetVertexArrayPointervEXT");}
public static IntPtr glMapNamedBufferEXT ( uint buffer,uint access ){if (__glMapNamedBufferEXT!=null) return __glMapNamedBufferEXT(buffer,access);else throw new NotImplementedException("glMapNamedBufferEXT");}
public static IntPtr glMapNamedBufferRangeEXT ( uint buffer,IntPtr offset,IntPtr length,uint access ){if (__glMapNamedBufferRangeEXT!=null) return __glMapNamedBufferRangeEXT(buffer,offset,length,access);else throw new NotImplementedException("glMapNamedBufferRangeEXT");}
public static void glMatrixFrustumEXT ( uint matrixMode,double l,double r,double b,double t,double n,double f ){if (__glMatrixFrustumEXT!=null) __glMatrixFrustumEXT(matrixMode,l,r,b,t,n,f);else throw new NotImplementedException("glMatrixFrustumEXT");}
public static void glMatrixLoadIdentityEXT ( uint matrixMode ){if (__glMatrixLoadIdentityEXT!=null) __glMatrixLoadIdentityEXT(matrixMode);else throw new NotImplementedException("glMatrixLoadIdentityEXT");}
public static void glMatrixLoadTransposedEXT ( uint matrixMode,double[]  m ){if (__glMatrixLoadTransposedEXT!=null) __glMatrixLoadTransposedEXT(matrixMode,m);else throw new NotImplementedException("glMatrixLoadTransposedEXT");}
public static void glMatrixLoadTransposefEXT ( uint matrixMode,float[]  m ){if (__glMatrixLoadTransposefEXT!=null) __glMatrixLoadTransposefEXT(matrixMode,m);else throw new NotImplementedException("glMatrixLoadTransposefEXT");}
public static void glMatrixLoaddEXT ( uint matrixMode,double[]  m ){if (__glMatrixLoaddEXT!=null) __glMatrixLoaddEXT(matrixMode,m);else throw new NotImplementedException("glMatrixLoaddEXT");}
public static void glMatrixLoadfEXT ( uint matrixMode,float[]  m ){if (__glMatrixLoadfEXT!=null) __glMatrixLoadfEXT(matrixMode,m);else throw new NotImplementedException("glMatrixLoadfEXT");}
public static void glMatrixMultTransposedEXT ( uint matrixMode,double[]  m ){if (__glMatrixMultTransposedEXT!=null) __glMatrixMultTransposedEXT(matrixMode,m);else throw new NotImplementedException("glMatrixMultTransposedEXT");}
public static void glMatrixMultTransposefEXT ( uint matrixMode,float[]  m ){if (__glMatrixMultTransposefEXT!=null) __glMatrixMultTransposefEXT(matrixMode,m);else throw new NotImplementedException("glMatrixMultTransposefEXT");}
public static void glMatrixMultdEXT ( uint matrixMode,double[]  m ){if (__glMatrixMultdEXT!=null) __glMatrixMultdEXT(matrixMode,m);else throw new NotImplementedException("glMatrixMultdEXT");}
public static void glMatrixMultfEXT ( uint matrixMode,float[]  m ){if (__glMatrixMultfEXT!=null) __glMatrixMultfEXT(matrixMode,m);else throw new NotImplementedException("glMatrixMultfEXT");}
public static void glMatrixOrthoEXT ( uint matrixMode,double l,double r,double b,double t,double n,double f ){if (__glMatrixOrthoEXT!=null) __glMatrixOrthoEXT(matrixMode,l,r,b,t,n,f);else throw new NotImplementedException("glMatrixOrthoEXT");}
public static void glMatrixPopEXT ( uint matrixMode ){if (__glMatrixPopEXT!=null) __glMatrixPopEXT(matrixMode);else throw new NotImplementedException("glMatrixPopEXT");}
public static void glMatrixPushEXT ( uint matrixMode ){if (__glMatrixPushEXT!=null) __glMatrixPushEXT(matrixMode);else throw new NotImplementedException("glMatrixPushEXT");}
public static void glMatrixRotatedEXT ( uint matrixMode,double angle,double x,double y,double z ){if (__glMatrixRotatedEXT!=null) __glMatrixRotatedEXT(matrixMode,angle,x,y,z);else throw new NotImplementedException("glMatrixRotatedEXT");}
public static void glMatrixRotatefEXT ( uint matrixMode,float angle,float x,float y,float z ){if (__glMatrixRotatefEXT!=null) __glMatrixRotatefEXT(matrixMode,angle,x,y,z);else throw new NotImplementedException("glMatrixRotatefEXT");}
public static void glMatrixScaledEXT ( uint matrixMode,double x,double y,double z ){if (__glMatrixScaledEXT!=null) __glMatrixScaledEXT(matrixMode,x,y,z);else throw new NotImplementedException("glMatrixScaledEXT");}
public static void glMatrixScalefEXT ( uint matrixMode,float x,float y,float z ){if (__glMatrixScalefEXT!=null) __glMatrixScalefEXT(matrixMode,x,y,z);else throw new NotImplementedException("glMatrixScalefEXT");}
public static void glMatrixTranslatedEXT ( uint matrixMode,double x,double y,double z ){if (__glMatrixTranslatedEXT!=null) __glMatrixTranslatedEXT(matrixMode,x,y,z);else throw new NotImplementedException("glMatrixTranslatedEXT");}
public static void glMatrixTranslatefEXT ( uint matrixMode,float x,float y,float z ){if (__glMatrixTranslatefEXT!=null) __glMatrixTranslatefEXT(matrixMode,x,y,z);else throw new NotImplementedException("glMatrixTranslatefEXT");}
public static void glMultiTexBufferEXT ( uint texunit,uint target,uint internalformat,uint buffer ){if (__glMultiTexBufferEXT!=null) __glMultiTexBufferEXT(texunit,target,internalformat,buffer);else throw new NotImplementedException("glMultiTexBufferEXT");}
public static void glMultiTexCoordPointerEXT ( uint texunit,int size,uint type,int stride,IntPtr  pointer ){if (__glMultiTexCoordPointerEXT!=null) __glMultiTexCoordPointerEXT(texunit,size,type,stride,pointer);else throw new NotImplementedException("glMultiTexCoordPointerEXT");}
public static void glMultiTexEnvfEXT ( uint texunit,uint target,uint pname,float param ){if (__glMultiTexEnvfEXT!=null) __glMultiTexEnvfEXT(texunit,target,pname,param);else throw new NotImplementedException("glMultiTexEnvfEXT");}
public static void glMultiTexEnvfvEXT ( uint texunit,uint target,uint pname,float[]  _params ){if (__glMultiTexEnvfvEXT!=null) __glMultiTexEnvfvEXT(texunit,target,pname,_params);else throw new NotImplementedException("glMultiTexEnvfvEXT");}
public static void glMultiTexEnviEXT ( uint texunit,uint target,uint pname,int param ){if (__glMultiTexEnviEXT!=null) __glMultiTexEnviEXT(texunit,target,pname,param);else throw new NotImplementedException("glMultiTexEnviEXT");}
public static void glMultiTexEnvivEXT ( uint texunit,uint target,uint pname,int[]  _params ){if (__glMultiTexEnvivEXT!=null) __glMultiTexEnvivEXT(texunit,target,pname,_params);else throw new NotImplementedException("glMultiTexEnvivEXT");}
public static void glMultiTexGendEXT ( uint texunit,uint coord,uint pname,double param ){if (__glMultiTexGendEXT!=null) __glMultiTexGendEXT(texunit,coord,pname,param);else throw new NotImplementedException("glMultiTexGendEXT");}
public static void glMultiTexGendvEXT ( uint texunit,uint coord,uint pname,double[]  _params ){if (__glMultiTexGendvEXT!=null) __glMultiTexGendvEXT(texunit,coord,pname,_params);else throw new NotImplementedException("glMultiTexGendvEXT");}
public static void glMultiTexGenfEXT ( uint texunit,uint coord,uint pname,float param ){if (__glMultiTexGenfEXT!=null) __glMultiTexGenfEXT(texunit,coord,pname,param);else throw new NotImplementedException("glMultiTexGenfEXT");}
public static void glMultiTexGenfvEXT ( uint texunit,uint coord,uint pname,float[]  _params ){if (__glMultiTexGenfvEXT!=null) __glMultiTexGenfvEXT(texunit,coord,pname,_params);else throw new NotImplementedException("glMultiTexGenfvEXT");}
public static void glMultiTexGeniEXT ( uint texunit,uint coord,uint pname,int param ){if (__glMultiTexGeniEXT!=null) __glMultiTexGeniEXT(texunit,coord,pname,param);else throw new NotImplementedException("glMultiTexGeniEXT");}
public static void glMultiTexGenivEXT ( uint texunit,uint coord,uint pname,int[]  _params ){if (__glMultiTexGenivEXT!=null) __glMultiTexGenivEXT(texunit,coord,pname,_params);else throw new NotImplementedException("glMultiTexGenivEXT");}
public static void glMultiTexImage1DEXT ( uint texunit,uint target,int level,int internalformat,int width,int border,uint format,uint type,IntPtr  pixels ){if (__glMultiTexImage1DEXT!=null) __glMultiTexImage1DEXT(texunit,target,level,internalformat,width,border,format,type,pixels);else throw new NotImplementedException("glMultiTexImage1DEXT");}
public static void glMultiTexImage2DEXT ( uint texunit,uint target,int level,int internalformat,int width,int height,int border,uint format,uint type,IntPtr  pixels ){if (__glMultiTexImage2DEXT!=null) __glMultiTexImage2DEXT(texunit,target,level,internalformat,width,height,border,format,type,pixels);else throw new NotImplementedException("glMultiTexImage2DEXT");}
public static void glMultiTexImage3DEXT ( uint texunit,uint target,int level,int internalformat,int width,int height,int depth,int border,uint format,uint type,IntPtr  pixels ){if (__glMultiTexImage3DEXT!=null) __glMultiTexImage3DEXT(texunit,target,level,internalformat,width,height,depth,border,format,type,pixels);else throw new NotImplementedException("glMultiTexImage3DEXT");}
public static void glMultiTexParameterIivEXT ( uint texunit,uint target,uint pname,int[]  _params ){if (__glMultiTexParameterIivEXT!=null) __glMultiTexParameterIivEXT(texunit,target,pname,_params);else throw new NotImplementedException("glMultiTexParameterIivEXT");}
public static void glMultiTexParameterIuivEXT ( uint texunit,uint target,uint pname,uint[]  _params ){if (__glMultiTexParameterIuivEXT!=null) __glMultiTexParameterIuivEXT(texunit,target,pname,_params);else throw new NotImplementedException("glMultiTexParameterIuivEXT");}
public static void glMultiTexParameterfEXT ( uint texunit,uint target,uint pname,float param ){if (__glMultiTexParameterfEXT!=null) __glMultiTexParameterfEXT(texunit,target,pname,param);else throw new NotImplementedException("glMultiTexParameterfEXT");}
public static void glMultiTexParameterfvEXT ( uint texunit,uint target,uint pname,float[]  param ){if (__glMultiTexParameterfvEXT!=null) __glMultiTexParameterfvEXT(texunit,target,pname,param);else throw new NotImplementedException("glMultiTexParameterfvEXT");}
public static void glMultiTexParameteriEXT ( uint texunit,uint target,uint pname,int param ){if (__glMultiTexParameteriEXT!=null) __glMultiTexParameteriEXT(texunit,target,pname,param);else throw new NotImplementedException("glMultiTexParameteriEXT");}
public static void glMultiTexParameterivEXT ( uint texunit,uint target,uint pname,int[]  param ){if (__glMultiTexParameterivEXT!=null) __glMultiTexParameterivEXT(texunit,target,pname,param);else throw new NotImplementedException("glMultiTexParameterivEXT");}
public static void glMultiTexRenderbufferEXT ( uint texunit,uint target,uint renderbuffer ){if (__glMultiTexRenderbufferEXT!=null) __glMultiTexRenderbufferEXT(texunit,target,renderbuffer);else throw new NotImplementedException("glMultiTexRenderbufferEXT");}
public static void glMultiTexSubImage1DEXT ( uint texunit,uint target,int level,int xoffset,int width,uint format,uint type,IntPtr  pixels ){if (__glMultiTexSubImage1DEXT!=null) __glMultiTexSubImage1DEXT(texunit,target,level,xoffset,width,format,type,pixels);else throw new NotImplementedException("glMultiTexSubImage1DEXT");}
public static void glMultiTexSubImage2DEXT ( uint texunit,uint target,int level,int xoffset,int yoffset,int width,int height,uint format,uint type,IntPtr  pixels ){if (__glMultiTexSubImage2DEXT!=null) __glMultiTexSubImage2DEXT(texunit,target,level,xoffset,yoffset,width,height,format,type,pixels);else throw new NotImplementedException("glMultiTexSubImage2DEXT");}
public static void glMultiTexSubImage3DEXT ( uint texunit,uint target,int level,int xoffset,int yoffset,int zoffset,int width,int height,int depth,uint format,uint type,IntPtr  pixels ){if (__glMultiTexSubImage3DEXT!=null) __glMultiTexSubImage3DEXT(texunit,target,level,xoffset,yoffset,zoffset,width,height,depth,format,type,pixels);else throw new NotImplementedException("glMultiTexSubImage3DEXT");}
public static void glNamedBufferDataEXT ( uint buffer,IntPtr size,IntPtr  data,uint usage ){if (__glNamedBufferDataEXT!=null) __glNamedBufferDataEXT(buffer,size,data,usage);else throw new NotImplementedException("glNamedBufferDataEXT");}
public static void glNamedBufferSubDataEXT ( uint buffer,IntPtr offset,IntPtr size,IntPtr  data ){if (__glNamedBufferSubDataEXT!=null) __glNamedBufferSubDataEXT(buffer,offset,size,data);else throw new NotImplementedException("glNamedBufferSubDataEXT");}
public static void glNamedCopyBufferSubDataEXT ( uint readBuffer,uint writeBuffer,IntPtr readOffset,IntPtr writeOffset,IntPtr size ){if (__glNamedCopyBufferSubDataEXT!=null) __glNamedCopyBufferSubDataEXT(readBuffer,writeBuffer,readOffset,writeOffset,size);else throw new NotImplementedException("glNamedCopyBufferSubDataEXT");}
public static void glNamedFramebufferRenderbufferEXT ( uint framebuffer,uint attachment,uint renderbuffertarget,uint renderbuffer ){if (__glNamedFramebufferRenderbufferEXT!=null) __glNamedFramebufferRenderbufferEXT(framebuffer,attachment,renderbuffertarget,renderbuffer);else throw new NotImplementedException("glNamedFramebufferRenderbufferEXT");}
public static void glNamedFramebufferTexture1DEXT ( uint framebuffer,uint attachment,uint textarget,uint texture,int level ){if (__glNamedFramebufferTexture1DEXT!=null) __glNamedFramebufferTexture1DEXT(framebuffer,attachment,textarget,texture,level);else throw new NotImplementedException("glNamedFramebufferTexture1DEXT");}
public static void glNamedFramebufferTexture2DEXT ( uint framebuffer,uint attachment,uint textarget,uint texture,int level ){if (__glNamedFramebufferTexture2DEXT!=null) __glNamedFramebufferTexture2DEXT(framebuffer,attachment,textarget,texture,level);else throw new NotImplementedException("glNamedFramebufferTexture2DEXT");}
public static void glNamedFramebufferTexture3DEXT ( uint framebuffer,uint attachment,uint textarget,uint texture,int level,int zoffset ){if (__glNamedFramebufferTexture3DEXT!=null) __glNamedFramebufferTexture3DEXT(framebuffer,attachment,textarget,texture,level,zoffset);else throw new NotImplementedException("glNamedFramebufferTexture3DEXT");}
public static void glNamedFramebufferTextureEXT ( uint framebuffer,uint attachment,uint texture,int level ){if (__glNamedFramebufferTextureEXT!=null) __glNamedFramebufferTextureEXT(framebuffer,attachment,texture,level);else throw new NotImplementedException("glNamedFramebufferTextureEXT");}
public static void glNamedFramebufferTextureFaceEXT ( uint framebuffer,uint attachment,uint texture,int level,uint face ){if (__glNamedFramebufferTextureFaceEXT!=null) __glNamedFramebufferTextureFaceEXT(framebuffer,attachment,texture,level,face);else throw new NotImplementedException("glNamedFramebufferTextureFaceEXT");}
public static void glNamedFramebufferTextureLayerEXT ( uint framebuffer,uint attachment,uint texture,int level,int layer ){if (__glNamedFramebufferTextureLayerEXT!=null) __glNamedFramebufferTextureLayerEXT(framebuffer,attachment,texture,level,layer);else throw new NotImplementedException("glNamedFramebufferTextureLayerEXT");}
public static void glNamedProgramLocalParameter4dEXT ( uint program,uint target,uint index,double x,double y,double z,double w ){if (__glNamedProgramLocalParameter4dEXT!=null) __glNamedProgramLocalParameter4dEXT(program,target,index,x,y,z,w);else throw new NotImplementedException("glNamedProgramLocalParameter4dEXT");}
public static void glNamedProgramLocalParameter4dvEXT ( uint program,uint target,uint index,double[]  _params ){if (__glNamedProgramLocalParameter4dvEXT!=null) __glNamedProgramLocalParameter4dvEXT(program,target,index,_params);else throw new NotImplementedException("glNamedProgramLocalParameter4dvEXT");}
public static void glNamedProgramLocalParameter4fEXT ( uint program,uint target,uint index,float x,float y,float z,float w ){if (__glNamedProgramLocalParameter4fEXT!=null) __glNamedProgramLocalParameter4fEXT(program,target,index,x,y,z,w);else throw new NotImplementedException("glNamedProgramLocalParameter4fEXT");}
public static void glNamedProgramLocalParameter4fvEXT ( uint program,uint target,uint index,float[]  _params ){if (__glNamedProgramLocalParameter4fvEXT!=null) __glNamedProgramLocalParameter4fvEXT(program,target,index,_params);else throw new NotImplementedException("glNamedProgramLocalParameter4fvEXT");}
public static void glNamedProgramLocalParameterI4iEXT ( uint program,uint target,uint index,int x,int y,int z,int w ){if (__glNamedProgramLocalParameterI4iEXT!=null) __glNamedProgramLocalParameterI4iEXT(program,target,index,x,y,z,w);else throw new NotImplementedException("glNamedProgramLocalParameterI4iEXT");}
public static void glNamedProgramLocalParameterI4ivEXT ( uint program,uint target,uint index,int[]  _params ){if (__glNamedProgramLocalParameterI4ivEXT!=null) __glNamedProgramLocalParameterI4ivEXT(program,target,index,_params);else throw new NotImplementedException("glNamedProgramLocalParameterI4ivEXT");}
public static void glNamedProgramLocalParameterI4uiEXT ( uint program,uint target,uint index,uint x,uint y,uint z,uint w ){if (__glNamedProgramLocalParameterI4uiEXT!=null) __glNamedProgramLocalParameterI4uiEXT(program,target,index,x,y,z,w);else throw new NotImplementedException("glNamedProgramLocalParameterI4uiEXT");}
public static void glNamedProgramLocalParameterI4uivEXT ( uint program,uint target,uint index,uint[]  _params ){if (__glNamedProgramLocalParameterI4uivEXT!=null) __glNamedProgramLocalParameterI4uivEXT(program,target,index,_params);else throw new NotImplementedException("glNamedProgramLocalParameterI4uivEXT");}
public static void glNamedProgramLocalParameters4fvEXT ( uint program,uint target,uint index,int count,float[]  _params ){if (__glNamedProgramLocalParameters4fvEXT!=null) __glNamedProgramLocalParameters4fvEXT(program,target,index,count,_params);else throw new NotImplementedException("glNamedProgramLocalParameters4fvEXT");}
public static void glNamedProgramLocalParametersI4ivEXT ( uint program,uint target,uint index,int count,int[]  _params ){if (__glNamedProgramLocalParametersI4ivEXT!=null) __glNamedProgramLocalParametersI4ivEXT(program,target,index,count,_params);else throw new NotImplementedException("glNamedProgramLocalParametersI4ivEXT");}
public static void glNamedProgramLocalParametersI4uivEXT ( uint program,uint target,uint index,int count,uint[]  _params ){if (__glNamedProgramLocalParametersI4uivEXT!=null) __glNamedProgramLocalParametersI4uivEXT(program,target,index,count,_params);else throw new NotImplementedException("glNamedProgramLocalParametersI4uivEXT");}
public static void glNamedProgramStringEXT ( uint program,uint target,uint format,int len,IntPtr  _string ){if (__glNamedProgramStringEXT!=null) __glNamedProgramStringEXT(program,target,format,len,_string);else throw new NotImplementedException("glNamedProgramStringEXT");}
public static void glNamedRenderbufferStorageEXT ( uint renderbuffer,uint internalformat,int width,int height ){if (__glNamedRenderbufferStorageEXT!=null) __glNamedRenderbufferStorageEXT(renderbuffer,internalformat,width,height);else throw new NotImplementedException("glNamedRenderbufferStorageEXT");}
public static void glNamedRenderbufferStorageMultisampleCoverageEXT ( uint renderbuffer,int coverageSamples,int colorSamples,uint internalformat,int width,int height ){if (__glNamedRenderbufferStorageMultisampleCoverageEXT!=null) __glNamedRenderbufferStorageMultisampleCoverageEXT(renderbuffer,coverageSamples,colorSamples,internalformat,width,height);else throw new NotImplementedException("glNamedRenderbufferStorageMultisampleCoverageEXT");}
public static void glNamedRenderbufferStorageMultisampleEXT ( uint renderbuffer,int samples,uint internalformat,int width,int height ){if (__glNamedRenderbufferStorageMultisampleEXT!=null) __glNamedRenderbufferStorageMultisampleEXT(renderbuffer,samples,internalformat,width,height);else throw new NotImplementedException("glNamedRenderbufferStorageMultisampleEXT");}
public static void glProgramUniform1fEXT ( uint program,int location,float v0 ){if (__glProgramUniform1fEXT!=null) __glProgramUniform1fEXT(program,location,v0);else throw new NotImplementedException("glProgramUniform1fEXT");}
public static void glProgramUniform1fvEXT ( uint program,int location,int count,float[]  value ){if (__glProgramUniform1fvEXT!=null) __glProgramUniform1fvEXT(program,location,count,value);else throw new NotImplementedException("glProgramUniform1fvEXT");}
public static void glProgramUniform1iEXT ( uint program,int location,int v0 ){if (__glProgramUniform1iEXT!=null) __glProgramUniform1iEXT(program,location,v0);else throw new NotImplementedException("glProgramUniform1iEXT");}
public static void glProgramUniform1ivEXT ( uint program,int location,int count,int[]  value ){if (__glProgramUniform1ivEXT!=null) __glProgramUniform1ivEXT(program,location,count,value);else throw new NotImplementedException("glProgramUniform1ivEXT");}
public static void glProgramUniform1uiEXT ( uint program,int location,uint v0 ){if (__glProgramUniform1uiEXT!=null) __glProgramUniform1uiEXT(program,location,v0);else throw new NotImplementedException("glProgramUniform1uiEXT");}
public static void glProgramUniform1uivEXT ( uint program,int location,int count,uint[]  value ){if (__glProgramUniform1uivEXT!=null) __glProgramUniform1uivEXT(program,location,count,value);else throw new NotImplementedException("glProgramUniform1uivEXT");}
public static void glProgramUniform2fEXT ( uint program,int location,float v0,float v1 ){if (__glProgramUniform2fEXT!=null) __glProgramUniform2fEXT(program,location,v0,v1);else throw new NotImplementedException("glProgramUniform2fEXT");}
public static void glProgramUniform2fvEXT ( uint program,int location,int count,float[]  value ){if (__glProgramUniform2fvEXT!=null) __glProgramUniform2fvEXT(program,location,count,value);else throw new NotImplementedException("glProgramUniform2fvEXT");}
public static void glProgramUniform2iEXT ( uint program,int location,int v0,int v1 ){if (__glProgramUniform2iEXT!=null) __glProgramUniform2iEXT(program,location,v0,v1);else throw new NotImplementedException("glProgramUniform2iEXT");}
public static void glProgramUniform2ivEXT ( uint program,int location,int count,int[]  value ){if (__glProgramUniform2ivEXT!=null) __glProgramUniform2ivEXT(program,location,count,value);else throw new NotImplementedException("glProgramUniform2ivEXT");}
public static void glProgramUniform2uiEXT ( uint program,int location,uint v0,uint v1 ){if (__glProgramUniform2uiEXT!=null) __glProgramUniform2uiEXT(program,location,v0,v1);else throw new NotImplementedException("glProgramUniform2uiEXT");}
public static void glProgramUniform2uivEXT ( uint program,int location,int count,uint[]  value ){if (__glProgramUniform2uivEXT!=null) __glProgramUniform2uivEXT(program,location,count,value);else throw new NotImplementedException("glProgramUniform2uivEXT");}
public static void glProgramUniform3fEXT ( uint program,int location,float v0,float v1,float v2 ){if (__glProgramUniform3fEXT!=null) __glProgramUniform3fEXT(program,location,v0,v1,v2);else throw new NotImplementedException("glProgramUniform3fEXT");}
public static void glProgramUniform3fvEXT ( uint program,int location,int count,float[]  value ){if (__glProgramUniform3fvEXT!=null) __glProgramUniform3fvEXT(program,location,count,value);else throw new NotImplementedException("glProgramUniform3fvEXT");}
public static void glProgramUniform3iEXT ( uint program,int location,int v0,int v1,int v2 ){if (__glProgramUniform3iEXT!=null) __glProgramUniform3iEXT(program,location,v0,v1,v2);else throw new NotImplementedException("glProgramUniform3iEXT");}
public static void glProgramUniform3ivEXT ( uint program,int location,int count,int[]  value ){if (__glProgramUniform3ivEXT!=null) __glProgramUniform3ivEXT(program,location,count,value);else throw new NotImplementedException("glProgramUniform3ivEXT");}
public static void glProgramUniform3uiEXT ( uint program,int location,uint v0,uint v1,uint v2 ){if (__glProgramUniform3uiEXT!=null) __glProgramUniform3uiEXT(program,location,v0,v1,v2);else throw new NotImplementedException("glProgramUniform3uiEXT");}
public static void glProgramUniform3uivEXT ( uint program,int location,int count,uint[]  value ){if (__glProgramUniform3uivEXT!=null) __glProgramUniform3uivEXT(program,location,count,value);else throw new NotImplementedException("glProgramUniform3uivEXT");}
public static void glProgramUniform4fEXT ( uint program,int location,float v0,float v1,float v2,float v3 ){if (__glProgramUniform4fEXT!=null) __glProgramUniform4fEXT(program,location,v0,v1,v2,v3);else throw new NotImplementedException("glProgramUniform4fEXT");}
public static void glProgramUniform4fvEXT ( uint program,int location,int count,float[]  value ){if (__glProgramUniform4fvEXT!=null) __glProgramUniform4fvEXT(program,location,count,value);else throw new NotImplementedException("glProgramUniform4fvEXT");}
public static void glProgramUniform4iEXT ( uint program,int location,int v0,int v1,int v2,int v3 ){if (__glProgramUniform4iEXT!=null) __glProgramUniform4iEXT(program,location,v0,v1,v2,v3);else throw new NotImplementedException("glProgramUniform4iEXT");}
public static void glProgramUniform4ivEXT ( uint program,int location,int count,int[]  value ){if (__glProgramUniform4ivEXT!=null) __glProgramUniform4ivEXT(program,location,count,value);else throw new NotImplementedException("glProgramUniform4ivEXT");}
public static void glProgramUniform4uiEXT ( uint program,int location,uint v0,uint v1,uint v2,uint v3 ){if (__glProgramUniform4uiEXT!=null) __glProgramUniform4uiEXT(program,location,v0,v1,v2,v3);else throw new NotImplementedException("glProgramUniform4uiEXT");}
public static void glProgramUniform4uivEXT ( uint program,int location,int count,uint[]  value ){if (__glProgramUniform4uivEXT!=null) __glProgramUniform4uivEXT(program,location,count,value);else throw new NotImplementedException("glProgramUniform4uivEXT");}
public static void glProgramUniformMatrix2fvEXT ( uint program,int location,int count,bool transpose,float[]  value ){if (__glProgramUniformMatrix2fvEXT!=null) __glProgramUniformMatrix2fvEXT(program,location,count,transpose,value);else throw new NotImplementedException("glProgramUniformMatrix2fvEXT");}
public static void glProgramUniformMatrix2x3fvEXT ( uint program,int location,int count,bool transpose,float[]  value ){if (__glProgramUniformMatrix2x3fvEXT!=null) __glProgramUniformMatrix2x3fvEXT(program,location,count,transpose,value);else throw new NotImplementedException("glProgramUniformMatrix2x3fvEXT");}
public static void glProgramUniformMatrix2x4fvEXT ( uint program,int location,int count,bool transpose,float[]  value ){if (__glProgramUniformMatrix2x4fvEXT!=null) __glProgramUniformMatrix2x4fvEXT(program,location,count,transpose,value);else throw new NotImplementedException("glProgramUniformMatrix2x4fvEXT");}
public static void glProgramUniformMatrix3fvEXT ( uint program,int location,int count,bool transpose,float[]  value ){if (__glProgramUniformMatrix3fvEXT!=null) __glProgramUniformMatrix3fvEXT(program,location,count,transpose,value);else throw new NotImplementedException("glProgramUniformMatrix3fvEXT");}
public static void glProgramUniformMatrix3x2fvEXT ( uint program,int location,int count,bool transpose,float[]  value ){if (__glProgramUniformMatrix3x2fvEXT!=null) __glProgramUniformMatrix3x2fvEXT(program,location,count,transpose,value);else throw new NotImplementedException("glProgramUniformMatrix3x2fvEXT");}
public static void glProgramUniformMatrix3x4fvEXT ( uint program,int location,int count,bool transpose,float[]  value ){if (__glProgramUniformMatrix3x4fvEXT!=null) __glProgramUniformMatrix3x4fvEXT(program,location,count,transpose,value);else throw new NotImplementedException("glProgramUniformMatrix3x4fvEXT");}
public static void glProgramUniformMatrix4fvEXT ( uint program,int location,int count,bool transpose,float[]  value ){if (__glProgramUniformMatrix4fvEXT!=null) __glProgramUniformMatrix4fvEXT(program,location,count,transpose,value);else throw new NotImplementedException("glProgramUniformMatrix4fvEXT");}
public static void glProgramUniformMatrix4x2fvEXT ( uint program,int location,int count,bool transpose,float[]  value ){if (__glProgramUniformMatrix4x2fvEXT!=null) __glProgramUniformMatrix4x2fvEXT(program,location,count,transpose,value);else throw new NotImplementedException("glProgramUniformMatrix4x2fvEXT");}
public static void glProgramUniformMatrix4x3fvEXT ( uint program,int location,int count,bool transpose,float[]  value ){if (__glProgramUniformMatrix4x3fvEXT!=null) __glProgramUniformMatrix4x3fvEXT(program,location,count,transpose,value);else throw new NotImplementedException("glProgramUniformMatrix4x3fvEXT");}
public static void glPushClientAttribDefaultEXT ( uint mask ){if (__glPushClientAttribDefaultEXT!=null) __glPushClientAttribDefaultEXT(mask);else throw new NotImplementedException("glPushClientAttribDefaultEXT");}
public static void glTextureBufferEXT ( uint texture,uint target,uint internalformat,uint buffer ){if (__glTextureBufferEXT!=null) __glTextureBufferEXT(texture,target,internalformat,buffer);else throw new NotImplementedException("glTextureBufferEXT");}
public static void glTextureImage1DEXT ( uint texture,uint target,int level,int internalformat,int width,int border,uint format,uint type,IntPtr  pixels ){if (__glTextureImage1DEXT!=null) __glTextureImage1DEXT(texture,target,level,internalformat,width,border,format,type,pixels);else throw new NotImplementedException("glTextureImage1DEXT");}
public static void glTextureImage2DEXT ( uint texture,uint target,int level,int internalformat,int width,int height,int border,uint format,uint type,IntPtr  pixels ){if (__glTextureImage2DEXT!=null) __glTextureImage2DEXT(texture,target,level,internalformat,width,height,border,format,type,pixels);else throw new NotImplementedException("glTextureImage2DEXT");}
public static void glTextureImage3DEXT ( uint texture,uint target,int level,int internalformat,int width,int height,int depth,int border,uint format,uint type,IntPtr  pixels ){if (__glTextureImage3DEXT!=null) __glTextureImage3DEXT(texture,target,level,internalformat,width,height,depth,border,format,type,pixels);else throw new NotImplementedException("glTextureImage3DEXT");}
public static void glTextureParameterIivEXT ( uint texture,uint target,uint pname,int[]  _params ){if (__glTextureParameterIivEXT!=null) __glTextureParameterIivEXT(texture,target,pname,_params);else throw new NotImplementedException("glTextureParameterIivEXT");}
public static void glTextureParameterIuivEXT ( uint texture,uint target,uint pname,uint[]  _params ){if (__glTextureParameterIuivEXT!=null) __glTextureParameterIuivEXT(texture,target,pname,_params);else throw new NotImplementedException("glTextureParameterIuivEXT");}
public static void glTextureParameterfEXT ( uint texture,uint target,uint pname,float param ){if (__glTextureParameterfEXT!=null) __glTextureParameterfEXT(texture,target,pname,param);else throw new NotImplementedException("glTextureParameterfEXT");}
public static void glTextureParameterfvEXT ( uint texture,uint target,uint pname,float[]  param ){if (__glTextureParameterfvEXT!=null) __glTextureParameterfvEXT(texture,target,pname,param);else throw new NotImplementedException("glTextureParameterfvEXT");}
public static void glTextureParameteriEXT ( uint texture,uint target,uint pname,int param ){if (__glTextureParameteriEXT!=null) __glTextureParameteriEXT(texture,target,pname,param);else throw new NotImplementedException("glTextureParameteriEXT");}
public static void glTextureParameterivEXT ( uint texture,uint target,uint pname,int[]  param ){if (__glTextureParameterivEXT!=null) __glTextureParameterivEXT(texture,target,pname,param);else throw new NotImplementedException("glTextureParameterivEXT");}
public static void glTextureRenderbufferEXT ( uint texture,uint target,uint renderbuffer ){if (__glTextureRenderbufferEXT!=null) __glTextureRenderbufferEXT(texture,target,renderbuffer);else throw new NotImplementedException("glTextureRenderbufferEXT");}
public static void glTextureSubImage1DEXT ( uint texture,uint target,int level,int xoffset,int width,uint format,uint type,IntPtr  pixels ){if (__glTextureSubImage1DEXT!=null) __glTextureSubImage1DEXT(texture,target,level,xoffset,width,format,type,pixels);else throw new NotImplementedException("glTextureSubImage1DEXT");}
public static void glTextureSubImage2DEXT ( uint texture,uint target,int level,int xoffset,int yoffset,int width,int height,uint format,uint type,IntPtr  pixels ){if (__glTextureSubImage2DEXT!=null) __glTextureSubImage2DEXT(texture,target,level,xoffset,yoffset,width,height,format,type,pixels);else throw new NotImplementedException("glTextureSubImage2DEXT");}
public static void glTextureSubImage3DEXT ( uint texture,uint target,int level,int xoffset,int yoffset,int zoffset,int width,int height,int depth,uint format,uint type,IntPtr  pixels ){if (__glTextureSubImage3DEXT!=null) __glTextureSubImage3DEXT(texture,target,level,xoffset,yoffset,zoffset,width,height,depth,format,type,pixels);else throw new NotImplementedException("glTextureSubImage3DEXT");}
public static bool glUnmapNamedBufferEXT ( uint buffer ){if (__glUnmapNamedBufferEXT!=null) return __glUnmapNamedBufferEXT(buffer);else throw new NotImplementedException("glUnmapNamedBufferEXT");}
public static void glVertexArrayColorOffsetEXT ( uint vaobj,uint buffer,int size,uint type,int stride,IntPtr offset ){if (__glVertexArrayColorOffsetEXT!=null) __glVertexArrayColorOffsetEXT(vaobj,buffer,size,type,stride,offset);else throw new NotImplementedException("glVertexArrayColorOffsetEXT");}
public static void glVertexArrayEdgeFlagOffsetEXT ( uint vaobj,uint buffer,int stride,IntPtr offset ){if (__glVertexArrayEdgeFlagOffsetEXT!=null) __glVertexArrayEdgeFlagOffsetEXT(vaobj,buffer,stride,offset);else throw new NotImplementedException("glVertexArrayEdgeFlagOffsetEXT");}
public static void glVertexArrayFogCoordOffsetEXT ( uint vaobj,uint buffer,uint type,int stride,IntPtr offset ){if (__glVertexArrayFogCoordOffsetEXT!=null) __glVertexArrayFogCoordOffsetEXT(vaobj,buffer,type,stride,offset);else throw new NotImplementedException("glVertexArrayFogCoordOffsetEXT");}
public static void glVertexArrayIndexOffsetEXT ( uint vaobj,uint buffer,uint type,int stride,IntPtr offset ){if (__glVertexArrayIndexOffsetEXT!=null) __glVertexArrayIndexOffsetEXT(vaobj,buffer,type,stride,offset);else throw new NotImplementedException("glVertexArrayIndexOffsetEXT");}
public static void glVertexArrayMultiTexCoordOffsetEXT ( uint vaobj,uint buffer,uint texunit,int size,uint type,int stride,IntPtr offset ){if (__glVertexArrayMultiTexCoordOffsetEXT!=null) __glVertexArrayMultiTexCoordOffsetEXT(vaobj,buffer,texunit,size,type,stride,offset);else throw new NotImplementedException("glVertexArrayMultiTexCoordOffsetEXT");}
public static void glVertexArrayNormalOffsetEXT ( uint vaobj,uint buffer,uint type,int stride,IntPtr offset ){if (__glVertexArrayNormalOffsetEXT!=null) __glVertexArrayNormalOffsetEXT(vaobj,buffer,type,stride,offset);else throw new NotImplementedException("glVertexArrayNormalOffsetEXT");}
public static void glVertexArraySecondaryColorOffsetEXT ( uint vaobj,uint buffer,int size,uint type,int stride,IntPtr offset ){if (__glVertexArraySecondaryColorOffsetEXT!=null) __glVertexArraySecondaryColorOffsetEXT(vaobj,buffer,size,type,stride,offset);else throw new NotImplementedException("glVertexArraySecondaryColorOffsetEXT");}
public static void glVertexArrayTexCoordOffsetEXT ( uint vaobj,uint buffer,int size,uint type,int stride,IntPtr offset ){if (__glVertexArrayTexCoordOffsetEXT!=null) __glVertexArrayTexCoordOffsetEXT(vaobj,buffer,size,type,stride,offset);else throw new NotImplementedException("glVertexArrayTexCoordOffsetEXT");}
public static void glVertexArrayVertexAttribIOffsetEXT ( uint vaobj,uint buffer,uint index,int size,uint type,int stride,IntPtr offset ){if (__glVertexArrayVertexAttribIOffsetEXT!=null) __glVertexArrayVertexAttribIOffsetEXT(vaobj,buffer,index,size,type,stride,offset);else throw new NotImplementedException("glVertexArrayVertexAttribIOffsetEXT");}
public static void glVertexArrayVertexAttribOffsetEXT ( uint vaobj,uint buffer,uint index,int size,uint type,bool normalized,int stride,IntPtr offset ){if (__glVertexArrayVertexAttribOffsetEXT!=null) __glVertexArrayVertexAttribOffsetEXT(vaobj,buffer,index,size,type,normalized,stride,offset);else throw new NotImplementedException("glVertexArrayVertexAttribOffsetEXT");}
public static void glVertexArrayVertexOffsetEXT ( uint vaobj,uint buffer,int size,uint type,int stride,IntPtr offset ){if (__glVertexArrayVertexOffsetEXT!=null) __glVertexArrayVertexOffsetEXT(vaobj,buffer,size,type,stride,offset);else throw new NotImplementedException("glVertexArrayVertexOffsetEXT");}
public static void glColorMaskIndexedEXT ( uint buf,bool r,bool g,bool b,bool a ){if (__glColorMaskIndexedEXT!=null) __glColorMaskIndexedEXT(buf,r,g,b,a);else throw new NotImplementedException("glColorMaskIndexedEXT");}
public static void glDisableIndexedEXT ( uint target,uint index ){if (__glDisableIndexedEXT!=null) __glDisableIndexedEXT(target,index);else throw new NotImplementedException("glDisableIndexedEXT");}
public static void glEnableIndexedEXT ( uint target,uint index ){if (__glEnableIndexedEXT!=null) __glEnableIndexedEXT(target,index);else throw new NotImplementedException("glEnableIndexedEXT");}
public static void glGetBooleanIndexedvEXT ( uint value,uint index,IntPtr data ){if (__glGetBooleanIndexedvEXT!=null) __glGetBooleanIndexedvEXT(value,index,data);else throw new NotImplementedException("glGetBooleanIndexedvEXT");}
public static void glGetIntegerIndexedvEXT ( uint value,uint index,IntPtr data ){if (__glGetIntegerIndexedvEXT!=null) __glGetIntegerIndexedvEXT(value,index,data);else throw new NotImplementedException("glGetIntegerIndexedvEXT");}
public static bool glIsEnabledIndexedEXT ( uint target,uint index ){if (__glIsEnabledIndexedEXT!=null) return __glIsEnabledIndexedEXT(target,index);else throw new NotImplementedException("glIsEnabledIndexedEXT");}
public static void glDrawArraysInstancedEXT ( uint mode,int start,int count,int primcount ){if (__glDrawArraysInstancedEXT!=null) __glDrawArraysInstancedEXT(mode,start,count,primcount);else throw new NotImplementedException("glDrawArraysInstancedEXT");}
public static void glDrawElementsInstancedEXT ( uint mode,int count,uint type,IntPtr indices,int primcount ){if (__glDrawElementsInstancedEXT!=null) __glDrawElementsInstancedEXT(mode,count,type,indices,primcount);else throw new NotImplementedException("glDrawElementsInstancedEXT");}
public static void glDrawRangeElementsEXT ( uint mode,uint start,uint end,int count,uint type,IntPtr indices ){if (__glDrawRangeElementsEXT!=null) __glDrawRangeElementsEXT(mode,start,end,count,type,indices);else throw new NotImplementedException("glDrawRangeElementsEXT");}
public static void glFogCoordPointerEXT ( uint type,int stride,IntPtr pointer ){if (__glFogCoordPointerEXT!=null) __glFogCoordPointerEXT(type,stride,pointer);else throw new NotImplementedException("glFogCoordPointerEXT");}
public static void glFogCoorddEXT ( double coord ){if (__glFogCoorddEXT!=null) __glFogCoorddEXT(coord);else throw new NotImplementedException("glFogCoorddEXT");}
public static void glFogCoorddvEXT ( double[] coord ){if (__glFogCoorddvEXT!=null) __glFogCoorddvEXT(coord);else throw new NotImplementedException("glFogCoorddvEXT");}
public static void glFogCoordfEXT ( float coord ){if (__glFogCoordfEXT!=null) __glFogCoordfEXT(coord);else throw new NotImplementedException("glFogCoordfEXT");}
public static void glFogCoordfvEXT ( float[] coord ){if (__glFogCoordfvEXT!=null) __glFogCoordfvEXT(coord);else throw new NotImplementedException("glFogCoordfvEXT");}
public static void glFragmentColorMaterialEXT ( uint face,uint mode ){if (__glFragmentColorMaterialEXT!=null) __glFragmentColorMaterialEXT(face,mode);else throw new NotImplementedException("glFragmentColorMaterialEXT");}
public static void glFragmentLightModelfEXT ( uint pname,float param ){if (__glFragmentLightModelfEXT!=null) __glFragmentLightModelfEXT(pname,param);else throw new NotImplementedException("glFragmentLightModelfEXT");}
public static void glFragmentLightModelfvEXT ( uint pname,IntPtr _params ){if (__glFragmentLightModelfvEXT!=null) __glFragmentLightModelfvEXT(pname,_params);else throw new NotImplementedException("glFragmentLightModelfvEXT");}
public static void glFragmentLightModeliEXT ( uint pname,int param ){if (__glFragmentLightModeliEXT!=null) __glFragmentLightModeliEXT(pname,param);else throw new NotImplementedException("glFragmentLightModeliEXT");}
public static void glFragmentLightModelivEXT ( uint pname,IntPtr _params ){if (__glFragmentLightModelivEXT!=null) __glFragmentLightModelivEXT(pname,_params);else throw new NotImplementedException("glFragmentLightModelivEXT");}
public static void glFragmentLightfEXT ( uint light,uint pname,float param ){if (__glFragmentLightfEXT!=null) __glFragmentLightfEXT(light,pname,param);else throw new NotImplementedException("glFragmentLightfEXT");}
public static void glFragmentLightfvEXT ( uint light,uint pname,IntPtr _params ){if (__glFragmentLightfvEXT!=null) __glFragmentLightfvEXT(light,pname,_params);else throw new NotImplementedException("glFragmentLightfvEXT");}
public static void glFragmentLightiEXT ( uint light,uint pname,int param ){if (__glFragmentLightiEXT!=null) __glFragmentLightiEXT(light,pname,param);else throw new NotImplementedException("glFragmentLightiEXT");}
public static void glFragmentLightivEXT ( uint light,uint pname,IntPtr _params ){if (__glFragmentLightivEXT!=null) __glFragmentLightivEXT(light,pname,_params);else throw new NotImplementedException("glFragmentLightivEXT");}
public static void glFragmentMaterialfEXT ( uint face,uint pname,float[] param ){if (__glFragmentMaterialfEXT!=null) __glFragmentMaterialfEXT(face,pname,param);else throw new NotImplementedException("glFragmentMaterialfEXT");}
public static void glFragmentMaterialfvEXT ( uint face,uint pname,float[]  _params ){if (__glFragmentMaterialfvEXT!=null) __glFragmentMaterialfvEXT(face,pname,_params);else throw new NotImplementedException("glFragmentMaterialfvEXT");}
public static void glFragmentMaterialiEXT ( uint face,uint pname,int[] param ){if (__glFragmentMaterialiEXT!=null) __glFragmentMaterialiEXT(face,pname,param);else throw new NotImplementedException("glFragmentMaterialiEXT");}
public static void glFragmentMaterialivEXT ( uint face,uint pname,int[]  _params ){if (__glFragmentMaterialivEXT!=null) __glFragmentMaterialivEXT(face,pname,_params);else throw new NotImplementedException("glFragmentMaterialivEXT");}
public static void glGetFragmentLightfvEXT ( uint light,uint pname,IntPtr _params ){if (__glGetFragmentLightfvEXT!=null) __glGetFragmentLightfvEXT(light,pname,_params);else throw new NotImplementedException("glGetFragmentLightfvEXT");}
public static void glGetFragmentLightivEXT ( uint light,uint pname,IntPtr _params ){if (__glGetFragmentLightivEXT!=null) __glGetFragmentLightivEXT(light,pname,_params);else throw new NotImplementedException("glGetFragmentLightivEXT");}
public static void glGetFragmentMaterialfvEXT ( uint face,uint pname,float[]  _params ){if (__glGetFragmentMaterialfvEXT!=null) __glGetFragmentMaterialfvEXT(face,pname,_params);else throw new NotImplementedException("glGetFragmentMaterialfvEXT");}
public static void glGetFragmentMaterialivEXT ( uint face,uint pname,int[]  _params ){if (__glGetFragmentMaterialivEXT!=null) __glGetFragmentMaterialivEXT(face,pname,_params);else throw new NotImplementedException("glGetFragmentMaterialivEXT");}
public static void glLightEnviEXT ( uint pname,int param ){if (__glLightEnviEXT!=null) __glLightEnviEXT(pname,param);else throw new NotImplementedException("glLightEnviEXT");}
public static void glBlitFramebufferEXT ( int srcX0,int srcY0,int srcX1,int srcY1,int dstX0,int dstY0,int dstX1,int dstY1,uint mask,uint filter ){if (__glBlitFramebufferEXT!=null) __glBlitFramebufferEXT(srcX0,srcY0,srcX1,srcY1,dstX0,dstY0,dstX1,dstY1,mask,filter);else throw new NotImplementedException("glBlitFramebufferEXT");}
public static void glRenderbufferStorageMultisampleEXT ( uint target,int samples,uint internalformat,int width,int height ){if (__glRenderbufferStorageMultisampleEXT!=null) __glRenderbufferStorageMultisampleEXT(target,samples,internalformat,width,height);else throw new NotImplementedException("glRenderbufferStorageMultisampleEXT");}
public static void glBindFramebufferEXT ( uint target,uint framebuffer ){if (__glBindFramebufferEXT!=null) __glBindFramebufferEXT(target,framebuffer);else throw new NotImplementedException("glBindFramebufferEXT");}
public static void glBindRenderbufferEXT ( uint target,uint renderbuffer ){if (__glBindRenderbufferEXT!=null) __glBindRenderbufferEXT(target,renderbuffer);else throw new NotImplementedException("glBindRenderbufferEXT");}
public static uint glCheckFramebufferStatusEXT ( uint target ){if (__glCheckFramebufferStatusEXT!=null) return __glCheckFramebufferStatusEXT(target);else throw new NotImplementedException("glCheckFramebufferStatusEXT");}
public static void glDeleteFramebuffersEXT ( int n,uint[]  framebuffers ){if (__glDeleteFramebuffersEXT!=null) __glDeleteFramebuffersEXT(n,framebuffers);else throw new NotImplementedException("glDeleteFramebuffersEXT");}
public static void glDeleteRenderbuffersEXT ( int n,uint[]  renderbuffers ){if (__glDeleteRenderbuffersEXT!=null) __glDeleteRenderbuffersEXT(n,renderbuffers);else throw new NotImplementedException("glDeleteRenderbuffersEXT");}
public static void glFramebufferRenderbufferEXT ( uint target,uint attachment,uint renderbuffertarget,uint renderbuffer ){if (__glFramebufferRenderbufferEXT!=null) __glFramebufferRenderbufferEXT(target,attachment,renderbuffertarget,renderbuffer);else throw new NotImplementedException("glFramebufferRenderbufferEXT");}
public static void glFramebufferTexture1DEXT ( uint target,uint attachment,uint textarget,uint texture,int level ){if (__glFramebufferTexture1DEXT!=null) __glFramebufferTexture1DEXT(target,attachment,textarget,texture,level);else throw new NotImplementedException("glFramebufferTexture1DEXT");}
public static void glFramebufferTexture2DEXT ( uint target,uint attachment,uint textarget,uint texture,int level ){if (__glFramebufferTexture2DEXT!=null) __glFramebufferTexture2DEXT(target,attachment,textarget,texture,level);else throw new NotImplementedException("glFramebufferTexture2DEXT");}
public static void glFramebufferTexture3DEXT ( uint target,uint attachment,uint textarget,uint texture,int level,int zoffset ){if (__glFramebufferTexture3DEXT!=null) __glFramebufferTexture3DEXT(target,attachment,textarget,texture,level,zoffset);else throw new NotImplementedException("glFramebufferTexture3DEXT");}
public static void glGenFramebuffersEXT ( int n,IntPtr framebuffers ){if (__glGenFramebuffersEXT!=null) __glGenFramebuffersEXT(n,framebuffers);else throw new NotImplementedException("glGenFramebuffersEXT");}
public static void glGenRenderbuffersEXT ( int n,IntPtr renderbuffers ){if (__glGenRenderbuffersEXT!=null) __glGenRenderbuffersEXT(n,renderbuffers);else throw new NotImplementedException("glGenRenderbuffersEXT");}
public static void glGenerateMipmapEXT ( uint target ){if (__glGenerateMipmapEXT!=null) __glGenerateMipmapEXT(target);else throw new NotImplementedException("glGenerateMipmapEXT");}
public static void glGetFramebufferAttachmentParameterivEXT ( uint target,uint attachment,uint pname,IntPtr _params ){if (__glGetFramebufferAttachmentParameterivEXT!=null) __glGetFramebufferAttachmentParameterivEXT(target,attachment,pname,_params);else throw new NotImplementedException("glGetFramebufferAttachmentParameterivEXT");}
public static void glGetRenderbufferParameterivEXT ( uint target,uint pname,IntPtr _params ){if (__glGetRenderbufferParameterivEXT!=null) __glGetRenderbufferParameterivEXT(target,pname,_params);else throw new NotImplementedException("glGetRenderbufferParameterivEXT");}
public static bool glIsFramebufferEXT ( uint framebuffer ){if (__glIsFramebufferEXT!=null) return __glIsFramebufferEXT(framebuffer);else throw new NotImplementedException("glIsFramebufferEXT");}
public static bool glIsRenderbufferEXT ( uint renderbuffer ){if (__glIsRenderbufferEXT!=null) return __glIsRenderbufferEXT(renderbuffer);else throw new NotImplementedException("glIsRenderbufferEXT");}
public static void glRenderbufferStorageEXT ( uint target,uint internalformat,int width,int height ){if (__glRenderbufferStorageEXT!=null) __glRenderbufferStorageEXT(target,internalformat,width,height);else throw new NotImplementedException("glRenderbufferStorageEXT");}
public static void glFramebufferTextureEXT ( uint target,uint attachment,uint texture,int level ){if (__glFramebufferTextureEXT!=null) __glFramebufferTextureEXT(target,attachment,texture,level);else throw new NotImplementedException("glFramebufferTextureEXT");}
public static void glFramebufferTextureFaceEXT ( uint target,uint attachment,uint texture,int level,uint face ){if (__glFramebufferTextureFaceEXT!=null) __glFramebufferTextureFaceEXT(target,attachment,texture,level,face);else throw new NotImplementedException("glFramebufferTextureFaceEXT");}
public static void glProgramParameteriEXT ( uint program,uint pname,int value ){if (__glProgramParameteriEXT!=null) __glProgramParameteriEXT(program,pname,value);else throw new NotImplementedException("glProgramParameteriEXT");}
public static void glProgramEnvParameters4fvEXT ( uint target,uint index,int count,float[]  _params ){if (__glProgramEnvParameters4fvEXT!=null) __glProgramEnvParameters4fvEXT(target,index,count,_params);else throw new NotImplementedException("glProgramEnvParameters4fvEXT");}
public static void glProgramLocalParameters4fvEXT ( uint target,uint index,int count,float[]  _params ){if (__glProgramLocalParameters4fvEXT!=null) __glProgramLocalParameters4fvEXT(target,index,count,_params);else throw new NotImplementedException("glProgramLocalParameters4fvEXT");}
public static void glBindFragDataLocationEXT ( uint program,uint color,string name ){if (__glBindFragDataLocationEXT!=null) __glBindFragDataLocationEXT(program,color,name);else throw new NotImplementedException("glBindFragDataLocationEXT");}
public static int glGetFragDataLocationEXT ( uint program,string name ){if (__glGetFragDataLocationEXT!=null) return __glGetFragDataLocationEXT(program,name);else throw new NotImplementedException("glGetFragDataLocationEXT");}
public static void glGetUniformuivEXT ( uint program,int location,IntPtr _params ){if (__glGetUniformuivEXT!=null) __glGetUniformuivEXT(program,location,_params);else throw new NotImplementedException("glGetUniformuivEXT");}
public static void glGetVertexAttribIivEXT ( uint index,uint pname,IntPtr _params ){if (__glGetVertexAttribIivEXT!=null) __glGetVertexAttribIivEXT(index,pname,_params);else throw new NotImplementedException("glGetVertexAttribIivEXT");}
public static void glGetVertexAttribIuivEXT ( uint index,uint pname,IntPtr _params ){if (__glGetVertexAttribIuivEXT!=null) __glGetVertexAttribIuivEXT(index,pname,_params);else throw new NotImplementedException("glGetVertexAttribIuivEXT");}
public static void glUniform1uiEXT ( int location,uint v0 ){if (__glUniform1uiEXT!=null) __glUniform1uiEXT(location,v0);else throw new NotImplementedException("glUniform1uiEXT");}
public static void glUniform1uivEXT ( int location,int count,uint[] value ){if (__glUniform1uivEXT!=null) __glUniform1uivEXT(location,count,value);else throw new NotImplementedException("glUniform1uivEXT");}
public static void glUniform2uiEXT ( int location,uint v0,uint v1 ){if (__glUniform2uiEXT!=null) __glUniform2uiEXT(location,v0,v1);else throw new NotImplementedException("glUniform2uiEXT");}
public static void glUniform2uivEXT ( int location,int count,uint[] value ){if (__glUniform2uivEXT!=null) __glUniform2uivEXT(location,count,value);else throw new NotImplementedException("glUniform2uivEXT");}
public static void glUniform3uiEXT ( int location,uint v0,uint v1,uint v2 ){if (__glUniform3uiEXT!=null) __glUniform3uiEXT(location,v0,v1,v2);else throw new NotImplementedException("glUniform3uiEXT");}
public static void glUniform3uivEXT ( int location,int count,uint[] value ){if (__glUniform3uivEXT!=null) __glUniform3uivEXT(location,count,value);else throw new NotImplementedException("glUniform3uivEXT");}
public static void glUniform4uiEXT ( int location,uint v0,uint v1,uint v2,uint v3 ){if (__glUniform4uiEXT!=null) __glUniform4uiEXT(location,v0,v1,v2,v3);else throw new NotImplementedException("glUniform4uiEXT");}
public static void glUniform4uivEXT ( int location,int count,uint[] value ){if (__glUniform4uivEXT!=null) __glUniform4uivEXT(location,count,value);else throw new NotImplementedException("glUniform4uivEXT");}
public static void glVertexAttribI1iEXT ( uint index,int x ){if (__glVertexAttribI1iEXT!=null) __glVertexAttribI1iEXT(index,x);else throw new NotImplementedException("glVertexAttribI1iEXT");}
public static void glVertexAttribI1ivEXT ( uint index,int[] v ){if (__glVertexAttribI1ivEXT!=null) __glVertexAttribI1ivEXT(index,v);else throw new NotImplementedException("glVertexAttribI1ivEXT");}
public static void glVertexAttribI1uiEXT ( uint index,uint x ){if (__glVertexAttribI1uiEXT!=null) __glVertexAttribI1uiEXT(index,x);else throw new NotImplementedException("glVertexAttribI1uiEXT");}
public static void glVertexAttribI1uivEXT ( uint index,uint[] v ){if (__glVertexAttribI1uivEXT!=null) __glVertexAttribI1uivEXT(index,v);else throw new NotImplementedException("glVertexAttribI1uivEXT");}
public static void glVertexAttribI2iEXT ( uint index,int x,int y ){if (__glVertexAttribI2iEXT!=null) __glVertexAttribI2iEXT(index,x,y);else throw new NotImplementedException("glVertexAttribI2iEXT");}
public static void glVertexAttribI2ivEXT ( uint index,int[] v ){if (__glVertexAttribI2ivEXT!=null) __glVertexAttribI2ivEXT(index,v);else throw new NotImplementedException("glVertexAttribI2ivEXT");}
public static void glVertexAttribI2uiEXT ( uint index,uint x,uint y ){if (__glVertexAttribI2uiEXT!=null) __glVertexAttribI2uiEXT(index,x,y);else throw new NotImplementedException("glVertexAttribI2uiEXT");}
public static void glVertexAttribI2uivEXT ( uint index,uint[] v ){if (__glVertexAttribI2uivEXT!=null) __glVertexAttribI2uivEXT(index,v);else throw new NotImplementedException("glVertexAttribI2uivEXT");}
public static void glVertexAttribI3iEXT ( uint index,int x,int y,int z ){if (__glVertexAttribI3iEXT!=null) __glVertexAttribI3iEXT(index,x,y,z);else throw new NotImplementedException("glVertexAttribI3iEXT");}
public static void glVertexAttribI3ivEXT ( uint index,int[] v ){if (__glVertexAttribI3ivEXT!=null) __glVertexAttribI3ivEXT(index,v);else throw new NotImplementedException("glVertexAttribI3ivEXT");}
public static void glVertexAttribI3uiEXT ( uint index,uint x,uint y,uint z ){if (__glVertexAttribI3uiEXT!=null) __glVertexAttribI3uiEXT(index,x,y,z);else throw new NotImplementedException("glVertexAttribI3uiEXT");}
public static void glVertexAttribI3uivEXT ( uint index,uint[] v ){if (__glVertexAttribI3uivEXT!=null) __glVertexAttribI3uivEXT(index,v);else throw new NotImplementedException("glVertexAttribI3uivEXT");}
public static void glVertexAttribI4bvEXT ( uint index,byte[] v ){if (__glVertexAttribI4bvEXT!=null) __glVertexAttribI4bvEXT(index,v);else throw new NotImplementedException("glVertexAttribI4bvEXT");}
public static void glVertexAttribI4iEXT ( uint index,int x,int y,int z,int w ){if (__glVertexAttribI4iEXT!=null) __glVertexAttribI4iEXT(index,x,y,z,w);else throw new NotImplementedException("glVertexAttribI4iEXT");}
public static void glVertexAttribI4ivEXT ( uint index,int[] v ){if (__glVertexAttribI4ivEXT!=null) __glVertexAttribI4ivEXT(index,v);else throw new NotImplementedException("glVertexAttribI4ivEXT");}
public static void glVertexAttribI4svEXT ( uint index,short[] v ){if (__glVertexAttribI4svEXT!=null) __glVertexAttribI4svEXT(index,v);else throw new NotImplementedException("glVertexAttribI4svEXT");}
public static void glVertexAttribI4ubvEXT ( uint index,byte[] v ){if (__glVertexAttribI4ubvEXT!=null) __glVertexAttribI4ubvEXT(index,v);else throw new NotImplementedException("glVertexAttribI4ubvEXT");}
public static void glVertexAttribI4uiEXT ( uint index,uint x,uint y,uint z,uint w ){if (__glVertexAttribI4uiEXT!=null) __glVertexAttribI4uiEXT(index,x,y,z,w);else throw new NotImplementedException("glVertexAttribI4uiEXT");}
public static void glVertexAttribI4uivEXT ( uint index,uint[] v ){if (__glVertexAttribI4uivEXT!=null) __glVertexAttribI4uivEXT(index,v);else throw new NotImplementedException("glVertexAttribI4uivEXT");}
public static void glVertexAttribI4usvEXT ( uint index,ushort[] v ){if (__glVertexAttribI4usvEXT!=null) __glVertexAttribI4usvEXT(index,v);else throw new NotImplementedException("glVertexAttribI4usvEXT");}
public static void glVertexAttribIPointerEXT ( uint index,int size,uint type,int stride,IntPtr pointer ){if (__glVertexAttribIPointerEXT!=null) __glVertexAttribIPointerEXT(index,size,type,stride,pointer);else throw new NotImplementedException("glVertexAttribIPointerEXT");}
public static void glGetHistogramEXT ( uint target,bool reset,uint format,uint type,IntPtr values ){if (__glGetHistogramEXT!=null) __glGetHistogramEXT(target,reset,format,type,values);else throw new NotImplementedException("glGetHistogramEXT");}
public static void glGetHistogramParameterfvEXT ( uint target,uint pname,IntPtr _params ){if (__glGetHistogramParameterfvEXT!=null) __glGetHistogramParameterfvEXT(target,pname,_params);else throw new NotImplementedException("glGetHistogramParameterfvEXT");}
public static void glGetHistogramParameterivEXT ( uint target,uint pname,IntPtr _params ){if (__glGetHistogramParameterivEXT!=null) __glGetHistogramParameterivEXT(target,pname,_params);else throw new NotImplementedException("glGetHistogramParameterivEXT");}
public static void glGetMinmaxEXT ( uint target,bool reset,uint format,uint type,IntPtr values ){if (__glGetMinmaxEXT!=null) __glGetMinmaxEXT(target,reset,format,type,values);else throw new NotImplementedException("glGetMinmaxEXT");}
public static void glGetMinmaxParameterfvEXT ( uint target,uint pname,IntPtr _params ){if (__glGetMinmaxParameterfvEXT!=null) __glGetMinmaxParameterfvEXT(target,pname,_params);else throw new NotImplementedException("glGetMinmaxParameterfvEXT");}
public static void glGetMinmaxParameterivEXT ( uint target,uint pname,IntPtr _params ){if (__glGetMinmaxParameterivEXT!=null) __glGetMinmaxParameterivEXT(target,pname,_params);else throw new NotImplementedException("glGetMinmaxParameterivEXT");}
public static void glHistogramEXT ( uint target,int width,uint internalformat,bool sink ){if (__glHistogramEXT!=null) __glHistogramEXT(target,width,internalformat,sink);else throw new NotImplementedException("glHistogramEXT");}
public static void glMinmaxEXT ( uint target,uint internalformat,bool sink ){if (__glMinmaxEXT!=null) __glMinmaxEXT(target,internalformat,sink);else throw new NotImplementedException("glMinmaxEXT");}
public static void glResetHistogramEXT ( uint target ){if (__glResetHistogramEXT!=null) __glResetHistogramEXT(target);else throw new NotImplementedException("glResetHistogramEXT");}
public static void glResetMinmaxEXT ( uint target ){if (__glResetMinmaxEXT!=null) __glResetMinmaxEXT(target);else throw new NotImplementedException("glResetMinmaxEXT");}
public static void glIndexFuncEXT ( uint func,float _ref ){if (__glIndexFuncEXT!=null) __glIndexFuncEXT(func,_ref);else throw new NotImplementedException("glIndexFuncEXT");}
public static void glIndexMaterialEXT ( uint face,uint mode ){if (__glIndexMaterialEXT!=null) __glIndexMaterialEXT(face,mode);else throw new NotImplementedException("glIndexMaterialEXT");}
public static void glApplyTextureEXT ( uint mode ){if (__glApplyTextureEXT!=null) __glApplyTextureEXT(mode);else throw new NotImplementedException("glApplyTextureEXT");}
public static void glTextureLightEXT ( uint pname ){if (__glTextureLightEXT!=null) __glTextureLightEXT(pname);else throw new NotImplementedException("glTextureLightEXT");}
public static void glTextureMaterialEXT ( uint face,uint mode ){if (__glTextureMaterialEXT!=null) __glTextureMaterialEXT(face,mode);else throw new NotImplementedException("glTextureMaterialEXT");}
public static void glMultiDrawArraysEXT ( uint mode,int[]  first,int[] count,int primcount ){if (__glMultiDrawArraysEXT!=null) __glMultiDrawArraysEXT(mode,first,count,primcount);else throw new NotImplementedException("glMultiDrawArraysEXT");}
public static void glMultiDrawElementsEXT ( uint mode,IntPtr count,uint type,IntPtr indices,int primcount ){if (__glMultiDrawElementsEXT!=null) __glMultiDrawElementsEXT(mode,count,type,indices,primcount);else throw new NotImplementedException("glMultiDrawElementsEXT");}
public static void glSampleMaskEXT ( float value,bool invert ){if (__glSampleMaskEXT!=null) __glSampleMaskEXT(value,invert);else throw new NotImplementedException("glSampleMaskEXT");}
public static void glSamplePatternEXT ( uint pattern ){if (__glSamplePatternEXT!=null) __glSamplePatternEXT(pattern);else throw new NotImplementedException("glSamplePatternEXT");}
public static void glColorTableEXT ( uint target,uint internalFormat,int width,uint format,uint type,IntPtr  data ){if (__glColorTableEXT!=null) __glColorTableEXT(target,internalFormat,width,format,type,data);else throw new NotImplementedException("glColorTableEXT");}
public static void glGetColorTableEXT ( uint target,uint format,uint type,IntPtr data ){if (__glGetColorTableEXT!=null) __glGetColorTableEXT(target,format,type,data);else throw new NotImplementedException("glGetColorTableEXT");}
public static void glGetColorTableParameterfvEXT ( uint target,uint pname,IntPtr _params ){if (__glGetColorTableParameterfvEXT!=null) __glGetColorTableParameterfvEXT(target,pname,_params);else throw new NotImplementedException("glGetColorTableParameterfvEXT");}
public static void glGetColorTableParameterivEXT ( uint target,uint pname,IntPtr _params ){if (__glGetColorTableParameterivEXT!=null) __glGetColorTableParameterivEXT(target,pname,_params);else throw new NotImplementedException("glGetColorTableParameterivEXT");}
public static void glGetPixelTransformParameterfvEXT ( uint target,uint pname,float[]  _params ){if (__glGetPixelTransformParameterfvEXT!=null) __glGetPixelTransformParameterfvEXT(target,pname,_params);else throw new NotImplementedException("glGetPixelTransformParameterfvEXT");}
public static void glGetPixelTransformParameterivEXT ( uint target,uint pname,int[]  _params ){if (__glGetPixelTransformParameterivEXT!=null) __glGetPixelTransformParameterivEXT(target,pname,_params);else throw new NotImplementedException("glGetPixelTransformParameterivEXT");}
public static void glPixelTransformParameterfEXT ( uint target,uint pname,float[] param ){if (__glPixelTransformParameterfEXT!=null) __glPixelTransformParameterfEXT(target,pname,param);else throw new NotImplementedException("glPixelTransformParameterfEXT");}
public static void glPixelTransformParameterfvEXT ( uint target,uint pname,float[]  _params ){if (__glPixelTransformParameterfvEXT!=null) __glPixelTransformParameterfvEXT(target,pname,_params);else throw new NotImplementedException("glPixelTransformParameterfvEXT");}
public static void glPixelTransformParameteriEXT ( uint target,uint pname,int[] param ){if (__glPixelTransformParameteriEXT!=null) __glPixelTransformParameteriEXT(target,pname,param);else throw new NotImplementedException("glPixelTransformParameteriEXT");}
public static void glPixelTransformParameterivEXT ( uint target,uint pname,int[]  _params ){if (__glPixelTransformParameterivEXT!=null) __glPixelTransformParameterivEXT(target,pname,_params);else throw new NotImplementedException("glPixelTransformParameterivEXT");}
public static void glPointParameterfEXT ( uint pname,float param ){if (__glPointParameterfEXT!=null) __glPointParameterfEXT(pname,param);else throw new NotImplementedException("glPointParameterfEXT");}
public static void glPointParameterfvEXT ( uint pname,float[]  _params ){if (__glPointParameterfvEXT!=null) __glPointParameterfvEXT(pname,_params);else throw new NotImplementedException("glPointParameterfvEXT");}
public static void glPolygonOffsetEXT ( float factor,float bias ){if (__glPolygonOffsetEXT!=null) __glPolygonOffsetEXT(factor,bias);else throw new NotImplementedException("glPolygonOffsetEXT");}
public static void glProvokingVertexEXT ( uint mode ){if (__glProvokingVertexEXT!=null) __glProvokingVertexEXT(mode);else throw new NotImplementedException("glProvokingVertexEXT");}
public static void glBeginSceneEXT (  ){if (__glBeginSceneEXT!=null) __glBeginSceneEXT();else throw new NotImplementedException("glBeginSceneEXT");}
public static void glEndSceneEXT (  ){if (__glEndSceneEXT!=null) __glEndSceneEXT();else throw new NotImplementedException("glEndSceneEXT");}
public static void glSecondaryColor3bEXT ( sbyte red,sbyte green,sbyte blue ){if (__glSecondaryColor3bEXT!=null) __glSecondaryColor3bEXT(red,green,blue);else throw new NotImplementedException("glSecondaryColor3bEXT");}
public static void glSecondaryColor3bvEXT ( byte[] v ){if (__glSecondaryColor3bvEXT!=null) __glSecondaryColor3bvEXT(v);else throw new NotImplementedException("glSecondaryColor3bvEXT");}
public static void glSecondaryColor3dEXT ( double red,double green,double blue ){if (__glSecondaryColor3dEXT!=null) __glSecondaryColor3dEXT(red,green,blue);else throw new NotImplementedException("glSecondaryColor3dEXT");}
public static void glSecondaryColor3dvEXT ( double[] v ){if (__glSecondaryColor3dvEXT!=null) __glSecondaryColor3dvEXT(v);else throw new NotImplementedException("glSecondaryColor3dvEXT");}
public static void glSecondaryColor3fEXT ( float red,float green,float blue ){if (__glSecondaryColor3fEXT!=null) __glSecondaryColor3fEXT(red,green,blue);else throw new NotImplementedException("glSecondaryColor3fEXT");}
public static void glSecondaryColor3fvEXT ( float[] v ){if (__glSecondaryColor3fvEXT!=null) __glSecondaryColor3fvEXT(v);else throw new NotImplementedException("glSecondaryColor3fvEXT");}
public static void glSecondaryColor3iEXT ( int red,int green,int blue ){if (__glSecondaryColor3iEXT!=null) __glSecondaryColor3iEXT(red,green,blue);else throw new NotImplementedException("glSecondaryColor3iEXT");}
public static void glSecondaryColor3ivEXT ( int[] v ){if (__glSecondaryColor3ivEXT!=null) __glSecondaryColor3ivEXT(v);else throw new NotImplementedException("glSecondaryColor3ivEXT");}
public static void glSecondaryColor3sEXT ( short red,short green,short blue ){if (__glSecondaryColor3sEXT!=null) __glSecondaryColor3sEXT(red,green,blue);else throw new NotImplementedException("glSecondaryColor3sEXT");}
public static void glSecondaryColor3svEXT ( short[] v ){if (__glSecondaryColor3svEXT!=null) __glSecondaryColor3svEXT(v);else throw new NotImplementedException("glSecondaryColor3svEXT");}
public static void glSecondaryColor3ubEXT ( byte red,byte green,byte blue ){if (__glSecondaryColor3ubEXT!=null) __glSecondaryColor3ubEXT(red,green,blue);else throw new NotImplementedException("glSecondaryColor3ubEXT");}
public static void glSecondaryColor3ubvEXT ( byte[] v ){if (__glSecondaryColor3ubvEXT!=null) __glSecondaryColor3ubvEXT(v);else throw new NotImplementedException("glSecondaryColor3ubvEXT");}
public static void glSecondaryColor3uiEXT ( uint red,uint green,uint blue ){if (__glSecondaryColor3uiEXT!=null) __glSecondaryColor3uiEXT(red,green,blue);else throw new NotImplementedException("glSecondaryColor3uiEXT");}
public static void glSecondaryColor3uivEXT ( uint[] v ){if (__glSecondaryColor3uivEXT!=null) __glSecondaryColor3uivEXT(v);else throw new NotImplementedException("glSecondaryColor3uivEXT");}
public static void glSecondaryColor3usEXT ( ushort red,ushort green,ushort blue ){if (__glSecondaryColor3usEXT!=null) __glSecondaryColor3usEXT(red,green,blue);else throw new NotImplementedException("glSecondaryColor3usEXT");}
public static void glSecondaryColor3usvEXT ( ushort[] v ){if (__glSecondaryColor3usvEXT!=null) __glSecondaryColor3usvEXT(v);else throw new NotImplementedException("glSecondaryColor3usvEXT");}
public static void glSecondaryColorPointerEXT ( int size,uint type,int stride,IntPtr pointer ){if (__glSecondaryColorPointerEXT!=null) __glSecondaryColorPointerEXT(size,type,stride,pointer);else throw new NotImplementedException("glSecondaryColorPointerEXT");}
public static void glActiveProgramEXT ( uint program ){if (__glActiveProgramEXT!=null) __glActiveProgramEXT(program);else throw new NotImplementedException("glActiveProgramEXT");}
public static uint glCreateShaderProgramEXT ( uint type,string  _string ){if (__glCreateShaderProgramEXT!=null) return __glCreateShaderProgramEXT(type,_string);else throw new NotImplementedException("glCreateShaderProgramEXT");}
public static void glUseShaderProgramEXT ( uint type,uint program ){if (__glUseShaderProgramEXT!=null) __glUseShaderProgramEXT(type,program);else throw new NotImplementedException("glUseShaderProgramEXT");}
public static void glBindImageTextureEXT ( uint index,uint texture,int level,bool layered,int layer,uint access,int format ){if (__glBindImageTextureEXT!=null) __glBindImageTextureEXT(index,texture,level,layered,layer,access,format);else throw new NotImplementedException("glBindImageTextureEXT");}
public static void glMemoryBarrierEXT ( uint barriers ){if (__glMemoryBarrierEXT!=null) __glMemoryBarrierEXT(barriers);else throw new NotImplementedException("glMemoryBarrierEXT");}
public static void glActiveStencilFaceEXT ( uint face ){if (__glActiveStencilFaceEXT!=null) __glActiveStencilFaceEXT(face);else throw new NotImplementedException("glActiveStencilFaceEXT");}
public static void glTexSubImage1DEXT ( uint target,int level,int xoffset,int width,uint format,uint type,IntPtr  pixels ){if (__glTexSubImage1DEXT!=null) __glTexSubImage1DEXT(target,level,xoffset,width,format,type,pixels);else throw new NotImplementedException("glTexSubImage1DEXT");}
public static void glTexSubImage2DEXT ( uint target,int level,int xoffset,int yoffset,int width,int height,uint format,uint type,IntPtr  pixels ){if (__glTexSubImage2DEXT!=null) __glTexSubImage2DEXT(target,level,xoffset,yoffset,width,height,format,type,pixels);else throw new NotImplementedException("glTexSubImage2DEXT");}
public static void glTexSubImage3DEXT ( uint target,int level,int xoffset,int yoffset,int zoffset,int width,int height,int depth,uint format,uint type,IntPtr  pixels ){if (__glTexSubImage3DEXT!=null) __glTexSubImage3DEXT(target,level,xoffset,yoffset,zoffset,width,height,depth,format,type,pixels);else throw new NotImplementedException("glTexSubImage3DEXT");}
public static void glTexImage3DEXT ( uint target,int level,uint internalformat,int width,int height,int depth,int border,uint format,uint type,IntPtr  pixels ){if (__glTexImage3DEXT!=null) __glTexImage3DEXT(target,level,internalformat,width,height,depth,border,format,type,pixels);else throw new NotImplementedException("glTexImage3DEXT");}
public static void glFramebufferTextureLayerEXT ( uint target,uint attachment,uint texture,int level,int layer ){if (__glFramebufferTextureLayerEXT!=null) __glFramebufferTextureLayerEXT(target,attachment,texture,level,layer);else throw new NotImplementedException("glFramebufferTextureLayerEXT");}
public static void glTexBufferEXT ( uint target,uint internalformat,uint buffer ){if (__glTexBufferEXT!=null) __glTexBufferEXT(target,internalformat,buffer);else throw new NotImplementedException("glTexBufferEXT");}
public static void glClearColorIiEXT ( int red,int green,int blue,int alpha ){if (__glClearColorIiEXT!=null) __glClearColorIiEXT(red,green,blue,alpha);else throw new NotImplementedException("glClearColorIiEXT");}
public static void glClearColorIuiEXT ( uint red,uint green,uint blue,uint alpha ){if (__glClearColorIuiEXT!=null) __glClearColorIuiEXT(red,green,blue,alpha);else throw new NotImplementedException("glClearColorIuiEXT");}
public static void glGetTexParameterIivEXT ( uint target,uint pname,IntPtr _params ){if (__glGetTexParameterIivEXT!=null) __glGetTexParameterIivEXT(target,pname,_params);else throw new NotImplementedException("glGetTexParameterIivEXT");}
public static void glGetTexParameterIuivEXT ( uint target,uint pname,IntPtr _params ){if (__glGetTexParameterIuivEXT!=null) __glGetTexParameterIuivEXT(target,pname,_params);else throw new NotImplementedException("glGetTexParameterIuivEXT");}
public static void glTexParameterIivEXT ( uint target,uint pname,int[] _params ){if (__glTexParameterIivEXT!=null) __glTexParameterIivEXT(target,pname,_params);else throw new NotImplementedException("glTexParameterIivEXT");}
public static void glTexParameterIuivEXT ( uint target,uint pname,uint[] _params ){if (__glTexParameterIuivEXT!=null) __glTexParameterIuivEXT(target,pname,_params);else throw new NotImplementedException("glTexParameterIuivEXT");}
public static bool glAreTexturesResidentEXT ( int n,uint[]  textures,IntPtr residences ){if (__glAreTexturesResidentEXT!=null) return __glAreTexturesResidentEXT(n,textures,residences);else throw new NotImplementedException("glAreTexturesResidentEXT");}
public static void glBindTextureEXT ( uint target,uint texture ){if (__glBindTextureEXT!=null) __glBindTextureEXT(target,texture);else throw new NotImplementedException("glBindTextureEXT");}
public static void glDeleteTexturesEXT ( int n,uint[]  textures ){if (__glDeleteTexturesEXT!=null) __glDeleteTexturesEXT(n,textures);else throw new NotImplementedException("glDeleteTexturesEXT");}
public static void glGenTexturesEXT ( int n,IntPtr textures ){if (__glGenTexturesEXT!=null) __glGenTexturesEXT(n,textures);else throw new NotImplementedException("glGenTexturesEXT");}
public static bool glIsTextureEXT ( uint texture ){if (__glIsTextureEXT!=null) return __glIsTextureEXT(texture);else throw new NotImplementedException("glIsTextureEXT");}
public static void glPrioritizeTexturesEXT ( int n,uint[]  textures,float[]  priorities ){if (__glPrioritizeTexturesEXT!=null) __glPrioritizeTexturesEXT(n,textures,priorities);else throw new NotImplementedException("glPrioritizeTexturesEXT");}
public static void glTextureNormalEXT ( uint mode ){if (__glTextureNormalEXT!=null) __glTextureNormalEXT(mode);else throw new NotImplementedException("glTextureNormalEXT");}
public static void glGetQueryObjecti64vEXT ( uint id,uint pname,IntPtr _params ){if (__glGetQueryObjecti64vEXT!=null) __glGetQueryObjecti64vEXT(id,pname,_params);else throw new NotImplementedException("glGetQueryObjecti64vEXT");}
public static void glGetQueryObjectui64vEXT ( uint id,uint pname,IntPtr _params ){if (__glGetQueryObjectui64vEXT!=null) __glGetQueryObjectui64vEXT(id,pname,_params);else throw new NotImplementedException("glGetQueryObjectui64vEXT");}
public static void glBeginTransformFeedbackEXT ( uint primitiveMode ){if (__glBeginTransformFeedbackEXT!=null) __glBeginTransformFeedbackEXT(primitiveMode);else throw new NotImplementedException("glBeginTransformFeedbackEXT");}
public static void glBindBufferBaseEXT ( uint target,uint index,uint buffer ){if (__glBindBufferBaseEXT!=null) __glBindBufferBaseEXT(target,index,buffer);else throw new NotImplementedException("glBindBufferBaseEXT");}
public static void glBindBufferOffsetEXT ( uint target,uint index,uint buffer,IntPtr offset ){if (__glBindBufferOffsetEXT!=null) __glBindBufferOffsetEXT(target,index,buffer,offset);else throw new NotImplementedException("glBindBufferOffsetEXT");}
public static void glBindBufferRangeEXT ( uint target,uint index,uint buffer,IntPtr offset,IntPtr size ){if (__glBindBufferRangeEXT!=null) __glBindBufferRangeEXT(target,index,buffer,offset,size);else throw new NotImplementedException("glBindBufferRangeEXT");}
public static void glEndTransformFeedbackEXT (  ){if (__glEndTransformFeedbackEXT!=null) __glEndTransformFeedbackEXT();else throw new NotImplementedException("glEndTransformFeedbackEXT");}
public static void glGetTransformFeedbackVaryingEXT ( uint program,uint index,int bufSize,IntPtr length,IntPtr size,IntPtr type,IntPtr name ){if (__glGetTransformFeedbackVaryingEXT!=null) __glGetTransformFeedbackVaryingEXT(program,index,bufSize,length,size,type,name);else throw new NotImplementedException("glGetTransformFeedbackVaryingEXT");}
public static void glTransformFeedbackVaryingsEXT ( uint program,int count,IntPtr varyings,uint bufferMode ){if (__glTransformFeedbackVaryingsEXT!=null) __glTransformFeedbackVaryingsEXT(program,count,varyings,bufferMode);else throw new NotImplementedException("glTransformFeedbackVaryingsEXT");}
public static void glArrayElementEXT ( int i ){if (__glArrayElementEXT!=null) __glArrayElementEXT(i);else throw new NotImplementedException("glArrayElementEXT");}
public static void glColorPointerEXT ( int size,uint type,int stride,int count,IntPtr  pointer ){if (__glColorPointerEXT!=null) __glColorPointerEXT(size,type,stride,count,pointer);else throw new NotImplementedException("glColorPointerEXT");}
public static void glDrawArraysEXT ( uint mode,int first,int count ){if (__glDrawArraysEXT!=null) __glDrawArraysEXT(mode,first,count);else throw new NotImplementedException("glDrawArraysEXT");}
public static void glEdgeFlagPointerEXT ( int stride,int count,bool[]  pointer ){if (__glEdgeFlagPointerEXT!=null) __glEdgeFlagPointerEXT(stride,count,pointer);else throw new NotImplementedException("glEdgeFlagPointerEXT");}
public static void glIndexPointerEXT ( uint type,int stride,int count,IntPtr  pointer ){if (__glIndexPointerEXT!=null) __glIndexPointerEXT(type,stride,count,pointer);else throw new NotImplementedException("glIndexPointerEXT");}
public static void glNormalPointerEXT ( uint type,int stride,int count,IntPtr  pointer ){if (__glNormalPointerEXT!=null) __glNormalPointerEXT(type,stride,count,pointer);else throw new NotImplementedException("glNormalPointerEXT");}
public static void glTexCoordPointerEXT ( int size,uint type,int stride,int count,IntPtr  pointer ){if (__glTexCoordPointerEXT!=null) __glTexCoordPointerEXT(size,type,stride,count,pointer);else throw new NotImplementedException("glTexCoordPointerEXT");}
public static void glVertexPointerEXT ( int size,uint type,int stride,int count,IntPtr  pointer ){if (__glVertexPointerEXT!=null) __glVertexPointerEXT(size,type,stride,count,pointer);else throw new NotImplementedException("glVertexPointerEXT");}
public static void glGetVertexAttribLdvEXT ( uint index,uint pname,IntPtr _params ){if (__glGetVertexAttribLdvEXT!=null) __glGetVertexAttribLdvEXT(index,pname,_params);else throw new NotImplementedException("glGetVertexAttribLdvEXT");}
public static void glVertexArrayVertexAttribLOffsetEXT ( uint vaobj,uint buffer,uint index,int size,uint type,int stride,IntPtr offset ){if (__glVertexArrayVertexAttribLOffsetEXT!=null) __glVertexArrayVertexAttribLOffsetEXT(vaobj,buffer,index,size,type,stride,offset);else throw new NotImplementedException("glVertexArrayVertexAttribLOffsetEXT");}
public static void glVertexAttribL1dEXT ( uint index,double x ){if (__glVertexAttribL1dEXT!=null) __glVertexAttribL1dEXT(index,x);else throw new NotImplementedException("glVertexAttribL1dEXT");}
public static void glVertexAttribL1dvEXT ( uint index,double[]  v ){if (__glVertexAttribL1dvEXT!=null) __glVertexAttribL1dvEXT(index,v);else throw new NotImplementedException("glVertexAttribL1dvEXT");}
public static void glVertexAttribL2dEXT ( uint index,double x,double y ){if (__glVertexAttribL2dEXT!=null) __glVertexAttribL2dEXT(index,x,y);else throw new NotImplementedException("glVertexAttribL2dEXT");}
public static void glVertexAttribL2dvEXT ( uint index,double[]  v ){if (__glVertexAttribL2dvEXT!=null) __glVertexAttribL2dvEXT(index,v);else throw new NotImplementedException("glVertexAttribL2dvEXT");}
public static void glVertexAttribL3dEXT ( uint index,double x,double y,double z ){if (__glVertexAttribL3dEXT!=null) __glVertexAttribL3dEXT(index,x,y,z);else throw new NotImplementedException("glVertexAttribL3dEXT");}
public static void glVertexAttribL3dvEXT ( uint index,double[]  v ){if (__glVertexAttribL3dvEXT!=null) __glVertexAttribL3dvEXT(index,v);else throw new NotImplementedException("glVertexAttribL3dvEXT");}
public static void glVertexAttribL4dEXT ( uint index,double x,double y,double z,double w ){if (__glVertexAttribL4dEXT!=null) __glVertexAttribL4dEXT(index,x,y,z,w);else throw new NotImplementedException("glVertexAttribL4dEXT");}
public static void glVertexAttribL4dvEXT ( uint index,double[]  v ){if (__glVertexAttribL4dvEXT!=null) __glVertexAttribL4dvEXT(index,v);else throw new NotImplementedException("glVertexAttribL4dvEXT");}
public static void glVertexAttribLPointerEXT ( uint index,int size,uint type,int stride,IntPtr  pointer ){if (__glVertexAttribLPointerEXT!=null) __glVertexAttribLPointerEXT(index,size,type,stride,pointer);else throw new NotImplementedException("glVertexAttribLPointerEXT");}
public static void glBeginVertexShaderEXT (  ){if (__glBeginVertexShaderEXT!=null) __glBeginVertexShaderEXT();else throw new NotImplementedException("glBeginVertexShaderEXT");}
public static uint glBindLightParameterEXT ( uint light,uint value ){if (__glBindLightParameterEXT!=null) return __glBindLightParameterEXT(light,value);else throw new NotImplementedException("glBindLightParameterEXT");}
public static uint glBindMaterialParameterEXT ( uint face,uint value ){if (__glBindMaterialParameterEXT!=null) return __glBindMaterialParameterEXT(face,value);else throw new NotImplementedException("glBindMaterialParameterEXT");}
public static uint glBindParameterEXT ( uint value ){if (__glBindParameterEXT!=null) return __glBindParameterEXT(value);else throw new NotImplementedException("glBindParameterEXT");}
public static uint glBindTexGenParameterEXT ( uint unit,uint coord,uint value ){if (__glBindTexGenParameterEXT!=null) return __glBindTexGenParameterEXT(unit,coord,value);else throw new NotImplementedException("glBindTexGenParameterEXT");}
public static uint glBindTextureUnitParameterEXT ( uint unit,uint value ){if (__glBindTextureUnitParameterEXT!=null) return __glBindTextureUnitParameterEXT(unit,value);else throw new NotImplementedException("glBindTextureUnitParameterEXT");}
public static void glBindVertexShaderEXT ( uint id ){if (__glBindVertexShaderEXT!=null) __glBindVertexShaderEXT(id);else throw new NotImplementedException("glBindVertexShaderEXT");}
public static void glDeleteVertexShaderEXT ( uint id ){if (__glDeleteVertexShaderEXT!=null) __glDeleteVertexShaderEXT(id);else throw new NotImplementedException("glDeleteVertexShaderEXT");}
public static void glDisableVariantClientStateEXT ( uint id ){if (__glDisableVariantClientStateEXT!=null) __glDisableVariantClientStateEXT(id);else throw new NotImplementedException("glDisableVariantClientStateEXT");}
public static void glEnableVariantClientStateEXT ( uint id ){if (__glEnableVariantClientStateEXT!=null) __glEnableVariantClientStateEXT(id);else throw new NotImplementedException("glEnableVariantClientStateEXT");}
public static void glEndVertexShaderEXT (  ){if (__glEndVertexShaderEXT!=null) __glEndVertexShaderEXT();else throw new NotImplementedException("glEndVertexShaderEXT");}
public static void glExtractComponentEXT ( uint res,uint src,uint num ){if (__glExtractComponentEXT!=null) __glExtractComponentEXT(res,src,num);else throw new NotImplementedException("glExtractComponentEXT");}
public static uint glGenSymbolsEXT ( uint dataType,uint storageType,uint range,uint components ){if (__glGenSymbolsEXT!=null) return __glGenSymbolsEXT(dataType,storageType,range,components);else throw new NotImplementedException("glGenSymbolsEXT");}
public static uint glGenVertexShadersEXT ( uint range ){if (__glGenVertexShadersEXT!=null) return __glGenVertexShadersEXT(range);else throw new NotImplementedException("glGenVertexShadersEXT");}
public static void glGetInvariantBooleanvEXT ( uint id,uint value,IntPtr data ){if (__glGetInvariantBooleanvEXT!=null) __glGetInvariantBooleanvEXT(id,value,data);else throw new NotImplementedException("glGetInvariantBooleanvEXT");}
public static void glGetInvariantFloatvEXT ( uint id,uint value,IntPtr data ){if (__glGetInvariantFloatvEXT!=null) __glGetInvariantFloatvEXT(id,value,data);else throw new NotImplementedException("glGetInvariantFloatvEXT");}
public static void glGetInvariantIntegervEXT ( uint id,uint value,IntPtr data ){if (__glGetInvariantIntegervEXT!=null) __glGetInvariantIntegervEXT(id,value,data);else throw new NotImplementedException("glGetInvariantIntegervEXT");}
public static void glGetLocalConstantBooleanvEXT ( uint id,uint value,IntPtr data ){if (__glGetLocalConstantBooleanvEXT!=null) __glGetLocalConstantBooleanvEXT(id,value,data);else throw new NotImplementedException("glGetLocalConstantBooleanvEXT");}
public static void glGetLocalConstantFloatvEXT ( uint id,uint value,IntPtr data ){if (__glGetLocalConstantFloatvEXT!=null) __glGetLocalConstantFloatvEXT(id,value,data);else throw new NotImplementedException("glGetLocalConstantFloatvEXT");}
public static void glGetLocalConstantIntegervEXT ( uint id,uint value,IntPtr data ){if (__glGetLocalConstantIntegervEXT!=null) __glGetLocalConstantIntegervEXT(id,value,data);else throw new NotImplementedException("glGetLocalConstantIntegervEXT");}
public static void glGetVariantBooleanvEXT ( uint id,uint value,IntPtr data ){if (__glGetVariantBooleanvEXT!=null) __glGetVariantBooleanvEXT(id,value,data);else throw new NotImplementedException("glGetVariantBooleanvEXT");}
public static void glGetVariantFloatvEXT ( uint id,uint value,IntPtr data ){if (__glGetVariantFloatvEXT!=null) __glGetVariantFloatvEXT(id,value,data);else throw new NotImplementedException("glGetVariantFloatvEXT");}
public static void glGetVariantIntegervEXT ( uint id,uint value,IntPtr data ){if (__glGetVariantIntegervEXT!=null) __glGetVariantIntegervEXT(id,value,data);else throw new NotImplementedException("glGetVariantIntegervEXT");}
public static void glGetVariantPointervEXT ( uint id,uint value,IntPtr data ){if (__glGetVariantPointervEXT!=null) __glGetVariantPointervEXT(id,value,data);else throw new NotImplementedException("glGetVariantPointervEXT");}
public static void glInsertComponentEXT ( uint res,uint src,uint num ){if (__glInsertComponentEXT!=null) __glInsertComponentEXT(res,src,num);else throw new NotImplementedException("glInsertComponentEXT");}
public static bool glIsVariantEnabledEXT ( uint id,uint cap ){if (__glIsVariantEnabledEXT!=null) return __glIsVariantEnabledEXT(id,cap);else throw new NotImplementedException("glIsVariantEnabledEXT");}
public static void glSetInvariantEXT ( uint id,uint type,IntPtr addr ){if (__glSetInvariantEXT!=null) __glSetInvariantEXT(id,type,addr);else throw new NotImplementedException("glSetInvariantEXT");}
public static void glSetLocalConstantEXT ( uint id,uint type,IntPtr addr ){if (__glSetLocalConstantEXT!=null) __glSetLocalConstantEXT(id,type,addr);else throw new NotImplementedException("glSetLocalConstantEXT");}
public static void glShaderOp1EXT ( uint op,uint res,uint arg1 ){if (__glShaderOp1EXT!=null) __glShaderOp1EXT(op,res,arg1);else throw new NotImplementedException("glShaderOp1EXT");}
public static void glShaderOp2EXT ( uint op,uint res,uint arg1,uint arg2 ){if (__glShaderOp2EXT!=null) __glShaderOp2EXT(op,res,arg1,arg2);else throw new NotImplementedException("glShaderOp2EXT");}
public static void glShaderOp3EXT ( uint op,uint res,uint arg1,uint arg2,uint arg3 ){if (__glShaderOp3EXT!=null) __glShaderOp3EXT(op,res,arg1,arg2,arg3);else throw new NotImplementedException("glShaderOp3EXT");}
public static void glSwizzleEXT ( uint res,uint _in,uint outX,uint outY,uint outZ,uint outW ){if (__glSwizzleEXT!=null) __glSwizzleEXT(res,_in,outX,outY,outZ,outW);else throw new NotImplementedException("glSwizzleEXT");}
public static void glVariantPointerEXT ( uint id,uint type,uint stride,IntPtr addr ){if (__glVariantPointerEXT!=null) __glVariantPointerEXT(id,type,stride,addr);else throw new NotImplementedException("glVariantPointerEXT");}
public static void glVariantbvEXT ( uint id,IntPtr addr ){if (__glVariantbvEXT!=null) __glVariantbvEXT(id,addr);else throw new NotImplementedException("glVariantbvEXT");}
public static void glVariantdvEXT ( uint id,IntPtr addr ){if (__glVariantdvEXT!=null) __glVariantdvEXT(id,addr);else throw new NotImplementedException("glVariantdvEXT");}
public static void glVariantfvEXT ( uint id,IntPtr addr ){if (__glVariantfvEXT!=null) __glVariantfvEXT(id,addr);else throw new NotImplementedException("glVariantfvEXT");}
public static void glVariantivEXT ( uint id,IntPtr addr ){if (__glVariantivEXT!=null) __glVariantivEXT(id,addr);else throw new NotImplementedException("glVariantivEXT");}
public static void glVariantsvEXT ( uint id,IntPtr addr ){if (__glVariantsvEXT!=null) __glVariantsvEXT(id,addr);else throw new NotImplementedException("glVariantsvEXT");}
public static void glVariantubvEXT ( uint id,IntPtr addr ){if (__glVariantubvEXT!=null) __glVariantubvEXT(id,addr);else throw new NotImplementedException("glVariantubvEXT");}
public static void glVariantuivEXT ( uint id,IntPtr addr ){if (__glVariantuivEXT!=null) __glVariantuivEXT(id,addr);else throw new NotImplementedException("glVariantuivEXT");}
public static void glVariantusvEXT ( uint id,IntPtr addr ){if (__glVariantusvEXT!=null) __glVariantusvEXT(id,addr);else throw new NotImplementedException("glVariantusvEXT");}
public static void glWriteMaskEXT ( uint res,uint _in,uint outX,uint outY,uint outZ,uint outW ){if (__glWriteMaskEXT!=null) __glWriteMaskEXT(res,_in,outX,outY,outZ,outW);else throw new NotImplementedException("glWriteMaskEXT");}
public static void glVertexWeightPointerEXT ( int size,uint type,int stride,IntPtr pointer ){if (__glVertexWeightPointerEXT!=null) __glVertexWeightPointerEXT(size,type,stride,pointer);else throw new NotImplementedException("glVertexWeightPointerEXT");}
public static void glVertexWeightfEXT ( float weight ){if (__glVertexWeightfEXT!=null) __glVertexWeightfEXT(weight);else throw new NotImplementedException("glVertexWeightfEXT");}
public static void glVertexWeightfvEXT ( IntPtr weight ){if (__glVertexWeightfvEXT!=null) __glVertexWeightfvEXT(weight);else throw new NotImplementedException("glVertexWeightfvEXT");}
public static IntPtr glImportSyncEXT ( uint external_sync_type,IntPtr external_sync,uint flags ){if (__glImportSyncEXT!=null) return __glImportSyncEXT(external_sync_type,external_sync,flags);else throw new NotImplementedException("glImportSyncEXT");}
public static void glFrameTerminatorGREMEDY (  ){if (__glFrameTerminatorGREMEDY!=null) __glFrameTerminatorGREMEDY();else throw new NotImplementedException("glFrameTerminatorGREMEDY");}
public static void glStringMarkerGREMEDY ( int len,IntPtr  _string ){if (__glStringMarkerGREMEDY!=null) __glStringMarkerGREMEDY(len,_string);else throw new NotImplementedException("glStringMarkerGREMEDY");}
public static void glGetImageTransformParameterfvHP ( uint target,uint pname,float[]  _params ){if (__glGetImageTransformParameterfvHP!=null) __glGetImageTransformParameterfvHP(target,pname,_params);else throw new NotImplementedException("glGetImageTransformParameterfvHP");}
public static void glGetImageTransformParameterivHP ( uint target,uint pname,int[]  _params ){if (__glGetImageTransformParameterivHP!=null) __glGetImageTransformParameterivHP(target,pname,_params);else throw new NotImplementedException("glGetImageTransformParameterivHP");}
public static void glImageTransformParameterfHP ( uint target,uint pname,float[] param ){if (__glImageTransformParameterfHP!=null) __glImageTransformParameterfHP(target,pname,param);else throw new NotImplementedException("glImageTransformParameterfHP");}
public static void glImageTransformParameterfvHP ( uint target,uint pname,float[]  _params ){if (__glImageTransformParameterfvHP!=null) __glImageTransformParameterfvHP(target,pname,_params);else throw new NotImplementedException("glImageTransformParameterfvHP");}
public static void glImageTransformParameteriHP ( uint target,uint pname,int[] param ){if (__glImageTransformParameteriHP!=null) __glImageTransformParameteriHP(target,pname,param);else throw new NotImplementedException("glImageTransformParameteriHP");}
public static void glImageTransformParameterivHP ( uint target,uint pname,int[]  _params ){if (__glImageTransformParameterivHP!=null) __glImageTransformParameterivHP(target,pname,_params);else throw new NotImplementedException("glImageTransformParameterivHP");}
public static void glMultiModeDrawArraysIBM ( uint[]  mode,int[] first,int[] count,int primcount,int modestride ){if (__glMultiModeDrawArraysIBM!=null) __glMultiModeDrawArraysIBM(mode,first,count,primcount,modestride);else throw new NotImplementedException("glMultiModeDrawArraysIBM");}
public static void glMultiModeDrawElementsIBM ( uint[]  mode,int[] count,uint type,ref IntPtr indices,int primcount,int modestride ){if (__glMultiModeDrawElementsIBM!=null) __glMultiModeDrawElementsIBM(mode,count,type,ref indices,primcount,modestride);else throw new NotImplementedException("glMultiModeDrawElementsIBM");}
public static void glColorPointerListIBM ( int size,uint type,int stride,IntPtr pointer,int ptrstride ){if (__glColorPointerListIBM!=null) __glColorPointerListIBM(size,type,stride,pointer,ptrstride);else throw new NotImplementedException("glColorPointerListIBM");}
public static void glEdgeFlagPointerListIBM ( int stride,IntPtr pointer,int ptrstride ){if (__glEdgeFlagPointerListIBM!=null) __glEdgeFlagPointerListIBM(stride,pointer,ptrstride);else throw new NotImplementedException("glEdgeFlagPointerListIBM");}
public static void glFogCoordPointerListIBM ( uint type,int stride,IntPtr pointer,int ptrstride ){if (__glFogCoordPointerListIBM!=null) __glFogCoordPointerListIBM(type,stride,pointer,ptrstride);else throw new NotImplementedException("glFogCoordPointerListIBM");}
public static void glIndexPointerListIBM ( uint type,int stride,IntPtr pointer,int ptrstride ){if (__glIndexPointerListIBM!=null) __glIndexPointerListIBM(type,stride,pointer,ptrstride);else throw new NotImplementedException("glIndexPointerListIBM");}
public static void glNormalPointerListIBM ( uint type,int stride,IntPtr pointer,int ptrstride ){if (__glNormalPointerListIBM!=null) __glNormalPointerListIBM(type,stride,pointer,ptrstride);else throw new NotImplementedException("glNormalPointerListIBM");}
public static void glSecondaryColorPointerListIBM ( int size,uint type,int stride,IntPtr pointer,int ptrstride ){if (__glSecondaryColorPointerListIBM!=null) __glSecondaryColorPointerListIBM(size,type,stride,pointer,ptrstride);else throw new NotImplementedException("glSecondaryColorPointerListIBM");}
public static void glTexCoordPointerListIBM ( int size,uint type,int stride,IntPtr pointer,int ptrstride ){if (__glTexCoordPointerListIBM!=null) __glTexCoordPointerListIBM(size,type,stride,pointer,ptrstride);else throw new NotImplementedException("glTexCoordPointerListIBM");}
public static void glVertexPointerListIBM ( int size,uint type,int stride,IntPtr pointer,int ptrstride ){if (__glVertexPointerListIBM!=null) __glVertexPointerListIBM(size,type,stride,pointer,ptrstride);else throw new NotImplementedException("glVertexPointerListIBM");}
public static void glColorPointervINTEL ( int size,uint type,IntPtr pointer ){if (__glColorPointervINTEL!=null) __glColorPointervINTEL(size,type,pointer);else throw new NotImplementedException("glColorPointervINTEL");}
public static void glNormalPointervINTEL ( uint type,IntPtr pointer ){if (__glNormalPointervINTEL!=null) __glNormalPointervINTEL(type,pointer);else throw new NotImplementedException("glNormalPointervINTEL");}
public static void glTexCoordPointervINTEL ( int size,uint type,IntPtr pointer ){if (__glTexCoordPointervINTEL!=null) __glTexCoordPointervINTEL(size,type,pointer);else throw new NotImplementedException("glTexCoordPointervINTEL");}
public static void glVertexPointervINTEL ( int size,uint type,IntPtr pointer ){if (__glVertexPointervINTEL!=null) __glVertexPointervINTEL(size,type,pointer);else throw new NotImplementedException("glVertexPointervINTEL");}
public static void glTexScissorFuncINTEL ( uint target,uint lfunc,uint hfunc ){if (__glTexScissorFuncINTEL!=null) __glTexScissorFuncINTEL(target,lfunc,hfunc);else throw new NotImplementedException("glTexScissorFuncINTEL");}
public static void glTexScissorINTEL ( uint target,float tlow,float thigh ){if (__glTexScissorINTEL!=null) __glTexScissorINTEL(target,tlow,thigh);else throw new NotImplementedException("glTexScissorINTEL");}
public static uint glBufferRegionEnabledEXT (  ){if (__glBufferRegionEnabledEXT!=null) return __glBufferRegionEnabledEXT();else throw new NotImplementedException("glBufferRegionEnabledEXT");}
public static void glDeleteBufferRegionEXT ( uint region ){if (__glDeleteBufferRegionEXT!=null) __glDeleteBufferRegionEXT(region);else throw new NotImplementedException("glDeleteBufferRegionEXT");}
public static void glDrawBufferRegionEXT ( uint region,int x,int y,int width,int height,int xDest,int yDest ){if (__glDrawBufferRegionEXT!=null) __glDrawBufferRegionEXT(region,x,y,width,height,xDest,yDest);else throw new NotImplementedException("glDrawBufferRegionEXT");}
public static uint glNewBufferRegionEXT ( uint region ){if (__glNewBufferRegionEXT!=null) return __glNewBufferRegionEXT(region);else throw new NotImplementedException("glNewBufferRegionEXT");}
public static void glReadBufferRegionEXT ( uint region,int x,int y,int width,int height ){if (__glReadBufferRegionEXT!=null) __glReadBufferRegionEXT(region,x,y,width,height);else throw new NotImplementedException("glReadBufferRegionEXT");}
public static void glResizeBuffersMESA (  ){if (__glResizeBuffersMESA!=null) __glResizeBuffersMESA();else throw new NotImplementedException("glResizeBuffersMESA");}
public static void glWindowPos2dMESA ( double x,double y ){if (__glWindowPos2dMESA!=null) __glWindowPos2dMESA(x,y);else throw new NotImplementedException("glWindowPos2dMESA");}
public static void glWindowPos2dvMESA ( double[]  p ){if (__glWindowPos2dvMESA!=null) __glWindowPos2dvMESA(p);else throw new NotImplementedException("glWindowPos2dvMESA");}
public static void glWindowPos2fMESA ( float x,float y ){if (__glWindowPos2fMESA!=null) __glWindowPos2fMESA(x,y);else throw new NotImplementedException("glWindowPos2fMESA");}
public static void glWindowPos2fvMESA ( float[]  p ){if (__glWindowPos2fvMESA!=null) __glWindowPos2fvMESA(p);else throw new NotImplementedException("glWindowPos2fvMESA");}
public static void glWindowPos2iMESA ( int x,int y ){if (__glWindowPos2iMESA!=null) __glWindowPos2iMESA(x,y);else throw new NotImplementedException("glWindowPos2iMESA");}
public static void glWindowPos2ivMESA ( int[]  p ){if (__glWindowPos2ivMESA!=null) __glWindowPos2ivMESA(p);else throw new NotImplementedException("glWindowPos2ivMESA");}
public static void glWindowPos2sMESA ( short x,short y ){if (__glWindowPos2sMESA!=null) __glWindowPos2sMESA(x,y);else throw new NotImplementedException("glWindowPos2sMESA");}
public static void glWindowPos2svMESA ( short[]  p ){if (__glWindowPos2svMESA!=null) __glWindowPos2svMESA(p);else throw new NotImplementedException("glWindowPos2svMESA");}
public static void glWindowPos3dMESA ( double x,double y,double z ){if (__glWindowPos3dMESA!=null) __glWindowPos3dMESA(x,y,z);else throw new NotImplementedException("glWindowPos3dMESA");}
public static void glWindowPos3dvMESA ( double[]  p ){if (__glWindowPos3dvMESA!=null) __glWindowPos3dvMESA(p);else throw new NotImplementedException("glWindowPos3dvMESA");}
public static void glWindowPos3fMESA ( float x,float y,float z ){if (__glWindowPos3fMESA!=null) __glWindowPos3fMESA(x,y,z);else throw new NotImplementedException("glWindowPos3fMESA");}
public static void glWindowPos3fvMESA ( float[]  p ){if (__glWindowPos3fvMESA!=null) __glWindowPos3fvMESA(p);else throw new NotImplementedException("glWindowPos3fvMESA");}
public static void glWindowPos3iMESA ( int x,int y,int z ){if (__glWindowPos3iMESA!=null) __glWindowPos3iMESA(x,y,z);else throw new NotImplementedException("glWindowPos3iMESA");}
public static void glWindowPos3ivMESA ( int[]  p ){if (__glWindowPos3ivMESA!=null) __glWindowPos3ivMESA(p);else throw new NotImplementedException("glWindowPos3ivMESA");}
public static void glWindowPos3sMESA ( short x,short y,short z ){if (__glWindowPos3sMESA!=null) __glWindowPos3sMESA(x,y,z);else throw new NotImplementedException("glWindowPos3sMESA");}
public static void glWindowPos3svMESA ( short[]  p ){if (__glWindowPos3svMESA!=null) __glWindowPos3svMESA(p);else throw new NotImplementedException("glWindowPos3svMESA");}
public static void glWindowPos4dMESA ( double x,double y,double z,double arg_3 ){if (__glWindowPos4dMESA!=null) __glWindowPos4dMESA(x,y,z,arg_3);else throw new NotImplementedException("glWindowPos4dMESA");}
public static void glWindowPos4dvMESA ( double[]  p ){if (__glWindowPos4dvMESA!=null) __glWindowPos4dvMESA(p);else throw new NotImplementedException("glWindowPos4dvMESA");}
public static void glWindowPos4fMESA ( float x,float y,float z,float w ){if (__glWindowPos4fMESA!=null) __glWindowPos4fMESA(x,y,z,w);else throw new NotImplementedException("glWindowPos4fMESA");}
public static void glWindowPos4fvMESA ( float[]  p ){if (__glWindowPos4fvMESA!=null) __glWindowPos4fvMESA(p);else throw new NotImplementedException("glWindowPos4fvMESA");}
public static void glWindowPos4iMESA ( int x,int y,int z,int w ){if (__glWindowPos4iMESA!=null) __glWindowPos4iMESA(x,y,z,w);else throw new NotImplementedException("glWindowPos4iMESA");}
public static void glWindowPos4ivMESA ( int[]  p ){if (__glWindowPos4ivMESA!=null) __glWindowPos4ivMESA(p);else throw new NotImplementedException("glWindowPos4ivMESA");}
public static void glWindowPos4sMESA ( short x,short y,short z,short w ){if (__glWindowPos4sMESA!=null) __glWindowPos4sMESA(x,y,z,w);else throw new NotImplementedException("glWindowPos4sMESA");}
public static void glWindowPos4svMESA ( short[]  p ){if (__glWindowPos4svMESA!=null) __glWindowPos4svMESA(p);else throw new NotImplementedException("glWindowPos4svMESA");}
public static void glBeginConditionalRenderNV ( uint id,uint mode ){if (__glBeginConditionalRenderNV!=null) __glBeginConditionalRenderNV(id,mode);else throw new NotImplementedException("glBeginConditionalRenderNV");}
public static void glEndConditionalRenderNV (  ){if (__glEndConditionalRenderNV!=null) __glEndConditionalRenderNV();else throw new NotImplementedException("glEndConditionalRenderNV");}
public static void glCopyImageSubDataNV ( uint srcName,uint srcTarget,int srcLevel,int srcX,int srcY,int srcZ,uint dstName,uint dstTarget,int dstLevel,int dstX,int dstY,int dstZ,int width,int height,int depth ){if (__glCopyImageSubDataNV!=null) __glCopyImageSubDataNV(srcName,srcTarget,srcLevel,srcX,srcY,srcZ,dstName,dstTarget,dstLevel,dstX,dstY,dstZ,width,height,depth);else throw new NotImplementedException("glCopyImageSubDataNV");}
public static void glClearDepthdNV ( double depth ){if (__glClearDepthdNV!=null) __glClearDepthdNV(depth);else throw new NotImplementedException("glClearDepthdNV");}
public static void glDepthBoundsdNV ( double zmin,double zmax ){if (__glDepthBoundsdNV!=null) __glDepthBoundsdNV(zmin,zmax);else throw new NotImplementedException("glDepthBoundsdNV");}
public static void glDepthRangedNV ( double zNear,double zFar ){if (__glDepthRangedNV!=null) __glDepthRangedNV(zNear,zFar);else throw new NotImplementedException("glDepthRangedNV");}
public static void glEvalMapsNV ( uint target,uint mode ){if (__glEvalMapsNV!=null) __glEvalMapsNV(target,mode);else throw new NotImplementedException("glEvalMapsNV");}
public static void glGetMapAttribParameterfvNV ( uint target,uint index,uint pname,IntPtr _params ){if (__glGetMapAttribParameterfvNV!=null) __glGetMapAttribParameterfvNV(target,index,pname,_params);else throw new NotImplementedException("glGetMapAttribParameterfvNV");}
public static void glGetMapAttribParameterivNV ( uint target,uint index,uint pname,IntPtr _params ){if (__glGetMapAttribParameterivNV!=null) __glGetMapAttribParameterivNV(target,index,pname,_params);else throw new NotImplementedException("glGetMapAttribParameterivNV");}
public static void glGetMapControlPointsNV ( uint target,uint index,uint type,int ustride,int vstride,bool packed,IntPtr points ){if (__glGetMapControlPointsNV!=null) __glGetMapControlPointsNV(target,index,type,ustride,vstride,packed,points);else throw new NotImplementedException("glGetMapControlPointsNV");}
public static void glGetMapParameterfvNV ( uint target,uint pname,IntPtr _params ){if (__glGetMapParameterfvNV!=null) __glGetMapParameterfvNV(target,pname,_params);else throw new NotImplementedException("glGetMapParameterfvNV");}
public static void glGetMapParameterivNV ( uint target,uint pname,IntPtr _params ){if (__glGetMapParameterivNV!=null) __glGetMapParameterivNV(target,pname,_params);else throw new NotImplementedException("glGetMapParameterivNV");}
public static void glMapControlPointsNV ( uint target,uint index,uint type,int ustride,int vstride,int uorder,int vorder,bool packed,IntPtr  points ){if (__glMapControlPointsNV!=null) __glMapControlPointsNV(target,index,type,ustride,vstride,uorder,vorder,packed,points);else throw new NotImplementedException("glMapControlPointsNV");}
public static void glMapParameterfvNV ( uint target,uint pname,float[]  _params ){if (__glMapParameterfvNV!=null) __glMapParameterfvNV(target,pname,_params);else throw new NotImplementedException("glMapParameterfvNV");}
public static void glMapParameterivNV ( uint target,uint pname,int[]  _params ){if (__glMapParameterivNV!=null) __glMapParameterivNV(target,pname,_params);else throw new NotImplementedException("glMapParameterivNV");}
public static void glGetMultisamplefvNV ( uint pname,uint index,IntPtr val ){if (__glGetMultisamplefvNV!=null) __glGetMultisamplefvNV(pname,index,val);else throw new NotImplementedException("glGetMultisamplefvNV");}
public static void glSampleMaskIndexedNV ( uint index,uint mask ){if (__glSampleMaskIndexedNV!=null) __glSampleMaskIndexedNV(index,mask);else throw new NotImplementedException("glSampleMaskIndexedNV");}
public static void glTexRenderbufferNV ( uint target,uint renderbuffer ){if (__glTexRenderbufferNV!=null) __glTexRenderbufferNV(target,renderbuffer);else throw new NotImplementedException("glTexRenderbufferNV");}
public static void glDeleteFencesNV ( int n,uint[]  fences ){if (__glDeleteFencesNV!=null) __glDeleteFencesNV(n,fences);else throw new NotImplementedException("glDeleteFencesNV");}
public static void glFinishFenceNV ( uint fence ){if (__glFinishFenceNV!=null) __glFinishFenceNV(fence);else throw new NotImplementedException("glFinishFenceNV");}
public static void glGenFencesNV ( int n,IntPtr fences ){if (__glGenFencesNV!=null) __glGenFencesNV(n,fences);else throw new NotImplementedException("glGenFencesNV");}
public static void glGetFenceivNV ( uint fence,uint pname,IntPtr _params ){if (__glGetFenceivNV!=null) __glGetFenceivNV(fence,pname,_params);else throw new NotImplementedException("glGetFenceivNV");}
public static bool glIsFenceNV ( uint fence ){if (__glIsFenceNV!=null) return __glIsFenceNV(fence);else throw new NotImplementedException("glIsFenceNV");}
public static void glSetFenceNV ( uint fence,uint condition ){if (__glSetFenceNV!=null) __glSetFenceNV(fence,condition);else throw new NotImplementedException("glSetFenceNV");}
public static bool glTestFenceNV ( uint fence ){if (__glTestFenceNV!=null) return __glTestFenceNV(fence);else throw new NotImplementedException("glTestFenceNV");}
public static void glGetProgramNamedParameterdvNV ( uint id,int len,byte[]  name,IntPtr _params ){if (__glGetProgramNamedParameterdvNV!=null) __glGetProgramNamedParameterdvNV(id,len,name,_params);else throw new NotImplementedException("glGetProgramNamedParameterdvNV");}
public static void glGetProgramNamedParameterfvNV ( uint id,int len,byte[]  name,IntPtr _params ){if (__glGetProgramNamedParameterfvNV!=null) __glGetProgramNamedParameterfvNV(id,len,name,_params);else throw new NotImplementedException("glGetProgramNamedParameterfvNV");}
public static void glProgramNamedParameter4dNV ( uint id,int len,byte[]  name,double x,double y,double z,double w ){if (__glProgramNamedParameter4dNV!=null) __glProgramNamedParameter4dNV(id,len,name,x,y,z,w);else throw new NotImplementedException("glProgramNamedParameter4dNV");}
public static void glProgramNamedParameter4dvNV ( uint id,int len,byte[]  name,double[] v ){if (__glProgramNamedParameter4dvNV!=null) __glProgramNamedParameter4dvNV(id,len,name,v);else throw new NotImplementedException("glProgramNamedParameter4dvNV");}
public static void glProgramNamedParameter4fNV ( uint id,int len,byte[]  name,float x,float y,float z,float w ){if (__glProgramNamedParameter4fNV!=null) __glProgramNamedParameter4fNV(id,len,name,x,y,z,w);else throw new NotImplementedException("glProgramNamedParameter4fNV");}
public static void glProgramNamedParameter4fvNV ( uint id,int len,byte[]  name,float[] v ){if (__glProgramNamedParameter4fvNV!=null) __glProgramNamedParameter4fvNV(id,len,name,v);else throw new NotImplementedException("glProgramNamedParameter4fvNV");}
public static void glRenderbufferStorageMultisampleCoverageNV ( uint target,int coverageSamples,int colorSamples,uint internalformat,int width,int height ){if (__glRenderbufferStorageMultisampleCoverageNV!=null) __glRenderbufferStorageMultisampleCoverageNV(target,coverageSamples,colorSamples,internalformat,width,height);else throw new NotImplementedException("glRenderbufferStorageMultisampleCoverageNV");}
public static void glProgramVertexLimitNV ( uint target,int limit ){if (__glProgramVertexLimitNV!=null) __glProgramVertexLimitNV(target,limit);else throw new NotImplementedException("glProgramVertexLimitNV");}
public static void glProgramEnvParameterI4iNV ( uint target,uint index,int x,int y,int z,int w ){if (__glProgramEnvParameterI4iNV!=null) __glProgramEnvParameterI4iNV(target,index,x,y,z,w);else throw new NotImplementedException("glProgramEnvParameterI4iNV");}
public static void glProgramEnvParameterI4ivNV ( uint target,uint index,int[] _params ){if (__glProgramEnvParameterI4ivNV!=null) __glProgramEnvParameterI4ivNV(target,index,_params);else throw new NotImplementedException("glProgramEnvParameterI4ivNV");}
public static void glProgramEnvParameterI4uiNV ( uint target,uint index,uint x,uint y,uint z,uint w ){if (__glProgramEnvParameterI4uiNV!=null) __glProgramEnvParameterI4uiNV(target,index,x,y,z,w);else throw new NotImplementedException("glProgramEnvParameterI4uiNV");}
public static void glProgramEnvParameterI4uivNV ( uint target,uint index,uint[] _params ){if (__glProgramEnvParameterI4uivNV!=null) __glProgramEnvParameterI4uivNV(target,index,_params);else throw new NotImplementedException("glProgramEnvParameterI4uivNV");}
public static void glProgramEnvParametersI4ivNV ( uint target,uint index,int count,int[] _params ){if (__glProgramEnvParametersI4ivNV!=null) __glProgramEnvParametersI4ivNV(target,index,count,_params);else throw new NotImplementedException("glProgramEnvParametersI4ivNV");}
public static void glProgramEnvParametersI4uivNV ( uint target,uint index,int count,uint[] _params ){if (__glProgramEnvParametersI4uivNV!=null) __glProgramEnvParametersI4uivNV(target,index,count,_params);else throw new NotImplementedException("glProgramEnvParametersI4uivNV");}
public static void glProgramLocalParameterI4iNV ( uint target,uint index,int x,int y,int z,int w ){if (__glProgramLocalParameterI4iNV!=null) __glProgramLocalParameterI4iNV(target,index,x,y,z,w);else throw new NotImplementedException("glProgramLocalParameterI4iNV");}
public static void glProgramLocalParameterI4ivNV ( uint target,uint index,int[] _params ){if (__glProgramLocalParameterI4ivNV!=null) __glProgramLocalParameterI4ivNV(target,index,_params);else throw new NotImplementedException("glProgramLocalParameterI4ivNV");}
public static void glProgramLocalParameterI4uiNV ( uint target,uint index,uint x,uint y,uint z,uint w ){if (__glProgramLocalParameterI4uiNV!=null) __glProgramLocalParameterI4uiNV(target,index,x,y,z,w);else throw new NotImplementedException("glProgramLocalParameterI4uiNV");}
public static void glProgramLocalParameterI4uivNV ( uint target,uint index,uint[] _params ){if (__glProgramLocalParameterI4uivNV!=null) __glProgramLocalParameterI4uivNV(target,index,_params);else throw new NotImplementedException("glProgramLocalParameterI4uivNV");}
public static void glProgramLocalParametersI4ivNV ( uint target,uint index,int count,int[] _params ){if (__glProgramLocalParametersI4ivNV!=null) __glProgramLocalParametersI4ivNV(target,index,count,_params);else throw new NotImplementedException("glProgramLocalParametersI4ivNV");}
public static void glProgramLocalParametersI4uivNV ( uint target,uint index,int count,uint[] _params ){if (__glProgramLocalParametersI4uivNV!=null) __glProgramLocalParametersI4uivNV(target,index,count,_params);else throw new NotImplementedException("glProgramLocalParametersI4uivNV");}
public static void glGetUniformi64vNV ( uint program,int location,IntPtr _params ){if (__glGetUniformi64vNV!=null) __glGetUniformi64vNV(program,location,_params);else throw new NotImplementedException("glGetUniformi64vNV");}
public static void glGetUniformui64vNV ( uint program,int location,IntPtr _params ){if (__glGetUniformui64vNV!=null) __glGetUniformui64vNV(program,location,_params);else throw new NotImplementedException("glGetUniformui64vNV");}
public static void glProgramUniform1i64NV ( uint program,int location,IntPtr x ){if (__glProgramUniform1i64NV!=null) __glProgramUniform1i64NV(program,location,x);else throw new NotImplementedException("glProgramUniform1i64NV");}
public static void glProgramUniform1i64vNV ( uint program,int location,int count,IntPtr value ){if (__glProgramUniform1i64vNV!=null) __glProgramUniform1i64vNV(program,location,count,value);else throw new NotImplementedException("glProgramUniform1i64vNV");}
public static void glProgramUniform1ui64NV ( uint program,int location,IntPtr x ){if (__glProgramUniform1ui64NV!=null) __glProgramUniform1ui64NV(program,location,x);else throw new NotImplementedException("glProgramUniform1ui64NV");}
public static void glProgramUniform1ui64vNV ( uint program,int location,int count,IntPtr value ){if (__glProgramUniform1ui64vNV!=null) __glProgramUniform1ui64vNV(program,location,count,value);else throw new NotImplementedException("glProgramUniform1ui64vNV");}
public static void glProgramUniform2i64NV ( uint program,int location,IntPtr x,IntPtr y ){if (__glProgramUniform2i64NV!=null) __glProgramUniform2i64NV(program,location,x,y);else throw new NotImplementedException("glProgramUniform2i64NV");}
public static void glProgramUniform2i64vNV ( uint program,int location,int count,IntPtr value ){if (__glProgramUniform2i64vNV!=null) __glProgramUniform2i64vNV(program,location,count,value);else throw new NotImplementedException("glProgramUniform2i64vNV");}
public static void glProgramUniform2ui64NV ( uint program,int location,IntPtr x,IntPtr y ){if (__glProgramUniform2ui64NV!=null) __glProgramUniform2ui64NV(program,location,x,y);else throw new NotImplementedException("glProgramUniform2ui64NV");}
public static void glProgramUniform2ui64vNV ( uint program,int location,int count,IntPtr value ){if (__glProgramUniform2ui64vNV!=null) __glProgramUniform2ui64vNV(program,location,count,value);else throw new NotImplementedException("glProgramUniform2ui64vNV");}
public static void glProgramUniform3i64NV ( uint program,int location,IntPtr x,IntPtr y,IntPtr z ){if (__glProgramUniform3i64NV!=null) __glProgramUniform3i64NV(program,location,x,y,z);else throw new NotImplementedException("glProgramUniform3i64NV");}
public static void glProgramUniform3i64vNV ( uint program,int location,int count,IntPtr value ){if (__glProgramUniform3i64vNV!=null) __glProgramUniform3i64vNV(program,location,count,value);else throw new NotImplementedException("glProgramUniform3i64vNV");}
public static void glProgramUniform3ui64NV ( uint program,int location,IntPtr x,IntPtr y,IntPtr z ){if (__glProgramUniform3ui64NV!=null) __glProgramUniform3ui64NV(program,location,x,y,z);else throw new NotImplementedException("glProgramUniform3ui64NV");}
public static void glProgramUniform3ui64vNV ( uint program,int location,int count,IntPtr value ){if (__glProgramUniform3ui64vNV!=null) __glProgramUniform3ui64vNV(program,location,count,value);else throw new NotImplementedException("glProgramUniform3ui64vNV");}
public static void glProgramUniform4i64NV ( uint program,int location,IntPtr x,IntPtr y,IntPtr z,IntPtr w ){if (__glProgramUniform4i64NV!=null) __glProgramUniform4i64NV(program,location,x,y,z,w);else throw new NotImplementedException("glProgramUniform4i64NV");}
public static void glProgramUniform4i64vNV ( uint program,int location,int count,IntPtr value ){if (__glProgramUniform4i64vNV!=null) __glProgramUniform4i64vNV(program,location,count,value);else throw new NotImplementedException("glProgramUniform4i64vNV");}
public static void glProgramUniform4ui64NV ( uint program,int location,IntPtr x,IntPtr y,IntPtr z,IntPtr w ){if (__glProgramUniform4ui64NV!=null) __glProgramUniform4ui64NV(program,location,x,y,z,w);else throw new NotImplementedException("glProgramUniform4ui64NV");}
public static void glProgramUniform4ui64vNV ( uint program,int location,int count,IntPtr value ){if (__glProgramUniform4ui64vNV!=null) __glProgramUniform4ui64vNV(program,location,count,value);else throw new NotImplementedException("glProgramUniform4ui64vNV");}
public static void glUniform1i64NV ( int location,IntPtr x ){if (__glUniform1i64NV!=null) __glUniform1i64NV(location,x);else throw new NotImplementedException("glUniform1i64NV");}
public static void glUniform1i64vNV ( int location,int count,IntPtr value ){if (__glUniform1i64vNV!=null) __glUniform1i64vNV(location,count,value);else throw new NotImplementedException("glUniform1i64vNV");}
public static void glUniform1ui64NV ( int location,IntPtr x ){if (__glUniform1ui64NV!=null) __glUniform1ui64NV(location,x);else throw new NotImplementedException("glUniform1ui64NV");}
public static void glUniform1ui64vNV ( int location,int count,IntPtr value ){if (__glUniform1ui64vNV!=null) __glUniform1ui64vNV(location,count,value);else throw new NotImplementedException("glUniform1ui64vNV");}
public static void glUniform2i64NV ( int location,IntPtr x,IntPtr y ){if (__glUniform2i64NV!=null) __glUniform2i64NV(location,x,y);else throw new NotImplementedException("glUniform2i64NV");}
public static void glUniform2i64vNV ( int location,int count,IntPtr value ){if (__glUniform2i64vNV!=null) __glUniform2i64vNV(location,count,value);else throw new NotImplementedException("glUniform2i64vNV");}
public static void glUniform2ui64NV ( int location,IntPtr x,IntPtr y ){if (__glUniform2ui64NV!=null) __glUniform2ui64NV(location,x,y);else throw new NotImplementedException("glUniform2ui64NV");}
public static void glUniform2ui64vNV ( int location,int count,IntPtr value ){if (__glUniform2ui64vNV!=null) __glUniform2ui64vNV(location,count,value);else throw new NotImplementedException("glUniform2ui64vNV");}
public static void glUniform3i64NV ( int location,IntPtr x,IntPtr y,IntPtr z ){if (__glUniform3i64NV!=null) __glUniform3i64NV(location,x,y,z);else throw new NotImplementedException("glUniform3i64NV");}
public static void glUniform3i64vNV ( int location,int count,IntPtr value ){if (__glUniform3i64vNV!=null) __glUniform3i64vNV(location,count,value);else throw new NotImplementedException("glUniform3i64vNV");}
public static void glUniform3ui64NV ( int location,IntPtr x,IntPtr y,IntPtr z ){if (__glUniform3ui64NV!=null) __glUniform3ui64NV(location,x,y,z);else throw new NotImplementedException("glUniform3ui64NV");}
public static void glUniform3ui64vNV ( int location,int count,IntPtr value ){if (__glUniform3ui64vNV!=null) __glUniform3ui64vNV(location,count,value);else throw new NotImplementedException("glUniform3ui64vNV");}
public static void glUniform4i64NV ( int location,IntPtr x,IntPtr y,IntPtr z,IntPtr w ){if (__glUniform4i64NV!=null) __glUniform4i64NV(location,x,y,z,w);else throw new NotImplementedException("glUniform4i64NV");}
public static void glUniform4i64vNV ( int location,int count,IntPtr value ){if (__glUniform4i64vNV!=null) __glUniform4i64vNV(location,count,value);else throw new NotImplementedException("glUniform4i64vNV");}
public static void glUniform4ui64NV ( int location,IntPtr x,IntPtr y,IntPtr z,IntPtr w ){if (__glUniform4ui64NV!=null) __glUniform4ui64NV(location,x,y,z,w);else throw new NotImplementedException("glUniform4ui64NV");}
public static void glUniform4ui64vNV ( int location,int count,IntPtr value ){if (__glUniform4ui64vNV!=null) __glUniform4ui64vNV(location,count,value);else throw new NotImplementedException("glUniform4ui64vNV");}
public static void glColor3hNV ( int red,int green,int blue ){if (__glColor3hNV!=null) __glColor3hNV(red,green,blue);else throw new NotImplementedException("glColor3hNV");}
public static void glColor3hvNV ( IntPtr  v ){if (__glColor3hvNV!=null) __glColor3hvNV(v);else throw new NotImplementedException("glColor3hvNV");}
public static void glColor4hNV ( int red,int green,int blue,int alpha ){if (__glColor4hNV!=null) __glColor4hNV(red,green,blue,alpha);else throw new NotImplementedException("glColor4hNV");}
public static void glColor4hvNV ( IntPtr  v ){if (__glColor4hvNV!=null) __glColor4hvNV(v);else throw new NotImplementedException("glColor4hvNV");}
public static void glFogCoordhNV ( int fog ){if (__glFogCoordhNV!=null) __glFogCoordhNV(fog);else throw new NotImplementedException("glFogCoordhNV");}
public static void glFogCoordhvNV ( IntPtr  fog ){if (__glFogCoordhvNV!=null) __glFogCoordhvNV(fog);else throw new NotImplementedException("glFogCoordhvNV");}
public static void glMultiTexCoord1hNV ( uint target,int s ){if (__glMultiTexCoord1hNV!=null) __glMultiTexCoord1hNV(target,s);else throw new NotImplementedException("glMultiTexCoord1hNV");}
public static void glMultiTexCoord1hvNV ( uint target,IntPtr  v ){if (__glMultiTexCoord1hvNV!=null) __glMultiTexCoord1hvNV(target,v);else throw new NotImplementedException("glMultiTexCoord1hvNV");}
public static void glMultiTexCoord2hNV ( uint target,int s,int t ){if (__glMultiTexCoord2hNV!=null) __glMultiTexCoord2hNV(target,s,t);else throw new NotImplementedException("glMultiTexCoord2hNV");}
public static void glMultiTexCoord2hvNV ( uint target,IntPtr  v ){if (__glMultiTexCoord2hvNV!=null) __glMultiTexCoord2hvNV(target,v);else throw new NotImplementedException("glMultiTexCoord2hvNV");}
public static void glMultiTexCoord3hNV ( uint target,int s,int t,int r ){if (__glMultiTexCoord3hNV!=null) __glMultiTexCoord3hNV(target,s,t,r);else throw new NotImplementedException("glMultiTexCoord3hNV");}
public static void glMultiTexCoord3hvNV ( uint target,IntPtr  v ){if (__glMultiTexCoord3hvNV!=null) __glMultiTexCoord3hvNV(target,v);else throw new NotImplementedException("glMultiTexCoord3hvNV");}
public static void glMultiTexCoord4hNV ( uint target,int s,int t,int r,int q ){if (__glMultiTexCoord4hNV!=null) __glMultiTexCoord4hNV(target,s,t,r,q);else throw new NotImplementedException("glMultiTexCoord4hNV");}
public static void glMultiTexCoord4hvNV ( uint target,IntPtr  v ){if (__glMultiTexCoord4hvNV!=null) __glMultiTexCoord4hvNV(target,v);else throw new NotImplementedException("glMultiTexCoord4hvNV");}
public static void glNormal3hNV ( int nx,int ny,int nz ){if (__glNormal3hNV!=null) __glNormal3hNV(nx,ny,nz);else throw new NotImplementedException("glNormal3hNV");}
public static void glNormal3hvNV ( IntPtr  v ){if (__glNormal3hvNV!=null) __glNormal3hvNV(v);else throw new NotImplementedException("glNormal3hvNV");}
public static void glSecondaryColor3hNV ( int red,int green,int blue ){if (__glSecondaryColor3hNV!=null) __glSecondaryColor3hNV(red,green,blue);else throw new NotImplementedException("glSecondaryColor3hNV");}
public static void glSecondaryColor3hvNV ( IntPtr  v ){if (__glSecondaryColor3hvNV!=null) __glSecondaryColor3hvNV(v);else throw new NotImplementedException("glSecondaryColor3hvNV");}
public static void glTexCoord1hNV ( int s ){if (__glTexCoord1hNV!=null) __glTexCoord1hNV(s);else throw new NotImplementedException("glTexCoord1hNV");}
public static void glTexCoord1hvNV ( IntPtr  v ){if (__glTexCoord1hvNV!=null) __glTexCoord1hvNV(v);else throw new NotImplementedException("glTexCoord1hvNV");}
public static void glTexCoord2hNV ( int s,int t ){if (__glTexCoord2hNV!=null) __glTexCoord2hNV(s,t);else throw new NotImplementedException("glTexCoord2hNV");}
public static void glTexCoord2hvNV ( IntPtr  v ){if (__glTexCoord2hvNV!=null) __glTexCoord2hvNV(v);else throw new NotImplementedException("glTexCoord2hvNV");}
public static void glTexCoord3hNV ( int s,int t,int r ){if (__glTexCoord3hNV!=null) __glTexCoord3hNV(s,t,r);else throw new NotImplementedException("glTexCoord3hNV");}
public static void glTexCoord3hvNV ( IntPtr  v ){if (__glTexCoord3hvNV!=null) __glTexCoord3hvNV(v);else throw new NotImplementedException("glTexCoord3hvNV");}
public static void glTexCoord4hNV ( int s,int t,int r,int q ){if (__glTexCoord4hNV!=null) __glTexCoord4hNV(s,t,r,q);else throw new NotImplementedException("glTexCoord4hNV");}
public static void glTexCoord4hvNV ( IntPtr  v ){if (__glTexCoord4hvNV!=null) __glTexCoord4hvNV(v);else throw new NotImplementedException("glTexCoord4hvNV");}
public static void glVertex2hNV ( int x,int y ){if (__glVertex2hNV!=null) __glVertex2hNV(x,y);else throw new NotImplementedException("glVertex2hNV");}
public static void glVertex2hvNV ( IntPtr  v ){if (__glVertex2hvNV!=null) __glVertex2hvNV(v);else throw new NotImplementedException("glVertex2hvNV");}
public static void glVertex3hNV ( int x,int y,int z ){if (__glVertex3hNV!=null) __glVertex3hNV(x,y,z);else throw new NotImplementedException("glVertex3hNV");}
public static void glVertex3hvNV ( IntPtr  v ){if (__glVertex3hvNV!=null) __glVertex3hvNV(v);else throw new NotImplementedException("glVertex3hvNV");}
public static void glVertex4hNV ( int x,int y,int z,int w ){if (__glVertex4hNV!=null) __glVertex4hNV(x,y,z,w);else throw new NotImplementedException("glVertex4hNV");}
public static void glVertex4hvNV ( IntPtr  v ){if (__glVertex4hvNV!=null) __glVertex4hvNV(v);else throw new NotImplementedException("glVertex4hvNV");}
public static void glVertexAttrib1hNV ( uint index,int x ){if (__glVertexAttrib1hNV!=null) __glVertexAttrib1hNV(index,x);else throw new NotImplementedException("glVertexAttrib1hNV");}
public static void glVertexAttrib1hvNV ( uint index,IntPtr  v ){if (__glVertexAttrib1hvNV!=null) __glVertexAttrib1hvNV(index,v);else throw new NotImplementedException("glVertexAttrib1hvNV");}
public static void glVertexAttrib2hNV ( uint index,int x,int y ){if (__glVertexAttrib2hNV!=null) __glVertexAttrib2hNV(index,x,y);else throw new NotImplementedException("glVertexAttrib2hNV");}
public static void glVertexAttrib2hvNV ( uint index,IntPtr  v ){if (__glVertexAttrib2hvNV!=null) __glVertexAttrib2hvNV(index,v);else throw new NotImplementedException("glVertexAttrib2hvNV");}
public static void glVertexAttrib3hNV ( uint index,int x,int y,int z ){if (__glVertexAttrib3hNV!=null) __glVertexAttrib3hNV(index,x,y,z);else throw new NotImplementedException("glVertexAttrib3hNV");}
public static void glVertexAttrib3hvNV ( uint index,IntPtr  v ){if (__glVertexAttrib3hvNV!=null) __glVertexAttrib3hvNV(index,v);else throw new NotImplementedException("glVertexAttrib3hvNV");}
public static void glVertexAttrib4hNV ( uint index,int x,int y,int z,int w ){if (__glVertexAttrib4hNV!=null) __glVertexAttrib4hNV(index,x,y,z,w);else throw new NotImplementedException("glVertexAttrib4hNV");}
public static void glVertexAttrib4hvNV ( uint index,IntPtr  v ){if (__glVertexAttrib4hvNV!=null) __glVertexAttrib4hvNV(index,v);else throw new NotImplementedException("glVertexAttrib4hvNV");}
public static void glVertexAttribs1hvNV ( uint index,int n,IntPtr  v ){if (__glVertexAttribs1hvNV!=null) __glVertexAttribs1hvNV(index,n,v);else throw new NotImplementedException("glVertexAttribs1hvNV");}
public static void glVertexAttribs2hvNV ( uint index,int n,IntPtr  v ){if (__glVertexAttribs2hvNV!=null) __glVertexAttribs2hvNV(index,n,v);else throw new NotImplementedException("glVertexAttribs2hvNV");}
public static void glVertexAttribs3hvNV ( uint index,int n,IntPtr  v ){if (__glVertexAttribs3hvNV!=null) __glVertexAttribs3hvNV(index,n,v);else throw new NotImplementedException("glVertexAttribs3hvNV");}
public static void glVertexAttribs4hvNV ( uint index,int n,IntPtr  v ){if (__glVertexAttribs4hvNV!=null) __glVertexAttribs4hvNV(index,n,v);else throw new NotImplementedException("glVertexAttribs4hvNV");}
public static void glVertexWeighthNV ( int weight ){if (__glVertexWeighthNV!=null) __glVertexWeighthNV(weight);else throw new NotImplementedException("glVertexWeighthNV");}
public static void glVertexWeighthvNV ( IntPtr  weight ){if (__glVertexWeighthvNV!=null) __glVertexWeighthvNV(weight);else throw new NotImplementedException("glVertexWeighthvNV");}
public static void glBeginOcclusionQueryNV ( uint id ){if (__glBeginOcclusionQueryNV!=null) __glBeginOcclusionQueryNV(id);else throw new NotImplementedException("glBeginOcclusionQueryNV");}
public static void glDeleteOcclusionQueriesNV ( int n,uint[]  ids ){if (__glDeleteOcclusionQueriesNV!=null) __glDeleteOcclusionQueriesNV(n,ids);else throw new NotImplementedException("glDeleteOcclusionQueriesNV");}
public static void glEndOcclusionQueryNV (  ){if (__glEndOcclusionQueryNV!=null) __glEndOcclusionQueryNV();else throw new NotImplementedException("glEndOcclusionQueryNV");}
public static void glGenOcclusionQueriesNV ( int n,IntPtr ids ){if (__glGenOcclusionQueriesNV!=null) __glGenOcclusionQueriesNV(n,ids);else throw new NotImplementedException("glGenOcclusionQueriesNV");}
public static void glGetOcclusionQueryivNV ( uint id,uint pname,IntPtr _params ){if (__glGetOcclusionQueryivNV!=null) __glGetOcclusionQueryivNV(id,pname,_params);else throw new NotImplementedException("glGetOcclusionQueryivNV");}
public static void glGetOcclusionQueryuivNV ( uint id,uint pname,IntPtr _params ){if (__glGetOcclusionQueryuivNV!=null) __glGetOcclusionQueryuivNV(id,pname,_params);else throw new NotImplementedException("glGetOcclusionQueryuivNV");}
public static bool glIsOcclusionQueryNV ( uint id ){if (__glIsOcclusionQueryNV!=null) return __glIsOcclusionQueryNV(id);else throw new NotImplementedException("glIsOcclusionQueryNV");}
public static void glProgramBufferParametersIivNV ( uint target,uint buffer,uint index,int count,int[] _params ){if (__glProgramBufferParametersIivNV!=null) __glProgramBufferParametersIivNV(target,buffer,index,count,_params);else throw new NotImplementedException("glProgramBufferParametersIivNV");}
public static void glProgramBufferParametersIuivNV ( uint target,uint buffer,uint index,int count,uint[] _params ){if (__glProgramBufferParametersIuivNV!=null) __glProgramBufferParametersIuivNV(target,buffer,index,count,_params);else throw new NotImplementedException("glProgramBufferParametersIuivNV");}
public static void glProgramBufferParametersfvNV ( uint target,uint buffer,uint index,int count,float[] _params ){if (__glProgramBufferParametersfvNV!=null) __glProgramBufferParametersfvNV(target,buffer,index,count,_params);else throw new NotImplementedException("glProgramBufferParametersfvNV");}
public static void glFlushPixelDataRangeNV ( uint target ){if (__glFlushPixelDataRangeNV!=null) __glFlushPixelDataRangeNV(target);else throw new NotImplementedException("glFlushPixelDataRangeNV");}
public static void glPixelDataRangeNV ( uint target,int length,IntPtr pointer ){if (__glPixelDataRangeNV!=null) __glPixelDataRangeNV(target,length,pointer);else throw new NotImplementedException("glPixelDataRangeNV");}
public static void glPointParameteriNV ( uint pname,int param ){if (__glPointParameteriNV!=null) __glPointParameteriNV(pname,param);else throw new NotImplementedException("glPointParameteriNV");}
public static void glPointParameterivNV ( uint pname,int[]  _params ){if (__glPointParameterivNV!=null) __glPointParameterivNV(pname,_params);else throw new NotImplementedException("glPointParameterivNV");}
public static void glGetVideoi64vNV ( uint video_slot,uint pname,IntPtr _params ){if (__glGetVideoi64vNV!=null) __glGetVideoi64vNV(video_slot,pname,_params);else throw new NotImplementedException("glGetVideoi64vNV");}
public static void glGetVideoivNV ( uint video_slot,uint pname,IntPtr _params ){if (__glGetVideoivNV!=null) __glGetVideoivNV(video_slot,pname,_params);else throw new NotImplementedException("glGetVideoivNV");}
public static void glGetVideoui64vNV ( uint video_slot,uint pname,IntPtr _params ){if (__glGetVideoui64vNV!=null) __glGetVideoui64vNV(video_slot,pname,_params);else throw new NotImplementedException("glGetVideoui64vNV");}
public static void glGetVideouivNV ( uint video_slot,uint pname,IntPtr _params ){if (__glGetVideouivNV!=null) __glGetVideouivNV(video_slot,pname,_params);else throw new NotImplementedException("glGetVideouivNV");}
public static void glPresentFrameDualFillNV ( uint video_slot,IntPtr minPresentTime,uint beginPresentTimeId,uint presentDurationId,uint type,uint target0,uint fill0,uint target1,uint fill1,uint target2,uint fill2,uint target3,uint fill3 ){if (__glPresentFrameDualFillNV!=null) __glPresentFrameDualFillNV(video_slot,minPresentTime,beginPresentTimeId,presentDurationId,type,target0,fill0,target1,fill1,target2,fill2,target3,fill3);else throw new NotImplementedException("glPresentFrameDualFillNV");}
public static void glPresentFrameKeyedNV ( uint video_slot,IntPtr minPresentTime,uint beginPresentTimeId,uint presentDurationId,uint type,uint target0,uint fill0,uint key0,uint target1,uint fill1,uint key1 ){if (__glPresentFrameKeyedNV!=null) __glPresentFrameKeyedNV(video_slot,minPresentTime,beginPresentTimeId,presentDurationId,type,target0,fill0,key0,target1,fill1,key1);else throw new NotImplementedException("glPresentFrameKeyedNV");}
public static void glPrimitiveRestartIndexNV ( uint index ){if (__glPrimitiveRestartIndexNV!=null) __glPrimitiveRestartIndexNV(index);else throw new NotImplementedException("glPrimitiveRestartIndexNV");}
public static void glPrimitiveRestartNV (  ){if (__glPrimitiveRestartNV!=null) __glPrimitiveRestartNV();else throw new NotImplementedException("glPrimitiveRestartNV");}
public static void glCombinerInputNV ( uint stage,uint portion,uint variable,uint input,uint mapping,uint componentUsage ){if (__glCombinerInputNV!=null) __glCombinerInputNV(stage,portion,variable,input,mapping,componentUsage);else throw new NotImplementedException("glCombinerInputNV");}
public static void glCombinerOutputNV ( uint stage,uint portion,uint abOutput,uint cdOutput,uint sumOutput,uint scale,uint bias,bool abDotProduct,bool cdDotProduct,bool muxSum ){if (__glCombinerOutputNV!=null) __glCombinerOutputNV(stage,portion,abOutput,cdOutput,sumOutput,scale,bias,abDotProduct,cdDotProduct,muxSum);else throw new NotImplementedException("glCombinerOutputNV");}
public static void glCombinerParameterfNV ( uint pname,float param ){if (__glCombinerParameterfNV!=null) __glCombinerParameterfNV(pname,param);else throw new NotImplementedException("glCombinerParameterfNV");}
public static void glCombinerParameterfvNV ( uint pname,float[]  _params ){if (__glCombinerParameterfvNV!=null) __glCombinerParameterfvNV(pname,_params);else throw new NotImplementedException("glCombinerParameterfvNV");}
public static void glCombinerParameteriNV ( uint pname,int param ){if (__glCombinerParameteriNV!=null) __glCombinerParameteriNV(pname,param);else throw new NotImplementedException("glCombinerParameteriNV");}
public static void glCombinerParameterivNV ( uint pname,int[]  _params ){if (__glCombinerParameterivNV!=null) __glCombinerParameterivNV(pname,_params);else throw new NotImplementedException("glCombinerParameterivNV");}
public static void glFinalCombinerInputNV ( uint variable,uint input,uint mapping,uint componentUsage ){if (__glFinalCombinerInputNV!=null) __glFinalCombinerInputNV(variable,input,mapping,componentUsage);else throw new NotImplementedException("glFinalCombinerInputNV");}
public static void glGetCombinerInputParameterfvNV ( uint stage,uint portion,uint variable,uint pname,IntPtr _params ){if (__glGetCombinerInputParameterfvNV!=null) __glGetCombinerInputParameterfvNV(stage,portion,variable,pname,_params);else throw new NotImplementedException("glGetCombinerInputParameterfvNV");}
public static void glGetCombinerInputParameterivNV ( uint stage,uint portion,uint variable,uint pname,IntPtr _params ){if (__glGetCombinerInputParameterivNV!=null) __glGetCombinerInputParameterivNV(stage,portion,variable,pname,_params);else throw new NotImplementedException("glGetCombinerInputParameterivNV");}
public static void glGetCombinerOutputParameterfvNV ( uint stage,uint portion,uint pname,IntPtr _params ){if (__glGetCombinerOutputParameterfvNV!=null) __glGetCombinerOutputParameterfvNV(stage,portion,pname,_params);else throw new NotImplementedException("glGetCombinerOutputParameterfvNV");}
public static void glGetCombinerOutputParameterivNV ( uint stage,uint portion,uint pname,IntPtr _params ){if (__glGetCombinerOutputParameterivNV!=null) __glGetCombinerOutputParameterivNV(stage,portion,pname,_params);else throw new NotImplementedException("glGetCombinerOutputParameterivNV");}
public static void glGetFinalCombinerInputParameterfvNV ( uint variable,uint pname,IntPtr _params ){if (__glGetFinalCombinerInputParameterfvNV!=null) __glGetFinalCombinerInputParameterfvNV(variable,pname,_params);else throw new NotImplementedException("glGetFinalCombinerInputParameterfvNV");}
public static void glGetFinalCombinerInputParameterivNV ( uint variable,uint pname,IntPtr _params ){if (__glGetFinalCombinerInputParameterivNV!=null) __glGetFinalCombinerInputParameterivNV(variable,pname,_params);else throw new NotImplementedException("glGetFinalCombinerInputParameterivNV");}
public static void glCombinerStageParameterfvNV ( uint stage,uint pname,float[]  _params ){if (__glCombinerStageParameterfvNV!=null) __glCombinerStageParameterfvNV(stage,pname,_params);else throw new NotImplementedException("glCombinerStageParameterfvNV");}
public static void glGetCombinerStageParameterfvNV ( uint stage,uint pname,IntPtr _params ){if (__glGetCombinerStageParameterfvNV!=null) __glGetCombinerStageParameterfvNV(stage,pname,_params);else throw new NotImplementedException("glGetCombinerStageParameterfvNV");}
public static void glGetBufferParameterui64vNV ( uint target,uint pname,IntPtr _params ){if (__glGetBufferParameterui64vNV!=null) __glGetBufferParameterui64vNV(target,pname,_params);else throw new NotImplementedException("glGetBufferParameterui64vNV");}
public static void glGetIntegerui64vNV ( uint value,IntPtr result ){if (__glGetIntegerui64vNV!=null) __glGetIntegerui64vNV(value,result);else throw new NotImplementedException("glGetIntegerui64vNV");}
public static void glGetNamedBufferParameterui64vNV ( uint buffer,uint pname,IntPtr _params ){if (__glGetNamedBufferParameterui64vNV!=null) __glGetNamedBufferParameterui64vNV(buffer,pname,_params);else throw new NotImplementedException("glGetNamedBufferParameterui64vNV");}
public static bool glIsBufferResidentNV ( uint target ){if (__glIsBufferResidentNV!=null) return __glIsBufferResidentNV(target);else throw new NotImplementedException("glIsBufferResidentNV");}
public static bool glIsNamedBufferResidentNV ( uint buffer ){if (__glIsNamedBufferResidentNV!=null) return __glIsNamedBufferResidentNV(buffer);else throw new NotImplementedException("glIsNamedBufferResidentNV");}
public static void glMakeBufferNonResidentNV ( uint target ){if (__glMakeBufferNonResidentNV!=null) __glMakeBufferNonResidentNV(target);else throw new NotImplementedException("glMakeBufferNonResidentNV");}
public static void glMakeBufferResidentNV ( uint target,uint access ){if (__glMakeBufferResidentNV!=null) __glMakeBufferResidentNV(target,access);else throw new NotImplementedException("glMakeBufferResidentNV");}
public static void glMakeNamedBufferNonResidentNV ( uint buffer ){if (__glMakeNamedBufferNonResidentNV!=null) __glMakeNamedBufferNonResidentNV(buffer);else throw new NotImplementedException("glMakeNamedBufferNonResidentNV");}
public static void glMakeNamedBufferResidentNV ( uint buffer,uint access ){if (__glMakeNamedBufferResidentNV!=null) __glMakeNamedBufferResidentNV(buffer,access);else throw new NotImplementedException("glMakeNamedBufferResidentNV");}
public static void glProgramUniformui64NV ( uint program,int location,IntPtr value ){if (__glProgramUniformui64NV!=null) __glProgramUniformui64NV(program,location,value);else throw new NotImplementedException("glProgramUniformui64NV");}
public static void glProgramUniformui64vNV ( uint program,int location,int count,IntPtr value ){if (__glProgramUniformui64vNV!=null) __glProgramUniformui64vNV(program,location,count,value);else throw new NotImplementedException("glProgramUniformui64vNV");}
public static void glUniformui64NV ( int location,IntPtr value ){if (__glUniformui64NV!=null) __glUniformui64NV(location,value);else throw new NotImplementedException("glUniformui64NV");}
public static void glUniformui64vNV ( int location,int count,IntPtr value ){if (__glUniformui64vNV!=null) __glUniformui64vNV(location,count,value);else throw new NotImplementedException("glUniformui64vNV");}
public static void glTextureBarrierNV (  ){if (__glTextureBarrierNV!=null) __glTextureBarrierNV();else throw new NotImplementedException("glTextureBarrierNV");}
public static void glTexImage2DMultisampleCoverageNV ( uint target,int coverageSamples,int colorSamples,int internalFormat,int width,int height,bool fixedSampleLocations ){if (__glTexImage2DMultisampleCoverageNV!=null) __glTexImage2DMultisampleCoverageNV(target,coverageSamples,colorSamples,internalFormat,width,height,fixedSampleLocations);else throw new NotImplementedException("glTexImage2DMultisampleCoverageNV");}
public static void glTexImage3DMultisampleCoverageNV ( uint target,int coverageSamples,int colorSamples,int internalFormat,int width,int height,int depth,bool fixedSampleLocations ){if (__glTexImage3DMultisampleCoverageNV!=null) __glTexImage3DMultisampleCoverageNV(target,coverageSamples,colorSamples,internalFormat,width,height,depth,fixedSampleLocations);else throw new NotImplementedException("glTexImage3DMultisampleCoverageNV");}
public static void glTextureImage2DMultisampleCoverageNV ( uint texture,uint target,int coverageSamples,int colorSamples,int internalFormat,int width,int height,bool fixedSampleLocations ){if (__glTextureImage2DMultisampleCoverageNV!=null) __glTextureImage2DMultisampleCoverageNV(texture,target,coverageSamples,colorSamples,internalFormat,width,height,fixedSampleLocations);else throw new NotImplementedException("glTextureImage2DMultisampleCoverageNV");}
public static void glTextureImage2DMultisampleNV ( uint texture,uint target,int samples,int internalFormat,int width,int height,bool fixedSampleLocations ){if (__glTextureImage2DMultisampleNV!=null) __glTextureImage2DMultisampleNV(texture,target,samples,internalFormat,width,height,fixedSampleLocations);else throw new NotImplementedException("glTextureImage2DMultisampleNV");}
public static void glTextureImage3DMultisampleCoverageNV ( uint texture,uint target,int coverageSamples,int colorSamples,int internalFormat,int width,int height,int depth,bool fixedSampleLocations ){if (__glTextureImage3DMultisampleCoverageNV!=null) __glTextureImage3DMultisampleCoverageNV(texture,target,coverageSamples,colorSamples,internalFormat,width,height,depth,fixedSampleLocations);else throw new NotImplementedException("glTextureImage3DMultisampleCoverageNV");}
public static void glTextureImage3DMultisampleNV ( uint texture,uint target,int samples,int internalFormat,int width,int height,int depth,bool fixedSampleLocations ){if (__glTextureImage3DMultisampleNV!=null) __glTextureImage3DMultisampleNV(texture,target,samples,internalFormat,width,height,depth,fixedSampleLocations);else throw new NotImplementedException("glTextureImage3DMultisampleNV");}
public static void glActiveVaryingNV ( uint program,string name ){if (__glActiveVaryingNV!=null) __glActiveVaryingNV(program,name);else throw new NotImplementedException("glActiveVaryingNV");}
public static void glBeginTransformFeedbackNV ( uint primitiveMode ){if (__glBeginTransformFeedbackNV!=null) __glBeginTransformFeedbackNV(primitiveMode);else throw new NotImplementedException("glBeginTransformFeedbackNV");}
public static void glBindBufferBaseNV ( uint target,uint index,uint buffer ){if (__glBindBufferBaseNV!=null) __glBindBufferBaseNV(target,index,buffer);else throw new NotImplementedException("glBindBufferBaseNV");}
public static void glBindBufferOffsetNV ( uint target,uint index,uint buffer,IntPtr offset ){if (__glBindBufferOffsetNV!=null) __glBindBufferOffsetNV(target,index,buffer,offset);else throw new NotImplementedException("glBindBufferOffsetNV");}
public static void glBindBufferRangeNV ( uint target,uint index,uint buffer,IntPtr offset,IntPtr size ){if (__glBindBufferRangeNV!=null) __glBindBufferRangeNV(target,index,buffer,offset,size);else throw new NotImplementedException("glBindBufferRangeNV");}
public static void glEndTransformFeedbackNV (  ){if (__glEndTransformFeedbackNV!=null) __glEndTransformFeedbackNV();else throw new NotImplementedException("glEndTransformFeedbackNV");}
public static void glGetActiveVaryingNV ( uint program,uint index,int bufSize,IntPtr length,IntPtr size,IntPtr type,IntPtr name ){if (__glGetActiveVaryingNV!=null) __glGetActiveVaryingNV(program,index,bufSize,length,size,type,name);else throw new NotImplementedException("glGetActiveVaryingNV");}
public static void glGetTransformFeedbackVaryingNV ( uint program,uint index,IntPtr location ){if (__glGetTransformFeedbackVaryingNV!=null) __glGetTransformFeedbackVaryingNV(program,index,location);else throw new NotImplementedException("glGetTransformFeedbackVaryingNV");}
public static int glGetVaryingLocationNV ( uint program,string name ){if (__glGetVaryingLocationNV!=null) return __glGetVaryingLocationNV(program,name);else throw new NotImplementedException("glGetVaryingLocationNV");}
public static void glTransformFeedbackAttribsNV ( uint count,int[] attribs,uint bufferMode ){if (__glTransformFeedbackAttribsNV!=null) __glTransformFeedbackAttribsNV(count,attribs,bufferMode);else throw new NotImplementedException("glTransformFeedbackAttribsNV");}
public static void glTransformFeedbackVaryingsNV ( uint program,int count,int[] locations,uint bufferMode ){if (__glTransformFeedbackVaryingsNV!=null) __glTransformFeedbackVaryingsNV(program,count,locations,bufferMode);else throw new NotImplementedException("glTransformFeedbackVaryingsNV");}
public static void glBindTransformFeedbackNV ( uint target,uint id ){if (__glBindTransformFeedbackNV!=null) __glBindTransformFeedbackNV(target,id);else throw new NotImplementedException("glBindTransformFeedbackNV");}
public static void glDeleteTransformFeedbacksNV ( int n,uint[]  ids ){if (__glDeleteTransformFeedbacksNV!=null) __glDeleteTransformFeedbacksNV(n,ids);else throw new NotImplementedException("glDeleteTransformFeedbacksNV");}
public static void glDrawTransformFeedbackNV ( uint mode,uint id ){if (__glDrawTransformFeedbackNV!=null) __glDrawTransformFeedbackNV(mode,id);else throw new NotImplementedException("glDrawTransformFeedbackNV");}
public static void glGenTransformFeedbacksNV ( int n,IntPtr ids ){if (__glGenTransformFeedbacksNV!=null) __glGenTransformFeedbacksNV(n,ids);else throw new NotImplementedException("glGenTransformFeedbacksNV");}
public static bool glIsTransformFeedbackNV ( uint id ){if (__glIsTransformFeedbackNV!=null) return __glIsTransformFeedbackNV(id);else throw new NotImplementedException("glIsTransformFeedbackNV");}
public static void glPauseTransformFeedbackNV (  ){if (__glPauseTransformFeedbackNV!=null) __glPauseTransformFeedbackNV();else throw new NotImplementedException("glPauseTransformFeedbackNV");}
public static void glResumeTransformFeedbackNV (  ){if (__glResumeTransformFeedbackNV!=null) __glResumeTransformFeedbackNV();else throw new NotImplementedException("glResumeTransformFeedbackNV");}
public static void glVDPAUFiniNV (  ){if (__glVDPAUFiniNV!=null) __glVDPAUFiniNV();else throw new NotImplementedException("glVDPAUFiniNV");}
public static void glVDPAUGetSurfaceivNV ( IntPtr surface,uint pname,int bufSize,IntPtr length,IntPtr values ){if (__glVDPAUGetSurfaceivNV!=null) __glVDPAUGetSurfaceivNV(surface,pname,bufSize,length,values);else throw new NotImplementedException("glVDPAUGetSurfaceivNV");}
public static void glVDPAUInitNV ( IntPtr  vdpDevice,IntPtr getProcAddress ){if (__glVDPAUInitNV!=null) __glVDPAUInitNV(vdpDevice,getProcAddress);else throw new NotImplementedException("glVDPAUInitNV");}
public static void glVDPAUIsSurfaceNV ( IntPtr surface ){if (__glVDPAUIsSurfaceNV!=null) __glVDPAUIsSurfaceNV(surface);else throw new NotImplementedException("glVDPAUIsSurfaceNV");}
public static void glVDPAUMapSurfacesNV ( int numSurfaces,IntPtr surfaces ){if (__glVDPAUMapSurfacesNV!=null) __glVDPAUMapSurfacesNV(numSurfaces,surfaces);else throw new NotImplementedException("glVDPAUMapSurfacesNV");}
public static IntPtr glVDPAURegisterOutputSurfaceNV ( IntPtr  vdpSurface,uint target,int numTextureNames,uint[] textureNames ){if (__glVDPAURegisterOutputSurfaceNV!=null) return __glVDPAURegisterOutputSurfaceNV(vdpSurface,target,numTextureNames,textureNames);else throw new NotImplementedException("glVDPAURegisterOutputSurfaceNV");}
public static IntPtr glVDPAURegisterVideoSurfaceNV ( IntPtr  vdpSurface,uint target,int numTextureNames,uint[] textureNames ){if (__glVDPAURegisterVideoSurfaceNV!=null) return __glVDPAURegisterVideoSurfaceNV(vdpSurface,target,numTextureNames,textureNames);else throw new NotImplementedException("glVDPAURegisterVideoSurfaceNV");}
public static void glVDPAUSurfaceAccessNV ( IntPtr surface,uint access ){if (__glVDPAUSurfaceAccessNV!=null) __glVDPAUSurfaceAccessNV(surface,access);else throw new NotImplementedException("glVDPAUSurfaceAccessNV");}
public static void glVDPAUUnmapSurfacesNV ( int numSurface,IntPtr surfaces ){if (__glVDPAUUnmapSurfacesNV!=null) __glVDPAUUnmapSurfacesNV(numSurface,surfaces);else throw new NotImplementedException("glVDPAUUnmapSurfacesNV");}
public static void glVDPAUUnregisterSurfaceNV ( IntPtr surface ){if (__glVDPAUUnregisterSurfaceNV!=null) __glVDPAUUnregisterSurfaceNV(surface);else throw new NotImplementedException("glVDPAUUnregisterSurfaceNV");}
public static void glFlushVertexArrayRangeNV (  ){if (__glFlushVertexArrayRangeNV!=null) __glFlushVertexArrayRangeNV();else throw new NotImplementedException("glFlushVertexArrayRangeNV");}
public static void glVertexArrayRangeNV ( int length,IntPtr pointer ){if (__glVertexArrayRangeNV!=null) __glVertexArrayRangeNV(length,pointer);else throw new NotImplementedException("glVertexArrayRangeNV");}
public static void glGetVertexAttribLi64vNV ( uint index,uint pname,IntPtr _params ){if (__glGetVertexAttribLi64vNV!=null) __glGetVertexAttribLi64vNV(index,pname,_params);else throw new NotImplementedException("glGetVertexAttribLi64vNV");}
public static void glGetVertexAttribLui64vNV ( uint index,uint pname,IntPtr _params ){if (__glGetVertexAttribLui64vNV!=null) __glGetVertexAttribLui64vNV(index,pname,_params);else throw new NotImplementedException("glGetVertexAttribLui64vNV");}
public static void glVertexAttribL1i64NV ( uint index,IntPtr x ){if (__glVertexAttribL1i64NV!=null) __glVertexAttribL1i64NV(index,x);else throw new NotImplementedException("glVertexAttribL1i64NV");}
public static void glVertexAttribL1i64vNV ( uint index,IntPtr v ){if (__glVertexAttribL1i64vNV!=null) __glVertexAttribL1i64vNV(index,v);else throw new NotImplementedException("glVertexAttribL1i64vNV");}
public static void glVertexAttribL1ui64NV ( uint index,IntPtr x ){if (__glVertexAttribL1ui64NV!=null) __glVertexAttribL1ui64NV(index,x);else throw new NotImplementedException("glVertexAttribL1ui64NV");}
public static void glVertexAttribL1ui64vNV ( uint index,IntPtr v ){if (__glVertexAttribL1ui64vNV!=null) __glVertexAttribL1ui64vNV(index,v);else throw new NotImplementedException("glVertexAttribL1ui64vNV");}
public static void glVertexAttribL2i64NV ( uint index,IntPtr x,IntPtr y ){if (__glVertexAttribL2i64NV!=null) __glVertexAttribL2i64NV(index,x,y);else throw new NotImplementedException("glVertexAttribL2i64NV");}
public static void glVertexAttribL2i64vNV ( uint index,IntPtr v ){if (__glVertexAttribL2i64vNV!=null) __glVertexAttribL2i64vNV(index,v);else throw new NotImplementedException("glVertexAttribL2i64vNV");}
public static void glVertexAttribL2ui64NV ( uint index,IntPtr x,IntPtr y ){if (__glVertexAttribL2ui64NV!=null) __glVertexAttribL2ui64NV(index,x,y);else throw new NotImplementedException("glVertexAttribL2ui64NV");}
public static void glVertexAttribL2ui64vNV ( uint index,IntPtr v ){if (__glVertexAttribL2ui64vNV!=null) __glVertexAttribL2ui64vNV(index,v);else throw new NotImplementedException("glVertexAttribL2ui64vNV");}
public static void glVertexAttribL3i64NV ( uint index,IntPtr x,IntPtr y,IntPtr z ){if (__glVertexAttribL3i64NV!=null) __glVertexAttribL3i64NV(index,x,y,z);else throw new NotImplementedException("glVertexAttribL3i64NV");}
public static void glVertexAttribL3i64vNV ( uint index,IntPtr v ){if (__glVertexAttribL3i64vNV!=null) __glVertexAttribL3i64vNV(index,v);else throw new NotImplementedException("glVertexAttribL3i64vNV");}
public static void glVertexAttribL3ui64NV ( uint index,IntPtr x,IntPtr y,IntPtr z ){if (__glVertexAttribL3ui64NV!=null) __glVertexAttribL3ui64NV(index,x,y,z);else throw new NotImplementedException("glVertexAttribL3ui64NV");}
public static void glVertexAttribL3ui64vNV ( uint index,IntPtr v ){if (__glVertexAttribL3ui64vNV!=null) __glVertexAttribL3ui64vNV(index,v);else throw new NotImplementedException("glVertexAttribL3ui64vNV");}
public static void glVertexAttribL4i64NV ( uint index,IntPtr x,IntPtr y,IntPtr z,IntPtr w ){if (__glVertexAttribL4i64NV!=null) __glVertexAttribL4i64NV(index,x,y,z,w);else throw new NotImplementedException("glVertexAttribL4i64NV");}
public static void glVertexAttribL4i64vNV ( uint index,IntPtr v ){if (__glVertexAttribL4i64vNV!=null) __glVertexAttribL4i64vNV(index,v);else throw new NotImplementedException("glVertexAttribL4i64vNV");}
public static void glVertexAttribL4ui64NV ( uint index,IntPtr x,IntPtr y,IntPtr z,IntPtr w ){if (__glVertexAttribL4ui64NV!=null) __glVertexAttribL4ui64NV(index,x,y,z,w);else throw new NotImplementedException("glVertexAttribL4ui64NV");}
public static void glVertexAttribL4ui64vNV ( uint index,IntPtr v ){if (__glVertexAttribL4ui64vNV!=null) __glVertexAttribL4ui64vNV(index,v);else throw new NotImplementedException("glVertexAttribL4ui64vNV");}
public static void glVertexAttribLFormatNV ( uint index,int size,uint type,int stride ){if (__glVertexAttribLFormatNV!=null) __glVertexAttribLFormatNV(index,size,type,stride);else throw new NotImplementedException("glVertexAttribLFormatNV");}
public static void glBufferAddressRangeNV ( uint pname,uint index,IntPtr address,IntPtr length ){if (__glBufferAddressRangeNV!=null) __glBufferAddressRangeNV(pname,index,address,length);else throw new NotImplementedException("glBufferAddressRangeNV");}
public static void glColorFormatNV ( int size,uint type,int stride ){if (__glColorFormatNV!=null) __glColorFormatNV(size,type,stride);else throw new NotImplementedException("glColorFormatNV");}
public static void glEdgeFlagFormatNV ( int stride ){if (__glEdgeFlagFormatNV!=null) __glEdgeFlagFormatNV(stride);else throw new NotImplementedException("glEdgeFlagFormatNV");}
public static void glFogCoordFormatNV ( uint type,int stride ){if (__glFogCoordFormatNV!=null) __glFogCoordFormatNV(type,stride);else throw new NotImplementedException("glFogCoordFormatNV");}
public static void glGetIntegerui64i_vNV ( uint value,uint index,IntPtr result ){if (__glGetIntegerui64i_vNV!=null) __glGetIntegerui64i_vNV(value,index,result);else throw new NotImplementedException("glGetIntegerui64i_vNV");}
public static void glIndexFormatNV ( uint type,int stride ){if (__glIndexFormatNV!=null) __glIndexFormatNV(type,stride);else throw new NotImplementedException("glIndexFormatNV");}
public static void glNormalFormatNV ( uint type,int stride ){if (__glNormalFormatNV!=null) __glNormalFormatNV(type,stride);else throw new NotImplementedException("glNormalFormatNV");}
public static void glSecondaryColorFormatNV ( int size,uint type,int stride ){if (__glSecondaryColorFormatNV!=null) __glSecondaryColorFormatNV(size,type,stride);else throw new NotImplementedException("glSecondaryColorFormatNV");}
public static void glTexCoordFormatNV ( int size,uint type,int stride ){if (__glTexCoordFormatNV!=null) __glTexCoordFormatNV(size,type,stride);else throw new NotImplementedException("glTexCoordFormatNV");}
public static void glVertexAttribFormatNV ( uint index,int size,uint type,bool normalized,int stride ){if (__glVertexAttribFormatNV!=null) __glVertexAttribFormatNV(index,size,type,normalized,stride);else throw new NotImplementedException("glVertexAttribFormatNV");}
public static void glVertexAttribIFormatNV ( uint index,int size,uint type,int stride ){if (__glVertexAttribIFormatNV!=null) __glVertexAttribIFormatNV(index,size,type,stride);else throw new NotImplementedException("glVertexAttribIFormatNV");}
public static void glVertexFormatNV ( int size,uint type,int stride ){if (__glVertexFormatNV!=null) __glVertexFormatNV(size,type,stride);else throw new NotImplementedException("glVertexFormatNV");}
public static bool glAreProgramsResidentNV ( int n,uint[]  ids,IntPtr residences ){if (__glAreProgramsResidentNV!=null) return __glAreProgramsResidentNV(n,ids,residences);else throw new NotImplementedException("glAreProgramsResidentNV");}
public static void glBindProgramNV ( uint target,uint id ){if (__glBindProgramNV!=null) __glBindProgramNV(target,id);else throw new NotImplementedException("glBindProgramNV");}
public static void glDeleteProgramsNV ( int n,uint[]  ids ){if (__glDeleteProgramsNV!=null) __glDeleteProgramsNV(n,ids);else throw new NotImplementedException("glDeleteProgramsNV");}
public static void glExecuteProgramNV ( uint target,uint id,float[]  _params ){if (__glExecuteProgramNV!=null) __glExecuteProgramNV(target,id,_params);else throw new NotImplementedException("glExecuteProgramNV");}
public static void glGenProgramsNV ( int n,IntPtr ids ){if (__glGenProgramsNV!=null) __glGenProgramsNV(n,ids);else throw new NotImplementedException("glGenProgramsNV");}
public static void glGetProgramParameterdvNV ( uint target,uint index,uint pname,IntPtr _params ){if (__glGetProgramParameterdvNV!=null) __glGetProgramParameterdvNV(target,index,pname,_params);else throw new NotImplementedException("glGetProgramParameterdvNV");}
public static void glGetProgramParameterfvNV ( uint target,uint index,uint pname,IntPtr _params ){if (__glGetProgramParameterfvNV!=null) __glGetProgramParameterfvNV(target,index,pname,_params);else throw new NotImplementedException("glGetProgramParameterfvNV");}
public static void glGetProgramStringNV ( uint id,uint pname,IntPtr program ){if (__glGetProgramStringNV!=null) __glGetProgramStringNV(id,pname,program);else throw new NotImplementedException("glGetProgramStringNV");}
public static void glGetProgramivNV ( uint id,uint pname,IntPtr _params ){if (__glGetProgramivNV!=null) __glGetProgramivNV(id,pname,_params);else throw new NotImplementedException("glGetProgramivNV");}
public static void glGetTrackMatrixivNV ( uint target,uint address,uint pname,IntPtr _params ){if (__glGetTrackMatrixivNV!=null) __glGetTrackMatrixivNV(target,address,pname,_params);else throw new NotImplementedException("glGetTrackMatrixivNV");}
public static void glGetVertexAttribPointervNV ( uint index,uint pname,IntPtr pointer ){if (__glGetVertexAttribPointervNV!=null) __glGetVertexAttribPointervNV(index,pname,pointer);else throw new NotImplementedException("glGetVertexAttribPointervNV");}
public static void glGetVertexAttribdvNV ( uint index,uint pname,IntPtr _params ){if (__glGetVertexAttribdvNV!=null) __glGetVertexAttribdvNV(index,pname,_params);else throw new NotImplementedException("glGetVertexAttribdvNV");}
public static void glGetVertexAttribfvNV ( uint index,uint pname,IntPtr _params ){if (__glGetVertexAttribfvNV!=null) __glGetVertexAttribfvNV(index,pname,_params);else throw new NotImplementedException("glGetVertexAttribfvNV");}
public static void glGetVertexAttribivNV ( uint index,uint pname,IntPtr _params ){if (__glGetVertexAttribivNV!=null) __glGetVertexAttribivNV(index,pname,_params);else throw new NotImplementedException("glGetVertexAttribivNV");}
public static bool glIsProgramNV ( uint id ){if (__glIsProgramNV!=null) return __glIsProgramNV(id);else throw new NotImplementedException("glIsProgramNV");}
public static void glLoadProgramNV ( uint target,uint id,int len,byte[]  program ){if (__glLoadProgramNV!=null) __glLoadProgramNV(target,id,len,program);else throw new NotImplementedException("glLoadProgramNV");}
public static void glProgramParameter4dNV ( uint target,uint index,double x,double y,double z,double w ){if (__glProgramParameter4dNV!=null) __glProgramParameter4dNV(target,index,x,y,z,w);else throw new NotImplementedException("glProgramParameter4dNV");}
public static void glProgramParameter4dvNV ( uint target,uint index,double[]  _params ){if (__glProgramParameter4dvNV!=null) __glProgramParameter4dvNV(target,index,_params);else throw new NotImplementedException("glProgramParameter4dvNV");}
public static void glProgramParameter4fNV ( uint target,uint index,float x,float y,float z,float w ){if (__glProgramParameter4fNV!=null) __glProgramParameter4fNV(target,index,x,y,z,w);else throw new NotImplementedException("glProgramParameter4fNV");}
public static void glProgramParameter4fvNV ( uint target,uint index,float[]  _params ){if (__glProgramParameter4fvNV!=null) __glProgramParameter4fvNV(target,index,_params);else throw new NotImplementedException("glProgramParameter4fvNV");}
public static void glProgramParameters4dvNV ( uint target,uint index,int num,double[]  _params ){if (__glProgramParameters4dvNV!=null) __glProgramParameters4dvNV(target,index,num,_params);else throw new NotImplementedException("glProgramParameters4dvNV");}
public static void glProgramParameters4fvNV ( uint target,uint index,int num,float[]  _params ){if (__glProgramParameters4fvNV!=null) __glProgramParameters4fvNV(target,index,num,_params);else throw new NotImplementedException("glProgramParameters4fvNV");}
public static void glRequestResidentProgramsNV ( int n,IntPtr ids ){if (__glRequestResidentProgramsNV!=null) __glRequestResidentProgramsNV(n,ids);else throw new NotImplementedException("glRequestResidentProgramsNV");}
public static void glTrackMatrixNV ( uint target,uint address,uint matrix,uint transform ){if (__glTrackMatrixNV!=null) __glTrackMatrixNV(target,address,matrix,transform);else throw new NotImplementedException("glTrackMatrixNV");}
public static void glVertexAttrib1dNV ( uint index,double x ){if (__glVertexAttrib1dNV!=null) __glVertexAttrib1dNV(index,x);else throw new NotImplementedException("glVertexAttrib1dNV");}
public static void glVertexAttrib1dvNV ( uint index,double[]  v ){if (__glVertexAttrib1dvNV!=null) __glVertexAttrib1dvNV(index,v);else throw new NotImplementedException("glVertexAttrib1dvNV");}
public static void glVertexAttrib1fNV ( uint index,float x ){if (__glVertexAttrib1fNV!=null) __glVertexAttrib1fNV(index,x);else throw new NotImplementedException("glVertexAttrib1fNV");}
public static void glVertexAttrib1fvNV ( uint index,float[]  v ){if (__glVertexAttrib1fvNV!=null) __glVertexAttrib1fvNV(index,v);else throw new NotImplementedException("glVertexAttrib1fvNV");}
public static void glVertexAttrib1sNV ( uint index,short x ){if (__glVertexAttrib1sNV!=null) __glVertexAttrib1sNV(index,x);else throw new NotImplementedException("glVertexAttrib1sNV");}
public static void glVertexAttrib1svNV ( uint index,short[]  v ){if (__glVertexAttrib1svNV!=null) __glVertexAttrib1svNV(index,v);else throw new NotImplementedException("glVertexAttrib1svNV");}
public static void glVertexAttrib2dNV ( uint index,double x,double y ){if (__glVertexAttrib2dNV!=null) __glVertexAttrib2dNV(index,x,y);else throw new NotImplementedException("glVertexAttrib2dNV");}
public static void glVertexAttrib2dvNV ( uint index,double[]  v ){if (__glVertexAttrib2dvNV!=null) __glVertexAttrib2dvNV(index,v);else throw new NotImplementedException("glVertexAttrib2dvNV");}
public static void glVertexAttrib2fNV ( uint index,float x,float y ){if (__glVertexAttrib2fNV!=null) __glVertexAttrib2fNV(index,x,y);else throw new NotImplementedException("glVertexAttrib2fNV");}
public static void glVertexAttrib2fvNV ( uint index,float[]  v ){if (__glVertexAttrib2fvNV!=null) __glVertexAttrib2fvNV(index,v);else throw new NotImplementedException("glVertexAttrib2fvNV");}
public static void glVertexAttrib2sNV ( uint index,short x,short y ){if (__glVertexAttrib2sNV!=null) __glVertexAttrib2sNV(index,x,y);else throw new NotImplementedException("glVertexAttrib2sNV");}
public static void glVertexAttrib2svNV ( uint index,short[]  v ){if (__glVertexAttrib2svNV!=null) __glVertexAttrib2svNV(index,v);else throw new NotImplementedException("glVertexAttrib2svNV");}
public static void glVertexAttrib3dNV ( uint index,double x,double y,double z ){if (__glVertexAttrib3dNV!=null) __glVertexAttrib3dNV(index,x,y,z);else throw new NotImplementedException("glVertexAttrib3dNV");}
public static void glVertexAttrib3dvNV ( uint index,double[]  v ){if (__glVertexAttrib3dvNV!=null) __glVertexAttrib3dvNV(index,v);else throw new NotImplementedException("glVertexAttrib3dvNV");}
public static void glVertexAttrib3fNV ( uint index,float x,float y,float z ){if (__glVertexAttrib3fNV!=null) __glVertexAttrib3fNV(index,x,y,z);else throw new NotImplementedException("glVertexAttrib3fNV");}
public static void glVertexAttrib3fvNV ( uint index,float[]  v ){if (__glVertexAttrib3fvNV!=null) __glVertexAttrib3fvNV(index,v);else throw new NotImplementedException("glVertexAttrib3fvNV");}
public static void glVertexAttrib3sNV ( uint index,short x,short y,short z ){if (__glVertexAttrib3sNV!=null) __glVertexAttrib3sNV(index,x,y,z);else throw new NotImplementedException("glVertexAttrib3sNV");}
public static void glVertexAttrib3svNV ( uint index,short[]  v ){if (__glVertexAttrib3svNV!=null) __glVertexAttrib3svNV(index,v);else throw new NotImplementedException("glVertexAttrib3svNV");}
public static void glVertexAttrib4dNV ( uint index,double x,double y,double z,double w ){if (__glVertexAttrib4dNV!=null) __glVertexAttrib4dNV(index,x,y,z,w);else throw new NotImplementedException("glVertexAttrib4dNV");}
public static void glVertexAttrib4dvNV ( uint index,double[]  v ){if (__glVertexAttrib4dvNV!=null) __glVertexAttrib4dvNV(index,v);else throw new NotImplementedException("glVertexAttrib4dvNV");}
public static void glVertexAttrib4fNV ( uint index,float x,float y,float z,float w ){if (__glVertexAttrib4fNV!=null) __glVertexAttrib4fNV(index,x,y,z,w);else throw new NotImplementedException("glVertexAttrib4fNV");}
public static void glVertexAttrib4fvNV ( uint index,float[]  v ){if (__glVertexAttrib4fvNV!=null) __glVertexAttrib4fvNV(index,v);else throw new NotImplementedException("glVertexAttrib4fvNV");}
public static void glVertexAttrib4sNV ( uint index,short x,short y,short z,short w ){if (__glVertexAttrib4sNV!=null) __glVertexAttrib4sNV(index,x,y,z,w);else throw new NotImplementedException("glVertexAttrib4sNV");}
public static void glVertexAttrib4svNV ( uint index,short[]  v ){if (__glVertexAttrib4svNV!=null) __glVertexAttrib4svNV(index,v);else throw new NotImplementedException("glVertexAttrib4svNV");}
public static void glVertexAttrib4ubNV ( uint index,byte x,byte y,byte z,byte w ){if (__glVertexAttrib4ubNV!=null) __glVertexAttrib4ubNV(index,x,y,z,w);else throw new NotImplementedException("glVertexAttrib4ubNV");}
public static void glVertexAttrib4ubvNV ( uint index,byte[]  v ){if (__glVertexAttrib4ubvNV!=null) __glVertexAttrib4ubvNV(index,v);else throw new NotImplementedException("glVertexAttrib4ubvNV");}
public static void glVertexAttribPointerNV ( uint index,int size,uint type,int stride,IntPtr  pointer ){if (__glVertexAttribPointerNV!=null) __glVertexAttribPointerNV(index,size,type,stride,pointer);else throw new NotImplementedException("glVertexAttribPointerNV");}
public static void glVertexAttribs1dvNV ( uint index,int n,double[]  v ){if (__glVertexAttribs1dvNV!=null) __glVertexAttribs1dvNV(index,n,v);else throw new NotImplementedException("glVertexAttribs1dvNV");}
public static void glVertexAttribs1fvNV ( uint index,int n,float[]  v ){if (__glVertexAttribs1fvNV!=null) __glVertexAttribs1fvNV(index,n,v);else throw new NotImplementedException("glVertexAttribs1fvNV");}
public static void glVertexAttribs1svNV ( uint index,int n,short[]  v ){if (__glVertexAttribs1svNV!=null) __glVertexAttribs1svNV(index,n,v);else throw new NotImplementedException("glVertexAttribs1svNV");}
public static void glVertexAttribs2dvNV ( uint index,int n,double[]  v ){if (__glVertexAttribs2dvNV!=null) __glVertexAttribs2dvNV(index,n,v);else throw new NotImplementedException("glVertexAttribs2dvNV");}
public static void glVertexAttribs2fvNV ( uint index,int n,float[]  v ){if (__glVertexAttribs2fvNV!=null) __glVertexAttribs2fvNV(index,n,v);else throw new NotImplementedException("glVertexAttribs2fvNV");}
public static void glVertexAttribs2svNV ( uint index,int n,short[]  v ){if (__glVertexAttribs2svNV!=null) __glVertexAttribs2svNV(index,n,v);else throw new NotImplementedException("glVertexAttribs2svNV");}
public static void glVertexAttribs3dvNV ( uint index,int n,double[]  v ){if (__glVertexAttribs3dvNV!=null) __glVertexAttribs3dvNV(index,n,v);else throw new NotImplementedException("glVertexAttribs3dvNV");}
public static void glVertexAttribs3fvNV ( uint index,int n,float[]  v ){if (__glVertexAttribs3fvNV!=null) __glVertexAttribs3fvNV(index,n,v);else throw new NotImplementedException("glVertexAttribs3fvNV");}
public static void glVertexAttribs3svNV ( uint index,int n,short[]  v ){if (__glVertexAttribs3svNV!=null) __glVertexAttribs3svNV(index,n,v);else throw new NotImplementedException("glVertexAttribs3svNV");}
public static void glVertexAttribs4dvNV ( uint index,int n,double[]  v ){if (__glVertexAttribs4dvNV!=null) __glVertexAttribs4dvNV(index,n,v);else throw new NotImplementedException("glVertexAttribs4dvNV");}
public static void glVertexAttribs4fvNV ( uint index,int n,float[]  v ){if (__glVertexAttribs4fvNV!=null) __glVertexAttribs4fvNV(index,n,v);else throw new NotImplementedException("glVertexAttribs4fvNV");}
public static void glVertexAttribs4svNV ( uint index,int n,short[]  v ){if (__glVertexAttribs4svNV!=null) __glVertexAttribs4svNV(index,n,v);else throw new NotImplementedException("glVertexAttribs4svNV");}
public static void glVertexAttribs4ubvNV ( uint index,int n,byte[]  v ){if (__glVertexAttribs4ubvNV!=null) __glVertexAttribs4ubvNV(index,n,v);else throw new NotImplementedException("glVertexAttribs4ubvNV");}
public static void glBeginVideoCaptureNV ( uint video_capture_slot ){if (__glBeginVideoCaptureNV!=null) __glBeginVideoCaptureNV(video_capture_slot);else throw new NotImplementedException("glBeginVideoCaptureNV");}
public static void glBindVideoCaptureStreamBufferNV ( uint video_capture_slot,uint stream,uint frame_region,IntPtr offset ){if (__glBindVideoCaptureStreamBufferNV!=null) __glBindVideoCaptureStreamBufferNV(video_capture_slot,stream,frame_region,offset);else throw new NotImplementedException("glBindVideoCaptureStreamBufferNV");}
public static void glBindVideoCaptureStreamTextureNV ( uint video_capture_slot,uint stream,uint frame_region,uint target,uint texture ){if (__glBindVideoCaptureStreamTextureNV!=null) __glBindVideoCaptureStreamTextureNV(video_capture_slot,stream,frame_region,target,texture);else throw new NotImplementedException("glBindVideoCaptureStreamTextureNV");}
public static void glEndVideoCaptureNV ( uint video_capture_slot ){if (__glEndVideoCaptureNV!=null) __glEndVideoCaptureNV(video_capture_slot);else throw new NotImplementedException("glEndVideoCaptureNV");}
public static void glGetVideoCaptureStreamdvNV ( uint video_capture_slot,uint stream,uint pname,IntPtr _params ){if (__glGetVideoCaptureStreamdvNV!=null) __glGetVideoCaptureStreamdvNV(video_capture_slot,stream,pname,_params);else throw new NotImplementedException("glGetVideoCaptureStreamdvNV");}
public static void glGetVideoCaptureStreamfvNV ( uint video_capture_slot,uint stream,uint pname,IntPtr _params ){if (__glGetVideoCaptureStreamfvNV!=null) __glGetVideoCaptureStreamfvNV(video_capture_slot,stream,pname,_params);else throw new NotImplementedException("glGetVideoCaptureStreamfvNV");}
public static void glGetVideoCaptureStreamivNV ( uint video_capture_slot,uint stream,uint pname,IntPtr _params ){if (__glGetVideoCaptureStreamivNV!=null) __glGetVideoCaptureStreamivNV(video_capture_slot,stream,pname,_params);else throw new NotImplementedException("glGetVideoCaptureStreamivNV");}
public static void glGetVideoCaptureivNV ( uint video_capture_slot,uint pname,IntPtr _params ){if (__glGetVideoCaptureivNV!=null) __glGetVideoCaptureivNV(video_capture_slot,pname,_params);else throw new NotImplementedException("glGetVideoCaptureivNV");}
public static uint glVideoCaptureNV ( uint video_capture_slot,IntPtr sequence_num,IntPtr capture_time ){if (__glVideoCaptureNV!=null) return __glVideoCaptureNV(video_capture_slot,sequence_num,capture_time);else throw new NotImplementedException("glVideoCaptureNV");}
public static void glVideoCaptureStreamParameterdvNV ( uint video_capture_slot,uint stream,uint pname,double[]  _params ){if (__glVideoCaptureStreamParameterdvNV!=null) __glVideoCaptureStreamParameterdvNV(video_capture_slot,stream,pname,_params);else throw new NotImplementedException("glVideoCaptureStreamParameterdvNV");}
public static void glVideoCaptureStreamParameterfvNV ( uint video_capture_slot,uint stream,uint pname,float[]  _params ){if (__glVideoCaptureStreamParameterfvNV!=null) __glVideoCaptureStreamParameterfvNV(video_capture_slot,stream,pname,_params);else throw new NotImplementedException("glVideoCaptureStreamParameterfvNV");}
public static void glVideoCaptureStreamParameterivNV ( uint video_capture_slot,uint stream,uint pname,int[]  _params ){if (__glVideoCaptureStreamParameterivNV!=null) __glVideoCaptureStreamParameterivNV(video_capture_slot,stream,pname,_params);else throw new NotImplementedException("glVideoCaptureStreamParameterivNV");}
public static void glClearDepthfOES ( double depth ){if (__glClearDepthfOES!=null) __glClearDepthfOES(depth);else throw new NotImplementedException("glClearDepthfOES");}
public static void glClipPlanefOES ( uint plane,float[]  equation ){if (__glClipPlanefOES!=null) __glClipPlanefOES(plane,equation);else throw new NotImplementedException("glClipPlanefOES");}
public static void glDepthRangefOES ( float n,float f ){if (__glDepthRangefOES!=null) __glDepthRangefOES(n,f);else throw new NotImplementedException("glDepthRangefOES");}
public static void glFrustumfOES ( float l,float r,float b,float t,float n,float f ){if (__glFrustumfOES!=null) __glFrustumfOES(l,r,b,t,n,f);else throw new NotImplementedException("glFrustumfOES");}
public static void glGetClipPlanefOES ( uint plane,IntPtr equation ){if (__glGetClipPlanefOES!=null) __glGetClipPlanefOES(plane,equation);else throw new NotImplementedException("glGetClipPlanefOES");}
public static void glOrthofOES ( float l,float r,float b,float t,float n,float f ){if (__glOrthofOES!=null) __glOrthofOES(l,r,b,t,n,f);else throw new NotImplementedException("glOrthofOES");}
public static void glDetailTexFuncSGIS ( uint target,int n,float[]  points ){if (__glDetailTexFuncSGIS!=null) __glDetailTexFuncSGIS(target,n,points);else throw new NotImplementedException("glDetailTexFuncSGIS");}
public static void glGetDetailTexFuncSGIS ( uint target,IntPtr points ){if (__glGetDetailTexFuncSGIS!=null) __glGetDetailTexFuncSGIS(target,points);else throw new NotImplementedException("glGetDetailTexFuncSGIS");}
public static void glFogFuncSGIS ( int n,float[]  points ){if (__glFogFuncSGIS!=null) __glFogFuncSGIS(n,points);else throw new NotImplementedException("glFogFuncSGIS");}
public static void glGetFogFuncSGIS ( IntPtr points ){if (__glGetFogFuncSGIS!=null) __glGetFogFuncSGIS(points);else throw new NotImplementedException("glGetFogFuncSGIS");}
public static void glSampleMaskSGIS ( float value,bool invert ){if (__glSampleMaskSGIS!=null) __glSampleMaskSGIS(value,invert);else throw new NotImplementedException("glSampleMaskSGIS");}
public static void glSamplePatternSGIS ( uint pattern ){if (__glSamplePatternSGIS!=null) __glSamplePatternSGIS(pattern);else throw new NotImplementedException("glSamplePatternSGIS");}
public static void glGetSharpenTexFuncSGIS ( uint target,IntPtr points ){if (__glGetSharpenTexFuncSGIS!=null) __glGetSharpenTexFuncSGIS(target,points);else throw new NotImplementedException("glGetSharpenTexFuncSGIS");}
public static void glSharpenTexFuncSGIS ( uint target,int n,float[]  points ){if (__glSharpenTexFuncSGIS!=null) __glSharpenTexFuncSGIS(target,n,points);else throw new NotImplementedException("glSharpenTexFuncSGIS");}
public static void glTexImage4DSGIS ( uint target,int level,uint internalformat,int width,int height,int depth,int extent,int border,uint format,uint type,IntPtr  pixels ){if (__glTexImage4DSGIS!=null) __glTexImage4DSGIS(target,level,internalformat,width,height,depth,extent,border,format,type,pixels);else throw new NotImplementedException("glTexImage4DSGIS");}
public static void glTexSubImage4DSGIS ( uint target,int level,int xoffset,int yoffset,int zoffset,int woffset,int width,int height,int depth,int extent,uint format,uint type,IntPtr  pixels ){if (__glTexSubImage4DSGIS!=null) __glTexSubImage4DSGIS(target,level,xoffset,yoffset,zoffset,woffset,width,height,depth,extent,format,type,pixels);else throw new NotImplementedException("glTexSubImage4DSGIS");}
public static void glGetTexFilterFuncSGIS ( uint target,uint filter,IntPtr weights ){if (__glGetTexFilterFuncSGIS!=null) __glGetTexFilterFuncSGIS(target,filter,weights);else throw new NotImplementedException("glGetTexFilterFuncSGIS");}
public static void glTexFilterFuncSGIS ( uint target,uint filter,int n,float[]  weights ){if (__glTexFilterFuncSGIS!=null) __glTexFilterFuncSGIS(target,filter,n,weights);else throw new NotImplementedException("glTexFilterFuncSGIS");}
public static void glAsyncMarkerSGIX ( uint marker ){if (__glAsyncMarkerSGIX!=null) __glAsyncMarkerSGIX(marker);else throw new NotImplementedException("glAsyncMarkerSGIX");}
public static void glDeleteAsyncMarkersSGIX ( uint marker,int range ){if (__glDeleteAsyncMarkersSGIX!=null) __glDeleteAsyncMarkersSGIX(marker,range);else throw new NotImplementedException("glDeleteAsyncMarkersSGIX");}
public static int glFinishAsyncSGIX ( IntPtr markerp ){if (__glFinishAsyncSGIX!=null) return __glFinishAsyncSGIX(markerp);else throw new NotImplementedException("glFinishAsyncSGIX");}
public static uint glGenAsyncMarkersSGIX ( int range ){if (__glGenAsyncMarkersSGIX!=null) return __glGenAsyncMarkersSGIX(range);else throw new NotImplementedException("glGenAsyncMarkersSGIX");}
public static bool glIsAsyncMarkerSGIX ( uint marker ){if (__glIsAsyncMarkerSGIX!=null) return __glIsAsyncMarkerSGIX(marker);else throw new NotImplementedException("glIsAsyncMarkerSGIX");}
public static int glPollAsyncSGIX ( IntPtr markerp ){if (__glPollAsyncSGIX!=null) return __glPollAsyncSGIX(markerp);else throw new NotImplementedException("glPollAsyncSGIX");}
public static void glFlushRasterSGIX (  ){if (__glFlushRasterSGIX!=null) __glFlushRasterSGIX();else throw new NotImplementedException("glFlushRasterSGIX");}
public static void glTextureFogSGIX ( uint pname ){if (__glTextureFogSGIX!=null) __glTextureFogSGIX(pname);else throw new NotImplementedException("glTextureFogSGIX");}
public static void glFragmentColorMaterialSGIX ( uint face,uint mode ){if (__glFragmentColorMaterialSGIX!=null) __glFragmentColorMaterialSGIX(face,mode);else throw new NotImplementedException("glFragmentColorMaterialSGIX");}
public static void glFragmentLightModelfSGIX ( uint pname,float param ){if (__glFragmentLightModelfSGIX!=null) __glFragmentLightModelfSGIX(pname,param);else throw new NotImplementedException("glFragmentLightModelfSGIX");}
public static void glFragmentLightModelfvSGIX ( uint pname,IntPtr _params ){if (__glFragmentLightModelfvSGIX!=null) __glFragmentLightModelfvSGIX(pname,_params);else throw new NotImplementedException("glFragmentLightModelfvSGIX");}
public static void glFragmentLightModeliSGIX ( uint pname,int param ){if (__glFragmentLightModeliSGIX!=null) __glFragmentLightModeliSGIX(pname,param);else throw new NotImplementedException("glFragmentLightModeliSGIX");}
public static void glFragmentLightModelivSGIX ( uint pname,IntPtr _params ){if (__glFragmentLightModelivSGIX!=null) __glFragmentLightModelivSGIX(pname,_params);else throw new NotImplementedException("glFragmentLightModelivSGIX");}
public static void glFragmentLightfSGIX ( uint light,uint pname,float param ){if (__glFragmentLightfSGIX!=null) __glFragmentLightfSGIX(light,pname,param);else throw new NotImplementedException("glFragmentLightfSGIX");}
public static void glFragmentLightfvSGIX ( uint light,uint pname,IntPtr _params ){if (__glFragmentLightfvSGIX!=null) __glFragmentLightfvSGIX(light,pname,_params);else throw new NotImplementedException("glFragmentLightfvSGIX");}
public static void glFragmentLightiSGIX ( uint light,uint pname,int param ){if (__glFragmentLightiSGIX!=null) __glFragmentLightiSGIX(light,pname,param);else throw new NotImplementedException("glFragmentLightiSGIX");}
public static void glFragmentLightivSGIX ( uint light,uint pname,IntPtr _params ){if (__glFragmentLightivSGIX!=null) __glFragmentLightivSGIX(light,pname,_params);else throw new NotImplementedException("glFragmentLightivSGIX");}
public static void glFragmentMaterialfSGIX ( uint face,uint pname,float[] param ){if (__glFragmentMaterialfSGIX!=null) __glFragmentMaterialfSGIX(face,pname,param);else throw new NotImplementedException("glFragmentMaterialfSGIX");}
public static void glFragmentMaterialfvSGIX ( uint face,uint pname,float[]  _params ){if (__glFragmentMaterialfvSGIX!=null) __glFragmentMaterialfvSGIX(face,pname,_params);else throw new NotImplementedException("glFragmentMaterialfvSGIX");}
public static void glFragmentMaterialiSGIX ( uint face,uint pname,int[] param ){if (__glFragmentMaterialiSGIX!=null) __glFragmentMaterialiSGIX(face,pname,param);else throw new NotImplementedException("glFragmentMaterialiSGIX");}
public static void glFragmentMaterialivSGIX ( uint face,uint pname,int[]  _params ){if (__glFragmentMaterialivSGIX!=null) __glFragmentMaterialivSGIX(face,pname,_params);else throw new NotImplementedException("glFragmentMaterialivSGIX");}
public static void glGetFragmentLightfvSGIX ( uint light,uint value,IntPtr data ){if (__glGetFragmentLightfvSGIX!=null) __glGetFragmentLightfvSGIX(light,value,data);else throw new NotImplementedException("glGetFragmentLightfvSGIX");}
public static void glGetFragmentLightivSGIX ( uint light,uint value,IntPtr data ){if (__glGetFragmentLightivSGIX!=null) __glGetFragmentLightivSGIX(light,value,data);else throw new NotImplementedException("glGetFragmentLightivSGIX");}
public static void glGetFragmentMaterialfvSGIX ( uint face,uint pname,float[]  data ){if (__glGetFragmentMaterialfvSGIX!=null) __glGetFragmentMaterialfvSGIX(face,pname,data);else throw new NotImplementedException("glGetFragmentMaterialfvSGIX");}
public static void glGetFragmentMaterialivSGIX ( uint face,uint pname,int[]  data ){if (__glGetFragmentMaterialivSGIX!=null) __glGetFragmentMaterialivSGIX(face,pname,data);else throw new NotImplementedException("glGetFragmentMaterialivSGIX");}
public static void glFrameZoomSGIX ( int factor ){if (__glFrameZoomSGIX!=null) __glFrameZoomSGIX(factor);else throw new NotImplementedException("glFrameZoomSGIX");}
public static void glPixelTexGenSGIX ( uint mode ){if (__glPixelTexGenSGIX!=null) __glPixelTexGenSGIX(mode);else throw new NotImplementedException("glPixelTexGenSGIX");}
public static void glReferencePlaneSGIX ( double[]  equation ){if (__glReferencePlaneSGIX!=null) __glReferencePlaneSGIX(equation);else throw new NotImplementedException("glReferencePlaneSGIX");}
public static void glSpriteParameterfSGIX ( uint pname,float param ){if (__glSpriteParameterfSGIX!=null) __glSpriteParameterfSGIX(pname,param);else throw new NotImplementedException("glSpriteParameterfSGIX");}
public static void glSpriteParameterfvSGIX ( uint pname,IntPtr _params ){if (__glSpriteParameterfvSGIX!=null) __glSpriteParameterfvSGIX(pname,_params);else throw new NotImplementedException("glSpriteParameterfvSGIX");}
public static void glSpriteParameteriSGIX ( uint pname,int param ){if (__glSpriteParameteriSGIX!=null) __glSpriteParameteriSGIX(pname,param);else throw new NotImplementedException("glSpriteParameteriSGIX");}
public static void glSpriteParameterivSGIX ( uint pname,IntPtr _params ){if (__glSpriteParameterivSGIX!=null) __glSpriteParameterivSGIX(pname,_params);else throw new NotImplementedException("glSpriteParameterivSGIX");}
public static void glTagSampleBufferSGIX (  ){if (__glTagSampleBufferSGIX!=null) __glTagSampleBufferSGIX();else throw new NotImplementedException("glTagSampleBufferSGIX");}
public static void glColorTableParameterfvSGI ( uint target,uint pname,float[]  _params ){if (__glColorTableParameterfvSGI!=null) __glColorTableParameterfvSGI(target,pname,_params);else throw new NotImplementedException("glColorTableParameterfvSGI");}
public static void glColorTableParameterivSGI ( uint target,uint pname,int[]  _params ){if (__glColorTableParameterivSGI!=null) __glColorTableParameterivSGI(target,pname,_params);else throw new NotImplementedException("glColorTableParameterivSGI");}
public static void glColorTableSGI ( uint target,uint internalformat,int width,uint format,uint type,IntPtr  table ){if (__glColorTableSGI!=null) __glColorTableSGI(target,internalformat,width,format,type,table);else throw new NotImplementedException("glColorTableSGI");}
public static void glCopyColorTableSGI ( uint target,uint internalformat,int x,int y,int width ){if (__glCopyColorTableSGI!=null) __glCopyColorTableSGI(target,internalformat,x,y,width);else throw new NotImplementedException("glCopyColorTableSGI");}
public static void glGetColorTableParameterfvSGI ( uint target,uint pname,IntPtr _params ){if (__glGetColorTableParameterfvSGI!=null) __glGetColorTableParameterfvSGI(target,pname,_params);else throw new NotImplementedException("glGetColorTableParameterfvSGI");}
public static void glGetColorTableParameterivSGI ( uint target,uint pname,IntPtr _params ){if (__glGetColorTableParameterivSGI!=null) __glGetColorTableParameterivSGI(target,pname,_params);else throw new NotImplementedException("glGetColorTableParameterivSGI");}
public static void glGetColorTableSGI ( uint target,uint format,uint type,IntPtr table ){if (__glGetColorTableSGI!=null) __glGetColorTableSGI(target,format,type,table);else throw new NotImplementedException("glGetColorTableSGI");}
public static void glFinishTextureSUNX (  ){if (__glFinishTextureSUNX!=null) __glFinishTextureSUNX();else throw new NotImplementedException("glFinishTextureSUNX");}
public static void glGlobalAlphaFactorbSUN ( sbyte factor ){if (__glGlobalAlphaFactorbSUN!=null) __glGlobalAlphaFactorbSUN(factor);else throw new NotImplementedException("glGlobalAlphaFactorbSUN");}
public static void glGlobalAlphaFactordSUN ( double factor ){if (__glGlobalAlphaFactordSUN!=null) __glGlobalAlphaFactordSUN(factor);else throw new NotImplementedException("glGlobalAlphaFactordSUN");}
public static void glGlobalAlphaFactorfSUN ( float factor ){if (__glGlobalAlphaFactorfSUN!=null) __glGlobalAlphaFactorfSUN(factor);else throw new NotImplementedException("glGlobalAlphaFactorfSUN");}
public static void glGlobalAlphaFactoriSUN ( int factor ){if (__glGlobalAlphaFactoriSUN!=null) __glGlobalAlphaFactoriSUN(factor);else throw new NotImplementedException("glGlobalAlphaFactoriSUN");}
public static void glGlobalAlphaFactorsSUN ( short factor ){if (__glGlobalAlphaFactorsSUN!=null) __glGlobalAlphaFactorsSUN(factor);else throw new NotImplementedException("glGlobalAlphaFactorsSUN");}
public static void glGlobalAlphaFactorubSUN ( byte factor ){if (__glGlobalAlphaFactorubSUN!=null) __glGlobalAlphaFactorubSUN(factor);else throw new NotImplementedException("glGlobalAlphaFactorubSUN");}
public static void glGlobalAlphaFactoruiSUN ( uint factor ){if (__glGlobalAlphaFactoruiSUN!=null) __glGlobalAlphaFactoruiSUN(factor);else throw new NotImplementedException("glGlobalAlphaFactoruiSUN");}
public static void glGlobalAlphaFactorusSUN ( ushort factor ){if (__glGlobalAlphaFactorusSUN!=null) __glGlobalAlphaFactorusSUN(factor);else throw new NotImplementedException("glGlobalAlphaFactorusSUN");}
public static void glReadVideoPixelsSUN ( int x,int y,int width,int height,uint format,uint type,IntPtr pixels ){if (__glReadVideoPixelsSUN!=null) __glReadVideoPixelsSUN(x,y,width,height,format,type,pixels);else throw new NotImplementedException("glReadVideoPixelsSUN");}
public static void glReplacementCodePointerSUN ( uint type,int stride,IntPtr  pointer ){if (__glReplacementCodePointerSUN!=null) __glReplacementCodePointerSUN(type,stride,pointer);else throw new NotImplementedException("glReplacementCodePointerSUN");}
public static void glReplacementCodeubSUN ( byte code ){if (__glReplacementCodeubSUN!=null) __glReplacementCodeubSUN(code);else throw new NotImplementedException("glReplacementCodeubSUN");}
public static void glReplacementCodeubvSUN ( byte[]  code ){if (__glReplacementCodeubvSUN!=null) __glReplacementCodeubvSUN(code);else throw new NotImplementedException("glReplacementCodeubvSUN");}
public static void glReplacementCodeuiSUN ( uint code ){if (__glReplacementCodeuiSUN!=null) __glReplacementCodeuiSUN(code);else throw new NotImplementedException("glReplacementCodeuiSUN");}
public static void glReplacementCodeuivSUN ( uint[]  code ){if (__glReplacementCodeuivSUN!=null) __glReplacementCodeuivSUN(code);else throw new NotImplementedException("glReplacementCodeuivSUN");}
public static void glReplacementCodeusSUN ( ushort code ){if (__glReplacementCodeusSUN!=null) __glReplacementCodeusSUN(code);else throw new NotImplementedException("glReplacementCodeusSUN");}
public static void glReplacementCodeusvSUN ( ushort[]  code ){if (__glReplacementCodeusvSUN!=null) __glReplacementCodeusvSUN(code);else throw new NotImplementedException("glReplacementCodeusvSUN");}
public static void glColor3fVertex3fSUN ( float r,float g,float b,float x,float y,float z ){if (__glColor3fVertex3fSUN!=null) __glColor3fVertex3fSUN(r,g,b,x,y,z);else throw new NotImplementedException("glColor3fVertex3fSUN");}
public static void glColor3fVertex3fvSUN ( float[]  c,float[] v ){if (__glColor3fVertex3fvSUN!=null) __glColor3fVertex3fvSUN(c,v);else throw new NotImplementedException("glColor3fVertex3fvSUN");}
public static void glColor4fNormal3fVertex3fSUN ( float r,float g,float b,float a,float nx,float ny,float nz,float x,float y,float z ){if (__glColor4fNormal3fVertex3fSUN!=null) __glColor4fNormal3fVertex3fSUN(r,g,b,a,nx,ny,nz,x,y,z);else throw new NotImplementedException("glColor4fNormal3fVertex3fSUN");}
public static void glColor4fNormal3fVertex3fvSUN ( float[]  c,float[] n,float[] v ){if (__glColor4fNormal3fVertex3fvSUN!=null) __glColor4fNormal3fVertex3fvSUN(c,n,v);else throw new NotImplementedException("glColor4fNormal3fVertex3fvSUN");}
public static void glColor4ubVertex2fSUN ( byte r,byte g,byte b,byte a,float x,float y ){if (__glColor4ubVertex2fSUN!=null) __glColor4ubVertex2fSUN(r,g,b,a,x,y);else throw new NotImplementedException("glColor4ubVertex2fSUN");}
public static void glColor4ubVertex2fvSUN ( byte[]  c,float[] v ){if (__glColor4ubVertex2fvSUN!=null) __glColor4ubVertex2fvSUN(c,v);else throw new NotImplementedException("glColor4ubVertex2fvSUN");}
public static void glColor4ubVertex3fSUN ( byte r,byte g,byte b,byte a,float x,float y,float z ){if (__glColor4ubVertex3fSUN!=null) __glColor4ubVertex3fSUN(r,g,b,a,x,y,z);else throw new NotImplementedException("glColor4ubVertex3fSUN");}
public static void glColor4ubVertex3fvSUN ( byte[]  c,float[] v ){if (__glColor4ubVertex3fvSUN!=null) __glColor4ubVertex3fvSUN(c,v);else throw new NotImplementedException("glColor4ubVertex3fvSUN");}
public static void glNormal3fVertex3fSUN ( float nx,float ny,float nz,float x,float y,float z ){if (__glNormal3fVertex3fSUN!=null) __glNormal3fVertex3fSUN(nx,ny,nz,x,y,z);else throw new NotImplementedException("glNormal3fVertex3fSUN");}
public static void glNormal3fVertex3fvSUN ( float[]  n,float[] v ){if (__glNormal3fVertex3fvSUN!=null) __glNormal3fVertex3fvSUN(n,v);else throw new NotImplementedException("glNormal3fVertex3fvSUN");}
public static void glReplacementCodeuiColor3fVertex3fSUN ( uint rc,float r,float g,float b,float x,float y,float z ){if (__glReplacementCodeuiColor3fVertex3fSUN!=null) __glReplacementCodeuiColor3fVertex3fSUN(rc,r,g,b,x,y,z);else throw new NotImplementedException("glReplacementCodeuiColor3fVertex3fSUN");}
public static void glReplacementCodeuiColor3fVertex3fvSUN ( uint[]  rc,float[] c,float[] v ){if (__glReplacementCodeuiColor3fVertex3fvSUN!=null) __glReplacementCodeuiColor3fVertex3fvSUN(rc,c,v);else throw new NotImplementedException("glReplacementCodeuiColor3fVertex3fvSUN");}
public static void glReplacementCodeuiColor4fNormal3fVertex3fSUN ( uint rc,float r,float g,float b,float a,float nx,float ny,float nz,float x,float y,float z ){if (__glReplacementCodeuiColor4fNormal3fVertex3fSUN!=null) __glReplacementCodeuiColor4fNormal3fVertex3fSUN(rc,r,g,b,a,nx,ny,nz,x,y,z);else throw new NotImplementedException("glReplacementCodeuiColor4fNormal3fVertex3fSUN");}
public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN ( uint[]  rc,float[] c,float[] n,float[] v ){if (__glReplacementCodeuiColor4fNormal3fVertex3fvSUN!=null) __glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc,c,n,v);else throw new NotImplementedException("glReplacementCodeuiColor4fNormal3fVertex3fvSUN");}
public static void glReplacementCodeuiColor4ubVertex3fSUN ( uint rc,byte r,byte g,byte b,byte a,float x,float y,float z ){if (__glReplacementCodeuiColor4ubVertex3fSUN!=null) __glReplacementCodeuiColor4ubVertex3fSUN(rc,r,g,b,a,x,y,z);else throw new NotImplementedException("glReplacementCodeuiColor4ubVertex3fSUN");}
public static void glReplacementCodeuiColor4ubVertex3fvSUN ( uint[]  rc,byte[] c,float[] v ){if (__glReplacementCodeuiColor4ubVertex3fvSUN!=null) __glReplacementCodeuiColor4ubVertex3fvSUN(rc,c,v);else throw new NotImplementedException("glReplacementCodeuiColor4ubVertex3fvSUN");}
public static void glReplacementCodeuiNormal3fVertex3fSUN ( uint rc,float nx,float ny,float nz,float x,float y,float z ){if (__glReplacementCodeuiNormal3fVertex3fSUN!=null) __glReplacementCodeuiNormal3fVertex3fSUN(rc,nx,ny,nz,x,y,z);else throw new NotImplementedException("glReplacementCodeuiNormal3fVertex3fSUN");}
public static void glReplacementCodeuiNormal3fVertex3fvSUN ( uint[]  rc,float[] n,float[] v ){if (__glReplacementCodeuiNormal3fVertex3fvSUN!=null) __glReplacementCodeuiNormal3fVertex3fvSUN(rc,n,v);else throw new NotImplementedException("glReplacementCodeuiNormal3fVertex3fvSUN");}
public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN ( uint rc,float s,float t,float r,float g,float b,float a,float nx,float ny,float nz,float x,float y,float z ){if (__glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN!=null) __glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(rc,s,t,r,g,b,a,nx,ny,nz,x,y,z);else throw new NotImplementedException("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN");}
public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN ( uint[]  rc,float[] tc,float[] c,float[] n,float[] v ){if (__glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN!=null) __glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc,tc,c,n,v);else throw new NotImplementedException("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN");}
public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN ( uint rc,float s,float t,float nx,float ny,float nz,float x,float y,float z ){if (__glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN!=null) __glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(rc,s,t,nx,ny,nz,x,y,z);else throw new NotImplementedException("glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN");}
public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN ( uint[]  rc,float[] tc,float[] n,float[] v ){if (__glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN!=null) __glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc,tc,n,v);else throw new NotImplementedException("glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN");}
public static void glReplacementCodeuiTexCoord2fVertex3fSUN ( uint rc,float s,float t,float x,float y,float z ){if (__glReplacementCodeuiTexCoord2fVertex3fSUN!=null) __glReplacementCodeuiTexCoord2fVertex3fSUN(rc,s,t,x,y,z);else throw new NotImplementedException("glReplacementCodeuiTexCoord2fVertex3fSUN");}
public static void glReplacementCodeuiTexCoord2fVertex3fvSUN ( uint[]  rc,float[] tc,float[] v ){if (__glReplacementCodeuiTexCoord2fVertex3fvSUN!=null) __glReplacementCodeuiTexCoord2fVertex3fvSUN(rc,tc,v);else throw new NotImplementedException("glReplacementCodeuiTexCoord2fVertex3fvSUN");}
public static void glReplacementCodeuiVertex3fSUN ( uint rc,float x,float y,float z ){if (__glReplacementCodeuiVertex3fSUN!=null) __glReplacementCodeuiVertex3fSUN(rc,x,y,z);else throw new NotImplementedException("glReplacementCodeuiVertex3fSUN");}
public static void glReplacementCodeuiVertex3fvSUN ( uint[]  rc,float[] v ){if (__glReplacementCodeuiVertex3fvSUN!=null) __glReplacementCodeuiVertex3fvSUN(rc,v);else throw new NotImplementedException("glReplacementCodeuiVertex3fvSUN");}
public static void glTexCoord2fColor3fVertex3fSUN ( float s,float t,float r,float g,float b,float x,float y,float z ){if (__glTexCoord2fColor3fVertex3fSUN!=null) __glTexCoord2fColor3fVertex3fSUN(s,t,r,g,b,x,y,z);else throw new NotImplementedException("glTexCoord2fColor3fVertex3fSUN");}
public static void glTexCoord2fColor3fVertex3fvSUN ( float[]  tc,float[] c,float[] v ){if (__glTexCoord2fColor3fVertex3fvSUN!=null) __glTexCoord2fColor3fVertex3fvSUN(tc,c,v);else throw new NotImplementedException("glTexCoord2fColor3fVertex3fvSUN");}
public static void glTexCoord2fColor4fNormal3fVertex3fSUN ( float s,float t,float r,float g,float b,float a,float nx,float ny,float nz,float x,float y,float z ){if (__glTexCoord2fColor4fNormal3fVertex3fSUN!=null) __glTexCoord2fColor4fNormal3fVertex3fSUN(s,t,r,g,b,a,nx,ny,nz,x,y,z);else throw new NotImplementedException("glTexCoord2fColor4fNormal3fVertex3fSUN");}
public static void glTexCoord2fColor4fNormal3fVertex3fvSUN ( float[]  tc,float[] c,float[] n,float[] v ){if (__glTexCoord2fColor4fNormal3fVertex3fvSUN!=null) __glTexCoord2fColor4fNormal3fVertex3fvSUN(tc,c,n,v);else throw new NotImplementedException("glTexCoord2fColor4fNormal3fVertex3fvSUN");}
public static void glTexCoord2fColor4ubVertex3fSUN ( float s,float t,byte r,byte g,byte b,byte a,float x,float y,float z ){if (__glTexCoord2fColor4ubVertex3fSUN!=null) __glTexCoord2fColor4ubVertex3fSUN(s,t,r,g,b,a,x,y,z);else throw new NotImplementedException("glTexCoord2fColor4ubVertex3fSUN");}
public static void glTexCoord2fColor4ubVertex3fvSUN ( float[]  tc,byte[] c,float[] v ){if (__glTexCoord2fColor4ubVertex3fvSUN!=null) __glTexCoord2fColor4ubVertex3fvSUN(tc,c,v);else throw new NotImplementedException("glTexCoord2fColor4ubVertex3fvSUN");}
public static void glTexCoord2fNormal3fVertex3fSUN ( float s,float t,float nx,float ny,float nz,float x,float y,float z ){if (__glTexCoord2fNormal3fVertex3fSUN!=null) __glTexCoord2fNormal3fVertex3fSUN(s,t,nx,ny,nz,x,y,z);else throw new NotImplementedException("glTexCoord2fNormal3fVertex3fSUN");}
public static void glTexCoord2fNormal3fVertex3fvSUN ( float[]  tc,float[] n,float[] v ){if (__glTexCoord2fNormal3fVertex3fvSUN!=null) __glTexCoord2fNormal3fVertex3fvSUN(tc,n,v);else throw new NotImplementedException("glTexCoord2fNormal3fVertex3fvSUN");}
public static void glTexCoord2fVertex3fSUN ( float s,float t,float x,float y,float z ){if (__glTexCoord2fVertex3fSUN!=null) __glTexCoord2fVertex3fSUN(s,t,x,y,z);else throw new NotImplementedException("glTexCoord2fVertex3fSUN");}
public static void glTexCoord2fVertex3fvSUN ( float[]  tc,float[] v ){if (__glTexCoord2fVertex3fvSUN!=null) __glTexCoord2fVertex3fvSUN(tc,v);else throw new NotImplementedException("glTexCoord2fVertex3fvSUN");}
public static void glTexCoord4fColor4fNormal3fVertex4fSUN ( float s,float t,float p,float q,float r,float g,float b,float a,float nx,float ny,float nz,float x,float y,float z,float w ){if (__glTexCoord4fColor4fNormal3fVertex4fSUN!=null) __glTexCoord4fColor4fNormal3fVertex4fSUN(s,t,p,q,r,g,b,a,nx,ny,nz,x,y,z,w);else throw new NotImplementedException("glTexCoord4fColor4fNormal3fVertex4fSUN");}
public static void glTexCoord4fColor4fNormal3fVertex4fvSUN ( float[]  tc,float[] c,float[] n,float[] v ){if (__glTexCoord4fColor4fNormal3fVertex4fvSUN!=null) __glTexCoord4fColor4fNormal3fVertex4fvSUN(tc,c,n,v);else throw new NotImplementedException("glTexCoord4fColor4fNormal3fVertex4fvSUN");}
public static void glTexCoord4fVertex4fSUN ( float s,float t,float p,float q,float x,float y,float z,float w ){if (__glTexCoord4fVertex4fSUN!=null) __glTexCoord4fVertex4fSUN(s,t,p,q,x,y,z,w);else throw new NotImplementedException("glTexCoord4fVertex4fSUN");}
public static void glTexCoord4fVertex4fvSUN ( float[]  tc,float[] v ){if (__glTexCoord4fVertex4fvSUN!=null) __glTexCoord4fVertex4fvSUN(tc,v);else throw new NotImplementedException("glTexCoord4fVertex4fvSUN");}
public static void glAddSwapHintRectWIN ( int x,int y,int width,int height ){if (__glAddSwapHintRectWIN!=null) __glAddSwapHintRectWIN(x,y,width,height);else throw new NotImplementedException("glAddSwapHintRectWIN");}
internal static PFNGLCOPYTEXSUBIMAGE3DPROC __glCopyTexSubImage3D;
internal static PFNGLDRAWRANGEELEMENTSPROC __glDrawRangeElements;
internal static PFNGLTEXIMAGE3DPROC __glTexImage3D;
internal static PFNGLTEXSUBIMAGE3DPROC __glTexSubImage3D;
internal static PFNGLACTIVETEXTUREPROC __glActiveTexture;
internal static PFNGLCLIENTACTIVETEXTUREPROC __glClientActiveTexture;
internal static PFNGLCOMPRESSEDTEXIMAGE1DPROC __glCompressedTexImage1D;
internal static PFNGLCOMPRESSEDTEXIMAGE2DPROC __glCompressedTexImage2D;
internal static PFNGLCOMPRESSEDTEXIMAGE3DPROC __glCompressedTexImage3D;
internal static PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC __glCompressedTexSubImage1D;
internal static PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC __glCompressedTexSubImage2D;
internal static PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC __glCompressedTexSubImage3D;
internal static PFNGLGETCOMPRESSEDTEXIMAGEPROC __glGetCompressedTexImage;
internal static PFNGLLOADTRANSPOSEMATRIXDPROC __glLoadTransposeMatrixd;
internal static PFNGLLOADTRANSPOSEMATRIXFPROC __glLoadTransposeMatrixf;
internal static PFNGLMULTTRANSPOSEMATRIXDPROC __glMultTransposeMatrixd;
internal static PFNGLMULTTRANSPOSEMATRIXFPROC __glMultTransposeMatrixf;
internal static PFNGLMULTITEXCOORD1DPROC __glMultiTexCoord1d;
internal static PFNGLMULTITEXCOORD1DVPROC __glMultiTexCoord1dv;
internal static PFNGLMULTITEXCOORD1FPROC __glMultiTexCoord1f;
internal static PFNGLMULTITEXCOORD1FVPROC __glMultiTexCoord1fv;
internal static PFNGLMULTITEXCOORD1IPROC __glMultiTexCoord1i;
internal static PFNGLMULTITEXCOORD1IVPROC __glMultiTexCoord1iv;
internal static PFNGLMULTITEXCOORD1SPROC __glMultiTexCoord1s;
internal static PFNGLMULTITEXCOORD1SVPROC __glMultiTexCoord1sv;
internal static PFNGLMULTITEXCOORD2DPROC __glMultiTexCoord2d;
internal static PFNGLMULTITEXCOORD2DVPROC __glMultiTexCoord2dv;
internal static PFNGLMULTITEXCOORD2FPROC __glMultiTexCoord2f;
internal static PFNGLMULTITEXCOORD2FVPROC __glMultiTexCoord2fv;
internal static PFNGLMULTITEXCOORD2IPROC __glMultiTexCoord2i;
internal static PFNGLMULTITEXCOORD2IVPROC __glMultiTexCoord2iv;
internal static PFNGLMULTITEXCOORD2SPROC __glMultiTexCoord2s;
internal static PFNGLMULTITEXCOORD2SVPROC __glMultiTexCoord2sv;
internal static PFNGLMULTITEXCOORD3DPROC __glMultiTexCoord3d;
internal static PFNGLMULTITEXCOORD3DVPROC __glMultiTexCoord3dv;
internal static PFNGLMULTITEXCOORD3FPROC __glMultiTexCoord3f;
internal static PFNGLMULTITEXCOORD3FVPROC __glMultiTexCoord3fv;
internal static PFNGLMULTITEXCOORD3IPROC __glMultiTexCoord3i;
internal static PFNGLMULTITEXCOORD3IVPROC __glMultiTexCoord3iv;
internal static PFNGLMULTITEXCOORD3SPROC __glMultiTexCoord3s;
internal static PFNGLMULTITEXCOORD3SVPROC __glMultiTexCoord3sv;
internal static PFNGLMULTITEXCOORD4DPROC __glMultiTexCoord4d;
internal static PFNGLMULTITEXCOORD4DVPROC __glMultiTexCoord4dv;
internal static PFNGLMULTITEXCOORD4FPROC __glMultiTexCoord4f;
internal static PFNGLMULTITEXCOORD4FVPROC __glMultiTexCoord4fv;
internal static PFNGLMULTITEXCOORD4IPROC __glMultiTexCoord4i;
internal static PFNGLMULTITEXCOORD4IVPROC __glMultiTexCoord4iv;
internal static PFNGLMULTITEXCOORD4SPROC __glMultiTexCoord4s;
internal static PFNGLMULTITEXCOORD4SVPROC __glMultiTexCoord4sv;
internal static PFNGLSAMPLECOVERAGEPROC __glSampleCoverage;
internal static PFNGLBLENDCOLORPROC __glBlendColor;
internal static PFNGLBLENDEQUATIONPROC __glBlendEquation;
internal static PFNGLBLENDFUNCSEPARATEPROC __glBlendFuncSeparate;
internal static PFNGLFOGCOORDPOINTERPROC __glFogCoordPointer;
internal static PFNGLFOGCOORDDPROC __glFogCoordd;
internal static PFNGLFOGCOORDDVPROC __glFogCoorddv;
internal static PFNGLFOGCOORDFPROC __glFogCoordf;
internal static PFNGLFOGCOORDFVPROC __glFogCoordfv;
internal static PFNGLMULTIDRAWARRAYSPROC __glMultiDrawArrays;
internal static PFNGLMULTIDRAWELEMENTSPROC __glMultiDrawElements;
internal static PFNGLPOINTPARAMETERFPROC __glPointParameterf;
internal static PFNGLPOINTPARAMETERFVPROC __glPointParameterfv;
internal static PFNGLPOINTPARAMETERIPROC __glPointParameteri;
internal static PFNGLPOINTPARAMETERIVPROC __glPointParameteriv;
internal static PFNGLSECONDARYCOLOR3BPROC __glSecondaryColor3b;
internal static PFNGLSECONDARYCOLOR3BVPROC __glSecondaryColor3bv;
internal static PFNGLSECONDARYCOLOR3DPROC __glSecondaryColor3d;
internal static PFNGLSECONDARYCOLOR3DVPROC __glSecondaryColor3dv;
internal static PFNGLSECONDARYCOLOR3FPROC __glSecondaryColor3f;
internal static PFNGLSECONDARYCOLOR3FVPROC __glSecondaryColor3fv;
internal static PFNGLSECONDARYCOLOR3IPROC __glSecondaryColor3i;
internal static PFNGLSECONDARYCOLOR3IVPROC __glSecondaryColor3iv;
internal static PFNGLSECONDARYCOLOR3SPROC __glSecondaryColor3s;
internal static PFNGLSECONDARYCOLOR3SVPROC __glSecondaryColor3sv;
internal static PFNGLSECONDARYCOLOR3UBPROC __glSecondaryColor3ub;
internal static PFNGLSECONDARYCOLOR3UBVPROC __glSecondaryColor3ubv;
internal static PFNGLSECONDARYCOLOR3UIPROC __glSecondaryColor3ui;
internal static PFNGLSECONDARYCOLOR3UIVPROC __glSecondaryColor3uiv;
internal static PFNGLSECONDARYCOLOR3USPROC __glSecondaryColor3us;
internal static PFNGLSECONDARYCOLOR3USVPROC __glSecondaryColor3usv;
internal static PFNGLSECONDARYCOLORPOINTERPROC __glSecondaryColorPointer;
internal static PFNGLWINDOWPOS2DPROC __glWindowPos2d;
internal static PFNGLWINDOWPOS2DVPROC __glWindowPos2dv;
internal static PFNGLWINDOWPOS2FPROC __glWindowPos2f;
internal static PFNGLWINDOWPOS2FVPROC __glWindowPos2fv;
internal static PFNGLWINDOWPOS2IPROC __glWindowPos2i;
internal static PFNGLWINDOWPOS2IVPROC __glWindowPos2iv;
internal static PFNGLWINDOWPOS2SPROC __glWindowPos2s;
internal static PFNGLWINDOWPOS2SVPROC __glWindowPos2sv;
internal static PFNGLWINDOWPOS3DPROC __glWindowPos3d;
internal static PFNGLWINDOWPOS3DVPROC __glWindowPos3dv;
internal static PFNGLWINDOWPOS3FPROC __glWindowPos3f;
internal static PFNGLWINDOWPOS3FVPROC __glWindowPos3fv;
internal static PFNGLWINDOWPOS3IPROC __glWindowPos3i;
internal static PFNGLWINDOWPOS3IVPROC __glWindowPos3iv;
internal static PFNGLWINDOWPOS3SPROC __glWindowPos3s;
internal static PFNGLWINDOWPOS3SVPROC __glWindowPos3sv;
internal static PFNGLBEGINQUERYPROC __glBeginQuery;
internal static PFNGLBINDBUFFERPROC __glBindBuffer;
internal static PFNGLBUFFERDATAPROC __glBufferData;
internal static PFNGLBUFFERSUBDATAPROC __glBufferSubData;
internal static PFNGLDELETEBUFFERSPROC __glDeleteBuffers;
internal static PFNGLDELETEQUERIESPROC __glDeleteQueries;
internal static PFNGLENDQUERYPROC __glEndQuery;
internal static PFNGLGENBUFFERSPROC __glGenBuffers;
internal static PFNGLGENQUERIESPROC __glGenQueries;
internal static PFNGLGETBUFFERPARAMETERIVPROC __glGetBufferParameteriv;
internal static PFNGLGETBUFFERPOINTERVPROC __glGetBufferPointerv;
internal static PFNGLGETBUFFERSUBDATAPROC __glGetBufferSubData;
internal static PFNGLGETQUERYOBJECTIVPROC __glGetQueryObjectiv;
internal static PFNGLGETQUERYOBJECTUIVPROC __glGetQueryObjectuiv;
internal static PFNGLGETQUERYIVPROC __glGetQueryiv;
internal static PFNGLISBUFFERPROC __glIsBuffer;
internal static PFNGLISQUERYPROC __glIsQuery;
internal static PFNGLMAPBUFFERPROC __glMapBuffer;
internal static PFNGLUNMAPBUFFERPROC __glUnmapBuffer;
internal static PFNGLATTACHSHADERPROC __glAttachShader;
internal static PFNGLBINDATTRIBLOCATIONPROC __glBindAttribLocation;
internal static PFNGLBLENDEQUATIONSEPARATEPROC __glBlendEquationSeparate;
internal static PFNGLCOMPILESHADERPROC __glCompileShader;
internal static PFNGLCREATEPROGRAMPROC __glCreateProgram;
internal static PFNGLCREATESHADERPROC __glCreateShader;
internal static PFNGLDELETEPROGRAMPROC __glDeleteProgram;
internal static PFNGLDELETESHADERPROC __glDeleteShader;
internal static PFNGLDETACHSHADERPROC __glDetachShader;
internal static PFNGLDISABLEVERTEXATTRIBARRAYPROC __glDisableVertexAttribArray;
internal static PFNGLDRAWBUFFERSPROC __glDrawBuffers;
internal static PFNGLENABLEVERTEXATTRIBARRAYPROC __glEnableVertexAttribArray;
internal static PFNGLGETACTIVEATTRIBPROC __glGetActiveAttrib;
internal static PFNGLGETACTIVEUNIFORMPROC __glGetActiveUniform;
internal static PFNGLGETATTACHEDSHADERSPROC __glGetAttachedShaders;
internal static PFNGLGETATTRIBLOCATIONPROC __glGetAttribLocation;
internal static PFNGLGETPROGRAMINFOLOGPROC __glGetProgramInfoLog;
internal static PFNGLGETPROGRAMIVPROC __glGetProgramiv;
internal static PFNGLGETSHADERINFOLOGPROC __glGetShaderInfoLog;
internal static PFNGLGETSHADERSOURCEPROC __glGetShaderSource;
internal static PFNGLGETSHADERIVPROC __glGetShaderiv;
internal static PFNGLGETUNIFORMLOCATIONPROC __glGetUniformLocation;
internal static PFNGLGETUNIFORMFVPROC __glGetUniformfv;
internal static PFNGLGETUNIFORMIVPROC __glGetUniformiv;
internal static PFNGLGETVERTEXATTRIBPOINTERVPROC __glGetVertexAttribPointerv;
internal static PFNGLGETVERTEXATTRIBDVPROC __glGetVertexAttribdv;
internal static PFNGLGETVERTEXATTRIBFVPROC __glGetVertexAttribfv;
internal static PFNGLGETVERTEXATTRIBIVPROC __glGetVertexAttribiv;
internal static PFNGLISPROGRAMPROC __glIsProgram;
internal static PFNGLISSHADERPROC __glIsShader;
internal static PFNGLLINKPROGRAMPROC __glLinkProgram;
internal static PFNGLSHADERSOURCEPROC __glShaderSource;
internal static PFNGLSTENCILFUNCSEPARATEPROC __glStencilFuncSeparate;
internal static PFNGLSTENCILMASKSEPARATEPROC __glStencilMaskSeparate;
internal static PFNGLSTENCILOPSEPARATEPROC __glStencilOpSeparate;
internal static PFNGLUNIFORM1FPROC __glUniform1f;
internal static PFNGLUNIFORM1FVPROC __glUniform1fv;
internal static PFNGLUNIFORM1IPROC __glUniform1i;
internal static PFNGLUNIFORM1IVPROC __glUniform1iv;
internal static PFNGLUNIFORM2FPROC __glUniform2f;
internal static PFNGLUNIFORM2FVPROC __glUniform2fv;
internal static PFNGLUNIFORM2IPROC __glUniform2i;
internal static PFNGLUNIFORM2IVPROC __glUniform2iv;
internal static PFNGLUNIFORM3FPROC __glUniform3f;
internal static PFNGLUNIFORM3FVPROC __glUniform3fv;
internal static PFNGLUNIFORM3IPROC __glUniform3i;
internal static PFNGLUNIFORM3IVPROC __glUniform3iv;
internal static PFNGLUNIFORM4FPROC __glUniform4f;
internal static PFNGLUNIFORM4FVPROC __glUniform4fv;
internal static PFNGLUNIFORM4IPROC __glUniform4i;
internal static PFNGLUNIFORM4IVPROC __glUniform4iv;
internal static PFNGLUNIFORMMATRIX2FVPROC __glUniformMatrix2fv;
internal static PFNGLUNIFORMMATRIX3FVPROC __glUniformMatrix3fv;
internal static PFNGLUNIFORMMATRIX4FVPROC __glUniformMatrix4fv;
internal static PFNGLUSEPROGRAMPROC __glUseProgram;
internal static PFNGLVALIDATEPROGRAMPROC __glValidateProgram;
internal static PFNGLVERTEXATTRIB1DPROC __glVertexAttrib1d;
internal static PFNGLVERTEXATTRIB1DVPROC __glVertexAttrib1dv;
internal static PFNGLVERTEXATTRIB1FPROC __glVertexAttrib1f;
internal static PFNGLVERTEXATTRIB1FVPROC __glVertexAttrib1fv;
internal static PFNGLVERTEXATTRIB1SPROC __glVertexAttrib1s;
internal static PFNGLVERTEXATTRIB1SVPROC __glVertexAttrib1sv;
internal static PFNGLVERTEXATTRIB2DPROC __glVertexAttrib2d;
internal static PFNGLVERTEXATTRIB2DVPROC __glVertexAttrib2dv;
internal static PFNGLVERTEXATTRIB2FPROC __glVertexAttrib2f;
internal static PFNGLVERTEXATTRIB2FVPROC __glVertexAttrib2fv;
internal static PFNGLVERTEXATTRIB2SPROC __glVertexAttrib2s;
internal static PFNGLVERTEXATTRIB2SVPROC __glVertexAttrib2sv;
internal static PFNGLVERTEXATTRIB3DPROC __glVertexAttrib3d;
internal static PFNGLVERTEXATTRIB3DVPROC __glVertexAttrib3dv;
internal static PFNGLVERTEXATTRIB3FPROC __glVertexAttrib3f;
internal static PFNGLVERTEXATTRIB3FVPROC __glVertexAttrib3fv;
internal static PFNGLVERTEXATTRIB3SPROC __glVertexAttrib3s;
internal static PFNGLVERTEXATTRIB3SVPROC __glVertexAttrib3sv;
internal static PFNGLVERTEXATTRIB4NBVPROC __glVertexAttrib4Nbv;
internal static PFNGLVERTEXATTRIB4NIVPROC __glVertexAttrib4Niv;
internal static PFNGLVERTEXATTRIB4NSVPROC __glVertexAttrib4Nsv;
internal static PFNGLVERTEXATTRIB4NUBPROC __glVertexAttrib4Nub;
internal static PFNGLVERTEXATTRIB4NUBVPROC __glVertexAttrib4Nubv;
internal static PFNGLVERTEXATTRIB4NUIVPROC __glVertexAttrib4Nuiv;
internal static PFNGLVERTEXATTRIB4NUSVPROC __glVertexAttrib4Nusv;
internal static PFNGLVERTEXATTRIB4BVPROC __glVertexAttrib4bv;
internal static PFNGLVERTEXATTRIB4DPROC __glVertexAttrib4d;
internal static PFNGLVERTEXATTRIB4DVPROC __glVertexAttrib4dv;
internal static PFNGLVERTEXATTRIB4FPROC __glVertexAttrib4f;
internal static PFNGLVERTEXATTRIB4FVPROC __glVertexAttrib4fv;
internal static PFNGLVERTEXATTRIB4IVPROC __glVertexAttrib4iv;
internal static PFNGLVERTEXATTRIB4SPROC __glVertexAttrib4s;
internal static PFNGLVERTEXATTRIB4SVPROC __glVertexAttrib4sv;
internal static PFNGLVERTEXATTRIB4UBVPROC __glVertexAttrib4ubv;
internal static PFNGLVERTEXATTRIB4UIVPROC __glVertexAttrib4uiv;
internal static PFNGLVERTEXATTRIB4USVPROC __glVertexAttrib4usv;
internal static PFNGLVERTEXATTRIBPOINTERPROC __glVertexAttribPointer;
internal static PFNGLUNIFORMMATRIX2X3FVPROC __glUniformMatrix2x3fv;
internal static PFNGLUNIFORMMATRIX2X4FVPROC __glUniformMatrix2x4fv;
internal static PFNGLUNIFORMMATRIX3X2FVPROC __glUniformMatrix3x2fv;
internal static PFNGLUNIFORMMATRIX3X4FVPROC __glUniformMatrix3x4fv;
internal static PFNGLUNIFORMMATRIX4X2FVPROC __glUniformMatrix4x2fv;
internal static PFNGLUNIFORMMATRIX4X3FVPROC __glUniformMatrix4x3fv;
internal static PFNGLBEGINCONDITIONALRENDERPROC __glBeginConditionalRender;
internal static PFNGLBEGINTRANSFORMFEEDBACKPROC __glBeginTransformFeedback;
internal static PFNGLBINDFRAGDATALOCATIONPROC __glBindFragDataLocation;
internal static PFNGLCLAMPCOLORPROC __glClampColor;
internal static PFNGLCLEARBUFFERFIPROC __glClearBufferfi;
internal static PFNGLCLEARBUFFERFVPROC __glClearBufferfv;
internal static PFNGLCLEARBUFFERIVPROC __glClearBufferiv;
internal static PFNGLCLEARBUFFERUIVPROC __glClearBufferuiv;
internal static PFNGLCOLORMASKIPROC __glColorMaski;
internal static PFNGLDISABLEIPROC __glDisablei;
internal static PFNGLENABLEIPROC __glEnablei;
internal static PFNGLENDCONDITIONALRENDERPROC __glEndConditionalRender;
internal static PFNGLENDTRANSFORMFEEDBACKPROC __glEndTransformFeedback;
internal static PFNGLGETBOOLEANI_VPROC __glGetBooleani_v;
internal static PFNGLGETFRAGDATALOCATIONPROC __glGetFragDataLocation;
internal static PFNGLGETSTRINGIPROC __glGetStringi;
internal static PFNGLGETTEXPARAMETERIIVPROC __glGetTexParameterIiv;
internal static PFNGLGETTEXPARAMETERIUIVPROC __glGetTexParameterIuiv;
internal static PFNGLGETTRANSFORMFEEDBACKVARYINGPROC __glGetTransformFeedbackVarying;
internal static PFNGLGETUNIFORMUIVPROC __glGetUniformuiv;
internal static PFNGLGETVERTEXATTRIBIIVPROC __glGetVertexAttribIiv;
internal static PFNGLGETVERTEXATTRIBIUIVPROC __glGetVertexAttribIuiv;
internal static PFNGLISENABLEDIPROC __glIsEnabledi;
internal static PFNGLTEXPARAMETERIIVPROC __glTexParameterIiv;
internal static PFNGLTEXPARAMETERIUIVPROC __glTexParameterIuiv;
internal static PFNGLTRANSFORMFEEDBACKVARYINGSPROC __glTransformFeedbackVaryings;
internal static PFNGLUNIFORM1UIPROC __glUniform1ui;
internal static PFNGLUNIFORM1UIVPROC __glUniform1uiv;
internal static PFNGLUNIFORM2UIPROC __glUniform2ui;
internal static PFNGLUNIFORM2UIVPROC __glUniform2uiv;
internal static PFNGLUNIFORM3UIPROC __glUniform3ui;
internal static PFNGLUNIFORM3UIVPROC __glUniform3uiv;
internal static PFNGLUNIFORM4UIPROC __glUniform4ui;
internal static PFNGLUNIFORM4UIVPROC __glUniform4uiv;
internal static PFNGLVERTEXATTRIBI1IPROC __glVertexAttribI1i;
internal static PFNGLVERTEXATTRIBI1IVPROC __glVertexAttribI1iv;
internal static PFNGLVERTEXATTRIBI1UIPROC __glVertexAttribI1ui;
internal static PFNGLVERTEXATTRIBI1UIVPROC __glVertexAttribI1uiv;
internal static PFNGLVERTEXATTRIBI2IPROC __glVertexAttribI2i;
internal static PFNGLVERTEXATTRIBI2IVPROC __glVertexAttribI2iv;
internal static PFNGLVERTEXATTRIBI2UIPROC __glVertexAttribI2ui;
internal static PFNGLVERTEXATTRIBI2UIVPROC __glVertexAttribI2uiv;
internal static PFNGLVERTEXATTRIBI3IPROC __glVertexAttribI3i;
internal static PFNGLVERTEXATTRIBI3IVPROC __glVertexAttribI3iv;
internal static PFNGLVERTEXATTRIBI3UIPROC __glVertexAttribI3ui;
internal static PFNGLVERTEXATTRIBI3UIVPROC __glVertexAttribI3uiv;
internal static PFNGLVERTEXATTRIBI4BVPROC __glVertexAttribI4bv;
internal static PFNGLVERTEXATTRIBI4IPROC __glVertexAttribI4i;
internal static PFNGLVERTEXATTRIBI4IVPROC __glVertexAttribI4iv;
internal static PFNGLVERTEXATTRIBI4SVPROC __glVertexAttribI4sv;
internal static PFNGLVERTEXATTRIBI4UBVPROC __glVertexAttribI4ubv;
internal static PFNGLVERTEXATTRIBI4UIPROC __glVertexAttribI4ui;
internal static PFNGLVERTEXATTRIBI4UIVPROC __glVertexAttribI4uiv;
internal static PFNGLVERTEXATTRIBI4USVPROC __glVertexAttribI4usv;
internal static PFNGLVERTEXATTRIBIPOINTERPROC __glVertexAttribIPointer;
internal static PFNGLDRAWARRAYSINSTANCEDPROC __glDrawArraysInstanced;
internal static PFNGLDRAWELEMENTSINSTANCEDPROC __glDrawElementsInstanced;
internal static PFNGLPRIMITIVERESTARTINDEXPROC __glPrimitiveRestartIndex;
internal static PFNGLTEXBUFFERPROC __glTexBuffer;
internal static PFNGLFRAMEBUFFERTEXTUREPROC __glFramebufferTexture;
internal static PFNGLGETBUFFERPARAMETERI64VPROC __glGetBufferParameteri64v;
internal static PFNGLGETINTEGER64I_VPROC __glGetInteger64i_v;
internal static PFNGLVERTEXATTRIBDIVISORPROC __glVertexAttribDivisor;
internal static PFNGLBLENDEQUATIONSEPARATEIPROC __glBlendEquationSeparatei;
internal static PFNGLBLENDEQUATIONIPROC __glBlendEquationi;
internal static PFNGLBLENDFUNCSEPARATEIPROC __glBlendFuncSeparatei;
internal static PFNGLBLENDFUNCIPROC __glBlendFunci;
internal static PFNGLMINSAMPLESHADINGPROC __glMinSampleShading;
internal static PFNGLTBUFFERMASK3DFXPROC __glTbufferMask3DFX;
internal static PFNGLDEBUGMESSAGECALLBACKAMDPROC __glDebugMessageCallbackAMD;
internal static PFNGLDEBUGMESSAGEENABLEAMDPROC __glDebugMessageEnableAMD;
internal static PFNGLDEBUGMESSAGEINSERTAMDPROC __glDebugMessageInsertAMD;
internal static PFNGLGETDEBUGMESSAGELOGAMDPROC __glGetDebugMessageLogAMD;
internal static PFNGLBLENDEQUATIONINDEXEDAMDPROC __glBlendEquationIndexedAMD;
internal static PFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC __glBlendEquationSeparateIndexedAMD;
internal static PFNGLBLENDFUNCINDEXEDAMDPROC __glBlendFuncIndexedAMD;
internal static PFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC __glBlendFuncSeparateIndexedAMD;
internal static PFNGLDELETENAMESAMDPROC __glDeleteNamesAMD;
internal static PFNGLGENNAMESAMDPROC __glGenNamesAMD;
internal static PFNGLISNAMEAMDPROC __glIsNameAMD;
internal static PFNGLBEGINPERFMONITORAMDPROC __glBeginPerfMonitorAMD;
internal static PFNGLDELETEPERFMONITORSAMDPROC __glDeletePerfMonitorsAMD;
internal static PFNGLENDPERFMONITORAMDPROC __glEndPerfMonitorAMD;
internal static PFNGLGENPERFMONITORSAMDPROC __glGenPerfMonitorsAMD;
internal static PFNGLGETPERFMONITORCOUNTERDATAAMDPROC __glGetPerfMonitorCounterDataAMD;
internal static PFNGLGETPERFMONITORCOUNTERINFOAMDPROC __glGetPerfMonitorCounterInfoAMD;
internal static PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC __glGetPerfMonitorCounterStringAMD;
internal static PFNGLGETPERFMONITORCOUNTERSAMDPROC __glGetPerfMonitorCountersAMD;
internal static PFNGLGETPERFMONITORGROUPSTRINGAMDPROC __glGetPerfMonitorGroupStringAMD;
internal static PFNGLGETPERFMONITORGROUPSAMDPROC __glGetPerfMonitorGroupsAMD;
internal static PFNGLSELECTPERFMONITORCOUNTERSAMDPROC __glSelectPerfMonitorCountersAMD;
internal static PFNGLSETMULTISAMPLEFVAMDPROC __glSetMultisamplefvAMD;
internal static PFNGLTESSELLATIONFACTORAMDPROC __glTessellationFactorAMD;
internal static PFNGLTESSELLATIONMODEAMDPROC __glTessellationModeAMD;
internal static PFNGLDRAWELEMENTARRAYAPPLEPROC __glDrawElementArrayAPPLE;
internal static PFNGLDRAWRANGEELEMENTARRAYAPPLEPROC __glDrawRangeElementArrayAPPLE;
internal static PFNGLELEMENTPOINTERAPPLEPROC __glElementPointerAPPLE;
internal static PFNGLMULTIDRAWELEMENTARRAYAPPLEPROC __glMultiDrawElementArrayAPPLE;
internal static PFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC __glMultiDrawRangeElementArrayAPPLE;
internal static PFNGLDELETEFENCESAPPLEPROC __glDeleteFencesAPPLE;
internal static PFNGLFINISHFENCEAPPLEPROC __glFinishFenceAPPLE;
internal static PFNGLFINISHOBJECTAPPLEPROC __glFinishObjectAPPLE;
internal static PFNGLGENFENCESAPPLEPROC __glGenFencesAPPLE;
internal static PFNGLISFENCEAPPLEPROC __glIsFenceAPPLE;
internal static PFNGLSETFENCEAPPLEPROC __glSetFenceAPPLE;
internal static PFNGLTESTFENCEAPPLEPROC __glTestFenceAPPLE;
internal static PFNGLTESTOBJECTAPPLEPROC __glTestObjectAPPLE;
internal static PFNGLBUFFERPARAMETERIAPPLEPROC __glBufferParameteriAPPLE;
internal static PFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC __glFlushMappedBufferRangeAPPLE;
internal static PFNGLGETOBJECTPARAMETERIVAPPLEPROC __glGetObjectParameterivAPPLE;
internal static PFNGLOBJECTPURGEABLEAPPLEPROC __glObjectPurgeableAPPLE;
internal static PFNGLOBJECTUNPURGEABLEAPPLEPROC __glObjectUnpurgeableAPPLE;
internal static PFNGLGETTEXPARAMETERPOINTERVAPPLEPROC __glGetTexParameterPointervAPPLE;
internal static PFNGLTEXTURERANGEAPPLEPROC __glTextureRangeAPPLE;
internal static PFNGLBINDVERTEXARRAYAPPLEPROC __glBindVertexArrayAPPLE;
internal static PFNGLDELETEVERTEXARRAYSAPPLEPROC __glDeleteVertexArraysAPPLE;
internal static PFNGLGENVERTEXARRAYSAPPLEPROC __glGenVertexArraysAPPLE;
internal static PFNGLISVERTEXARRAYAPPLEPROC __glIsVertexArrayAPPLE;
internal static PFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC __glFlushVertexArrayRangeAPPLE;
internal static PFNGLVERTEXARRAYPARAMETERIAPPLEPROC __glVertexArrayParameteriAPPLE;
internal static PFNGLVERTEXARRAYRANGEAPPLEPROC __glVertexArrayRangeAPPLE;
internal static PFNGLDISABLEVERTEXATTRIBAPPLEPROC __glDisableVertexAttribAPPLE;
internal static PFNGLENABLEVERTEXATTRIBAPPLEPROC __glEnableVertexAttribAPPLE;
internal static PFNGLISVERTEXATTRIBENABLEDAPPLEPROC __glIsVertexAttribEnabledAPPLE;
internal static PFNGLMAPVERTEXATTRIB1DAPPLEPROC __glMapVertexAttrib1dAPPLE;
internal static PFNGLMAPVERTEXATTRIB1FAPPLEPROC __glMapVertexAttrib1fAPPLE;
internal static PFNGLMAPVERTEXATTRIB2DAPPLEPROC __glMapVertexAttrib2dAPPLE;
internal static PFNGLMAPVERTEXATTRIB2FAPPLEPROC __glMapVertexAttrib2fAPPLE;
internal static PFNGLCLEARDEPTHFPROC __glClearDepthf;
internal static PFNGLDEPTHRANGEFPROC __glDepthRangef;
internal static PFNGLGETSHADERPRECISIONFORMATPROC __glGetShaderPrecisionFormat;
internal static PFNGLRELEASESHADERCOMPILERPROC __glReleaseShaderCompiler;
internal static PFNGLSHADERBINARYPROC __glShaderBinary;
internal static PFNGLBINDFRAGDATALOCATIONINDEXEDPROC __glBindFragDataLocationIndexed;
internal static PFNGLGETFRAGDATAINDEXPROC __glGetFragDataIndex;
internal static PFNGLCREATESYNCFROMCLEVENTARBPROC __glCreateSyncFromCLeventARB;
internal static PFNGLCLAMPCOLORARBPROC __glClampColorARB;
internal static PFNGLCOPYBUFFERSUBDATAPROC __glCopyBufferSubData;
internal static PFNGLDEBUGMESSAGECALLBACKARBPROC __glDebugMessageCallbackARB;
internal static PFNGLDEBUGMESSAGECONTROLARBPROC __glDebugMessageControlARB;
internal static PFNGLDEBUGMESSAGEINSERTARBPROC __glDebugMessageInsertARB;
internal static PFNGLGETDEBUGMESSAGELOGARBPROC __glGetDebugMessageLogARB;
internal static PFNGLDRAWBUFFERSARBPROC __glDrawBuffersARB;
internal static PFNGLBLENDEQUATIONSEPARATEIARBPROC __glBlendEquationSeparateiARB;
internal static PFNGLBLENDEQUATIONIARBPROC __glBlendEquationiARB;
internal static PFNGLBLENDFUNCSEPARATEIARBPROC __glBlendFuncSeparateiARB;
internal static PFNGLBLENDFUNCIARBPROC __glBlendFunciARB;
internal static PFNGLDRAWELEMENTSBASEVERTEXPROC __glDrawElementsBaseVertex;
internal static PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC __glDrawElementsInstancedBaseVertex;
internal static PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC __glDrawRangeElementsBaseVertex;
internal static PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC __glMultiDrawElementsBaseVertex;
internal static PFNGLDRAWARRAYSINDIRECTPROC __glDrawArraysIndirect;
internal static PFNGLDRAWELEMENTSINDIRECTPROC __glDrawElementsIndirect;
internal static PFNGLBINDFRAMEBUFFERPROC __glBindFramebuffer;
internal static PFNGLBINDRENDERBUFFERPROC __glBindRenderbuffer;
internal static PFNGLBLITFRAMEBUFFERPROC __glBlitFramebuffer;
internal static PFNGLCHECKFRAMEBUFFERSTATUSPROC __glCheckFramebufferStatus;
internal static PFNGLDELETEFRAMEBUFFERSPROC __glDeleteFramebuffers;
internal static PFNGLDELETERENDERBUFFERSPROC __glDeleteRenderbuffers;
internal static PFNGLFRAMEBUFFERRENDERBUFFERPROC __glFramebufferRenderbuffer;
internal static PFNGLFRAMEBUFFERTEXTURE1DPROC __glFramebufferTexture1D;
internal static PFNGLFRAMEBUFFERTEXTURE2DPROC __glFramebufferTexture2D;
internal static PFNGLFRAMEBUFFERTEXTURE3DPROC __glFramebufferTexture3D;
internal static PFNGLFRAMEBUFFERTEXTURELAYERPROC __glFramebufferTextureLayer;
internal static PFNGLGENFRAMEBUFFERSPROC __glGenFramebuffers;
internal static PFNGLGENRENDERBUFFERSPROC __glGenRenderbuffers;
internal static PFNGLGENERATEMIPMAPPROC __glGenerateMipmap;
internal static PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC __glGetFramebufferAttachmentParameteriv;
internal static PFNGLGETRENDERBUFFERPARAMETERIVPROC __glGetRenderbufferParameteriv;
internal static PFNGLISFRAMEBUFFERPROC __glIsFramebuffer;
internal static PFNGLISRENDERBUFFERPROC __glIsRenderbuffer;
internal static PFNGLRENDERBUFFERSTORAGEPROC __glRenderbufferStorage;
internal static PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC __glRenderbufferStorageMultisample;
internal static PFNGLFRAMEBUFFERTEXTUREARBPROC __glFramebufferTextureARB;
internal static PFNGLFRAMEBUFFERTEXTUREFACEARBPROC __glFramebufferTextureFaceARB;
internal static PFNGLFRAMEBUFFERTEXTURELAYERARBPROC __glFramebufferTextureLayerARB;
internal static PFNGLPROGRAMPARAMETERIARBPROC __glProgramParameteriARB;
internal static PFNGLGETPROGRAMBINARYPROC __glGetProgramBinary;
internal static PFNGLPROGRAMBINARYPROC __glProgramBinary;
internal static PFNGLPROGRAMPARAMETERIPROC __glProgramParameteri;
internal static PFNGLGETUNIFORMDVPROC __glGetUniformdv;
internal static PFNGLPROGRAMUNIFORM1DEXTPROC __glProgramUniform1dEXT;
internal static PFNGLPROGRAMUNIFORM1DVEXTPROC __glProgramUniform1dvEXT;
internal static PFNGLPROGRAMUNIFORM2DEXTPROC __glProgramUniform2dEXT;
internal static PFNGLPROGRAMUNIFORM2DVEXTPROC __glProgramUniform2dvEXT;
internal static PFNGLPROGRAMUNIFORM3DEXTPROC __glProgramUniform3dEXT;
internal static PFNGLPROGRAMUNIFORM3DVEXTPROC __glProgramUniform3dvEXT;
internal static PFNGLPROGRAMUNIFORM4DEXTPROC __glProgramUniform4dEXT;
internal static PFNGLPROGRAMUNIFORM4DVEXTPROC __glProgramUniform4dvEXT;
internal static PFNGLPROGRAMUNIFORMMATRIX2DVEXTPROC __glProgramUniformMatrix2dvEXT;
internal static PFNGLPROGRAMUNIFORMMATRIX2X3DVEXTPROC __glProgramUniformMatrix2x3dvEXT;
internal static PFNGLPROGRAMUNIFORMMATRIX2X4DVEXTPROC __glProgramUniformMatrix2x4dvEXT;
internal static PFNGLPROGRAMUNIFORMMATRIX3DVEXTPROC __glProgramUniformMatrix3dvEXT;
internal static PFNGLPROGRAMUNIFORMMATRIX3X2DVEXTPROC __glProgramUniformMatrix3x2dvEXT;
internal static PFNGLPROGRAMUNIFORMMATRIX3X4DVEXTPROC __glProgramUniformMatrix3x4dvEXT;
internal static PFNGLPROGRAMUNIFORMMATRIX4DVEXTPROC __glProgramUniformMatrix4dvEXT;
internal static PFNGLPROGRAMUNIFORMMATRIX4X2DVEXTPROC __glProgramUniformMatrix4x2dvEXT;
internal static PFNGLPROGRAMUNIFORMMATRIX4X3DVEXTPROC __glProgramUniformMatrix4x3dvEXT;
internal static PFNGLUNIFORM1DPROC __glUniform1d;
internal static PFNGLUNIFORM1DVPROC __glUniform1dv;
internal static PFNGLUNIFORM2DPROC __glUniform2d;
internal static PFNGLUNIFORM2DVPROC __glUniform2dv;
internal static PFNGLUNIFORM3DPROC __glUniform3d;
internal static PFNGLUNIFORM3DVPROC __glUniform3dv;
internal static PFNGLUNIFORM4DPROC __glUniform4d;
internal static PFNGLUNIFORM4DVPROC __glUniform4dv;
internal static PFNGLUNIFORMMATRIX2DVPROC __glUniformMatrix2dv;
internal static PFNGLUNIFORMMATRIX2X3DVPROC __glUniformMatrix2x3dv;
internal static PFNGLUNIFORMMATRIX2X4DVPROC __glUniformMatrix2x4dv;
internal static PFNGLUNIFORMMATRIX3DVPROC __glUniformMatrix3dv;
internal static PFNGLUNIFORMMATRIX3X2DVPROC __glUniformMatrix3x2dv;
internal static PFNGLUNIFORMMATRIX3X4DVPROC __glUniformMatrix3x4dv;
internal static PFNGLUNIFORMMATRIX4DVPROC __glUniformMatrix4dv;
internal static PFNGLUNIFORMMATRIX4X2DVPROC __glUniformMatrix4x2dv;
internal static PFNGLUNIFORMMATRIX4X3DVPROC __glUniformMatrix4x3dv;
internal static PFNGLCOLORSUBTABLEPROC __glColorSubTable;
internal static PFNGLCOLORTABLEPROC __glColorTable;
internal static PFNGLCOLORTABLEPARAMETERFVPROC __glColorTableParameterfv;
internal static PFNGLCOLORTABLEPARAMETERIVPROC __glColorTableParameteriv;
internal static PFNGLCONVOLUTIONFILTER1DPROC __glConvolutionFilter1D;
internal static PFNGLCONVOLUTIONFILTER2DPROC __glConvolutionFilter2D;
internal static PFNGLCONVOLUTIONPARAMETERFPROC __glConvolutionParameterf;
internal static PFNGLCONVOLUTIONPARAMETERFVPROC __glConvolutionParameterfv;
internal static PFNGLCONVOLUTIONPARAMETERIPROC __glConvolutionParameteri;
internal static PFNGLCONVOLUTIONPARAMETERIVPROC __glConvolutionParameteriv;
internal static PFNGLCOPYCOLORSUBTABLEPROC __glCopyColorSubTable;
internal static PFNGLCOPYCOLORTABLEPROC __glCopyColorTable;
internal static PFNGLCOPYCONVOLUTIONFILTER1DPROC __glCopyConvolutionFilter1D;
internal static PFNGLCOPYCONVOLUTIONFILTER2DPROC __glCopyConvolutionFilter2D;
internal static PFNGLGETCOLORTABLEPROC __glGetColorTable;
internal static PFNGLGETCOLORTABLEPARAMETERFVPROC __glGetColorTableParameterfv;
internal static PFNGLGETCOLORTABLEPARAMETERIVPROC __glGetColorTableParameteriv;
internal static PFNGLGETCONVOLUTIONFILTERPROC __glGetConvolutionFilter;
internal static PFNGLGETCONVOLUTIONPARAMETERFVPROC __glGetConvolutionParameterfv;
internal static PFNGLGETCONVOLUTIONPARAMETERIVPROC __glGetConvolutionParameteriv;
internal static PFNGLGETHISTOGRAMPROC __glGetHistogram;
internal static PFNGLGETHISTOGRAMPARAMETERFVPROC __glGetHistogramParameterfv;
internal static PFNGLGETHISTOGRAMPARAMETERIVPROC __glGetHistogramParameteriv;
internal static PFNGLGETMINMAXPROC __glGetMinmax;
internal static PFNGLGETMINMAXPARAMETERFVPROC __glGetMinmaxParameterfv;
internal static PFNGLGETMINMAXPARAMETERIVPROC __glGetMinmaxParameteriv;
internal static PFNGLGETSEPARABLEFILTERPROC __glGetSeparableFilter;
internal static PFNGLHISTOGRAMPROC __glHistogram;
internal static PFNGLMINMAXPROC __glMinmax;
internal static PFNGLRESETHISTOGRAMPROC __glResetHistogram;
internal static PFNGLRESETMINMAXPROC __glResetMinmax;
internal static PFNGLSEPARABLEFILTER2DPROC __glSeparableFilter2D;
internal static PFNGLDRAWARRAYSINSTANCEDARBPROC __glDrawArraysInstancedARB;
internal static PFNGLDRAWELEMENTSINSTANCEDARBPROC __glDrawElementsInstancedARB;
internal static PFNGLVERTEXATTRIBDIVISORARBPROC __glVertexAttribDivisorARB;
internal static PFNGLFLUSHMAPPEDBUFFERRANGEPROC __glFlushMappedBufferRange;
internal static PFNGLMAPBUFFERRANGEPROC __glMapBufferRange;
internal static PFNGLCURRENTPALETTEMATRIXARBPROC __glCurrentPaletteMatrixARB;
internal static PFNGLMATRIXINDEXPOINTERARBPROC __glMatrixIndexPointerARB;
internal static PFNGLMATRIXINDEXUBVARBPROC __glMatrixIndexubvARB;
internal static PFNGLMATRIXINDEXUIVARBPROC __glMatrixIndexuivARB;
internal static PFNGLMATRIXINDEXUSVARBPROC __glMatrixIndexusvARB;
internal static PFNGLSAMPLECOVERAGEARBPROC __glSampleCoverageARB;
internal static PFNGLACTIVETEXTUREARBPROC __glActiveTextureARB;
internal static PFNGLCLIENTACTIVETEXTUREARBPROC __glClientActiveTextureARB;
internal static PFNGLMULTITEXCOORD1DARBPROC __glMultiTexCoord1dARB;
internal static PFNGLMULTITEXCOORD1DVARBPROC __glMultiTexCoord1dvARB;
internal static PFNGLMULTITEXCOORD1FARBPROC __glMultiTexCoord1fARB;
internal static PFNGLMULTITEXCOORD1FVARBPROC __glMultiTexCoord1fvARB;
internal static PFNGLMULTITEXCOORD1IARBPROC __glMultiTexCoord1iARB;
internal static PFNGLMULTITEXCOORD1IVARBPROC __glMultiTexCoord1ivARB;
internal static PFNGLMULTITEXCOORD1SARBPROC __glMultiTexCoord1sARB;
internal static PFNGLMULTITEXCOORD1SVARBPROC __glMultiTexCoord1svARB;
internal static PFNGLMULTITEXCOORD2DARBPROC __glMultiTexCoord2dARB;
internal static PFNGLMULTITEXCOORD2DVARBPROC __glMultiTexCoord2dvARB;
internal static PFNGLMULTITEXCOORD2FARBPROC __glMultiTexCoord2fARB;
internal static PFNGLMULTITEXCOORD2FVARBPROC __glMultiTexCoord2fvARB;
internal static PFNGLMULTITEXCOORD2IARBPROC __glMultiTexCoord2iARB;
internal static PFNGLMULTITEXCOORD2IVARBPROC __glMultiTexCoord2ivARB;
internal static PFNGLMULTITEXCOORD2SARBPROC __glMultiTexCoord2sARB;
internal static PFNGLMULTITEXCOORD2SVARBPROC __glMultiTexCoord2svARB;
internal static PFNGLMULTITEXCOORD3DARBPROC __glMultiTexCoord3dARB;
internal static PFNGLMULTITEXCOORD3DVARBPROC __glMultiTexCoord3dvARB;
internal static PFNGLMULTITEXCOORD3FARBPROC __glMultiTexCoord3fARB;
internal static PFNGLMULTITEXCOORD3FVARBPROC __glMultiTexCoord3fvARB;
internal static PFNGLMULTITEXCOORD3IARBPROC __glMultiTexCoord3iARB;
internal static PFNGLMULTITEXCOORD3IVARBPROC __glMultiTexCoord3ivARB;
internal static PFNGLMULTITEXCOORD3SARBPROC __glMultiTexCoord3sARB;
internal static PFNGLMULTITEXCOORD3SVARBPROC __glMultiTexCoord3svARB;
internal static PFNGLMULTITEXCOORD4DARBPROC __glMultiTexCoord4dARB;
internal static PFNGLMULTITEXCOORD4DVARBPROC __glMultiTexCoord4dvARB;
internal static PFNGLMULTITEXCOORD4FARBPROC __glMultiTexCoord4fARB;
internal static PFNGLMULTITEXCOORD4FVARBPROC __glMultiTexCoord4fvARB;
internal static PFNGLMULTITEXCOORD4IARBPROC __glMultiTexCoord4iARB;
internal static PFNGLMULTITEXCOORD4IVARBPROC __glMultiTexCoord4ivARB;
internal static PFNGLMULTITEXCOORD4SARBPROC __glMultiTexCoord4sARB;
internal static PFNGLMULTITEXCOORD4SVARBPROC __glMultiTexCoord4svARB;
internal static PFNGLBEGINQUERYARBPROC __glBeginQueryARB;
internal static PFNGLDELETEQUERIESARBPROC __glDeleteQueriesARB;
internal static PFNGLENDQUERYARBPROC __glEndQueryARB;
internal static PFNGLGENQUERIESARBPROC __glGenQueriesARB;
internal static PFNGLGETQUERYOBJECTIVARBPROC __glGetQueryObjectivARB;
internal static PFNGLGETQUERYOBJECTUIVARBPROC __glGetQueryObjectuivARB;
internal static PFNGLGETQUERYIVARBPROC __glGetQueryivARB;
internal static PFNGLISQUERYARBPROC __glIsQueryARB;
internal static PFNGLPOINTPARAMETERFARBPROC __glPointParameterfARB;
internal static PFNGLPOINTPARAMETERFVARBPROC __glPointParameterfvARB;
internal static PFNGLPROVOKINGVERTEXPROC __glProvokingVertex;
internal static PFNGLGETNCOLORTABLEARBPROC __glGetnColorTableARB;
internal static PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC __glGetnCompressedTexImageARB;
internal static PFNGLGETNCONVOLUTIONFILTERARBPROC __glGetnConvolutionFilterARB;
internal static PFNGLGETNHISTOGRAMARBPROC __glGetnHistogramARB;
internal static PFNGLGETNMAPDVARBPROC __glGetnMapdvARB;
internal static PFNGLGETNMAPFVARBPROC __glGetnMapfvARB;
internal static PFNGLGETNMAPIVARBPROC __glGetnMapivARB;
internal static PFNGLGETNMINMAXARBPROC __glGetnMinmaxARB;
internal static PFNGLGETNPIXELMAPFVARBPROC __glGetnPixelMapfvARB;
internal static PFNGLGETNPIXELMAPUIVARBPROC __glGetnPixelMapuivARB;
internal static PFNGLGETNPIXELMAPUSVARBPROC __glGetnPixelMapusvARB;
internal static PFNGLGETNPOLYGONSTIPPLEARBPROC __glGetnPolygonStippleARB;
internal static PFNGLGETNSEPARABLEFILTERARBPROC __glGetnSeparableFilterARB;
internal static PFNGLGETNTEXIMAGEARBPROC __glGetnTexImageARB;
internal static PFNGLGETNUNIFORMDVARBPROC __glGetnUniformdvARB;
internal static PFNGLGETNUNIFORMFVARBPROC __glGetnUniformfvARB;
internal static PFNGLGETNUNIFORMIVARBPROC __glGetnUniformivARB;
internal static PFNGLGETNUNIFORMUIVARBPROC __glGetnUniformuivARB;
internal static PFNGLREADNPIXELSARBPROC __glReadnPixelsARB;
internal static PFNGLMINSAMPLESHADINGARBPROC __glMinSampleShadingARB;
internal static PFNGLBINDSAMPLERPROC __glBindSampler;
internal static PFNGLDELETESAMPLERSPROC __glDeleteSamplers;
internal static PFNGLGENSAMPLERSPROC __glGenSamplers;
internal static PFNGLGETSAMPLERPARAMETERIIVPROC __glGetSamplerParameterIiv;
internal static PFNGLGETSAMPLERPARAMETERIUIVPROC __glGetSamplerParameterIuiv;
internal static PFNGLGETSAMPLERPARAMETERFVPROC __glGetSamplerParameterfv;
internal static PFNGLGETSAMPLERPARAMETERIVPROC __glGetSamplerParameteriv;
internal static PFNGLISSAMPLERPROC __glIsSampler;
internal static PFNGLSAMPLERPARAMETERIIVPROC __glSamplerParameterIiv;
internal static PFNGLSAMPLERPARAMETERIUIVPROC __glSamplerParameterIuiv;
internal static PFNGLSAMPLERPARAMETERFPROC __glSamplerParameterf;
internal static PFNGLSAMPLERPARAMETERFVPROC __glSamplerParameterfv;
internal static PFNGLSAMPLERPARAMETERIPROC __glSamplerParameteri;
internal static PFNGLSAMPLERPARAMETERIVPROC __glSamplerParameteriv;
internal static PFNGLACTIVESHADERPROGRAMPROC __glActiveShaderProgram;
internal static PFNGLBINDPROGRAMPIPELINEPROC __glBindProgramPipeline;
internal static PFNGLCREATESHADERPROGRAMVPROC __glCreateShaderProgramv;
internal static PFNGLDELETEPROGRAMPIPELINESPROC __glDeleteProgramPipelines;
internal static PFNGLGENPROGRAMPIPELINESPROC __glGenProgramPipelines;
internal static PFNGLGETPROGRAMPIPELINEINFOLOGPROC __glGetProgramPipelineInfoLog;
internal static PFNGLGETPROGRAMPIPELINEIVPROC __glGetProgramPipelineiv;
internal static PFNGLISPROGRAMPIPELINEPROC __glIsProgramPipeline;
internal static PFNGLPROGRAMUNIFORM1DPROC __glProgramUniform1d;
internal static PFNGLPROGRAMUNIFORM1DVPROC __glProgramUniform1dv;
internal static PFNGLPROGRAMUNIFORM1FPROC __glProgramUniform1f;
internal static PFNGLPROGRAMUNIFORM1FVPROC __glProgramUniform1fv;
internal static PFNGLPROGRAMUNIFORM1IPROC __glProgramUniform1i;
internal static PFNGLPROGRAMUNIFORM1IVPROC __glProgramUniform1iv;
internal static PFNGLPROGRAMUNIFORM1UIPROC __glProgramUniform1ui;
internal static PFNGLPROGRAMUNIFORM1UIVPROC __glProgramUniform1uiv;
internal static PFNGLPROGRAMUNIFORM2DPROC __glProgramUniform2d;
internal static PFNGLPROGRAMUNIFORM2DVPROC __glProgramUniform2dv;
internal static PFNGLPROGRAMUNIFORM2FPROC __glProgramUniform2f;
internal static PFNGLPROGRAMUNIFORM2FVPROC __glProgramUniform2fv;
internal static PFNGLPROGRAMUNIFORM2IPROC __glProgramUniform2i;
internal static PFNGLPROGRAMUNIFORM2IVPROC __glProgramUniform2iv;
internal static PFNGLPROGRAMUNIFORM2UIPROC __glProgramUniform2ui;
internal static PFNGLPROGRAMUNIFORM2UIVPROC __glProgramUniform2uiv;
internal static PFNGLPROGRAMUNIFORM3DPROC __glProgramUniform3d;
internal static PFNGLPROGRAMUNIFORM3DVPROC __glProgramUniform3dv;
internal static PFNGLPROGRAMUNIFORM3FPROC __glProgramUniform3f;
internal static PFNGLPROGRAMUNIFORM3FVPROC __glProgramUniform3fv;
internal static PFNGLPROGRAMUNIFORM3IPROC __glProgramUniform3i;
internal static PFNGLPROGRAMUNIFORM3IVPROC __glProgramUniform3iv;
internal static PFNGLPROGRAMUNIFORM3UIPROC __glProgramUniform3ui;
internal static PFNGLPROGRAMUNIFORM3UIVPROC __glProgramUniform3uiv;
internal static PFNGLPROGRAMUNIFORM4DPROC __glProgramUniform4d;
internal static PFNGLPROGRAMUNIFORM4DVPROC __glProgramUniform4dv;
internal static PFNGLPROGRAMUNIFORM4FPROC __glProgramUniform4f;
internal static PFNGLPROGRAMUNIFORM4FVPROC __glProgramUniform4fv;
internal static PFNGLPROGRAMUNIFORM4IPROC __glProgramUniform4i;
internal static PFNGLPROGRAMUNIFORM4IVPROC __glProgramUniform4iv;
internal static PFNGLPROGRAMUNIFORM4UIPROC __glProgramUniform4ui;
internal static PFNGLPROGRAMUNIFORM4UIVPROC __glProgramUniform4uiv;
internal static PFNGLPROGRAMUNIFORMMATRIX2DVPROC __glProgramUniformMatrix2dv;
internal static PFNGLPROGRAMUNIFORMMATRIX2FVPROC __glProgramUniformMatrix2fv;
internal static PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC __glProgramUniformMatrix2x3dv;
internal static PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC __glProgramUniformMatrix2x3fv;
internal static PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC __glProgramUniformMatrix2x4dv;
internal static PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC __glProgramUniformMatrix2x4fv;
internal static PFNGLPROGRAMUNIFORMMATRIX3DVPROC __glProgramUniformMatrix3dv;
internal static PFNGLPROGRAMUNIFORMMATRIX3FVPROC __glProgramUniformMatrix3fv;
internal static PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC __glProgramUniformMatrix3x2dv;
internal static PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC __glProgramUniformMatrix3x2fv;
internal static PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC __glProgramUniformMatrix3x4dv;
internal static PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC __glProgramUniformMatrix3x4fv;
internal static PFNGLPROGRAMUNIFORMMATRIX4DVPROC __glProgramUniformMatrix4dv;
internal static PFNGLPROGRAMUNIFORMMATRIX4FVPROC __glProgramUniformMatrix4fv;
internal static PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC __glProgramUniformMatrix4x2dv;
internal static PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC __glProgramUniformMatrix4x2fv;
internal static PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC __glProgramUniformMatrix4x3dv;
internal static PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC __glProgramUniformMatrix4x3fv;
internal static PFNGLUSEPROGRAMSTAGESPROC __glUseProgramStages;
internal static PFNGLVALIDATEPROGRAMPIPELINEPROC __glValidateProgramPipeline;
internal static PFNGLATTACHOBJECTARBPROC __glAttachObjectARB;
internal static PFNGLCOMPILESHADERARBPROC __glCompileShaderARB;
internal static PFNGLCREATEPROGRAMOBJECTARBPROC __glCreateProgramObjectARB;
internal static PFNGLCREATESHADEROBJECTARBPROC __glCreateShaderObjectARB;
internal static PFNGLDELETEOBJECTARBPROC __glDeleteObjectARB;
internal static PFNGLDETACHOBJECTARBPROC __glDetachObjectARB;
internal static PFNGLGETACTIVEUNIFORMARBPROC __glGetActiveUniformARB;
internal static PFNGLGETATTACHEDOBJECTSARBPROC __glGetAttachedObjectsARB;
internal static PFNGLGETHANDLEARBPROC __glGetHandleARB;
internal static PFNGLGETINFOLOGARBPROC __glGetInfoLogARB;
internal static PFNGLGETOBJECTPARAMETERFVARBPROC __glGetObjectParameterfvARB;
internal static PFNGLGETOBJECTPARAMETERIVARBPROC __glGetObjectParameterivARB;
internal static PFNGLGETSHADERSOURCEARBPROC __glGetShaderSourceARB;
internal static PFNGLGETUNIFORMLOCATIONARBPROC __glGetUniformLocationARB;
internal static PFNGLGETUNIFORMFVARBPROC __glGetUniformfvARB;
internal static PFNGLGETUNIFORMIVARBPROC __glGetUniformivARB;
internal static PFNGLLINKPROGRAMARBPROC __glLinkProgramARB;
internal static PFNGLSHADERSOURCEARBPROC __glShaderSourceARB;
internal static PFNGLUNIFORM1FARBPROC __glUniform1fARB;
internal static PFNGLUNIFORM1FVARBPROC __glUniform1fvARB;
internal static PFNGLUNIFORM1IARBPROC __glUniform1iARB;
internal static PFNGLUNIFORM1IVARBPROC __glUniform1ivARB;
internal static PFNGLUNIFORM2FARBPROC __glUniform2fARB;
internal static PFNGLUNIFORM2FVARBPROC __glUniform2fvARB;
internal static PFNGLUNIFORM2IARBPROC __glUniform2iARB;
internal static PFNGLUNIFORM2IVARBPROC __glUniform2ivARB;
internal static PFNGLUNIFORM3FARBPROC __glUniform3fARB;
internal static PFNGLUNIFORM3FVARBPROC __glUniform3fvARB;
internal static PFNGLUNIFORM3IARBPROC __glUniform3iARB;
internal static PFNGLUNIFORM3IVARBPROC __glUniform3ivARB;
internal static PFNGLUNIFORM4FARBPROC __glUniform4fARB;
internal static PFNGLUNIFORM4FVARBPROC __glUniform4fvARB;
internal static PFNGLUNIFORM4IARBPROC __glUniform4iARB;
internal static PFNGLUNIFORM4IVARBPROC __glUniform4ivARB;
internal static PFNGLUNIFORMMATRIX2FVARBPROC __glUniformMatrix2fvARB;
internal static PFNGLUNIFORMMATRIX3FVARBPROC __glUniformMatrix3fvARB;
internal static PFNGLUNIFORMMATRIX4FVARBPROC __glUniformMatrix4fvARB;
internal static PFNGLUSEPROGRAMOBJECTARBPROC __glUseProgramObjectARB;
internal static PFNGLVALIDATEPROGRAMARBPROC __glValidateProgramARB;
internal static PFNGLGETACTIVESUBROUTINENAMEPROC __glGetActiveSubroutineName;
internal static PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC __glGetActiveSubroutineUniformName;
internal static PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC __glGetActiveSubroutineUniformiv;
internal static PFNGLGETPROGRAMSTAGEIVPROC __glGetProgramStageiv;
internal static PFNGLGETSUBROUTINEINDEXPROC __glGetSubroutineIndex;
internal static PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC __glGetSubroutineUniformLocation;
internal static PFNGLGETUNIFORMSUBROUTINEUIVPROC __glGetUniformSubroutineuiv;
internal static PFNGLUNIFORMSUBROUTINESUIVPROC __glUniformSubroutinesuiv;
internal static PFNGLCOMPILESHADERINCLUDEARBPROC __glCompileShaderIncludeARB;
internal static PFNGLDELETENAMEDSTRINGARBPROC __glDeleteNamedStringARB;
internal static PFNGLGETNAMEDSTRINGARBPROC __glGetNamedStringARB;
internal static PFNGLGETNAMEDSTRINGIVARBPROC __glGetNamedStringivARB;
internal static PFNGLISNAMEDSTRINGARBPROC __glIsNamedStringARB;
internal static PFNGLNAMEDSTRINGARBPROC __glNamedStringARB;
internal static PFNGLCLIENTWAITSYNCPROC __glClientWaitSync;
internal static PFNGLDELETESYNCPROC __glDeleteSync;
internal static PFNGLFENCESYNCPROC __glFenceSync;
internal static PFNGLGETINTEGER64VPROC __glGetInteger64v;
internal static PFNGLGETSYNCIVPROC __glGetSynciv;
internal static PFNGLISSYNCPROC __glIsSync;
internal static PFNGLWAITSYNCPROC __glWaitSync;
internal static PFNGLPATCHPARAMETERFVPROC __glPatchParameterfv;
internal static PFNGLPATCHPARAMETERIPROC __glPatchParameteri;
internal static PFNGLTEXBUFFERARBPROC __glTexBufferARB;
internal static PFNGLCOMPRESSEDTEXIMAGE1DARBPROC __glCompressedTexImage1DARB;
internal static PFNGLCOMPRESSEDTEXIMAGE2DARBPROC __glCompressedTexImage2DARB;
internal static PFNGLCOMPRESSEDTEXIMAGE3DARBPROC __glCompressedTexImage3DARB;
internal static PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC __glCompressedTexSubImage1DARB;
internal static PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC __glCompressedTexSubImage2DARB;
internal static PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC __glCompressedTexSubImage3DARB;
internal static PFNGLGETCOMPRESSEDTEXIMAGEARBPROC __glGetCompressedTexImageARB;
internal static PFNGLGETMULTISAMPLEFVPROC __glGetMultisamplefv;
internal static PFNGLSAMPLEMASKIPROC __glSampleMaski;
internal static PFNGLTEXIMAGE2DMULTISAMPLEPROC __glTexImage2DMultisample;
internal static PFNGLTEXIMAGE3DMULTISAMPLEPROC __glTexImage3DMultisample;
internal static PFNGLGETQUERYOBJECTI64VPROC __glGetQueryObjecti64v;
internal static PFNGLGETQUERYOBJECTUI64VPROC __glGetQueryObjectui64v;
internal static PFNGLQUERYCOUNTERPROC __glQueryCounter;
internal static PFNGLBINDTRANSFORMFEEDBACKPROC __glBindTransformFeedback;
internal static PFNGLDELETETRANSFORMFEEDBACKSPROC __glDeleteTransformFeedbacks;
internal static PFNGLDRAWTRANSFORMFEEDBACKPROC __glDrawTransformFeedback;
internal static PFNGLGENTRANSFORMFEEDBACKSPROC __glGenTransformFeedbacks;
internal static PFNGLISTRANSFORMFEEDBACKPROC __glIsTransformFeedback;
internal static PFNGLPAUSETRANSFORMFEEDBACKPROC __glPauseTransformFeedback;
internal static PFNGLRESUMETRANSFORMFEEDBACKPROC __glResumeTransformFeedback;
internal static PFNGLBEGINQUERYINDEXEDPROC __glBeginQueryIndexed;
internal static PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC __glDrawTransformFeedbackStream;
internal static PFNGLENDQUERYINDEXEDPROC __glEndQueryIndexed;
internal static PFNGLGETQUERYINDEXEDIVPROC __glGetQueryIndexediv;
internal static PFNGLLOADTRANSPOSEMATRIXDARBPROC __glLoadTransposeMatrixdARB;
internal static PFNGLLOADTRANSPOSEMATRIXFARBPROC __glLoadTransposeMatrixfARB;
internal static PFNGLMULTTRANSPOSEMATRIXDARBPROC __glMultTransposeMatrixdARB;
internal static PFNGLMULTTRANSPOSEMATRIXFARBPROC __glMultTransposeMatrixfARB;
internal static PFNGLBINDBUFFERBASEPROC __glBindBufferBase;
internal static PFNGLBINDBUFFERRANGEPROC __glBindBufferRange;
internal static PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC __glGetActiveUniformBlockName;
internal static PFNGLGETACTIVEUNIFORMBLOCKIVPROC __glGetActiveUniformBlockiv;
internal static PFNGLGETACTIVEUNIFORMNAMEPROC __glGetActiveUniformName;
internal static PFNGLGETACTIVEUNIFORMSIVPROC __glGetActiveUniformsiv;
internal static PFNGLGETINTEGERI_VPROC __glGetIntegeri_v;
internal static PFNGLGETUNIFORMBLOCKINDEXPROC __glGetUniformBlockIndex;
internal static PFNGLGETUNIFORMINDICESPROC __glGetUniformIndices;
internal static PFNGLUNIFORMBLOCKBINDINGPROC __glUniformBlockBinding;
internal static PFNGLBINDVERTEXARRAYPROC __glBindVertexArray;
internal static PFNGLDELETEVERTEXARRAYSPROC __glDeleteVertexArrays;
internal static PFNGLGENVERTEXARRAYSPROC __glGenVertexArrays;
internal static PFNGLISVERTEXARRAYPROC __glIsVertexArray;
internal static PFNGLGETVERTEXATTRIBLDVPROC __glGetVertexAttribLdv;
internal static PFNGLVERTEXATTRIBL1DPROC __glVertexAttribL1d;
internal static PFNGLVERTEXATTRIBL1DVPROC __glVertexAttribL1dv;
internal static PFNGLVERTEXATTRIBL2DPROC __glVertexAttribL2d;
internal static PFNGLVERTEXATTRIBL2DVPROC __glVertexAttribL2dv;
internal static PFNGLVERTEXATTRIBL3DPROC __glVertexAttribL3d;
internal static PFNGLVERTEXATTRIBL3DVPROC __glVertexAttribL3dv;
internal static PFNGLVERTEXATTRIBL4DPROC __glVertexAttribL4d;
internal static PFNGLVERTEXATTRIBL4DVPROC __glVertexAttribL4dv;
internal static PFNGLVERTEXATTRIBLPOINTERPROC __glVertexAttribLPointer;
internal static PFNGLVERTEXBLENDARBPROC __glVertexBlendARB;
internal static PFNGLWEIGHTPOINTERARBPROC __glWeightPointerARB;
internal static PFNGLWEIGHTBVARBPROC __glWeightbvARB;
internal static PFNGLWEIGHTDVARBPROC __glWeightdvARB;
internal static PFNGLWEIGHTFVARBPROC __glWeightfvARB;
internal static PFNGLWEIGHTIVARBPROC __glWeightivARB;
internal static PFNGLWEIGHTSVARBPROC __glWeightsvARB;
internal static PFNGLWEIGHTUBVARBPROC __glWeightubvARB;
internal static PFNGLWEIGHTUIVARBPROC __glWeightuivARB;
internal static PFNGLWEIGHTUSVARBPROC __glWeightusvARB;
internal static PFNGLBINDBUFFERARBPROC __glBindBufferARB;
internal static PFNGLBUFFERDATAARBPROC __glBufferDataARB;
internal static PFNGLBUFFERSUBDATAARBPROC __glBufferSubDataARB;
internal static PFNGLDELETEBUFFERSARBPROC __glDeleteBuffersARB;
internal static PFNGLGENBUFFERSARBPROC __glGenBuffersARB;
internal static PFNGLGETBUFFERPARAMETERIVARBPROC __glGetBufferParameterivARB;
internal static PFNGLGETBUFFERPOINTERVARBPROC __glGetBufferPointervARB;
internal static PFNGLGETBUFFERSUBDATAARBPROC __glGetBufferSubDataARB;
internal static PFNGLISBUFFERARBPROC __glIsBufferARB;
internal static PFNGLMAPBUFFERARBPROC __glMapBufferARB;
internal static PFNGLUNMAPBUFFERARBPROC __glUnmapBufferARB;
internal static PFNGLBINDPROGRAMARBPROC __glBindProgramARB;
internal static PFNGLDELETEPROGRAMSARBPROC __glDeleteProgramsARB;
internal static PFNGLDISABLEVERTEXATTRIBARRAYARBPROC __glDisableVertexAttribArrayARB;
internal static PFNGLENABLEVERTEXATTRIBARRAYARBPROC __glEnableVertexAttribArrayARB;
internal static PFNGLGENPROGRAMSARBPROC __glGenProgramsARB;
internal static PFNGLGETPROGRAMENVPARAMETERDVARBPROC __glGetProgramEnvParameterdvARB;
internal static PFNGLGETPROGRAMENVPARAMETERFVARBPROC __glGetProgramEnvParameterfvARB;
internal static PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC __glGetProgramLocalParameterdvARB;
internal static PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC __glGetProgramLocalParameterfvARB;
internal static PFNGLGETPROGRAMSTRINGARBPROC __glGetProgramStringARB;
internal static PFNGLGETPROGRAMIVARBPROC __glGetProgramivARB;
internal static PFNGLGETVERTEXATTRIBPOINTERVARBPROC __glGetVertexAttribPointervARB;
internal static PFNGLGETVERTEXATTRIBDVARBPROC __glGetVertexAttribdvARB;
internal static PFNGLGETVERTEXATTRIBFVARBPROC __glGetVertexAttribfvARB;
internal static PFNGLGETVERTEXATTRIBIVARBPROC __glGetVertexAttribivARB;
internal static PFNGLISPROGRAMARBPROC __glIsProgramARB;
internal static PFNGLPROGRAMENVPARAMETER4DARBPROC __glProgramEnvParameter4dARB;
internal static PFNGLPROGRAMENVPARAMETER4DVARBPROC __glProgramEnvParameter4dvARB;
internal static PFNGLPROGRAMENVPARAMETER4FARBPROC __glProgramEnvParameter4fARB;
internal static PFNGLPROGRAMENVPARAMETER4FVARBPROC __glProgramEnvParameter4fvARB;
internal static PFNGLPROGRAMLOCALPARAMETER4DARBPROC __glProgramLocalParameter4dARB;
internal static PFNGLPROGRAMLOCALPARAMETER4DVARBPROC __glProgramLocalParameter4dvARB;
internal static PFNGLPROGRAMLOCALPARAMETER4FARBPROC __glProgramLocalParameter4fARB;
internal static PFNGLPROGRAMLOCALPARAMETER4FVARBPROC __glProgramLocalParameter4fvARB;
internal static PFNGLPROGRAMSTRINGARBPROC __glProgramStringARB;
internal static PFNGLVERTEXATTRIB1DARBPROC __glVertexAttrib1dARB;
internal static PFNGLVERTEXATTRIB1DVARBPROC __glVertexAttrib1dvARB;
internal static PFNGLVERTEXATTRIB1FARBPROC __glVertexAttrib1fARB;
internal static PFNGLVERTEXATTRIB1FVARBPROC __glVertexAttrib1fvARB;
internal static PFNGLVERTEXATTRIB1SARBPROC __glVertexAttrib1sARB;
internal static PFNGLVERTEXATTRIB1SVARBPROC __glVertexAttrib1svARB;
internal static PFNGLVERTEXATTRIB2DARBPROC __glVertexAttrib2dARB;
internal static PFNGLVERTEXATTRIB2DVARBPROC __glVertexAttrib2dvARB;
internal static PFNGLVERTEXATTRIB2FARBPROC __glVertexAttrib2fARB;
internal static PFNGLVERTEXATTRIB2FVARBPROC __glVertexAttrib2fvARB;
internal static PFNGLVERTEXATTRIB2SARBPROC __glVertexAttrib2sARB;
internal static PFNGLVERTEXATTRIB2SVARBPROC __glVertexAttrib2svARB;
internal static PFNGLVERTEXATTRIB3DARBPROC __glVertexAttrib3dARB;
internal static PFNGLVERTEXATTRIB3DVARBPROC __glVertexAttrib3dvARB;
internal static PFNGLVERTEXATTRIB3FARBPROC __glVertexAttrib3fARB;
internal static PFNGLVERTEXATTRIB3FVARBPROC __glVertexAttrib3fvARB;
internal static PFNGLVERTEXATTRIB3SARBPROC __glVertexAttrib3sARB;
internal static PFNGLVERTEXATTRIB3SVARBPROC __glVertexAttrib3svARB;
internal static PFNGLVERTEXATTRIB4NBVARBPROC __glVertexAttrib4NbvARB;
internal static PFNGLVERTEXATTRIB4NIVARBPROC __glVertexAttrib4NivARB;
internal static PFNGLVERTEXATTRIB4NSVARBPROC __glVertexAttrib4NsvARB;
internal static PFNGLVERTEXATTRIB4NUBARBPROC __glVertexAttrib4NubARB;
internal static PFNGLVERTEXATTRIB4NUBVARBPROC __glVertexAttrib4NubvARB;
internal static PFNGLVERTEXATTRIB4NUIVARBPROC __glVertexAttrib4NuivARB;
internal static PFNGLVERTEXATTRIB4NUSVARBPROC __glVertexAttrib4NusvARB;
internal static PFNGLVERTEXATTRIB4BVARBPROC __glVertexAttrib4bvARB;
internal static PFNGLVERTEXATTRIB4DARBPROC __glVertexAttrib4dARB;
internal static PFNGLVERTEXATTRIB4DVARBPROC __glVertexAttrib4dvARB;
internal static PFNGLVERTEXATTRIB4FARBPROC __glVertexAttrib4fARB;
internal static PFNGLVERTEXATTRIB4FVARBPROC __glVertexAttrib4fvARB;
internal static PFNGLVERTEXATTRIB4IVARBPROC __glVertexAttrib4ivARB;
internal static PFNGLVERTEXATTRIB4SARBPROC __glVertexAttrib4sARB;
internal static PFNGLVERTEXATTRIB4SVARBPROC __glVertexAttrib4svARB;
internal static PFNGLVERTEXATTRIB4UBVARBPROC __glVertexAttrib4ubvARB;
internal static PFNGLVERTEXATTRIB4UIVARBPROC __glVertexAttrib4uivARB;
internal static PFNGLVERTEXATTRIB4USVARBPROC __glVertexAttrib4usvARB;
internal static PFNGLVERTEXATTRIBPOINTERARBPROC __glVertexAttribPointerARB;
internal static PFNGLBINDATTRIBLOCATIONARBPROC __glBindAttribLocationARB;
internal static PFNGLGETACTIVEATTRIBARBPROC __glGetActiveAttribARB;
internal static PFNGLGETATTRIBLOCATIONARBPROC __glGetAttribLocationARB;
internal static PFNGLCOLORP3UIPROC __glColorP3ui;
internal static PFNGLCOLORP3UIVPROC __glColorP3uiv;
internal static PFNGLCOLORP4UIPROC __glColorP4ui;
internal static PFNGLCOLORP4UIVPROC __glColorP4uiv;
internal static PFNGLMULTITEXCOORDP1UIPROC __glMultiTexCoordP1ui;
internal static PFNGLMULTITEXCOORDP1UIVPROC __glMultiTexCoordP1uiv;
internal static PFNGLMULTITEXCOORDP2UIPROC __glMultiTexCoordP2ui;
internal static PFNGLMULTITEXCOORDP2UIVPROC __glMultiTexCoordP2uiv;
internal static PFNGLMULTITEXCOORDP3UIPROC __glMultiTexCoordP3ui;
internal static PFNGLMULTITEXCOORDP3UIVPROC __glMultiTexCoordP3uiv;
internal static PFNGLMULTITEXCOORDP4UIPROC __glMultiTexCoordP4ui;
internal static PFNGLMULTITEXCOORDP4UIVPROC __glMultiTexCoordP4uiv;
internal static PFNGLNORMALP3UIPROC __glNormalP3ui;
internal static PFNGLNORMALP3UIVPROC __glNormalP3uiv;
internal static PFNGLSECONDARYCOLORP3UIPROC __glSecondaryColorP3ui;
internal static PFNGLSECONDARYCOLORP3UIVPROC __glSecondaryColorP3uiv;
internal static PFNGLTEXCOORDP1UIPROC __glTexCoordP1ui;
internal static PFNGLTEXCOORDP1UIVPROC __glTexCoordP1uiv;
internal static PFNGLTEXCOORDP2UIPROC __glTexCoordP2ui;
internal static PFNGLTEXCOORDP2UIVPROC __glTexCoordP2uiv;
internal static PFNGLTEXCOORDP3UIPROC __glTexCoordP3ui;
internal static PFNGLTEXCOORDP3UIVPROC __glTexCoordP3uiv;
internal static PFNGLTEXCOORDP4UIPROC __glTexCoordP4ui;
internal static PFNGLTEXCOORDP4UIVPROC __glTexCoordP4uiv;
internal static PFNGLVERTEXATTRIBP1UIPROC __glVertexAttribP1ui;
internal static PFNGLVERTEXATTRIBP1UIVPROC __glVertexAttribP1uiv;
internal static PFNGLVERTEXATTRIBP2UIPROC __glVertexAttribP2ui;
internal static PFNGLVERTEXATTRIBP2UIVPROC __glVertexAttribP2uiv;
internal static PFNGLVERTEXATTRIBP3UIPROC __glVertexAttribP3ui;
internal static PFNGLVERTEXATTRIBP3UIVPROC __glVertexAttribP3uiv;
internal static PFNGLVERTEXATTRIBP4UIPROC __glVertexAttribP4ui;
internal static PFNGLVERTEXATTRIBP4UIVPROC __glVertexAttribP4uiv;
internal static PFNGLVERTEXP2UIPROC __glVertexP2ui;
internal static PFNGLVERTEXP2UIVPROC __glVertexP2uiv;
internal static PFNGLVERTEXP3UIPROC __glVertexP3ui;
internal static PFNGLVERTEXP3UIVPROC __glVertexP3uiv;
internal static PFNGLVERTEXP4UIPROC __glVertexP4ui;
internal static PFNGLVERTEXP4UIVPROC __glVertexP4uiv;
internal static PFNGLDEPTHRANGEARRAYVPROC __glDepthRangeArrayv;
internal static PFNGLDEPTHRANGEINDEXEDPROC __glDepthRangeIndexed;
internal static PFNGLGETDOUBLEI_VPROC __glGetDoublei_v;
internal static PFNGLGETFLOATI_VPROC __glGetFloati_v;
internal static PFNGLSCISSORARRAYVPROC __glScissorArrayv;
internal static PFNGLSCISSORINDEXEDPROC __glScissorIndexed;
internal static PFNGLSCISSORINDEXEDVPROC __glScissorIndexedv;
internal static PFNGLVIEWPORTARRAYVPROC __glViewportArrayv;
internal static PFNGLVIEWPORTINDEXEDFPROC __glViewportIndexedf;
internal static PFNGLVIEWPORTINDEXEDFVPROC __glViewportIndexedfv;
internal static PFNGLWINDOWPOS2DARBPROC __glWindowPos2dARB;
internal static PFNGLWINDOWPOS2DVARBPROC __glWindowPos2dvARB;
internal static PFNGLWINDOWPOS2FARBPROC __glWindowPos2fARB;
internal static PFNGLWINDOWPOS2FVARBPROC __glWindowPos2fvARB;
internal static PFNGLWINDOWPOS2IARBPROC __glWindowPos2iARB;
internal static PFNGLWINDOWPOS2IVARBPROC __glWindowPos2ivARB;
internal static PFNGLWINDOWPOS2SARBPROC __glWindowPos2sARB;
internal static PFNGLWINDOWPOS2SVARBPROC __glWindowPos2svARB;
internal static PFNGLWINDOWPOS3DARBPROC __glWindowPos3dARB;
internal static PFNGLWINDOWPOS3DVARBPROC __glWindowPos3dvARB;
internal static PFNGLWINDOWPOS3FARBPROC __glWindowPos3fARB;
internal static PFNGLWINDOWPOS3FVARBPROC __glWindowPos3fvARB;
internal static PFNGLWINDOWPOS3IARBPROC __glWindowPos3iARB;
internal static PFNGLWINDOWPOS3IVARBPROC __glWindowPos3ivARB;
internal static PFNGLWINDOWPOS3SARBPROC __glWindowPos3sARB;
internal static PFNGLWINDOWPOS3SVARBPROC __glWindowPos3svARB;
internal static PFNGLDRAWBUFFERSATIPROC __glDrawBuffersATI;
internal static PFNGLDRAWELEMENTARRAYATIPROC __glDrawElementArrayATI;
internal static PFNGLDRAWRANGEELEMENTARRAYATIPROC __glDrawRangeElementArrayATI;
internal static PFNGLELEMENTPOINTERATIPROC __glElementPointerATI;
internal static PFNGLGETTEXBUMPPARAMETERFVATIPROC __glGetTexBumpParameterfvATI;
internal static PFNGLGETTEXBUMPPARAMETERIVATIPROC __glGetTexBumpParameterivATI;
internal static PFNGLTEXBUMPPARAMETERFVATIPROC __glTexBumpParameterfvATI;
internal static PFNGLTEXBUMPPARAMETERIVATIPROC __glTexBumpParameterivATI;
internal static PFNGLALPHAFRAGMENTOP1ATIPROC __glAlphaFragmentOp1ATI;
internal static PFNGLALPHAFRAGMENTOP2ATIPROC __glAlphaFragmentOp2ATI;
internal static PFNGLALPHAFRAGMENTOP3ATIPROC __glAlphaFragmentOp3ATI;
internal static PFNGLBEGINFRAGMENTSHADERATIPROC __glBeginFragmentShaderATI;
internal static PFNGLBINDFRAGMENTSHADERATIPROC __glBindFragmentShaderATI;
internal static PFNGLCOLORFRAGMENTOP1ATIPROC __glColorFragmentOp1ATI;
internal static PFNGLCOLORFRAGMENTOP2ATIPROC __glColorFragmentOp2ATI;
internal static PFNGLCOLORFRAGMENTOP3ATIPROC __glColorFragmentOp3ATI;
internal static PFNGLDELETEFRAGMENTSHADERATIPROC __glDeleteFragmentShaderATI;
internal static PFNGLENDFRAGMENTSHADERATIPROC __glEndFragmentShaderATI;
internal static PFNGLGENFRAGMENTSHADERSATIPROC __glGenFragmentShadersATI;
internal static PFNGLPASSTEXCOORDATIPROC __glPassTexCoordATI;
internal static PFNGLSAMPLEMAPATIPROC __glSampleMapATI;
internal static PFNGLSETFRAGMENTSHADERCONSTANTATIPROC __glSetFragmentShaderConstantATI;
internal static PFNGLMAPOBJECTBUFFERATIPROC __glMapObjectBufferATI;
internal static PFNGLUNMAPOBJECTBUFFERATIPROC __glUnmapObjectBufferATI;
internal static PFNGLPNTRIANGLESFATIPROC __glPNTrianglesfATI;
internal static PFNGLPNTRIANGLESIATIPROC __glPNTrianglesiATI;
internal static PFNGLSTENCILFUNCSEPARATEATIPROC __glStencilFuncSeparateATI;
internal static PFNGLSTENCILOPSEPARATEATIPROC __glStencilOpSeparateATI;
internal static PFNGLARRAYOBJECTATIPROC __glArrayObjectATI;
internal static PFNGLFREEOBJECTBUFFERATIPROC __glFreeObjectBufferATI;
internal static PFNGLGETARRAYOBJECTFVATIPROC __glGetArrayObjectfvATI;
internal static PFNGLGETARRAYOBJECTIVATIPROC __glGetArrayObjectivATI;
internal static PFNGLGETOBJECTBUFFERFVATIPROC __glGetObjectBufferfvATI;
internal static PFNGLGETOBJECTBUFFERIVATIPROC __glGetObjectBufferivATI;
internal static PFNGLGETVARIANTARRAYOBJECTFVATIPROC __glGetVariantArrayObjectfvATI;
internal static PFNGLGETVARIANTARRAYOBJECTIVATIPROC __glGetVariantArrayObjectivATI;
internal static PFNGLISOBJECTBUFFERATIPROC __glIsObjectBufferATI;
internal static PFNGLNEWOBJECTBUFFERATIPROC __glNewObjectBufferATI;
internal static PFNGLUPDATEOBJECTBUFFERATIPROC __glUpdateObjectBufferATI;
internal static PFNGLVARIANTARRAYOBJECTATIPROC __glVariantArrayObjectATI;
internal static PFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC __glGetVertexAttribArrayObjectfvATI;
internal static PFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC __glGetVertexAttribArrayObjectivATI;
internal static PFNGLVERTEXATTRIBARRAYOBJECTATIPROC __glVertexAttribArrayObjectATI;
internal static PFNGLCLIENTACTIVEVERTEXSTREAMATIPROC __glClientActiveVertexStreamATI;
internal static PFNGLNORMALSTREAM3BATIPROC __glNormalStream3bATI;
internal static PFNGLNORMALSTREAM3BVATIPROC __glNormalStream3bvATI;
internal static PFNGLNORMALSTREAM3DATIPROC __glNormalStream3dATI;
internal static PFNGLNORMALSTREAM3DVATIPROC __glNormalStream3dvATI;
internal static PFNGLNORMALSTREAM3FATIPROC __glNormalStream3fATI;
internal static PFNGLNORMALSTREAM3FVATIPROC __glNormalStream3fvATI;
internal static PFNGLNORMALSTREAM3IATIPROC __glNormalStream3iATI;
internal static PFNGLNORMALSTREAM3IVATIPROC __glNormalStream3ivATI;
internal static PFNGLNORMALSTREAM3SATIPROC __glNormalStream3sATI;
internal static PFNGLNORMALSTREAM3SVATIPROC __glNormalStream3svATI;
internal static PFNGLVERTEXBLENDENVFATIPROC __glVertexBlendEnvfATI;
internal static PFNGLVERTEXBLENDENVIATIPROC __glVertexBlendEnviATI;
internal static PFNGLVERTEXSTREAM2DATIPROC __glVertexStream2dATI;
internal static PFNGLVERTEXSTREAM2DVATIPROC __glVertexStream2dvATI;
internal static PFNGLVERTEXSTREAM2FATIPROC __glVertexStream2fATI;
internal static PFNGLVERTEXSTREAM2FVATIPROC __glVertexStream2fvATI;
internal static PFNGLVERTEXSTREAM2IATIPROC __glVertexStream2iATI;
internal static PFNGLVERTEXSTREAM2IVATIPROC __glVertexStream2ivATI;
internal static PFNGLVERTEXSTREAM2SATIPROC __glVertexStream2sATI;
internal static PFNGLVERTEXSTREAM2SVATIPROC __glVertexStream2svATI;
internal static PFNGLVERTEXSTREAM3DATIPROC __glVertexStream3dATI;
internal static PFNGLVERTEXSTREAM3DVATIPROC __glVertexStream3dvATI;
internal static PFNGLVERTEXSTREAM3FATIPROC __glVertexStream3fATI;
internal static PFNGLVERTEXSTREAM3FVATIPROC __glVertexStream3fvATI;
internal static PFNGLVERTEXSTREAM3IATIPROC __glVertexStream3iATI;
internal static PFNGLVERTEXSTREAM3IVATIPROC __glVertexStream3ivATI;
internal static PFNGLVERTEXSTREAM3SATIPROC __glVertexStream3sATI;
internal static PFNGLVERTEXSTREAM3SVATIPROC __glVertexStream3svATI;
internal static PFNGLVERTEXSTREAM4DATIPROC __glVertexStream4dATI;
internal static PFNGLVERTEXSTREAM4DVATIPROC __glVertexStream4dvATI;
internal static PFNGLVERTEXSTREAM4FATIPROC __glVertexStream4fATI;
internal static PFNGLVERTEXSTREAM4FVATIPROC __glVertexStream4fvATI;
internal static PFNGLVERTEXSTREAM4IATIPROC __glVertexStream4iATI;
internal static PFNGLVERTEXSTREAM4IVATIPROC __glVertexStream4ivATI;
internal static PFNGLVERTEXSTREAM4SATIPROC __glVertexStream4sATI;
internal static PFNGLVERTEXSTREAM4SVATIPROC __glVertexStream4svATI;
internal static PFNGLGETUNIFORMBUFFERSIZEEXTPROC __glGetUniformBufferSizeEXT;
internal static PFNGLGETUNIFORMOFFSETEXTPROC __glGetUniformOffsetEXT;
internal static PFNGLUNIFORMBUFFEREXTPROC __glUniformBufferEXT;
internal static PFNGLBLENDCOLOREXTPROC __glBlendColorEXT;
internal static PFNGLBLENDEQUATIONSEPARATEEXTPROC __glBlendEquationSeparateEXT;
internal static PFNGLBLENDFUNCSEPARATEEXTPROC __glBlendFuncSeparateEXT;
internal static PFNGLBLENDEQUATIONEXTPROC __glBlendEquationEXT;
internal static PFNGLCOLORSUBTABLEEXTPROC __glColorSubTableEXT;
internal static PFNGLCOPYCOLORSUBTABLEEXTPROC __glCopyColorSubTableEXT;
internal static PFNGLLOCKARRAYSEXTPROC __glLockArraysEXT;
internal static PFNGLUNLOCKARRAYSEXTPROC __glUnlockArraysEXT;
internal static PFNGLCONVOLUTIONFILTER1DEXTPROC __glConvolutionFilter1DEXT;
internal static PFNGLCONVOLUTIONFILTER2DEXTPROC __glConvolutionFilter2DEXT;
internal static PFNGLCONVOLUTIONPARAMETERFEXTPROC __glConvolutionParameterfEXT;
internal static PFNGLCONVOLUTIONPARAMETERFVEXTPROC __glConvolutionParameterfvEXT;
internal static PFNGLCONVOLUTIONPARAMETERIEXTPROC __glConvolutionParameteriEXT;
internal static PFNGLCONVOLUTIONPARAMETERIVEXTPROC __glConvolutionParameterivEXT;
internal static PFNGLCOPYCONVOLUTIONFILTER1DEXTPROC __glCopyConvolutionFilter1DEXT;
internal static PFNGLCOPYCONVOLUTIONFILTER2DEXTPROC __glCopyConvolutionFilter2DEXT;
internal static PFNGLGETCONVOLUTIONFILTEREXTPROC __glGetConvolutionFilterEXT;
internal static PFNGLGETCONVOLUTIONPARAMETERFVEXTPROC __glGetConvolutionParameterfvEXT;
internal static PFNGLGETCONVOLUTIONPARAMETERIVEXTPROC __glGetConvolutionParameterivEXT;
internal static PFNGLGETSEPARABLEFILTEREXTPROC __glGetSeparableFilterEXT;
internal static PFNGLSEPARABLEFILTER2DEXTPROC __glSeparableFilter2DEXT;
internal static PFNGLBINORMALPOINTEREXTPROC __glBinormalPointerEXT;
internal static PFNGLTANGENTPOINTEREXTPROC __glTangentPointerEXT;
internal static PFNGLCOPYTEXIMAGE1DEXTPROC __glCopyTexImage1DEXT;
internal static PFNGLCOPYTEXIMAGE2DEXTPROC __glCopyTexImage2DEXT;
internal static PFNGLCOPYTEXSUBIMAGE1DEXTPROC __glCopyTexSubImage1DEXT;
internal static PFNGLCOPYTEXSUBIMAGE2DEXTPROC __glCopyTexSubImage2DEXT;
internal static PFNGLCOPYTEXSUBIMAGE3DEXTPROC __glCopyTexSubImage3DEXT;
internal static PFNGLCULLPARAMETERDVEXTPROC __glCullParameterdvEXT;
internal static PFNGLCULLPARAMETERFVEXTPROC __glCullParameterfvEXT;
internal static PFNGLDEPTHBOUNDSEXTPROC __glDepthBoundsEXT;
internal static PFNGLBINDMULTITEXTUREEXTPROC __glBindMultiTextureEXT;
internal static PFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC __glCheckNamedFramebufferStatusEXT;
internal static PFNGLCLIENTATTRIBDEFAULTEXTPROC __glClientAttribDefaultEXT;
internal static PFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC __glCompressedMultiTexImage1DEXT;
internal static PFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC __glCompressedMultiTexImage2DEXT;
internal static PFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC __glCompressedMultiTexImage3DEXT;
internal static PFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC __glCompressedMultiTexSubImage1DEXT;
internal static PFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC __glCompressedMultiTexSubImage2DEXT;
internal static PFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC __glCompressedMultiTexSubImage3DEXT;
internal static PFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC __glCompressedTextureImage1DEXT;
internal static PFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC __glCompressedTextureImage2DEXT;
internal static PFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC __glCompressedTextureImage3DEXT;
internal static PFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC __glCompressedTextureSubImage1DEXT;
internal static PFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC __glCompressedTextureSubImage2DEXT;
internal static PFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC __glCompressedTextureSubImage3DEXT;
internal static PFNGLCOPYMULTITEXIMAGE1DEXTPROC __glCopyMultiTexImage1DEXT;
internal static PFNGLCOPYMULTITEXIMAGE2DEXTPROC __glCopyMultiTexImage2DEXT;
internal static PFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC __glCopyMultiTexSubImage1DEXT;
internal static PFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC __glCopyMultiTexSubImage2DEXT;
internal static PFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC __glCopyMultiTexSubImage3DEXT;
internal static PFNGLCOPYTEXTUREIMAGE1DEXTPROC __glCopyTextureImage1DEXT;
internal static PFNGLCOPYTEXTUREIMAGE2DEXTPROC __glCopyTextureImage2DEXT;
internal static PFNGLCOPYTEXTURESUBIMAGE1DEXTPROC __glCopyTextureSubImage1DEXT;
internal static PFNGLCOPYTEXTURESUBIMAGE2DEXTPROC __glCopyTextureSubImage2DEXT;
internal static PFNGLCOPYTEXTURESUBIMAGE3DEXTPROC __glCopyTextureSubImage3DEXT;
internal static PFNGLDISABLECLIENTSTATEINDEXEDEXTPROC __glDisableClientStateIndexedEXT;
internal static PFNGLDISABLECLIENTSTATEIEXTPROC __glDisableClientStateiEXT;
internal static PFNGLDISABLEVERTEXARRAYATTRIBEXTPROC __glDisableVertexArrayAttribEXT;
internal static PFNGLDISABLEVERTEXARRAYEXTPROC __glDisableVertexArrayEXT;
internal static PFNGLENABLECLIENTSTATEINDEXEDEXTPROC __glEnableClientStateIndexedEXT;
internal static PFNGLENABLECLIENTSTATEIEXTPROC __glEnableClientStateiEXT;
internal static PFNGLENABLEVERTEXARRAYATTRIBEXTPROC __glEnableVertexArrayAttribEXT;
internal static PFNGLENABLEVERTEXARRAYEXTPROC __glEnableVertexArrayEXT;
internal static PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC __glFlushMappedNamedBufferRangeEXT;
internal static PFNGLFRAMEBUFFERDRAWBUFFEREXTPROC __glFramebufferDrawBufferEXT;
internal static PFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC __glFramebufferDrawBuffersEXT;
internal static PFNGLFRAMEBUFFERREADBUFFEREXTPROC __glFramebufferReadBufferEXT;
internal static PFNGLGENERATEMULTITEXMIPMAPEXTPROC __glGenerateMultiTexMipmapEXT;
internal static PFNGLGENERATETEXTUREMIPMAPEXTPROC __glGenerateTextureMipmapEXT;
internal static PFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC __glGetCompressedMultiTexImageEXT;
internal static PFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC __glGetCompressedTextureImageEXT;
internal static PFNGLGETDOUBLEINDEXEDVEXTPROC __glGetDoubleIndexedvEXT;
internal static PFNGLGETDOUBLEI_VEXTPROC __glGetDoublei_vEXT;
internal static PFNGLGETFLOATINDEXEDVEXTPROC __glGetFloatIndexedvEXT;
internal static PFNGLGETFLOATI_VEXTPROC __glGetFloati_vEXT;
internal static PFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC __glGetFramebufferParameterivEXT;
internal static PFNGLGETMULTITEXENVFVEXTPROC __glGetMultiTexEnvfvEXT;
internal static PFNGLGETMULTITEXENVIVEXTPROC __glGetMultiTexEnvivEXT;
internal static PFNGLGETMULTITEXGENDVEXTPROC __glGetMultiTexGendvEXT;
internal static PFNGLGETMULTITEXGENFVEXTPROC __glGetMultiTexGenfvEXT;
internal static PFNGLGETMULTITEXGENIVEXTPROC __glGetMultiTexGenivEXT;
internal static PFNGLGETMULTITEXIMAGEEXTPROC __glGetMultiTexImageEXT;
internal static PFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC __glGetMultiTexLevelParameterfvEXT;
internal static PFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC __glGetMultiTexLevelParameterivEXT;
internal static PFNGLGETMULTITEXPARAMETERIIVEXTPROC __glGetMultiTexParameterIivEXT;
internal static PFNGLGETMULTITEXPARAMETERIUIVEXTPROC __glGetMultiTexParameterIuivEXT;
internal static PFNGLGETMULTITEXPARAMETERFVEXTPROC __glGetMultiTexParameterfvEXT;
internal static PFNGLGETMULTITEXPARAMETERIVEXTPROC __glGetMultiTexParameterivEXT;
internal static PFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC __glGetNamedBufferParameterivEXT;
internal static PFNGLGETNAMEDBUFFERPOINTERVEXTPROC __glGetNamedBufferPointervEXT;
internal static PFNGLGETNAMEDBUFFERSUBDATAEXTPROC __glGetNamedBufferSubDataEXT;
internal static PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC __glGetNamedFramebufferAttachmentParameterivEXT;
internal static PFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC __glGetNamedProgramLocalParameterIivEXT;
internal static PFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC __glGetNamedProgramLocalParameterIuivEXT;
internal static PFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC __glGetNamedProgramLocalParameterdvEXT;
internal static PFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC __glGetNamedProgramLocalParameterfvEXT;
internal static PFNGLGETNAMEDPROGRAMSTRINGEXTPROC __glGetNamedProgramStringEXT;
internal static PFNGLGETNAMEDPROGRAMIVEXTPROC __glGetNamedProgramivEXT;
internal static PFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC __glGetNamedRenderbufferParameterivEXT;
internal static PFNGLGETPOINTERINDEXEDVEXTPROC __glGetPointerIndexedvEXT;
internal static PFNGLGETPOINTERI_VEXTPROC __glGetPointeri_vEXT;
internal static PFNGLGETTEXTUREIMAGEEXTPROC __glGetTextureImageEXT;
internal static PFNGLGETTEXTURELEVELPARAMETERFVEXTPROC __glGetTextureLevelParameterfvEXT;
internal static PFNGLGETTEXTURELEVELPARAMETERIVEXTPROC __glGetTextureLevelParameterivEXT;
internal static PFNGLGETTEXTUREPARAMETERIIVEXTPROC __glGetTextureParameterIivEXT;
internal static PFNGLGETTEXTUREPARAMETERIUIVEXTPROC __glGetTextureParameterIuivEXT;
internal static PFNGLGETTEXTUREPARAMETERFVEXTPROC __glGetTextureParameterfvEXT;
internal static PFNGLGETTEXTUREPARAMETERIVEXTPROC __glGetTextureParameterivEXT;
internal static PFNGLGETVERTEXARRAYINTEGERI_VEXTPROC __glGetVertexArrayIntegeri_vEXT;
internal static PFNGLGETVERTEXARRAYINTEGERVEXTPROC __glGetVertexArrayIntegervEXT;
internal static PFNGLGETVERTEXARRAYPOINTERI_VEXTPROC __glGetVertexArrayPointeri_vEXT;
internal static PFNGLGETVERTEXARRAYPOINTERVEXTPROC __glGetVertexArrayPointervEXT;
internal static PFNGLMAPNAMEDBUFFEREXTPROC __glMapNamedBufferEXT;
internal static PFNGLMAPNAMEDBUFFERRANGEEXTPROC __glMapNamedBufferRangeEXT;
internal static PFNGLMATRIXFRUSTUMEXTPROC __glMatrixFrustumEXT;
internal static PFNGLMATRIXLOADIDENTITYEXTPROC __glMatrixLoadIdentityEXT;
internal static PFNGLMATRIXLOADTRANSPOSEDEXTPROC __glMatrixLoadTransposedEXT;
internal static PFNGLMATRIXLOADTRANSPOSEFEXTPROC __glMatrixLoadTransposefEXT;
internal static PFNGLMATRIXLOADDEXTPROC __glMatrixLoaddEXT;
internal static PFNGLMATRIXLOADFEXTPROC __glMatrixLoadfEXT;
internal static PFNGLMATRIXMULTTRANSPOSEDEXTPROC __glMatrixMultTransposedEXT;
internal static PFNGLMATRIXMULTTRANSPOSEFEXTPROC __glMatrixMultTransposefEXT;
internal static PFNGLMATRIXMULTDEXTPROC __glMatrixMultdEXT;
internal static PFNGLMATRIXMULTFEXTPROC __glMatrixMultfEXT;
internal static PFNGLMATRIXORTHOEXTPROC __glMatrixOrthoEXT;
internal static PFNGLMATRIXPOPEXTPROC __glMatrixPopEXT;
internal static PFNGLMATRIXPUSHEXTPROC __glMatrixPushEXT;
internal static PFNGLMATRIXROTATEDEXTPROC __glMatrixRotatedEXT;
internal static PFNGLMATRIXROTATEFEXTPROC __glMatrixRotatefEXT;
internal static PFNGLMATRIXSCALEDEXTPROC __glMatrixScaledEXT;
internal static PFNGLMATRIXSCALEFEXTPROC __glMatrixScalefEXT;
internal static PFNGLMATRIXTRANSLATEDEXTPROC __glMatrixTranslatedEXT;
internal static PFNGLMATRIXTRANSLATEFEXTPROC __glMatrixTranslatefEXT;
internal static PFNGLMULTITEXBUFFEREXTPROC __glMultiTexBufferEXT;
internal static PFNGLMULTITEXCOORDPOINTEREXTPROC __glMultiTexCoordPointerEXT;
internal static PFNGLMULTITEXENVFEXTPROC __glMultiTexEnvfEXT;
internal static PFNGLMULTITEXENVFVEXTPROC __glMultiTexEnvfvEXT;
internal static PFNGLMULTITEXENVIEXTPROC __glMultiTexEnviEXT;
internal static PFNGLMULTITEXENVIVEXTPROC __glMultiTexEnvivEXT;
internal static PFNGLMULTITEXGENDEXTPROC __glMultiTexGendEXT;
internal static PFNGLMULTITEXGENDVEXTPROC __glMultiTexGendvEXT;
internal static PFNGLMULTITEXGENFEXTPROC __glMultiTexGenfEXT;
internal static PFNGLMULTITEXGENFVEXTPROC __glMultiTexGenfvEXT;
internal static PFNGLMULTITEXGENIEXTPROC __glMultiTexGeniEXT;
internal static PFNGLMULTITEXGENIVEXTPROC __glMultiTexGenivEXT;
internal static PFNGLMULTITEXIMAGE1DEXTPROC __glMultiTexImage1DEXT;
internal static PFNGLMULTITEXIMAGE2DEXTPROC __glMultiTexImage2DEXT;
internal static PFNGLMULTITEXIMAGE3DEXTPROC __glMultiTexImage3DEXT;
internal static PFNGLMULTITEXPARAMETERIIVEXTPROC __glMultiTexParameterIivEXT;
internal static PFNGLMULTITEXPARAMETERIUIVEXTPROC __glMultiTexParameterIuivEXT;
internal static PFNGLMULTITEXPARAMETERFEXTPROC __glMultiTexParameterfEXT;
internal static PFNGLMULTITEXPARAMETERFVEXTPROC __glMultiTexParameterfvEXT;
internal static PFNGLMULTITEXPARAMETERIEXTPROC __glMultiTexParameteriEXT;
internal static PFNGLMULTITEXPARAMETERIVEXTPROC __glMultiTexParameterivEXT;
internal static PFNGLMULTITEXRENDERBUFFEREXTPROC __glMultiTexRenderbufferEXT;
internal static PFNGLMULTITEXSUBIMAGE1DEXTPROC __glMultiTexSubImage1DEXT;
internal static PFNGLMULTITEXSUBIMAGE2DEXTPROC __glMultiTexSubImage2DEXT;
internal static PFNGLMULTITEXSUBIMAGE3DEXTPROC __glMultiTexSubImage3DEXT;
internal static PFNGLNAMEDBUFFERDATAEXTPROC __glNamedBufferDataEXT;
internal static PFNGLNAMEDBUFFERSUBDATAEXTPROC __glNamedBufferSubDataEXT;
internal static PFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC __glNamedCopyBufferSubDataEXT;
internal static PFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC __glNamedFramebufferRenderbufferEXT;
internal static PFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC __glNamedFramebufferTexture1DEXT;
internal static PFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC __glNamedFramebufferTexture2DEXT;
internal static PFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC __glNamedFramebufferTexture3DEXT;
internal static PFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC __glNamedFramebufferTextureEXT;
internal static PFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC __glNamedFramebufferTextureFaceEXT;
internal static PFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC __glNamedFramebufferTextureLayerEXT;
internal static PFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC __glNamedProgramLocalParameter4dEXT;
internal static PFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC __glNamedProgramLocalParameter4dvEXT;
internal static PFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC __glNamedProgramLocalParameter4fEXT;
internal static PFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC __glNamedProgramLocalParameter4fvEXT;
internal static PFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC __glNamedProgramLocalParameterI4iEXT;
internal static PFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC __glNamedProgramLocalParameterI4ivEXT;
internal static PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC __glNamedProgramLocalParameterI4uiEXT;
internal static PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC __glNamedProgramLocalParameterI4uivEXT;
internal static PFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC __glNamedProgramLocalParameters4fvEXT;
internal static PFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC __glNamedProgramLocalParametersI4ivEXT;
internal static PFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC __glNamedProgramLocalParametersI4uivEXT;
internal static PFNGLNAMEDPROGRAMSTRINGEXTPROC __glNamedProgramStringEXT;
internal static PFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC __glNamedRenderbufferStorageEXT;
internal static PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC __glNamedRenderbufferStorageMultisampleCoverageEXT;
internal static PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC __glNamedRenderbufferStorageMultisampleEXT;
internal static PFNGLPROGRAMUNIFORM1FEXTPROC __glProgramUniform1fEXT;
internal static PFNGLPROGRAMUNIFORM1FVEXTPROC __glProgramUniform1fvEXT;
internal static PFNGLPROGRAMUNIFORM1IEXTPROC __glProgramUniform1iEXT;
internal static PFNGLPROGRAMUNIFORM1IVEXTPROC __glProgramUniform1ivEXT;
internal static PFNGLPROGRAMUNIFORM1UIEXTPROC __glProgramUniform1uiEXT;
internal static PFNGLPROGRAMUNIFORM1UIVEXTPROC __glProgramUniform1uivEXT;
internal static PFNGLPROGRAMUNIFORM2FEXTPROC __glProgramUniform2fEXT;
internal static PFNGLPROGRAMUNIFORM2FVEXTPROC __glProgramUniform2fvEXT;
internal static PFNGLPROGRAMUNIFORM2IEXTPROC __glProgramUniform2iEXT;
internal static PFNGLPROGRAMUNIFORM2IVEXTPROC __glProgramUniform2ivEXT;
internal static PFNGLPROGRAMUNIFORM2UIEXTPROC __glProgramUniform2uiEXT;
internal static PFNGLPROGRAMUNIFORM2UIVEXTPROC __glProgramUniform2uivEXT;
internal static PFNGLPROGRAMUNIFORM3FEXTPROC __glProgramUniform3fEXT;
internal static PFNGLPROGRAMUNIFORM3FVEXTPROC __glProgramUniform3fvEXT;
internal static PFNGLPROGRAMUNIFORM3IEXTPROC __glProgramUniform3iEXT;
internal static PFNGLPROGRAMUNIFORM3IVEXTPROC __glProgramUniform3ivEXT;
internal static PFNGLPROGRAMUNIFORM3UIEXTPROC __glProgramUniform3uiEXT;
internal static PFNGLPROGRAMUNIFORM3UIVEXTPROC __glProgramUniform3uivEXT;
internal static PFNGLPROGRAMUNIFORM4FEXTPROC __glProgramUniform4fEXT;
internal static PFNGLPROGRAMUNIFORM4FVEXTPROC __glProgramUniform4fvEXT;
internal static PFNGLPROGRAMUNIFORM4IEXTPROC __glProgramUniform4iEXT;
internal static PFNGLPROGRAMUNIFORM4IVEXTPROC __glProgramUniform4ivEXT;
internal static PFNGLPROGRAMUNIFORM4UIEXTPROC __glProgramUniform4uiEXT;
internal static PFNGLPROGRAMUNIFORM4UIVEXTPROC __glProgramUniform4uivEXT;
internal static PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC __glProgramUniformMatrix2fvEXT;
internal static PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC __glProgramUniformMatrix2x3fvEXT;
internal static PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC __glProgramUniformMatrix2x4fvEXT;
internal static PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC __glProgramUniformMatrix3fvEXT;
internal static PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC __glProgramUniformMatrix3x2fvEXT;
internal static PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC __glProgramUniformMatrix3x4fvEXT;
internal static PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC __glProgramUniformMatrix4fvEXT;
internal static PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC __glProgramUniformMatrix4x2fvEXT;
internal static PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC __glProgramUniformMatrix4x3fvEXT;
internal static PFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC __glPushClientAttribDefaultEXT;
internal static PFNGLTEXTUREBUFFEREXTPROC __glTextureBufferEXT;
internal static PFNGLTEXTUREIMAGE1DEXTPROC __glTextureImage1DEXT;
internal static PFNGLTEXTUREIMAGE2DEXTPROC __glTextureImage2DEXT;
internal static PFNGLTEXTUREIMAGE3DEXTPROC __glTextureImage3DEXT;
internal static PFNGLTEXTUREPARAMETERIIVEXTPROC __glTextureParameterIivEXT;
internal static PFNGLTEXTUREPARAMETERIUIVEXTPROC __glTextureParameterIuivEXT;
internal static PFNGLTEXTUREPARAMETERFEXTPROC __glTextureParameterfEXT;
internal static PFNGLTEXTUREPARAMETERFVEXTPROC __glTextureParameterfvEXT;
internal static PFNGLTEXTUREPARAMETERIEXTPROC __glTextureParameteriEXT;
internal static PFNGLTEXTUREPARAMETERIVEXTPROC __glTextureParameterivEXT;
internal static PFNGLTEXTURERENDERBUFFEREXTPROC __glTextureRenderbufferEXT;
internal static PFNGLTEXTURESUBIMAGE1DEXTPROC __glTextureSubImage1DEXT;
internal static PFNGLTEXTURESUBIMAGE2DEXTPROC __glTextureSubImage2DEXT;
internal static PFNGLTEXTURESUBIMAGE3DEXTPROC __glTextureSubImage3DEXT;
internal static PFNGLUNMAPNAMEDBUFFEREXTPROC __glUnmapNamedBufferEXT;
internal static PFNGLVERTEXARRAYCOLOROFFSETEXTPROC __glVertexArrayColorOffsetEXT;
internal static PFNGLVERTEXARRAYEDGEFLAGOFFSETEXTPROC __glVertexArrayEdgeFlagOffsetEXT;
internal static PFNGLVERTEXARRAYFOGCOORDOFFSETEXTPROC __glVertexArrayFogCoordOffsetEXT;
internal static PFNGLVERTEXARRAYINDEXOFFSETEXTPROC __glVertexArrayIndexOffsetEXT;
internal static PFNGLVERTEXARRAYMULTITEXCOORDOFFSETEXTPROC __glVertexArrayMultiTexCoordOffsetEXT;
internal static PFNGLVERTEXARRAYNORMALOFFSETEXTPROC __glVertexArrayNormalOffsetEXT;
internal static PFNGLVERTEXARRAYSECONDARYCOLOROFFSETEXTPROC __glVertexArraySecondaryColorOffsetEXT;
internal static PFNGLVERTEXARRAYTEXCOORDOFFSETEXTPROC __glVertexArrayTexCoordOffsetEXT;
internal static PFNGLVERTEXARRAYVERTEXATTRIBIOFFSETEXTPROC __glVertexArrayVertexAttribIOffsetEXT;
internal static PFNGLVERTEXARRAYVERTEXATTRIBOFFSETEXTPROC __glVertexArrayVertexAttribOffsetEXT;
internal static PFNGLVERTEXARRAYVERTEXOFFSETEXTPROC __glVertexArrayVertexOffsetEXT;
internal static PFNGLCOLORMASKINDEXEDEXTPROC __glColorMaskIndexedEXT;
internal static PFNGLDISABLEINDEXEDEXTPROC __glDisableIndexedEXT;
internal static PFNGLENABLEINDEXEDEXTPROC __glEnableIndexedEXT;
internal static PFNGLGETBOOLEANINDEXEDVEXTPROC __glGetBooleanIndexedvEXT;
internal static PFNGLGETINTEGERINDEXEDVEXTPROC __glGetIntegerIndexedvEXT;
internal static PFNGLISENABLEDINDEXEDEXTPROC __glIsEnabledIndexedEXT;
internal static PFNGLDRAWARRAYSINSTANCEDEXTPROC __glDrawArraysInstancedEXT;
internal static PFNGLDRAWELEMENTSINSTANCEDEXTPROC __glDrawElementsInstancedEXT;
internal static PFNGLDRAWRANGEELEMENTSEXTPROC __glDrawRangeElementsEXT;
internal static PFNGLFOGCOORDPOINTEREXTPROC __glFogCoordPointerEXT;
internal static PFNGLFOGCOORDDEXTPROC __glFogCoorddEXT;
internal static PFNGLFOGCOORDDVEXTPROC __glFogCoorddvEXT;
internal static PFNGLFOGCOORDFEXTPROC __glFogCoordfEXT;
internal static PFNGLFOGCOORDFVEXTPROC __glFogCoordfvEXT;
internal static PFNGLFRAGMENTCOLORMATERIALEXTPROC __glFragmentColorMaterialEXT;
internal static PFNGLFRAGMENTLIGHTMODELFEXTPROC __glFragmentLightModelfEXT;
internal static PFNGLFRAGMENTLIGHTMODELFVEXTPROC __glFragmentLightModelfvEXT;
internal static PFNGLFRAGMENTLIGHTMODELIEXTPROC __glFragmentLightModeliEXT;
internal static PFNGLFRAGMENTLIGHTMODELIVEXTPROC __glFragmentLightModelivEXT;
internal static PFNGLFRAGMENTLIGHTFEXTPROC __glFragmentLightfEXT;
internal static PFNGLFRAGMENTLIGHTFVEXTPROC __glFragmentLightfvEXT;
internal static PFNGLFRAGMENTLIGHTIEXTPROC __glFragmentLightiEXT;
internal static PFNGLFRAGMENTLIGHTIVEXTPROC __glFragmentLightivEXT;
internal static PFNGLFRAGMENTMATERIALFEXTPROC __glFragmentMaterialfEXT;
internal static PFNGLFRAGMENTMATERIALFVEXTPROC __glFragmentMaterialfvEXT;
internal static PFNGLFRAGMENTMATERIALIEXTPROC __glFragmentMaterialiEXT;
internal static PFNGLFRAGMENTMATERIALIVEXTPROC __glFragmentMaterialivEXT;
internal static PFNGLGETFRAGMENTLIGHTFVEXTPROC __glGetFragmentLightfvEXT;
internal static PFNGLGETFRAGMENTLIGHTIVEXTPROC __glGetFragmentLightivEXT;
internal static PFNGLGETFRAGMENTMATERIALFVEXTPROC __glGetFragmentMaterialfvEXT;
internal static PFNGLGETFRAGMENTMATERIALIVEXTPROC __glGetFragmentMaterialivEXT;
internal static PFNGLLIGHTENVIEXTPROC __glLightEnviEXT;
internal static PFNGLBLITFRAMEBUFFEREXTPROC __glBlitFramebufferEXT;
internal static PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC __glRenderbufferStorageMultisampleEXT;
internal static PFNGLBINDFRAMEBUFFEREXTPROC __glBindFramebufferEXT;
internal static PFNGLBINDRENDERBUFFEREXTPROC __glBindRenderbufferEXT;
internal static PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC __glCheckFramebufferStatusEXT;
internal static PFNGLDELETEFRAMEBUFFERSEXTPROC __glDeleteFramebuffersEXT;
internal static PFNGLDELETERENDERBUFFERSEXTPROC __glDeleteRenderbuffersEXT;
internal static PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC __glFramebufferRenderbufferEXT;
internal static PFNGLFRAMEBUFFERTEXTURE1DEXTPROC __glFramebufferTexture1DEXT;
internal static PFNGLFRAMEBUFFERTEXTURE2DEXTPROC __glFramebufferTexture2DEXT;
internal static PFNGLFRAMEBUFFERTEXTURE3DEXTPROC __glFramebufferTexture3DEXT;
internal static PFNGLGENFRAMEBUFFERSEXTPROC __glGenFramebuffersEXT;
internal static PFNGLGENRENDERBUFFERSEXTPROC __glGenRenderbuffersEXT;
internal static PFNGLGENERATEMIPMAPEXTPROC __glGenerateMipmapEXT;
internal static PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC __glGetFramebufferAttachmentParameterivEXT;
internal static PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC __glGetRenderbufferParameterivEXT;
internal static PFNGLISFRAMEBUFFEREXTPROC __glIsFramebufferEXT;
internal static PFNGLISRENDERBUFFEREXTPROC __glIsRenderbufferEXT;
internal static PFNGLRENDERBUFFERSTORAGEEXTPROC __glRenderbufferStorageEXT;
internal static PFNGLFRAMEBUFFERTEXTUREEXTPROC __glFramebufferTextureEXT;
internal static PFNGLFRAMEBUFFERTEXTUREFACEEXTPROC __glFramebufferTextureFaceEXT;
internal static PFNGLPROGRAMPARAMETERIEXTPROC __glProgramParameteriEXT;
internal static PFNGLPROGRAMENVPARAMETERS4FVEXTPROC __glProgramEnvParameters4fvEXT;
internal static PFNGLPROGRAMLOCALPARAMETERS4FVEXTPROC __glProgramLocalParameters4fvEXT;
internal static PFNGLBINDFRAGDATALOCATIONEXTPROC __glBindFragDataLocationEXT;
internal static PFNGLGETFRAGDATALOCATIONEXTPROC __glGetFragDataLocationEXT;
internal static PFNGLGETUNIFORMUIVEXTPROC __glGetUniformuivEXT;
internal static PFNGLGETVERTEXATTRIBIIVEXTPROC __glGetVertexAttribIivEXT;
internal static PFNGLGETVERTEXATTRIBIUIVEXTPROC __glGetVertexAttribIuivEXT;
internal static PFNGLUNIFORM1UIEXTPROC __glUniform1uiEXT;
internal static PFNGLUNIFORM1UIVEXTPROC __glUniform1uivEXT;
internal static PFNGLUNIFORM2UIEXTPROC __glUniform2uiEXT;
internal static PFNGLUNIFORM2UIVEXTPROC __glUniform2uivEXT;
internal static PFNGLUNIFORM3UIEXTPROC __glUniform3uiEXT;
internal static PFNGLUNIFORM3UIVEXTPROC __glUniform3uivEXT;
internal static PFNGLUNIFORM4UIEXTPROC __glUniform4uiEXT;
internal static PFNGLUNIFORM4UIVEXTPROC __glUniform4uivEXT;
internal static PFNGLVERTEXATTRIBI1IEXTPROC __glVertexAttribI1iEXT;
internal static PFNGLVERTEXATTRIBI1IVEXTPROC __glVertexAttribI1ivEXT;
internal static PFNGLVERTEXATTRIBI1UIEXTPROC __glVertexAttribI1uiEXT;
internal static PFNGLVERTEXATTRIBI1UIVEXTPROC __glVertexAttribI1uivEXT;
internal static PFNGLVERTEXATTRIBI2IEXTPROC __glVertexAttribI2iEXT;
internal static PFNGLVERTEXATTRIBI2IVEXTPROC __glVertexAttribI2ivEXT;
internal static PFNGLVERTEXATTRIBI2UIEXTPROC __glVertexAttribI2uiEXT;
internal static PFNGLVERTEXATTRIBI2UIVEXTPROC __glVertexAttribI2uivEXT;
internal static PFNGLVERTEXATTRIBI3IEXTPROC __glVertexAttribI3iEXT;
internal static PFNGLVERTEXATTRIBI3IVEXTPROC __glVertexAttribI3ivEXT;
internal static PFNGLVERTEXATTRIBI3UIEXTPROC __glVertexAttribI3uiEXT;
internal static PFNGLVERTEXATTRIBI3UIVEXTPROC __glVertexAttribI3uivEXT;
internal static PFNGLVERTEXATTRIBI4BVEXTPROC __glVertexAttribI4bvEXT;
internal static PFNGLVERTEXATTRIBI4IEXTPROC __glVertexAttribI4iEXT;
internal static PFNGLVERTEXATTRIBI4IVEXTPROC __glVertexAttribI4ivEXT;
internal static PFNGLVERTEXATTRIBI4SVEXTPROC __glVertexAttribI4svEXT;
internal static PFNGLVERTEXATTRIBI4UBVEXTPROC __glVertexAttribI4ubvEXT;
internal static PFNGLVERTEXATTRIBI4UIEXTPROC __glVertexAttribI4uiEXT;
internal static PFNGLVERTEXATTRIBI4UIVEXTPROC __glVertexAttribI4uivEXT;
internal static PFNGLVERTEXATTRIBI4USVEXTPROC __glVertexAttribI4usvEXT;
internal static PFNGLVERTEXATTRIBIPOINTEREXTPROC __glVertexAttribIPointerEXT;
internal static PFNGLGETHISTOGRAMEXTPROC __glGetHistogramEXT;
internal static PFNGLGETHISTOGRAMPARAMETERFVEXTPROC __glGetHistogramParameterfvEXT;
internal static PFNGLGETHISTOGRAMPARAMETERIVEXTPROC __glGetHistogramParameterivEXT;
internal static PFNGLGETMINMAXEXTPROC __glGetMinmaxEXT;
internal static PFNGLGETMINMAXPARAMETERFVEXTPROC __glGetMinmaxParameterfvEXT;
internal static PFNGLGETMINMAXPARAMETERIVEXTPROC __glGetMinmaxParameterivEXT;
internal static PFNGLHISTOGRAMEXTPROC __glHistogramEXT;
internal static PFNGLMINMAXEXTPROC __glMinmaxEXT;
internal static PFNGLRESETHISTOGRAMEXTPROC __glResetHistogramEXT;
internal static PFNGLRESETMINMAXEXTPROC __glResetMinmaxEXT;
internal static PFNGLINDEXFUNCEXTPROC __glIndexFuncEXT;
internal static PFNGLINDEXMATERIALEXTPROC __glIndexMaterialEXT;
internal static PFNGLAPPLYTEXTUREEXTPROC __glApplyTextureEXT;
internal static PFNGLTEXTURELIGHTEXTPROC __glTextureLightEXT;
internal static PFNGLTEXTUREMATERIALEXTPROC __glTextureMaterialEXT;
internal static PFNGLMULTIDRAWARRAYSEXTPROC __glMultiDrawArraysEXT;
internal static PFNGLMULTIDRAWELEMENTSEXTPROC __glMultiDrawElementsEXT;
internal static PFNGLSAMPLEMASKEXTPROC __glSampleMaskEXT;
internal static PFNGLSAMPLEPATTERNEXTPROC __glSamplePatternEXT;
internal static PFNGLCOLORTABLEEXTPROC __glColorTableEXT;
internal static PFNGLGETCOLORTABLEEXTPROC __glGetColorTableEXT;
internal static PFNGLGETCOLORTABLEPARAMETERFVEXTPROC __glGetColorTableParameterfvEXT;
internal static PFNGLGETCOLORTABLEPARAMETERIVEXTPROC __glGetColorTableParameterivEXT;
internal static PFNGLGETPIXELTRANSFORMPARAMETERFVEXTPROC __glGetPixelTransformParameterfvEXT;
internal static PFNGLGETPIXELTRANSFORMPARAMETERIVEXTPROC __glGetPixelTransformParameterivEXT;
internal static PFNGLPIXELTRANSFORMPARAMETERFEXTPROC __glPixelTransformParameterfEXT;
internal static PFNGLPIXELTRANSFORMPARAMETERFVEXTPROC __glPixelTransformParameterfvEXT;
internal static PFNGLPIXELTRANSFORMPARAMETERIEXTPROC __glPixelTransformParameteriEXT;
internal static PFNGLPIXELTRANSFORMPARAMETERIVEXTPROC __glPixelTransformParameterivEXT;
internal static PFNGLPOINTPARAMETERFEXTPROC __glPointParameterfEXT;
internal static PFNGLPOINTPARAMETERFVEXTPROC __glPointParameterfvEXT;
internal static PFNGLPOLYGONOFFSETEXTPROC __glPolygonOffsetEXT;
internal static PFNGLPROVOKINGVERTEXEXTPROC __glProvokingVertexEXT;
internal static PFNGLBEGINSCENEEXTPROC __glBeginSceneEXT;
internal static PFNGLENDSCENEEXTPROC __glEndSceneEXT;
internal static PFNGLSECONDARYCOLOR3BEXTPROC __glSecondaryColor3bEXT;
internal static PFNGLSECONDARYCOLOR3BVEXTPROC __glSecondaryColor3bvEXT;
internal static PFNGLSECONDARYCOLOR3DEXTPROC __glSecondaryColor3dEXT;
internal static PFNGLSECONDARYCOLOR3DVEXTPROC __glSecondaryColor3dvEXT;
internal static PFNGLSECONDARYCOLOR3FEXTPROC __glSecondaryColor3fEXT;
internal static PFNGLSECONDARYCOLOR3FVEXTPROC __glSecondaryColor3fvEXT;
internal static PFNGLSECONDARYCOLOR3IEXTPROC __glSecondaryColor3iEXT;
internal static PFNGLSECONDARYCOLOR3IVEXTPROC __glSecondaryColor3ivEXT;
internal static PFNGLSECONDARYCOLOR3SEXTPROC __glSecondaryColor3sEXT;
internal static PFNGLSECONDARYCOLOR3SVEXTPROC __glSecondaryColor3svEXT;
internal static PFNGLSECONDARYCOLOR3UBEXTPROC __glSecondaryColor3ubEXT;
internal static PFNGLSECONDARYCOLOR3UBVEXTPROC __glSecondaryColor3ubvEXT;
internal static PFNGLSECONDARYCOLOR3UIEXTPROC __glSecondaryColor3uiEXT;
internal static PFNGLSECONDARYCOLOR3UIVEXTPROC __glSecondaryColor3uivEXT;
internal static PFNGLSECONDARYCOLOR3USEXTPROC __glSecondaryColor3usEXT;
internal static PFNGLSECONDARYCOLOR3USVEXTPROC __glSecondaryColor3usvEXT;
internal static PFNGLSECONDARYCOLORPOINTEREXTPROC __glSecondaryColorPointerEXT;
internal static PFNGLACTIVEPROGRAMEXTPROC __glActiveProgramEXT;
internal static PFNGLCREATESHADERPROGRAMEXTPROC __glCreateShaderProgramEXT;
internal static PFNGLUSESHADERPROGRAMEXTPROC __glUseShaderProgramEXT;
internal static PFNGLBINDIMAGETEXTUREEXTPROC __glBindImageTextureEXT;
internal static PFNGLMEMORYBARRIEREXTPROC __glMemoryBarrierEXT;
internal static PFNGLACTIVESTENCILFACEEXTPROC __glActiveStencilFaceEXT;
internal static PFNGLTEXSUBIMAGE1DEXTPROC __glTexSubImage1DEXT;
internal static PFNGLTEXSUBIMAGE2DEXTPROC __glTexSubImage2DEXT;
internal static PFNGLTEXSUBIMAGE3DEXTPROC __glTexSubImage3DEXT;
internal static PFNGLTEXIMAGE3DEXTPROC __glTexImage3DEXT;
internal static PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC __glFramebufferTextureLayerEXT;
internal static PFNGLTEXBUFFEREXTPROC __glTexBufferEXT;
internal static PFNGLCLEARCOLORIIEXTPROC __glClearColorIiEXT;
internal static PFNGLCLEARCOLORIUIEXTPROC __glClearColorIuiEXT;
internal static PFNGLGETTEXPARAMETERIIVEXTPROC __glGetTexParameterIivEXT;
internal static PFNGLGETTEXPARAMETERIUIVEXTPROC __glGetTexParameterIuivEXT;
internal static PFNGLTEXPARAMETERIIVEXTPROC __glTexParameterIivEXT;
internal static PFNGLTEXPARAMETERIUIVEXTPROC __glTexParameterIuivEXT;
internal static PFNGLARETEXTURESRESIDENTEXTPROC __glAreTexturesResidentEXT;
internal static PFNGLBINDTEXTUREEXTPROC __glBindTextureEXT;
internal static PFNGLDELETETEXTURESEXTPROC __glDeleteTexturesEXT;
internal static PFNGLGENTEXTURESEXTPROC __glGenTexturesEXT;
internal static PFNGLISTEXTUREEXTPROC __glIsTextureEXT;
internal static PFNGLPRIORITIZETEXTURESEXTPROC __glPrioritizeTexturesEXT;
internal static PFNGLTEXTURENORMALEXTPROC __glTextureNormalEXT;
internal static PFNGLGETQUERYOBJECTI64VEXTPROC __glGetQueryObjecti64vEXT;
internal static PFNGLGETQUERYOBJECTUI64VEXTPROC __glGetQueryObjectui64vEXT;
internal static PFNGLBEGINTRANSFORMFEEDBACKEXTPROC __glBeginTransformFeedbackEXT;
internal static PFNGLBINDBUFFERBASEEXTPROC __glBindBufferBaseEXT;
internal static PFNGLBINDBUFFEROFFSETEXTPROC __glBindBufferOffsetEXT;
internal static PFNGLBINDBUFFERRANGEEXTPROC __glBindBufferRangeEXT;
internal static PFNGLENDTRANSFORMFEEDBACKEXTPROC __glEndTransformFeedbackEXT;
internal static PFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC __glGetTransformFeedbackVaryingEXT;
internal static PFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC __glTransformFeedbackVaryingsEXT;
internal static PFNGLARRAYELEMENTEXTPROC __glArrayElementEXT;
internal static PFNGLCOLORPOINTEREXTPROC __glColorPointerEXT;
internal static PFNGLDRAWARRAYSEXTPROC __glDrawArraysEXT;
internal static PFNGLEDGEFLAGPOINTEREXTPROC __glEdgeFlagPointerEXT;
internal static PFNGLINDEXPOINTEREXTPROC __glIndexPointerEXT;
internal static PFNGLNORMALPOINTEREXTPROC __glNormalPointerEXT;
internal static PFNGLTEXCOORDPOINTEREXTPROC __glTexCoordPointerEXT;
internal static PFNGLVERTEXPOINTEREXTPROC __glVertexPointerEXT;
internal static PFNGLGETVERTEXATTRIBLDVEXTPROC __glGetVertexAttribLdvEXT;
internal static PFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC __glVertexArrayVertexAttribLOffsetEXT;
internal static PFNGLVERTEXATTRIBL1DEXTPROC __glVertexAttribL1dEXT;
internal static PFNGLVERTEXATTRIBL1DVEXTPROC __glVertexAttribL1dvEXT;
internal static PFNGLVERTEXATTRIBL2DEXTPROC __glVertexAttribL2dEXT;
internal static PFNGLVERTEXATTRIBL2DVEXTPROC __glVertexAttribL2dvEXT;
internal static PFNGLVERTEXATTRIBL3DEXTPROC __glVertexAttribL3dEXT;
internal static PFNGLVERTEXATTRIBL3DVEXTPROC __glVertexAttribL3dvEXT;
internal static PFNGLVERTEXATTRIBL4DEXTPROC __glVertexAttribL4dEXT;
internal static PFNGLVERTEXATTRIBL4DVEXTPROC __glVertexAttribL4dvEXT;
internal static PFNGLVERTEXATTRIBLPOINTEREXTPROC __glVertexAttribLPointerEXT;
internal static PFNGLBEGINVERTEXSHADEREXTPROC __glBeginVertexShaderEXT;
internal static PFNGLBINDLIGHTPARAMETEREXTPROC __glBindLightParameterEXT;
internal static PFNGLBINDMATERIALPARAMETEREXTPROC __glBindMaterialParameterEXT;
internal static PFNGLBINDPARAMETEREXTPROC __glBindParameterEXT;
internal static PFNGLBINDTEXGENPARAMETEREXTPROC __glBindTexGenParameterEXT;
internal static PFNGLBINDTEXTUREUNITPARAMETEREXTPROC __glBindTextureUnitParameterEXT;
internal static PFNGLBINDVERTEXSHADEREXTPROC __glBindVertexShaderEXT;
internal static PFNGLDELETEVERTEXSHADEREXTPROC __glDeleteVertexShaderEXT;
internal static PFNGLDISABLEVARIANTCLIENTSTATEEXTPROC __glDisableVariantClientStateEXT;
internal static PFNGLENABLEVARIANTCLIENTSTATEEXTPROC __glEnableVariantClientStateEXT;
internal static PFNGLENDVERTEXSHADEREXTPROC __glEndVertexShaderEXT;
internal static PFNGLEXTRACTCOMPONENTEXTPROC __glExtractComponentEXT;
internal static PFNGLGENSYMBOLSEXTPROC __glGenSymbolsEXT;
internal static PFNGLGENVERTEXSHADERSEXTPROC __glGenVertexShadersEXT;
internal static PFNGLGETINVARIANTBOOLEANVEXTPROC __glGetInvariantBooleanvEXT;
internal static PFNGLGETINVARIANTFLOATVEXTPROC __glGetInvariantFloatvEXT;
internal static PFNGLGETINVARIANTINTEGERVEXTPROC __glGetInvariantIntegervEXT;
internal static PFNGLGETLOCALCONSTANTBOOLEANVEXTPROC __glGetLocalConstantBooleanvEXT;
internal static PFNGLGETLOCALCONSTANTFLOATVEXTPROC __glGetLocalConstantFloatvEXT;
internal static PFNGLGETLOCALCONSTANTINTEGERVEXTPROC __glGetLocalConstantIntegervEXT;
internal static PFNGLGETVARIANTBOOLEANVEXTPROC __glGetVariantBooleanvEXT;
internal static PFNGLGETVARIANTFLOATVEXTPROC __glGetVariantFloatvEXT;
internal static PFNGLGETVARIANTINTEGERVEXTPROC __glGetVariantIntegervEXT;
internal static PFNGLGETVARIANTPOINTERVEXTPROC __glGetVariantPointervEXT;
internal static PFNGLINSERTCOMPONENTEXTPROC __glInsertComponentEXT;
internal static PFNGLISVARIANTENABLEDEXTPROC __glIsVariantEnabledEXT;
internal static PFNGLSETINVARIANTEXTPROC __glSetInvariantEXT;
internal static PFNGLSETLOCALCONSTANTEXTPROC __glSetLocalConstantEXT;
internal static PFNGLSHADEROP1EXTPROC __glShaderOp1EXT;
internal static PFNGLSHADEROP2EXTPROC __glShaderOp2EXT;
internal static PFNGLSHADEROP3EXTPROC __glShaderOp3EXT;
internal static PFNGLSWIZZLEEXTPROC __glSwizzleEXT;
internal static PFNGLVARIANTPOINTEREXTPROC __glVariantPointerEXT;
internal static PFNGLVARIANTBVEXTPROC __glVariantbvEXT;
internal static PFNGLVARIANTDVEXTPROC __glVariantdvEXT;
internal static PFNGLVARIANTFVEXTPROC __glVariantfvEXT;
internal static PFNGLVARIANTIVEXTPROC __glVariantivEXT;
internal static PFNGLVARIANTSVEXTPROC __glVariantsvEXT;
internal static PFNGLVARIANTUBVEXTPROC __glVariantubvEXT;
internal static PFNGLVARIANTUIVEXTPROC __glVariantuivEXT;
internal static PFNGLVARIANTUSVEXTPROC __glVariantusvEXT;
internal static PFNGLWRITEMASKEXTPROC __glWriteMaskEXT;
internal static PFNGLVERTEXWEIGHTPOINTEREXTPROC __glVertexWeightPointerEXT;
internal static PFNGLVERTEXWEIGHTFEXTPROC __glVertexWeightfEXT;
internal static PFNGLVERTEXWEIGHTFVEXTPROC __glVertexWeightfvEXT;
internal static PFNGLIMPORTSYNCEXTPROC __glImportSyncEXT;
internal static PFNGLFRAMETERMINATORGREMEDYPROC __glFrameTerminatorGREMEDY;
internal static PFNGLSTRINGMARKERGREMEDYPROC __glStringMarkerGREMEDY;
internal static PFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC __glGetImageTransformParameterfvHP;
internal static PFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC __glGetImageTransformParameterivHP;
internal static PFNGLIMAGETRANSFORMPARAMETERFHPPROC __glImageTransformParameterfHP;
internal static PFNGLIMAGETRANSFORMPARAMETERFVHPPROC __glImageTransformParameterfvHP;
internal static PFNGLIMAGETRANSFORMPARAMETERIHPPROC __glImageTransformParameteriHP;
internal static PFNGLIMAGETRANSFORMPARAMETERIVHPPROC __glImageTransformParameterivHP;
internal static PFNGLMULTIMODEDRAWARRAYSIBMPROC __glMultiModeDrawArraysIBM;
internal static PFNGLMULTIMODEDRAWELEMENTSIBMPROC __glMultiModeDrawElementsIBM;
internal static PFNGLCOLORPOINTERLISTIBMPROC __glColorPointerListIBM;
internal static PFNGLEDGEFLAGPOINTERLISTIBMPROC __glEdgeFlagPointerListIBM;
internal static PFNGLFOGCOORDPOINTERLISTIBMPROC __glFogCoordPointerListIBM;
internal static PFNGLINDEXPOINTERLISTIBMPROC __glIndexPointerListIBM;
internal static PFNGLNORMALPOINTERLISTIBMPROC __glNormalPointerListIBM;
internal static PFNGLSECONDARYCOLORPOINTERLISTIBMPROC __glSecondaryColorPointerListIBM;
internal static PFNGLTEXCOORDPOINTERLISTIBMPROC __glTexCoordPointerListIBM;
internal static PFNGLVERTEXPOINTERLISTIBMPROC __glVertexPointerListIBM;
internal static PFNGLCOLORPOINTERVINTELPROC __glColorPointervINTEL;
internal static PFNGLNORMALPOINTERVINTELPROC __glNormalPointervINTEL;
internal static PFNGLTEXCOORDPOINTERVINTELPROC __glTexCoordPointervINTEL;
internal static PFNGLVERTEXPOINTERVINTELPROC __glVertexPointervINTEL;
internal static PFNGLTEXSCISSORFUNCINTELPROC __glTexScissorFuncINTEL;
internal static PFNGLTEXSCISSORINTELPROC __glTexScissorINTEL;
internal static PFNGLBUFFERREGIONENABLEDEXTPROC __glBufferRegionEnabledEXT;
internal static PFNGLDELETEBUFFERREGIONEXTPROC __glDeleteBufferRegionEXT;
internal static PFNGLDRAWBUFFERREGIONEXTPROC __glDrawBufferRegionEXT;
internal static PFNGLNEWBUFFERREGIONEXTPROC __glNewBufferRegionEXT;
internal static PFNGLREADBUFFERREGIONEXTPROC __glReadBufferRegionEXT;
internal static PFNGLRESIZEBUFFERSMESAPROC __glResizeBuffersMESA;
internal static PFNGLWINDOWPOS2DMESAPROC __glWindowPos2dMESA;
internal static PFNGLWINDOWPOS2DVMESAPROC __glWindowPos2dvMESA;
internal static PFNGLWINDOWPOS2FMESAPROC __glWindowPos2fMESA;
internal static PFNGLWINDOWPOS2FVMESAPROC __glWindowPos2fvMESA;
internal static PFNGLWINDOWPOS2IMESAPROC __glWindowPos2iMESA;
internal static PFNGLWINDOWPOS2IVMESAPROC __glWindowPos2ivMESA;
internal static PFNGLWINDOWPOS2SMESAPROC __glWindowPos2sMESA;
internal static PFNGLWINDOWPOS2SVMESAPROC __glWindowPos2svMESA;
internal static PFNGLWINDOWPOS3DMESAPROC __glWindowPos3dMESA;
internal static PFNGLWINDOWPOS3DVMESAPROC __glWindowPos3dvMESA;
internal static PFNGLWINDOWPOS3FMESAPROC __glWindowPos3fMESA;
internal static PFNGLWINDOWPOS3FVMESAPROC __glWindowPos3fvMESA;
internal static PFNGLWINDOWPOS3IMESAPROC __glWindowPos3iMESA;
internal static PFNGLWINDOWPOS3IVMESAPROC __glWindowPos3ivMESA;
internal static PFNGLWINDOWPOS3SMESAPROC __glWindowPos3sMESA;
internal static PFNGLWINDOWPOS3SVMESAPROC __glWindowPos3svMESA;
internal static PFNGLWINDOWPOS4DMESAPROC __glWindowPos4dMESA;
internal static PFNGLWINDOWPOS4DVMESAPROC __glWindowPos4dvMESA;
internal static PFNGLWINDOWPOS4FMESAPROC __glWindowPos4fMESA;
internal static PFNGLWINDOWPOS4FVMESAPROC __glWindowPos4fvMESA;
internal static PFNGLWINDOWPOS4IMESAPROC __glWindowPos4iMESA;
internal static PFNGLWINDOWPOS4IVMESAPROC __glWindowPos4ivMESA;
internal static PFNGLWINDOWPOS4SMESAPROC __glWindowPos4sMESA;
internal static PFNGLWINDOWPOS4SVMESAPROC __glWindowPos4svMESA;
internal static PFNGLBEGINCONDITIONALRENDERNVPROC __glBeginConditionalRenderNV;
internal static PFNGLENDCONDITIONALRENDERNVPROC __glEndConditionalRenderNV;
internal static PFNGLCOPYIMAGESUBDATANVPROC __glCopyImageSubDataNV;
internal static PFNGLCLEARDEPTHDNVPROC __glClearDepthdNV;
internal static PFNGLDEPTHBOUNDSDNVPROC __glDepthBoundsdNV;
internal static PFNGLDEPTHRANGEDNVPROC __glDepthRangedNV;
internal static PFNGLEVALMAPSNVPROC __glEvalMapsNV;
internal static PFNGLGETMAPATTRIBPARAMETERFVNVPROC __glGetMapAttribParameterfvNV;
internal static PFNGLGETMAPATTRIBPARAMETERIVNVPROC __glGetMapAttribParameterivNV;
internal static PFNGLGETMAPCONTROLPOINTSNVPROC __glGetMapControlPointsNV;
internal static PFNGLGETMAPPARAMETERFVNVPROC __glGetMapParameterfvNV;
internal static PFNGLGETMAPPARAMETERIVNVPROC __glGetMapParameterivNV;
internal static PFNGLMAPCONTROLPOINTSNVPROC __glMapControlPointsNV;
internal static PFNGLMAPPARAMETERFVNVPROC __glMapParameterfvNV;
internal static PFNGLMAPPARAMETERIVNVPROC __glMapParameterivNV;
internal static PFNGLGETMULTISAMPLEFVNVPROC __glGetMultisamplefvNV;
internal static PFNGLSAMPLEMASKINDEXEDNVPROC __glSampleMaskIndexedNV;
internal static PFNGLTEXRENDERBUFFERNVPROC __glTexRenderbufferNV;
internal static PFNGLDELETEFENCESNVPROC __glDeleteFencesNV;
internal static PFNGLFINISHFENCENVPROC __glFinishFenceNV;
internal static PFNGLGENFENCESNVPROC __glGenFencesNV;
internal static PFNGLGETFENCEIVNVPROC __glGetFenceivNV;
internal static PFNGLISFENCENVPROC __glIsFenceNV;
internal static PFNGLSETFENCENVPROC __glSetFenceNV;
internal static PFNGLTESTFENCENVPROC __glTestFenceNV;
internal static PFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC __glGetProgramNamedParameterdvNV;
internal static PFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC __glGetProgramNamedParameterfvNV;
internal static PFNGLPROGRAMNAMEDPARAMETER4DNVPROC __glProgramNamedParameter4dNV;
internal static PFNGLPROGRAMNAMEDPARAMETER4DVNVPROC __glProgramNamedParameter4dvNV;
internal static PFNGLPROGRAMNAMEDPARAMETER4FNVPROC __glProgramNamedParameter4fNV;
internal static PFNGLPROGRAMNAMEDPARAMETER4FVNVPROC __glProgramNamedParameter4fvNV;
internal static PFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC __glRenderbufferStorageMultisampleCoverageNV;
internal static PFNGLPROGRAMVERTEXLIMITNVPROC __glProgramVertexLimitNV;
internal static PFNGLPROGRAMENVPARAMETERI4INVPROC __glProgramEnvParameterI4iNV;
internal static PFNGLPROGRAMENVPARAMETERI4IVNVPROC __glProgramEnvParameterI4ivNV;
internal static PFNGLPROGRAMENVPARAMETERI4UINVPROC __glProgramEnvParameterI4uiNV;
internal static PFNGLPROGRAMENVPARAMETERI4UIVNVPROC __glProgramEnvParameterI4uivNV;
internal static PFNGLPROGRAMENVPARAMETERSI4IVNVPROC __glProgramEnvParametersI4ivNV;
internal static PFNGLPROGRAMENVPARAMETERSI4UIVNVPROC __glProgramEnvParametersI4uivNV;
internal static PFNGLPROGRAMLOCALPARAMETERI4INVPROC __glProgramLocalParameterI4iNV;
internal static PFNGLPROGRAMLOCALPARAMETERI4IVNVPROC __glProgramLocalParameterI4ivNV;
internal static PFNGLPROGRAMLOCALPARAMETERI4UINVPROC __glProgramLocalParameterI4uiNV;
internal static PFNGLPROGRAMLOCALPARAMETERI4UIVNVPROC __glProgramLocalParameterI4uivNV;
internal static PFNGLPROGRAMLOCALPARAMETERSI4IVNVPROC __glProgramLocalParametersI4ivNV;
internal static PFNGLPROGRAMLOCALPARAMETERSI4UIVNVPROC __glProgramLocalParametersI4uivNV;
internal static PFNGLGETUNIFORMI64VNVPROC __glGetUniformi64vNV;
internal static PFNGLGETUNIFORMUI64VNVPROC __glGetUniformui64vNV;
internal static PFNGLPROGRAMUNIFORM1I64NVPROC __glProgramUniform1i64NV;
internal static PFNGLPROGRAMUNIFORM1I64VNVPROC __glProgramUniform1i64vNV;
internal static PFNGLPROGRAMUNIFORM1UI64NVPROC __glProgramUniform1ui64NV;
internal static PFNGLPROGRAMUNIFORM1UI64VNVPROC __glProgramUniform1ui64vNV;
internal static PFNGLPROGRAMUNIFORM2I64NVPROC __glProgramUniform2i64NV;
internal static PFNGLPROGRAMUNIFORM2I64VNVPROC __glProgramUniform2i64vNV;
internal static PFNGLPROGRAMUNIFORM2UI64NVPROC __glProgramUniform2ui64NV;
internal static PFNGLPROGRAMUNIFORM2UI64VNVPROC __glProgramUniform2ui64vNV;
internal static PFNGLPROGRAMUNIFORM3I64NVPROC __glProgramUniform3i64NV;
internal static PFNGLPROGRAMUNIFORM3I64VNVPROC __glProgramUniform3i64vNV;
internal static PFNGLPROGRAMUNIFORM3UI64NVPROC __glProgramUniform3ui64NV;
internal static PFNGLPROGRAMUNIFORM3UI64VNVPROC __glProgramUniform3ui64vNV;
internal static PFNGLPROGRAMUNIFORM4I64NVPROC __glProgramUniform4i64NV;
internal static PFNGLPROGRAMUNIFORM4I64VNVPROC __glProgramUniform4i64vNV;
internal static PFNGLPROGRAMUNIFORM4UI64NVPROC __glProgramUniform4ui64NV;
internal static PFNGLPROGRAMUNIFORM4UI64VNVPROC __glProgramUniform4ui64vNV;
internal static PFNGLUNIFORM1I64NVPROC __glUniform1i64NV;
internal static PFNGLUNIFORM1I64VNVPROC __glUniform1i64vNV;
internal static PFNGLUNIFORM1UI64NVPROC __glUniform1ui64NV;
internal static PFNGLUNIFORM1UI64VNVPROC __glUniform1ui64vNV;
internal static PFNGLUNIFORM2I64NVPROC __glUniform2i64NV;
internal static PFNGLUNIFORM2I64VNVPROC __glUniform2i64vNV;
internal static PFNGLUNIFORM2UI64NVPROC __glUniform2ui64NV;
internal static PFNGLUNIFORM2UI64VNVPROC __glUniform2ui64vNV;
internal static PFNGLUNIFORM3I64NVPROC __glUniform3i64NV;
internal static PFNGLUNIFORM3I64VNVPROC __glUniform3i64vNV;
internal static PFNGLUNIFORM3UI64NVPROC __glUniform3ui64NV;
internal static PFNGLUNIFORM3UI64VNVPROC __glUniform3ui64vNV;
internal static PFNGLUNIFORM4I64NVPROC __glUniform4i64NV;
internal static PFNGLUNIFORM4I64VNVPROC __glUniform4i64vNV;
internal static PFNGLUNIFORM4UI64NVPROC __glUniform4ui64NV;
internal static PFNGLUNIFORM4UI64VNVPROC __glUniform4ui64vNV;
internal static PFNGLCOLOR3HNVPROC __glColor3hNV;
internal static PFNGLCOLOR3HVNVPROC __glColor3hvNV;
internal static PFNGLCOLOR4HNVPROC __glColor4hNV;
internal static PFNGLCOLOR4HVNVPROC __glColor4hvNV;
internal static PFNGLFOGCOORDHNVPROC __glFogCoordhNV;
internal static PFNGLFOGCOORDHVNVPROC __glFogCoordhvNV;
internal static PFNGLMULTITEXCOORD1HNVPROC __glMultiTexCoord1hNV;
internal static PFNGLMULTITEXCOORD1HVNVPROC __glMultiTexCoord1hvNV;
internal static PFNGLMULTITEXCOORD2HNVPROC __glMultiTexCoord2hNV;
internal static PFNGLMULTITEXCOORD2HVNVPROC __glMultiTexCoord2hvNV;
internal static PFNGLMULTITEXCOORD3HNVPROC __glMultiTexCoord3hNV;
internal static PFNGLMULTITEXCOORD3HVNVPROC __glMultiTexCoord3hvNV;
internal static PFNGLMULTITEXCOORD4HNVPROC __glMultiTexCoord4hNV;
internal static PFNGLMULTITEXCOORD4HVNVPROC __glMultiTexCoord4hvNV;
internal static PFNGLNORMAL3HNVPROC __glNormal3hNV;
internal static PFNGLNORMAL3HVNVPROC __glNormal3hvNV;
internal static PFNGLSECONDARYCOLOR3HNVPROC __glSecondaryColor3hNV;
internal static PFNGLSECONDARYCOLOR3HVNVPROC __glSecondaryColor3hvNV;
internal static PFNGLTEXCOORD1HNVPROC __glTexCoord1hNV;
internal static PFNGLTEXCOORD1HVNVPROC __glTexCoord1hvNV;
internal static PFNGLTEXCOORD2HNVPROC __glTexCoord2hNV;
internal static PFNGLTEXCOORD2HVNVPROC __glTexCoord2hvNV;
internal static PFNGLTEXCOORD3HNVPROC __glTexCoord3hNV;
internal static PFNGLTEXCOORD3HVNVPROC __glTexCoord3hvNV;
internal static PFNGLTEXCOORD4HNVPROC __glTexCoord4hNV;
internal static PFNGLTEXCOORD4HVNVPROC __glTexCoord4hvNV;
internal static PFNGLVERTEX2HNVPROC __glVertex2hNV;
internal static PFNGLVERTEX2HVNVPROC __glVertex2hvNV;
internal static PFNGLVERTEX3HNVPROC __glVertex3hNV;
internal static PFNGLVERTEX3HVNVPROC __glVertex3hvNV;
internal static PFNGLVERTEX4HNVPROC __glVertex4hNV;
internal static PFNGLVERTEX4HVNVPROC __glVertex4hvNV;
internal static PFNGLVERTEXATTRIB1HNVPROC __glVertexAttrib1hNV;
internal static PFNGLVERTEXATTRIB1HVNVPROC __glVertexAttrib1hvNV;
internal static PFNGLVERTEXATTRIB2HNVPROC __glVertexAttrib2hNV;
internal static PFNGLVERTEXATTRIB2HVNVPROC __glVertexAttrib2hvNV;
internal static PFNGLVERTEXATTRIB3HNVPROC __glVertexAttrib3hNV;
internal static PFNGLVERTEXATTRIB3HVNVPROC __glVertexAttrib3hvNV;
internal static PFNGLVERTEXATTRIB4HNVPROC __glVertexAttrib4hNV;
internal static PFNGLVERTEXATTRIB4HVNVPROC __glVertexAttrib4hvNV;
internal static PFNGLVERTEXATTRIBS1HVNVPROC __glVertexAttribs1hvNV;
internal static PFNGLVERTEXATTRIBS2HVNVPROC __glVertexAttribs2hvNV;
internal static PFNGLVERTEXATTRIBS3HVNVPROC __glVertexAttribs3hvNV;
internal static PFNGLVERTEXATTRIBS4HVNVPROC __glVertexAttribs4hvNV;
internal static PFNGLVERTEXWEIGHTHNVPROC __glVertexWeighthNV;
internal static PFNGLVERTEXWEIGHTHVNVPROC __glVertexWeighthvNV;
internal static PFNGLBEGINOCCLUSIONQUERYNVPROC __glBeginOcclusionQueryNV;
internal static PFNGLDELETEOCCLUSIONQUERIESNVPROC __glDeleteOcclusionQueriesNV;
internal static PFNGLENDOCCLUSIONQUERYNVPROC __glEndOcclusionQueryNV;
internal static PFNGLGENOCCLUSIONQUERIESNVPROC __glGenOcclusionQueriesNV;
internal static PFNGLGETOCCLUSIONQUERYIVNVPROC __glGetOcclusionQueryivNV;
internal static PFNGLGETOCCLUSIONQUERYUIVNVPROC __glGetOcclusionQueryuivNV;
internal static PFNGLISOCCLUSIONQUERYNVPROC __glIsOcclusionQueryNV;
internal static PFNGLPROGRAMBUFFERPARAMETERSIIVNVPROC __glProgramBufferParametersIivNV;
internal static PFNGLPROGRAMBUFFERPARAMETERSIUIVNVPROC __glProgramBufferParametersIuivNV;
internal static PFNGLPROGRAMBUFFERPARAMETERSFVNVPROC __glProgramBufferParametersfvNV;
internal static PFNGLFLUSHPIXELDATARANGENVPROC __glFlushPixelDataRangeNV;
internal static PFNGLPIXELDATARANGENVPROC __glPixelDataRangeNV;
internal static PFNGLPOINTPARAMETERINVPROC __glPointParameteriNV;
internal static PFNGLPOINTPARAMETERIVNVPROC __glPointParameterivNV;
internal static PFNGLGETVIDEOI64VNVPROC __glGetVideoi64vNV;
internal static PFNGLGETVIDEOIVNVPROC __glGetVideoivNV;
internal static PFNGLGETVIDEOUI64VNVPROC __glGetVideoui64vNV;
internal static PFNGLGETVIDEOUIVNVPROC __glGetVideouivNV;
internal static PFNGLPRESENTFRAMEDUALFILLNVPROC __glPresentFrameDualFillNV;
internal static PFNGLPRESENTFRAMEKEYEDNVPROC __glPresentFrameKeyedNV;
internal static PFNGLPRIMITIVERESTARTINDEXNVPROC __glPrimitiveRestartIndexNV;
internal static PFNGLPRIMITIVERESTARTNVPROC __glPrimitiveRestartNV;
internal static PFNGLCOMBINERINPUTNVPROC __glCombinerInputNV;
internal static PFNGLCOMBINEROUTPUTNVPROC __glCombinerOutputNV;
internal static PFNGLCOMBINERPARAMETERFNVPROC __glCombinerParameterfNV;
internal static PFNGLCOMBINERPARAMETERFVNVPROC __glCombinerParameterfvNV;
internal static PFNGLCOMBINERPARAMETERINVPROC __glCombinerParameteriNV;
internal static PFNGLCOMBINERPARAMETERIVNVPROC __glCombinerParameterivNV;
internal static PFNGLFINALCOMBINERINPUTNVPROC __glFinalCombinerInputNV;
internal static PFNGLGETCOMBINERINPUTPARAMETERFVNVPROC __glGetCombinerInputParameterfvNV;
internal static PFNGLGETCOMBINERINPUTPARAMETERIVNVPROC __glGetCombinerInputParameterivNV;
internal static PFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC __glGetCombinerOutputParameterfvNV;
internal static PFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC __glGetCombinerOutputParameterivNV;
internal static PFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC __glGetFinalCombinerInputParameterfvNV;
internal static PFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC __glGetFinalCombinerInputParameterivNV;
internal static PFNGLCOMBINERSTAGEPARAMETERFVNVPROC __glCombinerStageParameterfvNV;
internal static PFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC __glGetCombinerStageParameterfvNV;
internal static PFNGLGETBUFFERPARAMETERUI64VNVPROC __glGetBufferParameterui64vNV;
internal static PFNGLGETINTEGERUI64VNVPROC __glGetIntegerui64vNV;
internal static PFNGLGETNAMEDBUFFERPARAMETERUI64VNVPROC __glGetNamedBufferParameterui64vNV;
internal static PFNGLISBUFFERRESIDENTNVPROC __glIsBufferResidentNV;
internal static PFNGLISNAMEDBUFFERRESIDENTNVPROC __glIsNamedBufferResidentNV;
internal static PFNGLMAKEBUFFERNONRESIDENTNVPROC __glMakeBufferNonResidentNV;
internal static PFNGLMAKEBUFFERRESIDENTNVPROC __glMakeBufferResidentNV;
internal static PFNGLMAKENAMEDBUFFERNONRESIDENTNVPROC __glMakeNamedBufferNonResidentNV;
internal static PFNGLMAKENAMEDBUFFERRESIDENTNVPROC __glMakeNamedBufferResidentNV;
internal static PFNGLPROGRAMUNIFORMUI64NVPROC __glProgramUniformui64NV;
internal static PFNGLPROGRAMUNIFORMUI64VNVPROC __glProgramUniformui64vNV;
internal static PFNGLUNIFORMUI64NVPROC __glUniformui64NV;
internal static PFNGLUNIFORMUI64VNVPROC __glUniformui64vNV;
internal static PFNGLTEXTUREBARRIERNVPROC __glTextureBarrierNV;
internal static PFNGLTEXIMAGE2DMULTISAMPLECOVERAGENVPROC __glTexImage2DMultisampleCoverageNV;
internal static PFNGLTEXIMAGE3DMULTISAMPLECOVERAGENVPROC __glTexImage3DMultisampleCoverageNV;
internal static PFNGLTEXTUREIMAGE2DMULTISAMPLECOVERAGENVPROC __glTextureImage2DMultisampleCoverageNV;
internal static PFNGLTEXTUREIMAGE2DMULTISAMPLENVPROC __glTextureImage2DMultisampleNV;
internal static PFNGLTEXTUREIMAGE3DMULTISAMPLECOVERAGENVPROC __glTextureImage3DMultisampleCoverageNV;
internal static PFNGLTEXTUREIMAGE3DMULTISAMPLENVPROC __glTextureImage3DMultisampleNV;
internal static PFNGLACTIVEVARYINGNVPROC __glActiveVaryingNV;
internal static PFNGLBEGINTRANSFORMFEEDBACKNVPROC __glBeginTransformFeedbackNV;
internal static PFNGLBINDBUFFERBASENVPROC __glBindBufferBaseNV;
internal static PFNGLBINDBUFFEROFFSETNVPROC __glBindBufferOffsetNV;
internal static PFNGLBINDBUFFERRANGENVPROC __glBindBufferRangeNV;
internal static PFNGLENDTRANSFORMFEEDBACKNVPROC __glEndTransformFeedbackNV;
internal static PFNGLGETACTIVEVARYINGNVPROC __glGetActiveVaryingNV;
internal static PFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC __glGetTransformFeedbackVaryingNV;
internal static PFNGLGETVARYINGLOCATIONNVPROC __glGetVaryingLocationNV;
internal static PFNGLTRANSFORMFEEDBACKATTRIBSNVPROC __glTransformFeedbackAttribsNV;
internal static PFNGLTRANSFORMFEEDBACKVARYINGSNVPROC __glTransformFeedbackVaryingsNV;
internal static PFNGLBINDTRANSFORMFEEDBACKNVPROC __glBindTransformFeedbackNV;
internal static PFNGLDELETETRANSFORMFEEDBACKSNVPROC __glDeleteTransformFeedbacksNV;
internal static PFNGLDRAWTRANSFORMFEEDBACKNVPROC __glDrawTransformFeedbackNV;
internal static PFNGLGENTRANSFORMFEEDBACKSNVPROC __glGenTransformFeedbacksNV;
internal static PFNGLISTRANSFORMFEEDBACKNVPROC __glIsTransformFeedbackNV;
internal static PFNGLPAUSETRANSFORMFEEDBACKNVPROC __glPauseTransformFeedbackNV;
internal static PFNGLRESUMETRANSFORMFEEDBACKNVPROC __glResumeTransformFeedbackNV;
internal static PFNGLVDPAUFININVPROC __glVDPAUFiniNV;
internal static PFNGLVDPAUGETSURFACEIVNVPROC __glVDPAUGetSurfaceivNV;
internal static PFNGLVDPAUINITNVPROC __glVDPAUInitNV;
internal static PFNGLVDPAUISSURFACENVPROC __glVDPAUIsSurfaceNV;
internal static PFNGLVDPAUMAPSURFACESNVPROC __glVDPAUMapSurfacesNV;
internal static PFNGLVDPAUREGISTEROUTPUTSURFACENVPROC __glVDPAURegisterOutputSurfaceNV;
internal static PFNGLVDPAUREGISTERVIDEOSURFACENVPROC __glVDPAURegisterVideoSurfaceNV;
internal static PFNGLVDPAUSURFACEACCESSNVPROC __glVDPAUSurfaceAccessNV;
internal static PFNGLVDPAUUNMAPSURFACESNVPROC __glVDPAUUnmapSurfacesNV;
internal static PFNGLVDPAUUNREGISTERSURFACENVPROC __glVDPAUUnregisterSurfaceNV;
internal static PFNGLFLUSHVERTEXARRAYRANGENVPROC __glFlushVertexArrayRangeNV;
internal static PFNGLVERTEXARRAYRANGENVPROC __glVertexArrayRangeNV;
internal static PFNGLGETVERTEXATTRIBLI64VNVPROC __glGetVertexAttribLi64vNV;
internal static PFNGLGETVERTEXATTRIBLUI64VNVPROC __glGetVertexAttribLui64vNV;
internal static PFNGLVERTEXATTRIBL1I64NVPROC __glVertexAttribL1i64NV;
internal static PFNGLVERTEXATTRIBL1I64VNVPROC __glVertexAttribL1i64vNV;
internal static PFNGLVERTEXATTRIBL1UI64NVPROC __glVertexAttribL1ui64NV;
internal static PFNGLVERTEXATTRIBL1UI64VNVPROC __glVertexAttribL1ui64vNV;
internal static PFNGLVERTEXATTRIBL2I64NVPROC __glVertexAttribL2i64NV;
internal static PFNGLVERTEXATTRIBL2I64VNVPROC __glVertexAttribL2i64vNV;
internal static PFNGLVERTEXATTRIBL2UI64NVPROC __glVertexAttribL2ui64NV;
internal static PFNGLVERTEXATTRIBL2UI64VNVPROC __glVertexAttribL2ui64vNV;
internal static PFNGLVERTEXATTRIBL3I64NVPROC __glVertexAttribL3i64NV;
internal static PFNGLVERTEXATTRIBL3I64VNVPROC __glVertexAttribL3i64vNV;
internal static PFNGLVERTEXATTRIBL3UI64NVPROC __glVertexAttribL3ui64NV;
internal static PFNGLVERTEXATTRIBL3UI64VNVPROC __glVertexAttribL3ui64vNV;
internal static PFNGLVERTEXATTRIBL4I64NVPROC __glVertexAttribL4i64NV;
internal static PFNGLVERTEXATTRIBL4I64VNVPROC __glVertexAttribL4i64vNV;
internal static PFNGLVERTEXATTRIBL4UI64NVPROC __glVertexAttribL4ui64NV;
internal static PFNGLVERTEXATTRIBL4UI64VNVPROC __glVertexAttribL4ui64vNV;
internal static PFNGLVERTEXATTRIBLFORMATNVPROC __glVertexAttribLFormatNV;
internal static PFNGLBUFFERADDRESSRANGENVPROC __glBufferAddressRangeNV;
internal static PFNGLCOLORFORMATNVPROC __glColorFormatNV;
internal static PFNGLEDGEFLAGFORMATNVPROC __glEdgeFlagFormatNV;
internal static PFNGLFOGCOORDFORMATNVPROC __glFogCoordFormatNV;
internal static PFNGLGETINTEGERUI64I_VNVPROC __glGetIntegerui64i_vNV;
internal static PFNGLINDEXFORMATNVPROC __glIndexFormatNV;
internal static PFNGLNORMALFORMATNVPROC __glNormalFormatNV;
internal static PFNGLSECONDARYCOLORFORMATNVPROC __glSecondaryColorFormatNV;
internal static PFNGLTEXCOORDFORMATNVPROC __glTexCoordFormatNV;
internal static PFNGLVERTEXATTRIBFORMATNVPROC __glVertexAttribFormatNV;
internal static PFNGLVERTEXATTRIBIFORMATNVPROC __glVertexAttribIFormatNV;
internal static PFNGLVERTEXFORMATNVPROC __glVertexFormatNV;
internal static PFNGLAREPROGRAMSRESIDENTNVPROC __glAreProgramsResidentNV;
internal static PFNGLBINDPROGRAMNVPROC __glBindProgramNV;
internal static PFNGLDELETEPROGRAMSNVPROC __glDeleteProgramsNV;
internal static PFNGLEXECUTEPROGRAMNVPROC __glExecuteProgramNV;
internal static PFNGLGENPROGRAMSNVPROC __glGenProgramsNV;
internal static PFNGLGETPROGRAMPARAMETERDVNVPROC __glGetProgramParameterdvNV;
internal static PFNGLGETPROGRAMPARAMETERFVNVPROC __glGetProgramParameterfvNV;
internal static PFNGLGETPROGRAMSTRINGNVPROC __glGetProgramStringNV;
internal static PFNGLGETPROGRAMIVNVPROC __glGetProgramivNV;
internal static PFNGLGETTRACKMATRIXIVNVPROC __glGetTrackMatrixivNV;
internal static PFNGLGETVERTEXATTRIBPOINTERVNVPROC __glGetVertexAttribPointervNV;
internal static PFNGLGETVERTEXATTRIBDVNVPROC __glGetVertexAttribdvNV;
internal static PFNGLGETVERTEXATTRIBFVNVPROC __glGetVertexAttribfvNV;
internal static PFNGLGETVERTEXATTRIBIVNVPROC __glGetVertexAttribivNV;
internal static PFNGLISPROGRAMNVPROC __glIsProgramNV;
internal static PFNGLLOADPROGRAMNVPROC __glLoadProgramNV;
internal static PFNGLPROGRAMPARAMETER4DNVPROC __glProgramParameter4dNV;
internal static PFNGLPROGRAMPARAMETER4DVNVPROC __glProgramParameter4dvNV;
internal static PFNGLPROGRAMPARAMETER4FNVPROC __glProgramParameter4fNV;
internal static PFNGLPROGRAMPARAMETER4FVNVPROC __glProgramParameter4fvNV;
internal static PFNGLPROGRAMPARAMETERS4DVNVPROC __glProgramParameters4dvNV;
internal static PFNGLPROGRAMPARAMETERS4FVNVPROC __glProgramParameters4fvNV;
internal static PFNGLREQUESTRESIDENTPROGRAMSNVPROC __glRequestResidentProgramsNV;
internal static PFNGLTRACKMATRIXNVPROC __glTrackMatrixNV;
internal static PFNGLVERTEXATTRIB1DNVPROC __glVertexAttrib1dNV;
internal static PFNGLVERTEXATTRIB1DVNVPROC __glVertexAttrib1dvNV;
internal static PFNGLVERTEXATTRIB1FNVPROC __glVertexAttrib1fNV;
internal static PFNGLVERTEXATTRIB1FVNVPROC __glVertexAttrib1fvNV;
internal static PFNGLVERTEXATTRIB1SNVPROC __glVertexAttrib1sNV;
internal static PFNGLVERTEXATTRIB1SVNVPROC __glVertexAttrib1svNV;
internal static PFNGLVERTEXATTRIB2DNVPROC __glVertexAttrib2dNV;
internal static PFNGLVERTEXATTRIB2DVNVPROC __glVertexAttrib2dvNV;
internal static PFNGLVERTEXATTRIB2FNVPROC __glVertexAttrib2fNV;
internal static PFNGLVERTEXATTRIB2FVNVPROC __glVertexAttrib2fvNV;
internal static PFNGLVERTEXATTRIB2SNVPROC __glVertexAttrib2sNV;
internal static PFNGLVERTEXATTRIB2SVNVPROC __glVertexAttrib2svNV;
internal static PFNGLVERTEXATTRIB3DNVPROC __glVertexAttrib3dNV;
internal static PFNGLVERTEXATTRIB3DVNVPROC __glVertexAttrib3dvNV;
internal static PFNGLVERTEXATTRIB3FNVPROC __glVertexAttrib3fNV;
internal static PFNGLVERTEXATTRIB3FVNVPROC __glVertexAttrib3fvNV;
internal static PFNGLVERTEXATTRIB3SNVPROC __glVertexAttrib3sNV;
internal static PFNGLVERTEXATTRIB3SVNVPROC __glVertexAttrib3svNV;
internal static PFNGLVERTEXATTRIB4DNVPROC __glVertexAttrib4dNV;
internal static PFNGLVERTEXATTRIB4DVNVPROC __glVertexAttrib4dvNV;
internal static PFNGLVERTEXATTRIB4FNVPROC __glVertexAttrib4fNV;
internal static PFNGLVERTEXATTRIB4FVNVPROC __glVertexAttrib4fvNV;
internal static PFNGLVERTEXATTRIB4SNVPROC __glVertexAttrib4sNV;
internal static PFNGLVERTEXATTRIB4SVNVPROC __glVertexAttrib4svNV;
internal static PFNGLVERTEXATTRIB4UBNVPROC __glVertexAttrib4ubNV;
internal static PFNGLVERTEXATTRIB4UBVNVPROC __glVertexAttrib4ubvNV;
internal static PFNGLVERTEXATTRIBPOINTERNVPROC __glVertexAttribPointerNV;
internal static PFNGLVERTEXATTRIBS1DVNVPROC __glVertexAttribs1dvNV;
internal static PFNGLVERTEXATTRIBS1FVNVPROC __glVertexAttribs1fvNV;
internal static PFNGLVERTEXATTRIBS1SVNVPROC __glVertexAttribs1svNV;
internal static PFNGLVERTEXATTRIBS2DVNVPROC __glVertexAttribs2dvNV;
internal static PFNGLVERTEXATTRIBS2FVNVPROC __glVertexAttribs2fvNV;
internal static PFNGLVERTEXATTRIBS2SVNVPROC __glVertexAttribs2svNV;
internal static PFNGLVERTEXATTRIBS3DVNVPROC __glVertexAttribs3dvNV;
internal static PFNGLVERTEXATTRIBS3FVNVPROC __glVertexAttribs3fvNV;
internal static PFNGLVERTEXATTRIBS3SVNVPROC __glVertexAttribs3svNV;
internal static PFNGLVERTEXATTRIBS4DVNVPROC __glVertexAttribs4dvNV;
internal static PFNGLVERTEXATTRIBS4FVNVPROC __glVertexAttribs4fvNV;
internal static PFNGLVERTEXATTRIBS4SVNVPROC __glVertexAttribs4svNV;
internal static PFNGLVERTEXATTRIBS4UBVNVPROC __glVertexAttribs4ubvNV;
internal static PFNGLBEGINVIDEOCAPTURENVPROC __glBeginVideoCaptureNV;
internal static PFNGLBINDVIDEOCAPTURESTREAMBUFFERNVPROC __glBindVideoCaptureStreamBufferNV;
internal static PFNGLBINDVIDEOCAPTURESTREAMTEXTURENVPROC __glBindVideoCaptureStreamTextureNV;
internal static PFNGLENDVIDEOCAPTURENVPROC __glEndVideoCaptureNV;
internal static PFNGLGETVIDEOCAPTURESTREAMDVNVPROC __glGetVideoCaptureStreamdvNV;
internal static PFNGLGETVIDEOCAPTURESTREAMFVNVPROC __glGetVideoCaptureStreamfvNV;
internal static PFNGLGETVIDEOCAPTURESTREAMIVNVPROC __glGetVideoCaptureStreamivNV;
internal static PFNGLGETVIDEOCAPTUREIVNVPROC __glGetVideoCaptureivNV;
internal static PFNGLVIDEOCAPTURENVPROC __glVideoCaptureNV;
internal static PFNGLVIDEOCAPTURESTREAMPARAMETERDVNVPROC __glVideoCaptureStreamParameterdvNV;
internal static PFNGLVIDEOCAPTURESTREAMPARAMETERFVNVPROC __glVideoCaptureStreamParameterfvNV;
internal static PFNGLVIDEOCAPTURESTREAMPARAMETERIVNVPROC __glVideoCaptureStreamParameterivNV;
internal static PFNGLCLEARDEPTHFOESPROC __glClearDepthfOES;
internal static PFNGLCLIPPLANEFOESPROC __glClipPlanefOES;
internal static PFNGLDEPTHRANGEFOESPROC __glDepthRangefOES;
internal static PFNGLFRUSTUMFOESPROC __glFrustumfOES;
internal static PFNGLGETCLIPPLANEFOESPROC __glGetClipPlanefOES;
internal static PFNGLORTHOFOESPROC __glOrthofOES;
internal static PFNGLDETAILTEXFUNCSGISPROC __glDetailTexFuncSGIS;
internal static PFNGLGETDETAILTEXFUNCSGISPROC __glGetDetailTexFuncSGIS;
internal static PFNGLFOGFUNCSGISPROC __glFogFuncSGIS;
internal static PFNGLGETFOGFUNCSGISPROC __glGetFogFuncSGIS;
internal static PFNGLSAMPLEMASKSGISPROC __glSampleMaskSGIS;
internal static PFNGLSAMPLEPATTERNSGISPROC __glSamplePatternSGIS;
internal static PFNGLGETSHARPENTEXFUNCSGISPROC __glGetSharpenTexFuncSGIS;
internal static PFNGLSHARPENTEXFUNCSGISPROC __glSharpenTexFuncSGIS;
internal static PFNGLTEXIMAGE4DSGISPROC __glTexImage4DSGIS;
internal static PFNGLTEXSUBIMAGE4DSGISPROC __glTexSubImage4DSGIS;
internal static PFNGLGETTEXFILTERFUNCSGISPROC __glGetTexFilterFuncSGIS;
internal static PFNGLTEXFILTERFUNCSGISPROC __glTexFilterFuncSGIS;
internal static PFNGLASYNCMARKERSGIXPROC __glAsyncMarkerSGIX;
internal static PFNGLDELETEASYNCMARKERSSGIXPROC __glDeleteAsyncMarkersSGIX;
internal static PFNGLFINISHASYNCSGIXPROC __glFinishAsyncSGIX;
internal static PFNGLGENASYNCMARKERSSGIXPROC __glGenAsyncMarkersSGIX;
internal static PFNGLISASYNCMARKERSGIXPROC __glIsAsyncMarkerSGIX;
internal static PFNGLPOLLASYNCSGIXPROC __glPollAsyncSGIX;
internal static PFNGLFLUSHRASTERSGIXPROC __glFlushRasterSGIX;
internal static PFNGLTEXTUREFOGSGIXPROC __glTextureFogSGIX;
internal static PFNGLFRAGMENTCOLORMATERIALSGIXPROC __glFragmentColorMaterialSGIX;
internal static PFNGLFRAGMENTLIGHTMODELFSGIXPROC __glFragmentLightModelfSGIX;
internal static PFNGLFRAGMENTLIGHTMODELFVSGIXPROC __glFragmentLightModelfvSGIX;
internal static PFNGLFRAGMENTLIGHTMODELISGIXPROC __glFragmentLightModeliSGIX;
internal static PFNGLFRAGMENTLIGHTMODELIVSGIXPROC __glFragmentLightModelivSGIX;
internal static PFNGLFRAGMENTLIGHTFSGIXPROC __glFragmentLightfSGIX;
internal static PFNGLFRAGMENTLIGHTFVSGIXPROC __glFragmentLightfvSGIX;
internal static PFNGLFRAGMENTLIGHTISGIXPROC __glFragmentLightiSGIX;
internal static PFNGLFRAGMENTLIGHTIVSGIXPROC __glFragmentLightivSGIX;
internal static PFNGLFRAGMENTMATERIALFSGIXPROC __glFragmentMaterialfSGIX;
internal static PFNGLFRAGMENTMATERIALFVSGIXPROC __glFragmentMaterialfvSGIX;
internal static PFNGLFRAGMENTMATERIALISGIXPROC __glFragmentMaterialiSGIX;
internal static PFNGLFRAGMENTMATERIALIVSGIXPROC __glFragmentMaterialivSGIX;
internal static PFNGLGETFRAGMENTLIGHTFVSGIXPROC __glGetFragmentLightfvSGIX;
internal static PFNGLGETFRAGMENTLIGHTIVSGIXPROC __glGetFragmentLightivSGIX;
internal static PFNGLGETFRAGMENTMATERIALFVSGIXPROC __glGetFragmentMaterialfvSGIX;
internal static PFNGLGETFRAGMENTMATERIALIVSGIXPROC __glGetFragmentMaterialivSGIX;
internal static PFNGLFRAMEZOOMSGIXPROC __glFrameZoomSGIX;
internal static PFNGLPIXELTEXGENSGIXPROC __glPixelTexGenSGIX;
internal static PFNGLREFERENCEPLANESGIXPROC __glReferencePlaneSGIX;
internal static PFNGLSPRITEPARAMETERFSGIXPROC __glSpriteParameterfSGIX;
internal static PFNGLSPRITEPARAMETERFVSGIXPROC __glSpriteParameterfvSGIX;
internal static PFNGLSPRITEPARAMETERISGIXPROC __glSpriteParameteriSGIX;
internal static PFNGLSPRITEPARAMETERIVSGIXPROC __glSpriteParameterivSGIX;
internal static PFNGLTAGSAMPLEBUFFERSGIXPROC __glTagSampleBufferSGIX;
internal static PFNGLCOLORTABLEPARAMETERFVSGIPROC __glColorTableParameterfvSGI;
internal static PFNGLCOLORTABLEPARAMETERIVSGIPROC __glColorTableParameterivSGI;
internal static PFNGLCOLORTABLESGIPROC __glColorTableSGI;
internal static PFNGLCOPYCOLORTABLESGIPROC __glCopyColorTableSGI;
internal static PFNGLGETCOLORTABLEPARAMETERFVSGIPROC __glGetColorTableParameterfvSGI;
internal static PFNGLGETCOLORTABLEPARAMETERIVSGIPROC __glGetColorTableParameterivSGI;
internal static PFNGLGETCOLORTABLESGIPROC __glGetColorTableSGI;
internal static PFNGLFINISHTEXTURESUNXPROC __glFinishTextureSUNX;
internal static PFNGLGLOBALALPHAFACTORBSUNPROC __glGlobalAlphaFactorbSUN;
internal static PFNGLGLOBALALPHAFACTORDSUNPROC __glGlobalAlphaFactordSUN;
internal static PFNGLGLOBALALPHAFACTORFSUNPROC __glGlobalAlphaFactorfSUN;
internal static PFNGLGLOBALALPHAFACTORISUNPROC __glGlobalAlphaFactoriSUN;
internal static PFNGLGLOBALALPHAFACTORSSUNPROC __glGlobalAlphaFactorsSUN;
internal static PFNGLGLOBALALPHAFACTORUBSUNPROC __glGlobalAlphaFactorubSUN;
internal static PFNGLGLOBALALPHAFACTORUISUNPROC __glGlobalAlphaFactoruiSUN;
internal static PFNGLGLOBALALPHAFACTORUSSUNPROC __glGlobalAlphaFactorusSUN;
internal static PFNGLREADVIDEOPIXELSSUNPROC __glReadVideoPixelsSUN;
internal static PFNGLREPLACEMENTCODEPOINTERSUNPROC __glReplacementCodePointerSUN;
internal static PFNGLREPLACEMENTCODEUBSUNPROC __glReplacementCodeubSUN;
internal static PFNGLREPLACEMENTCODEUBVSUNPROC __glReplacementCodeubvSUN;
internal static PFNGLREPLACEMENTCODEUISUNPROC __glReplacementCodeuiSUN;
internal static PFNGLREPLACEMENTCODEUIVSUNPROC __glReplacementCodeuivSUN;
internal static PFNGLREPLACEMENTCODEUSSUNPROC __glReplacementCodeusSUN;
internal static PFNGLREPLACEMENTCODEUSVSUNPROC __glReplacementCodeusvSUN;
internal static PFNGLCOLOR3FVERTEX3FSUNPROC __glColor3fVertex3fSUN;
internal static PFNGLCOLOR3FVERTEX3FVSUNPROC __glColor3fVertex3fvSUN;
internal static PFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC __glColor4fNormal3fVertex3fSUN;
internal static PFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC __glColor4fNormal3fVertex3fvSUN;
internal static PFNGLCOLOR4UBVERTEX2FSUNPROC __glColor4ubVertex2fSUN;
internal static PFNGLCOLOR4UBVERTEX2FVSUNPROC __glColor4ubVertex2fvSUN;
internal static PFNGLCOLOR4UBVERTEX3FSUNPROC __glColor4ubVertex3fSUN;
internal static PFNGLCOLOR4UBVERTEX3FVSUNPROC __glColor4ubVertex3fvSUN;
internal static PFNGLNORMAL3FVERTEX3FSUNPROC __glNormal3fVertex3fSUN;
internal static PFNGLNORMAL3FVERTEX3FVSUNPROC __glNormal3fVertex3fvSUN;
internal static PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC __glReplacementCodeuiColor3fVertex3fSUN;
internal static PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC __glReplacementCodeuiColor3fVertex3fvSUN;
internal static PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC __glReplacementCodeuiColor4fNormal3fVertex3fSUN;
internal static PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC __glReplacementCodeuiColor4fNormal3fVertex3fvSUN;
internal static PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC __glReplacementCodeuiColor4ubVertex3fSUN;
internal static PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC __glReplacementCodeuiColor4ubVertex3fvSUN;
internal static PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC __glReplacementCodeuiNormal3fVertex3fSUN;
internal static PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC __glReplacementCodeuiNormal3fVertex3fvSUN;
internal static PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC __glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN;
internal static PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC __glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN;
internal static PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC __glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN;
internal static PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC __glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN;
internal static PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC __glReplacementCodeuiTexCoord2fVertex3fSUN;
internal static PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC __glReplacementCodeuiTexCoord2fVertex3fvSUN;
internal static PFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC __glReplacementCodeuiVertex3fSUN;
internal static PFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC __glReplacementCodeuiVertex3fvSUN;
internal static PFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC __glTexCoord2fColor3fVertex3fSUN;
internal static PFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC __glTexCoord2fColor3fVertex3fvSUN;
internal static PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC __glTexCoord2fColor4fNormal3fVertex3fSUN;
internal static PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC __glTexCoord2fColor4fNormal3fVertex3fvSUN;
internal static PFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC __glTexCoord2fColor4ubVertex3fSUN;
internal static PFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC __glTexCoord2fColor4ubVertex3fvSUN;
internal static PFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC __glTexCoord2fNormal3fVertex3fSUN;
internal static PFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC __glTexCoord2fNormal3fVertex3fvSUN;
internal static PFNGLTEXCOORD2FVERTEX3FSUNPROC __glTexCoord2fVertex3fSUN;
internal static PFNGLTEXCOORD2FVERTEX3FVSUNPROC __glTexCoord2fVertex3fvSUN;
internal static PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC __glTexCoord4fColor4fNormal3fVertex4fSUN;
internal static PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC __glTexCoord4fColor4fNormal3fVertex4fvSUN;
internal static PFNGLTEXCOORD4FVERTEX4FSUNPROC __glTexCoord4fVertex4fSUN;
internal static PFNGLTEXCOORD4FVERTEX4FVSUNPROC __glTexCoord4fVertex4fvSUN;
internal static PFNGLADDSWAPHINTRECTWINPROC __glAddSwapHintRectWIN;


}
}

